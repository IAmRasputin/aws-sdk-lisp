;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/medialive/api
  (:use)
  (:nicknames #:aws/medialive)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/medialive/api)
(common-lisp:progn
 (common-lisp:defclass medialive-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "medialive"))
 (common-lisp:export 'medialive-request))
(common-lisp:progn
 (common-lisp:define-condition medialive-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'medialive-error))
(common-lisp:defvar *error-map*
  '(("BadGatewayException" . bad-gateway-exception)
    ("BadRequestException" . bad-request-exception)
    ("ConflictException" . conflict-exception)
    ("ForbiddenException" . forbidden-exception)
    ("GatewayTimeoutException" . gateway-timeout-exception)
    ("InternalServerErrorException" . internal-server-error-exception)
    ("NotFoundException" . not-found-exception)
    ("TooManyRequestsException" . too-many-requests-exception)
    ("UnprocessableEntityException" . unprocessable-entity-exception)))
(common-lisp:deftype aac-coding-mode () 'common-lisp:string)
(common-lisp:deftype aac-input-type () 'common-lisp:string)
(common-lisp:deftype aac-profile () 'common-lisp:string)
(common-lisp:deftype aac-rate-control-mode () 'common-lisp:string)
(common-lisp:deftype aac-raw-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (aac-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-aac-settings-"))
   (bitrate common-lisp:nil :type (common-lisp:or |__double| common-lisp:null))
   (coding-mode common-lisp:nil :type
    (common-lisp:or aac-coding-mode common-lisp:null))
   (input-type common-lisp:nil :type
    (common-lisp:or aac-input-type common-lisp:null))
   (profile common-lisp:nil :type
    (common-lisp:or aac-profile common-lisp:null))
   (rate-control-mode common-lisp:nil :type
    (common-lisp:or aac-rate-control-mode common-lisp:null))
   (raw-format common-lisp:nil :type
    (common-lisp:or aac-raw-format common-lisp:null))
   (sample-rate common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null))
   (spec common-lisp:nil :type (common-lisp:or aac-spec common-lisp:null))
   (vbr-quality common-lisp:nil :type
    (common-lisp:or aac-vbr-quality common-lisp:null)))
 (common-lisp:export (common-lisp:list 'aac-settings 'make-aac-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aac-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aac-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coding-mode))
      (common-lisp:list
       (common-lisp:cons "CodingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-type))
      (common-lisp:list
       (common-lisp:cons "InputType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile))
      (common-lisp:list
       (common-lisp:cons "Profile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-control-mode))
      (common-lisp:list
       (common-lisp:cons "RateControlMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-format))
      (common-lisp:list
       (common-lisp:cons "RawFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-rate))
      (common-lisp:list
       (common-lisp:cons "SampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spec))
      (common-lisp:list
       (common-lisp:cons "Spec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vbr-quality))
      (common-lisp:list
       (common-lisp:cons "VbrQuality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aac-settings))
   common-lisp:nil))
(common-lisp:deftype aac-spec () 'common-lisp:string)
(common-lisp:deftype aac-vbr-quality () 'common-lisp:string)
(common-lisp:deftype ac3bitstream-mode () 'common-lisp:string)
(common-lisp:deftype ac3coding-mode () 'common-lisp:string)
(common-lisp:deftype ac3drc-profile () 'common-lisp:string)
(common-lisp:deftype ac3lfe-filter () 'common-lisp:string)
(common-lisp:deftype ac3metadata-control () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ac3settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-ac3settings-"))
   (bitrate common-lisp:nil :type (common-lisp:or |__double| common-lisp:null))
   (bitstream-mode common-lisp:nil :type
    (common-lisp:or ac3bitstream-mode common-lisp:null))
   (coding-mode common-lisp:nil :type
    (common-lisp:or ac3coding-mode common-lisp:null))
   (dialnorm common-lisp:nil :type
    (common-lisp:or |__integerMin1Max31| common-lisp:null))
   (drc-profile common-lisp:nil :type
    (common-lisp:or ac3drc-profile common-lisp:null))
   (lfe-filter common-lisp:nil :type
    (common-lisp:or ac3lfe-filter common-lisp:null))
   (metadata-control common-lisp:nil :type
    (common-lisp:or ac3metadata-control common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ac3settings 'make-ac3settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ac3settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ac3settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitstream-mode))
      (common-lisp:list
       (common-lisp:cons "BitstreamMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coding-mode))
      (common-lisp:list
       (common-lisp:cons "CodingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialnorm))
      (common-lisp:list
       (common-lisp:cons "Dialnorm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drc-profile))
      (common-lisp:list
       (common-lisp:cons "DrcProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lfe-filter))
      (common-lisp:list
       (common-lisp:cons "LfeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-control))
      (common-lisp:list
       (common-lisp:cons "MetadataControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ac3settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (accept-input-device-transfer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-accept-input-device-transfer-request-"))
   (input-device-id (common-lisp:error ":input-device-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'accept-input-device-transfer-request
                    'make-accept-input-device-transfer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-input-device-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-input-device-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-input-device-transfer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (accept-input-device-transfer-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-accept-input-device-transfer-response-")))
 (common-lisp:export
  (common-lisp:list 'accept-input-device-transfer-response
                    'make-accept-input-device-transfer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          accept-input-device-transfer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          accept-input-device-transfer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          accept-input-device-transfer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (access-denied (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-denied-"))
   (message common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'access-denied 'make-access-denied))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-denied))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-denied))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-denied))
   common-lisp:nil))
(common-lisp:deftype accessibility-type () 'common-lisp:string)
(common-lisp:deftype afd-signaling () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ancillary-source-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-ancillary-source-settings-"))
   (source-ancillary-channel-number common-lisp:nil :type
    (common-lisp:or |__integerMin1Max4| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ancillary-source-settings
                    'make-ancillary-source-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ancillary-source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ancillary-source-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-ancillary-channel-number))
      (common-lisp:list
       (common-lisp:cons "SourceAncillaryChannelNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ancillary-source-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (archive-cdn-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-archive-cdn-settings-"))
   (archive-s3settings common-lisp:nil :type
    (common-lisp:or archive-s3settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'archive-cdn-settings 'make-archive-cdn-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input archive-cdn-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input archive-cdn-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'archive-s3settings))
      (common-lisp:list
       (common-lisp:cons "ArchiveS3Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input archive-cdn-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (archive-container-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-archive-container-settings-"))
   (m2ts-settings common-lisp:nil :type
    (common-lisp:or m2ts-settings common-lisp:null))
   (raw-settings common-lisp:nil :type
    (common-lisp:or raw-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'archive-container-settings
                    'make-archive-container-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          archive-container-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          archive-container-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'm2ts-settings))
      (common-lisp:list
       (common-lisp:cons "M2tsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'raw-settings))
      (common-lisp:list
       (common-lisp:cons "RawSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          archive-container-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (archive-group-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-archive-group-settings-"))
   (archive-cdn-settings common-lisp:nil :type
    (common-lisp:or archive-cdn-settings common-lisp:null))
   (destination (common-lisp:error ":destination is required") :type
    (common-lisp:or output-location-ref common-lisp:null))
   (rollover-interval common-lisp:nil :type
    (common-lisp:or |__integerMin1| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'archive-group-settings 'make-archive-group-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          archive-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          archive-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'archive-cdn-settings))
      (common-lisp:list
       (common-lisp:cons "ArchiveCdnSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rollover-interval))
      (common-lisp:list
       (common-lisp:cons "RolloverInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          archive-group-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (archive-output-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-archive-output-settings-"))
   (container-settings (common-lisp:error ":container-settings is required")
    :type (common-lisp:or archive-container-settings common-lisp:null))
   (extension common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (name-modifier common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'archive-output-settings 'make-archive-output-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          archive-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          archive-output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-settings))
      (common-lisp:list
       (common-lisp:cons "ContainerSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'extension))
      (common-lisp:list
       (common-lisp:cons "Extension"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-modifier))
      (common-lisp:list
       (common-lisp:cons "NameModifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          archive-output-settings))
   common-lisp:nil))
(common-lisp:deftype archive-s3log-uploads () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (archive-s3settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-archive-s3settings-"))
   (canned-acl common-lisp:nil :type
    (common-lisp:or s3canned-acl common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'archive-s3settings 'make-archive-s3settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input archive-s3settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input archive-s3settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canned-acl))
      (common-lisp:list
       (common-lisp:cons "CannedAcl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input archive-s3settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (arib-destination-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-arib-destination-settings-")))
 (common-lisp:export
  (common-lisp:list 'arib-destination-settings
                    'make-arib-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          arib-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          arib-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          arib-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (arib-source-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-arib-source-settings-")))
 (common-lisp:export
  (common-lisp:list 'arib-source-settings 'make-arib-source-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input arib-source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input arib-source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input arib-source-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (audio-channel-mapping (:copier common-lisp:nil)
      (:conc-name "struct-shape-audio-channel-mapping-"))
   (input-channel-levels
    (common-lisp:error ":input-channel-levels is required") :type
    (common-lisp:or |__listOfInputChannelLevel| common-lisp:null))
   (output-channel (common-lisp:error ":output-channel is required") :type
    (common-lisp:or |__integerMin0Max7| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'audio-channel-mapping 'make-audio-channel-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-channel-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-channel-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-channel-levels))
      (common-lisp:list
       (common-lisp:cons "InputChannelLevels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-channel))
      (common-lisp:list
       (common-lisp:cons "OutputChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-channel-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (audio-codec-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-audio-codec-settings-"))
   (aac-settings common-lisp:nil :type
    (common-lisp:or aac-settings common-lisp:null))
   (ac3settings common-lisp:nil :type
    (common-lisp:or ac3settings common-lisp:null))
   (eac3atmos-settings common-lisp:nil :type
    (common-lisp:or eac3atmos-settings common-lisp:null))
   (eac3settings common-lisp:nil :type
    (common-lisp:or eac3settings common-lisp:null))
   (mp2settings common-lisp:nil :type
    (common-lisp:or mp2settings common-lisp:null))
   (pass-through-settings common-lisp:nil :type
    (common-lisp:or pass-through-settings common-lisp:null))
   (wav-settings common-lisp:nil :type
    (common-lisp:or wav-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'audio-codec-settings 'make-audio-codec-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-codec-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-codec-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aac-settings))
      (common-lisp:list
       (common-lisp:cons "AacSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ac3settings))
      (common-lisp:list
       (common-lisp:cons "Ac3Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eac3atmos-settings))
      (common-lisp:list
       (common-lisp:cons "Eac3AtmosSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eac3settings))
      (common-lisp:list
       (common-lisp:cons "Eac3Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mp2settings))
      (common-lisp:list
       (common-lisp:cons "Mp2Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pass-through-settings))
      (common-lisp:list
       (common-lisp:cons "PassThroughSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wav-settings))
      (common-lisp:list
       (common-lisp:cons "WavSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-codec-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (audio-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-audio-description-"))
   (audio-normalization-settings common-lisp:nil :type
    (common-lisp:or audio-normalization-settings common-lisp:null))
   (audio-selector-name (common-lisp:error ":audio-selector-name is required")
    :type (common-lisp:or |__string| common-lisp:null))
   (audio-type common-lisp:nil :type
    (common-lisp:or audio-type common-lisp:null))
   (audio-type-control common-lisp:nil :type
    (common-lisp:or audio-description-audio-type-control common-lisp:null))
   (audio-watermarking-settings common-lisp:nil :type
    (common-lisp:or audio-watermark-settings common-lisp:null))
   (codec-settings common-lisp:nil :type
    (common-lisp:or audio-codec-settings common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or |__stringMin1Max35| common-lisp:null))
   (language-code-control common-lisp:nil :type
    (common-lisp:or audio-description-language-code-control common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |__stringMax255| common-lisp:null))
   (remix-settings common-lisp:nil :type
    (common-lisp:or remix-settings common-lisp:null))
   (stream-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'audio-description 'make-audio-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-normalization-settings))
      (common-lisp:list
       (common-lisp:cons "AudioNormalizationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-selector-name))
      (common-lisp:list
       (common-lisp:cons "AudioSelectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-type))
      (common-lisp:list
       (common-lisp:cons "AudioType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-type-control))
      (common-lisp:list
       (common-lisp:cons "AudioTypeControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-watermarking-settings))
      (common-lisp:list
       (common-lisp:cons "AudioWatermarkingSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec-settings))
      (common-lisp:list
       (common-lisp:cons "CodecSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'language-code-control))
      (common-lisp:list
       (common-lisp:cons "LanguageCodeControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'remix-settings))
      (common-lisp:list
       (common-lisp:cons "RemixSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-description))
   common-lisp:nil))
(common-lisp:deftype audio-description-audio-type-control ()
  'common-lisp:string)
(common-lisp:deftype audio-description-language-code-control ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (audio-dolby-edecode (:copier common-lisp:nil)
      (:conc-name "struct-shape-audio-dolby-edecode-"))
   (program-selection (common-lisp:error ":program-selection is required")
    :type (common-lisp:or dolby-eprogram-selection common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'audio-dolby-edecode 'make-audio-dolby-edecode))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-dolby-edecode))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-dolby-edecode))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-selection))
      (common-lisp:list
       (common-lisp:cons "ProgramSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-dolby-edecode))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (audio-hls-rendition-selection (:copier common-lisp:nil)
      (:conc-name "struct-shape-audio-hls-rendition-selection-"))
   (group-id (common-lisp:error ":group-id is required") :type
    (common-lisp:or |__stringMin1| common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |__stringMin1| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'audio-hls-rendition-selection
                    'make-audio-hls-rendition-selection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-hls-rendition-selection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-hls-rendition-selection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-hls-rendition-selection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (audio-language-selection (:copier common-lisp:nil)
      (:conc-name "struct-shape-audio-language-selection-"))
   (language-code (common-lisp:error ":language-code is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (language-selection-policy common-lisp:nil :type
    (common-lisp:or audio-language-selection-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'audio-language-selection 'make-audio-language-selection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-language-selection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-language-selection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'language-selection-policy))
      (common-lisp:list
       (common-lisp:cons "LanguageSelectionPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-language-selection))
   common-lisp:nil))
(common-lisp:deftype audio-language-selection-policy () 'common-lisp:string)
(common-lisp:deftype audio-normalization-algorithm () 'common-lisp:string)
(common-lisp:deftype audio-normalization-algorithm-control ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (audio-normalization-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-audio-normalization-settings-"))
   (algorithm common-lisp:nil :type
    (common-lisp:or audio-normalization-algorithm common-lisp:null))
   (algorithm-control common-lisp:nil :type
    (common-lisp:or audio-normalization-algorithm-control common-lisp:null))
   (target-lkfs common-lisp:nil :type
    (common-lisp:or |__doubleMinNegative59Max0| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'audio-normalization-settings
                    'make-audio-normalization-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-normalization-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-normalization-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm))
      (common-lisp:list
       (common-lisp:cons "Algorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm-control))
      (common-lisp:list
       (common-lisp:cons "AlgorithmControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-lkfs))
      (common-lisp:list
       (common-lisp:cons "TargetLkfs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-normalization-settings))
   common-lisp:nil))
(common-lisp:deftype audio-only-hls-segment-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (audio-only-hls-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-audio-only-hls-settings-"))
   (audio-group-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (audio-only-image common-lisp:nil :type
    (common-lisp:or input-location common-lisp:null))
   (audio-track-type common-lisp:nil :type
    (common-lisp:or audio-only-hls-track-type common-lisp:null))
   (segment-type common-lisp:nil :type
    (common-lisp:or audio-only-hls-segment-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'audio-only-hls-settings 'make-audio-only-hls-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-only-hls-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-only-hls-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-group-id))
      (common-lisp:list
       (common-lisp:cons "AudioGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-only-image))
      (common-lisp:list
       (common-lisp:cons "AudioOnlyImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-track-type))
      (common-lisp:list
       (common-lisp:cons "AudioTrackType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-type))
      (common-lisp:list
       (common-lisp:cons "SegmentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-only-hls-settings))
   common-lisp:nil))
(common-lisp:deftype audio-only-hls-track-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (audio-pid-selection (:copier common-lisp:nil)
      (:conc-name "struct-shape-audio-pid-selection-"))
   (pid (common-lisp:error ":pid is required") :type
    (common-lisp:or |__integerMin0Max8191| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'audio-pid-selection 'make-audio-pid-selection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-pid-selection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-pid-selection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pid))
      (common-lisp:list
       (common-lisp:cons "Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-pid-selection))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (audio-selector (:copier common-lisp:nil)
      (:conc-name "struct-shape-audio-selector-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |__stringMin1| common-lisp:null))
   (selector-settings common-lisp:nil :type
    (common-lisp:or audio-selector-settings common-lisp:null)))
 (common-lisp:export (common-lisp:list 'audio-selector 'make-audio-selector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selector-settings))
      (common-lisp:list
       (common-lisp:cons "SelectorSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-selector))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (audio-selector-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-audio-selector-settings-"))
   (audio-hls-rendition-selection common-lisp:nil :type
    (common-lisp:or audio-hls-rendition-selection common-lisp:null))
   (audio-language-selection common-lisp:nil :type
    (common-lisp:or audio-language-selection common-lisp:null))
   (audio-pid-selection common-lisp:nil :type
    (common-lisp:or audio-pid-selection common-lisp:null))
   (audio-track-selection common-lisp:nil :type
    (common-lisp:or audio-track-selection common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'audio-selector-settings 'make-audio-selector-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-selector-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-selector-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-hls-rendition-selection))
      (common-lisp:list
       (common-lisp:cons "AudioHlsRenditionSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-language-selection))
      (common-lisp:list
       (common-lisp:cons "AudioLanguageSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-pid-selection))
      (common-lisp:list
       (common-lisp:cons "AudioPidSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-track-selection))
      (common-lisp:list
       (common-lisp:cons "AudioTrackSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-selector-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (audio-silence-failover-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-audio-silence-failover-settings-"))
   (audio-selector-name (common-lisp:error ":audio-selector-name is required")
    :type (common-lisp:or |__string| common-lisp:null))
   (audio-silence-threshold-msec common-lisp:nil :type
    (common-lisp:or |__integerMin1000| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'audio-silence-failover-settings
                    'make-audio-silence-failover-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-silence-failover-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-silence-failover-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-selector-name))
      (common-lisp:list
       (common-lisp:cons "AudioSelectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-silence-threshold-msec))
      (common-lisp:list
       (common-lisp:cons "AudioSilenceThresholdMsec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-silence-failover-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (audio-track (:copier common-lisp:nil)
      (:conc-name "struct-shape-audio-track-"))
   (track (common-lisp:error ":track is required") :type
    (common-lisp:or |__integerMin1| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'audio-track 'make-audio-track))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-track))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-track))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'track))
      (common-lisp:list
       (common-lisp:cons "Track"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-track))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (audio-track-selection (:copier common-lisp:nil)
      (:conc-name "struct-shape-audio-track-selection-"))
   (tracks (common-lisp:error ":tracks is required") :type
    (common-lisp:or |__listOfAudioTrack| common-lisp:null))
   (dolby-edecode common-lisp:nil :type
    (common-lisp:or audio-dolby-edecode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'audio-track-selection 'make-audio-track-selection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-track-selection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-track-selection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tracks))
      (common-lisp:list
       (common-lisp:cons "Tracks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dolby-edecode))
      (common-lisp:list
       (common-lisp:cons "DolbyEDecode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-track-selection))
   common-lisp:nil))
(common-lisp:deftype audio-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (audio-watermark-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-audio-watermark-settings-"))
   (nielsen-watermarks-settings common-lisp:nil :type
    (common-lisp:or nielsen-watermarks-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'audio-watermark-settings 'make-audio-watermark-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          audio-watermark-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          audio-watermark-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nielsen-watermarks-settings))
      (common-lisp:list
       (common-lisp:cons "NielsenWatermarksSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          audio-watermark-settings))
   common-lisp:nil))
(common-lisp:deftype authentication-scheme () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (automatic-input-failover-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-automatic-input-failover-settings-"))
   (error-clear-time-msec common-lisp:nil :type
    (common-lisp:or |__integerMin1| common-lisp:null))
   (failover-conditions common-lisp:nil :type
    (common-lisp:or |__listOfFailoverCondition| common-lisp:null))
   (input-preference common-lisp:nil :type
    (common-lisp:or input-preference common-lisp:null))
   (secondary-input-id (common-lisp:error ":secondary-input-id is required")
    :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'automatic-input-failover-settings
                    'make-automatic-input-failover-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          automatic-input-failover-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          automatic-input-failover-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'error-clear-time-msec))
      (common-lisp:list
       (common-lisp:cons "ErrorClearTimeMsec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failover-conditions))
      (common-lisp:list
       (common-lisp:cons "FailoverConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-preference))
      (common-lisp:list
       (common-lisp:cons "InputPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secondary-input-id))
      (common-lisp:list
       (common-lisp:cons "SecondaryInputId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          automatic-input-failover-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (avail-blanking (:copier common-lisp:nil)
      (:conc-name "struct-shape-avail-blanking-"))
   (avail-blanking-image common-lisp:nil :type
    (common-lisp:or input-location common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or avail-blanking-state common-lisp:null)))
 (common-lisp:export (common-lisp:list 'avail-blanking 'make-avail-blanking))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input avail-blanking))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input avail-blanking))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'avail-blanking-image))
      (common-lisp:list
       (common-lisp:cons "AvailBlankingImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input avail-blanking))
   common-lisp:nil))
(common-lisp:deftype avail-blanking-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (avail-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-avail-configuration-"))
   (avail-settings common-lisp:nil :type
    (common-lisp:or avail-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'avail-configuration 'make-avail-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input avail-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input avail-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'avail-settings))
      (common-lisp:list
       (common-lisp:cons "AvailSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input avail-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (avail-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-avail-settings-"))
   (esam common-lisp:nil :type (common-lisp:or esam common-lisp:null))
   (scte35splice-insert common-lisp:nil :type
    (common-lisp:or scte35splice-insert common-lisp:null))
   (scte35time-signal-apos common-lisp:nil :type
    (common-lisp:or scte35time-signal-apos common-lisp:null)))
 (common-lisp:export (common-lisp:list 'avail-settings 'make-avail-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input avail-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input avail-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'esam))
      (common-lisp:list
       (common-lisp:cons "Esam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35splice-insert))
      (common-lisp:list
       (common-lisp:cons "Scte35SpliceInsert"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte35time-signal-apos))
      (common-lisp:list
       (common-lisp:cons "Scte35TimeSignalApos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input avail-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-gateway-exception
     (medialive-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-gateway-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-gateway-exception 'bad-gateway-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition bad-request-exception
     (medialive-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-request-exception 'bad-request-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-"))
   (channel-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (input-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (input-security-group-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (multiplex-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'batch-delete 'make-batch-delete))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-delete))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-delete))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-ids))
      (common-lisp:list
       (common-lisp:cons "ChannelIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-ids))
      (common-lisp:list
       (common-lisp:cons "InputIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "InputSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-ids))
      (common-lisp:list
       (common-lisp:cons "MultiplexIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-delete))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-request-"))
   (channel-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (input-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (input-security-group-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (multiplex-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-request 'make-batch-delete-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-delete-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-delete-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-ids))
      (common-lisp:list
       (common-lisp:cons "ChannelIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-ids))
      (common-lisp:list
       (common-lisp:cons "InputIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-security-group-ids))
      (common-lisp:list
       (common-lisp:cons "InputSecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-ids))
      (common-lisp:list
       (common-lisp:cons "MultiplexIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-delete-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-response-"))
   (failed common-lisp:nil :type
    (common-lisp:or |__listOfBatchFailedResultModel| common-lisp:null))
   (successful common-lisp:nil :type
    (common-lisp:or |__listOfBatchSuccessfulResultModel| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-response 'make-batch-delete-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "Failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful))
      (common-lisp:list
       (common-lisp:cons "Successful"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-result-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-delete-result-model-"))
   (failed common-lisp:nil :type
    (common-lisp:or |__listOfBatchFailedResultModel| common-lisp:null))
   (successful common-lisp:nil :type
    (common-lisp:or |__listOfBatchSuccessfulResultModel| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-result-model
                    'make-batch-delete-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "Failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful))
      (common-lisp:list
       (common-lisp:cons "Successful"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-failed-result-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-failed-result-model-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (code common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-failed-result-model
                    'make-batch-failed-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-failed-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-failed-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-failed-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-schedule-action-create-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-schedule-action-create-request-"))
   (schedule-actions (common-lisp:error ":schedule-actions is required") :type
    (common-lisp:or |__listOfScheduleAction| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-schedule-action-create-request
                    'make-batch-schedule-action-create-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-create-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-create-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-actions))
      (common-lisp:list
       (common-lisp:cons "ScheduleActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-create-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-schedule-action-create-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-schedule-action-create-result-"))
   (schedule-actions (common-lisp:error ":schedule-actions is required") :type
    (common-lisp:or |__listOfScheduleAction| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-schedule-action-create-result
                    'make-batch-schedule-action-create-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-create-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-create-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-actions))
      (common-lisp:list
       (common-lisp:cons "ScheduleActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-create-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-schedule-action-delete-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-schedule-action-delete-request-"))
   (action-names (common-lisp:error ":action-names is required") :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-schedule-action-delete-request
                    'make-batch-schedule-action-delete-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-delete-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-delete-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-names))
      (common-lisp:list
       (common-lisp:cons "ActionNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-delete-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-schedule-action-delete-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-schedule-action-delete-result-"))
   (schedule-actions (common-lisp:error ":schedule-actions is required") :type
    (common-lisp:or |__listOfScheduleAction| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-schedule-action-delete-result
                    'make-batch-schedule-action-delete-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-delete-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-delete-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-actions))
      (common-lisp:list
       (common-lisp:cons "ScheduleActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-schedule-action-delete-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-start (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-start-"))
   (channel-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (multiplex-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'batch-start 'make-batch-start))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-start))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-start))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-ids))
      (common-lisp:list
       (common-lisp:cons "ChannelIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-ids))
      (common-lisp:list
       (common-lisp:cons "MultiplexIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-start))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-start-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-start-request-"))
   (channel-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (multiplex-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-start-request 'make-batch-start-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-start-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-start-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-ids))
      (common-lisp:list
       (common-lisp:cons "ChannelIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-ids))
      (common-lisp:list
       (common-lisp:cons "MultiplexIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-start-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-start-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-start-response-"))
   (failed common-lisp:nil :type
    (common-lisp:or |__listOfBatchFailedResultModel| common-lisp:null))
   (successful common-lisp:nil :type
    (common-lisp:or |__listOfBatchSuccessfulResultModel| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-start-response 'make-batch-start-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-start-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-start-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "Failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful))
      (common-lisp:list
       (common-lisp:cons "Successful"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-start-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-start-result-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-start-result-model-"))
   (failed common-lisp:nil :type
    (common-lisp:or |__listOfBatchFailedResultModel| common-lisp:null))
   (successful common-lisp:nil :type
    (common-lisp:or |__listOfBatchSuccessfulResultModel| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-start-result-model 'make-batch-start-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-start-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-start-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "Failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful))
      (common-lisp:list
       (common-lisp:cons "Successful"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-start-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-stop (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-stop-"))
   (channel-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (multiplex-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'batch-stop 'make-batch-stop))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-stop))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-stop))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-ids))
      (common-lisp:list
       (common-lisp:cons "ChannelIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-ids))
      (common-lisp:list
       (common-lisp:cons "MultiplexIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-stop))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-stop-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-stop-request-"))
   (channel-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (multiplex-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-stop-request 'make-batch-stop-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-stop-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-stop-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-ids))
      (common-lisp:list
       (common-lisp:cons "ChannelIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-ids))
      (common-lisp:list
       (common-lisp:cons "MultiplexIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-stop-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-stop-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-stop-response-"))
   (failed common-lisp:nil :type
    (common-lisp:or |__listOfBatchFailedResultModel| common-lisp:null))
   (successful common-lisp:nil :type
    (common-lisp:or |__listOfBatchSuccessfulResultModel| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-stop-response 'make-batch-stop-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input batch-stop-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input batch-stop-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "Failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful))
      (common-lisp:list
       (common-lisp:cons "Successful"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input batch-stop-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-stop-result-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-stop-result-model-"))
   (failed common-lisp:nil :type
    (common-lisp:or |__listOfBatchFailedResultModel| common-lisp:null))
   (successful common-lisp:nil :type
    (common-lisp:or |__listOfBatchSuccessfulResultModel| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-stop-result-model 'make-batch-stop-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "Failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'successful))
      (common-lisp:list
       (common-lisp:cons "Successful"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-stop-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-successful-result-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-successful-result-model-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-successful-result-model
                    'make-batch-successful-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-successful-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-successful-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-successful-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-update-schedule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-update-schedule-request-"))
   (channel-id (common-lisp:error ":channel-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (creates common-lisp:nil :type
    (common-lisp:or batch-schedule-action-create-request common-lisp:null))
   (deletes common-lisp:nil :type
    (common-lisp:or batch-schedule-action-delete-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-update-schedule-request
                    'make-batch-update-schedule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-schedule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creates))
      (common-lisp:list
       (common-lisp:cons "Creates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletes))
      (common-lisp:list
       (common-lisp:cons "Deletes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-update-schedule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-update-schedule-response-"))
   (creates common-lisp:nil :type
    (common-lisp:or batch-schedule-action-create-result common-lisp:null))
   (deletes common-lisp:nil :type
    (common-lisp:or batch-schedule-action-delete-result common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-update-schedule-response
                    'make-batch-update-schedule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-schedule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creates))
      (common-lisp:list
       (common-lisp:cons "Creates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletes))
      (common-lisp:list
       (common-lisp:cons "Deletes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-schedule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-update-schedule-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-update-schedule-result-"))
   (creates common-lisp:nil :type
    (common-lisp:or batch-schedule-action-create-result common-lisp:null))
   (deletes common-lisp:nil :type
    (common-lisp:or batch-schedule-action-delete-result common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-update-schedule-result
                    'make-batch-update-schedule-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-schedule-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-schedule-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creates))
      (common-lisp:list
       (common-lisp:cons "Creates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletes))
      (common-lisp:list
       (common-lisp:cons "Deletes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-update-schedule-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (blackout-slate (:copier common-lisp:nil)
      (:conc-name "struct-shape-blackout-slate-"))
   (blackout-slate-image common-lisp:nil :type
    (common-lisp:or input-location common-lisp:null))
   (network-end-blackout common-lisp:nil :type
    (common-lisp:or blackout-slate-network-end-blackout common-lisp:null))
   (network-end-blackout-image common-lisp:nil :type
    (common-lisp:or input-location common-lisp:null))
   (network-id common-lisp:nil :type
    (common-lisp:or |__stringMin34Max34| common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or blackout-slate-state common-lisp:null)))
 (common-lisp:export (common-lisp:list 'blackout-slate 'make-blackout-slate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input blackout-slate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input blackout-slate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blackout-slate-image))
      (common-lisp:list
       (common-lisp:cons "BlackoutSlateImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-end-blackout))
      (common-lisp:list
       (common-lisp:cons "NetworkEndBlackout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-end-blackout-image))
      (common-lisp:list
       (common-lisp:cons "NetworkEndBlackoutImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-id))
      (common-lisp:list
       (common-lisp:cons "NetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input blackout-slate))
   common-lisp:nil))
(common-lisp:deftype blackout-slate-network-end-blackout () 'common-lisp:string)
(common-lisp:deftype blackout-slate-state () 'common-lisp:string)
(common-lisp:deftype burn-in-alignment () 'common-lisp:string)
(common-lisp:deftype burn-in-background-color () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (burn-in-destination-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-burn-in-destination-settings-"))
   (alignment common-lisp:nil :type
    (common-lisp:or burn-in-alignment common-lisp:null))
   (background-color common-lisp:nil :type
    (common-lisp:or burn-in-background-color common-lisp:null))
   (background-opacity common-lisp:nil :type
    (common-lisp:or |__integerMin0Max255| common-lisp:null))
   (font common-lisp:nil :type
    (common-lisp:or input-location common-lisp:null))
   (font-color common-lisp:nil :type
    (common-lisp:or burn-in-font-color common-lisp:null))
   (font-opacity common-lisp:nil :type
    (common-lisp:or |__integerMin0Max255| common-lisp:null))
   (font-resolution common-lisp:nil :type
    (common-lisp:or |__integerMin96Max600| common-lisp:null))
   (font-size common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (outline-color common-lisp:nil :type
    (common-lisp:or burn-in-outline-color common-lisp:null))
   (outline-size common-lisp:nil :type
    (common-lisp:or |__integerMin0Max10| common-lisp:null))
   (shadow-color common-lisp:nil :type
    (common-lisp:or burn-in-shadow-color common-lisp:null))
   (shadow-opacity common-lisp:nil :type
    (common-lisp:or |__integerMin0Max255| common-lisp:null))
   (shadow-xoffset common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (shadow-yoffset common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (teletext-grid-control common-lisp:nil :type
    (common-lisp:or burn-in-teletext-grid-control common-lisp:null))
   (xposition common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (yposition common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'burn-in-destination-settings
                    'make-burn-in-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          burn-in-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          burn-in-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alignment))
      (common-lisp:list
       (common-lisp:cons "Alignment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-color))
      (common-lisp:list
       (common-lisp:cons "BackgroundColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-opacity))
      (common-lisp:list
       (common-lisp:cons "BackgroundOpacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font))
      (common-lisp:list
       (common-lisp:cons "Font"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-color))
      (common-lisp:list
       (common-lisp:cons "FontColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-opacity))
      (common-lisp:list
       (common-lisp:cons "FontOpacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-resolution))
      (common-lisp:list
       (common-lisp:cons "FontResolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-size))
      (common-lisp:list
       (common-lisp:cons "FontSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outline-color))
      (common-lisp:list
       (common-lisp:cons "OutlineColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outline-size))
      (common-lisp:list
       (common-lisp:cons "OutlineSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-color))
      (common-lisp:list
       (common-lisp:cons "ShadowColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-opacity))
      (common-lisp:list
       (common-lisp:cons "ShadowOpacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-xoffset))
      (common-lisp:list
       (common-lisp:cons "ShadowXOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-yoffset))
      (common-lisp:list
       (common-lisp:cons "ShadowYOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'teletext-grid-control))
      (common-lisp:list
       (common-lisp:cons "TeletextGridControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xposition))
      (common-lisp:list
       (common-lisp:cons "XPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'yposition))
      (common-lisp:list
       (common-lisp:cons "YPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          burn-in-destination-settings))
   common-lisp:nil))
(common-lisp:deftype burn-in-font-color () 'common-lisp:string)
(common-lisp:deftype burn-in-outline-color () 'common-lisp:string)
(common-lisp:deftype burn-in-shadow-color () 'common-lisp:string)
(common-lisp:deftype burn-in-teletext-grid-control () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-input-device-transfer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-input-device-transfer-request-"))
   (input-device-id (common-lisp:error ":input-device-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-input-device-transfer-request
                    'make-cancel-input-device-transfer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-input-device-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-input-device-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-input-device-transfer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-input-device-transfer-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-input-device-transfer-response-")))
 (common-lisp:export
  (common-lisp:list 'cancel-input-device-transfer-response
                    'make-cancel-input-device-transfer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-input-device-transfer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-input-device-transfer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-input-device-transfer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (caption-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-caption-description-"))
   (accessibility common-lisp:nil :type
    (common-lisp:or accessibility-type common-lisp:null))
   (caption-selector-name
    (common-lisp:error ":caption-selector-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (destination-settings common-lisp:nil :type
    (common-lisp:or caption-destination-settings common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (language-description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'caption-description 'make-caption-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input caption-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input caption-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accessibility))
      (common-lisp:list
       (common-lisp:cons "Accessibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'caption-selector-name))
      (common-lisp:list
       (common-lisp:cons "CaptionSelectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'destination-settings))
      (common-lisp:list
       (common-lisp:cons "DestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'language-description))
      (common-lisp:list
       (common-lisp:cons "LanguageDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input caption-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (caption-destination-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-caption-destination-settings-"))
   (arib-destination-settings common-lisp:nil :type
    (common-lisp:or arib-destination-settings common-lisp:null))
   (burn-in-destination-settings common-lisp:nil :type
    (common-lisp:or burn-in-destination-settings common-lisp:null))
   (dvb-sub-destination-settings common-lisp:nil :type
    (common-lisp:or dvb-sub-destination-settings common-lisp:null))
   (ebu-tt-ddestination-settings common-lisp:nil :type
    (common-lisp:or ebu-tt-ddestination-settings common-lisp:null))
   (embedded-destination-settings common-lisp:nil :type
    (common-lisp:or embedded-destination-settings common-lisp:null))
   (embedded-plus-scte20destination-settings common-lisp:nil :type
    (common-lisp:or embedded-plus-scte20destination-settings common-lisp:null))
   (rtmp-caption-info-destination-settings common-lisp:nil :type
    (common-lisp:or rtmp-caption-info-destination-settings common-lisp:null))
   (scte20plus-embedded-destination-settings common-lisp:nil :type
    (common-lisp:or scte20plus-embedded-destination-settings common-lisp:null))
   (scte27destination-settings common-lisp:nil :type
    (common-lisp:or scte27destination-settings common-lisp:null))
   (smpte-tt-destination-settings common-lisp:nil :type
    (common-lisp:or smpte-tt-destination-settings common-lisp:null))
   (teletext-destination-settings common-lisp:nil :type
    (common-lisp:or teletext-destination-settings common-lisp:null))
   (ttml-destination-settings common-lisp:nil :type
    (common-lisp:or ttml-destination-settings common-lisp:null))
   (webvtt-destination-settings common-lisp:nil :type
    (common-lisp:or webvtt-destination-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'caption-destination-settings
                    'make-caption-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          caption-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          caption-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'arib-destination-settings))
      (common-lisp:list
       (common-lisp:cons "AribDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'burn-in-destination-settings))
      (common-lisp:list
       (common-lisp:cons "BurnInDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dvb-sub-destination-settings))
      (common-lisp:list
       (common-lisp:cons "DvbSubDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ebu-tt-ddestination-settings))
      (common-lisp:list
       (common-lisp:cons "EbuTtDDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'embedded-destination-settings))
      (common-lisp:list
       (common-lisp:cons "EmbeddedDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'embedded-plus-scte20destination-settings))
      (common-lisp:list
       (common-lisp:cons "EmbeddedPlusScte20DestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rtmp-caption-info-destination-settings))
      (common-lisp:list
       (common-lisp:cons "RtmpCaptionInfoDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte20plus-embedded-destination-settings))
      (common-lisp:list
       (common-lisp:cons "Scte20PlusEmbeddedDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte27destination-settings))
      (common-lisp:list
       (common-lisp:cons "Scte27DestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'smpte-tt-destination-settings))
      (common-lisp:list
       (common-lisp:cons "SmpteTtDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'teletext-destination-settings))
      (common-lisp:list
       (common-lisp:cons "TeletextDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ttml-destination-settings))
      (common-lisp:list
       (common-lisp:cons "TtmlDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'webvtt-destination-settings))
      (common-lisp:list
       (common-lisp:cons "WebvttDestinationSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          caption-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (caption-language-mapping (:copier common-lisp:nil)
      (:conc-name "struct-shape-caption-language-mapping-"))
   (caption-channel (common-lisp:error ":caption-channel is required") :type
    (common-lisp:or |__integerMin1Max4| common-lisp:null))
   (language-code (common-lisp:error ":language-code is required") :type
    (common-lisp:or |__stringMin3Max3| common-lisp:null))
   (language-description
    (common-lisp:error ":language-description is required") :type
    (common-lisp:or |__stringMin1| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'caption-language-mapping 'make-caption-language-mapping))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          caption-language-mapping))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          caption-language-mapping))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caption-channel))
      (common-lisp:list
       (common-lisp:cons "CaptionChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'language-description))
      (common-lisp:list
       (common-lisp:cons "LanguageDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          caption-language-mapping))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (caption-rectangle (:copier common-lisp:nil)
      (:conc-name "struct-shape-caption-rectangle-"))
   (height (common-lisp:error ":height is required") :type
    (common-lisp:or |__doubleMin0Max100| common-lisp:null))
   (left-offset (common-lisp:error ":left-offset is required") :type
    (common-lisp:or |__doubleMin0Max100| common-lisp:null))
   (top-offset (common-lisp:error ":top-offset is required") :type
    (common-lisp:or |__doubleMin0Max100| common-lisp:null))
   (width (common-lisp:error ":width is required") :type
    (common-lisp:or |__doubleMin0Max100| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'caption-rectangle 'make-caption-rectangle))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input caption-rectangle))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input caption-rectangle))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'left-offset))
      (common-lisp:list
       (common-lisp:cons "LeftOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'top-offset))
      (common-lisp:list
       (common-lisp:cons "TopOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input caption-rectangle))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (caption-selector (:copier common-lisp:nil)
      (:conc-name "struct-shape-caption-selector-"))
   (language-code common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |__stringMin1| common-lisp:null))
   (selector-settings common-lisp:nil :type
    (common-lisp:or caption-selector-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'caption-selector 'make-caption-selector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input caption-selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input caption-selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language-code))
      (common-lisp:list
       (common-lisp:cons "LanguageCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selector-settings))
      (common-lisp:list
       (common-lisp:cons "SelectorSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input caption-selector))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (caption-selector-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-caption-selector-settings-"))
   (ancillary-source-settings common-lisp:nil :type
    (common-lisp:or ancillary-source-settings common-lisp:null))
   (arib-source-settings common-lisp:nil :type
    (common-lisp:or arib-source-settings common-lisp:null))
   (dvb-sub-source-settings common-lisp:nil :type
    (common-lisp:or dvb-sub-source-settings common-lisp:null))
   (embedded-source-settings common-lisp:nil :type
    (common-lisp:or embedded-source-settings common-lisp:null))
   (scte20source-settings common-lisp:nil :type
    (common-lisp:or scte20source-settings common-lisp:null))
   (scte27source-settings common-lisp:nil :type
    (common-lisp:or scte27source-settings common-lisp:null))
   (teletext-source-settings common-lisp:nil :type
    (common-lisp:or teletext-source-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'caption-selector-settings
                    'make-caption-selector-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          caption-selector-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          caption-selector-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ancillary-source-settings))
      (common-lisp:list
       (common-lisp:cons "AncillarySourceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'arib-source-settings))
      (common-lisp:list
       (common-lisp:cons "AribSourceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dvb-sub-source-settings))
      (common-lisp:list
       (common-lisp:cons "DvbSubSourceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'embedded-source-settings))
      (common-lisp:list
       (common-lisp:cons "EmbeddedSourceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte20source-settings))
      (common-lisp:list
       (common-lisp:cons "Scte20SourceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte27source-settings))
      (common-lisp:list
       (common-lisp:cons "Scte27SourceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'teletext-source-settings))
      (common-lisp:list
       (common-lisp:cons "TeletextSourceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          caption-selector-settings))
   common-lisp:nil))
(common-lisp:deftype cdi-input-resolution () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cdi-input-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-cdi-input-specification-"))
   (resolution common-lisp:nil :type
    (common-lisp:or cdi-input-resolution common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cdi-input-specification 'make-cdi-input-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cdi-input-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cdi-input-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution))
      (common-lisp:list
       (common-lisp:cons "Resolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cdi-input-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (channel (:copier common-lisp:nil) (:conc-name "struct-shape-channel-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (cdi-input-specification common-lisp:nil :type
    (common-lisp:or cdi-input-specification common-lisp:null))
   (channel-class common-lisp:nil :type
    (common-lisp:or channel-class common-lisp:null))
   (destinations common-lisp:nil :type
    (common-lisp:or |__listOfOutputDestination| common-lisp:null))
   (egress-endpoints common-lisp:nil :type
    (common-lisp:or |__listOfChannelEgressEndpoint| common-lisp:null))
   (encoder-settings common-lisp:nil :type
    (common-lisp:or encoder-settings common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (input-attachments common-lisp:nil :type
    (common-lisp:or |__listOfInputAttachment| common-lisp:null))
   (input-specification common-lisp:nil :type
    (common-lisp:or input-specification common-lisp:null))
   (log-level common-lisp:nil :type
    (common-lisp:or log-level common-lisp:null))
   (maintenance common-lisp:nil :type
    (common-lisp:or maintenance-status common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (pipeline-details common-lisp:nil :type
    (common-lisp:or |__listOfPipelineDetail| common-lisp:null))
   (pipelines-running-count common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or channel-state common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (vpc common-lisp:nil :type
    (common-lisp:or vpc-output-settings-description common-lisp:null)))
 (common-lisp:export (common-lisp:list 'channel 'make-channel))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-endpoints))
      (common-lisp:list
       (common-lisp:cons "EgressEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-settings))
      (common-lisp:list
       (common-lisp:cons "EncoderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-details))
      (common-lisp:list
       (common-lisp:cons "PipelineDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel))
   common-lisp:nil))
(common-lisp:deftype channel-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (channel-configuration-validation-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-channel-configuration-validation-error-"))
   (message common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (validation-errors common-lisp:nil :type
    (common-lisp:or |__listOfValidationError| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'channel-configuration-validation-error
                    'make-channel-configuration-validation-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          channel-configuration-validation-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          channel-configuration-validation-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-errors))
      (common-lisp:list
       (common-lisp:cons "ValidationErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          channel-configuration-validation-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (channel-egress-endpoint (:copier common-lisp:nil)
      (:conc-name "struct-shape-channel-egress-endpoint-"))
   (source-ip common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'channel-egress-endpoint 'make-channel-egress-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          channel-egress-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          channel-egress-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ip))
      (common-lisp:list
       (common-lisp:cons "SourceIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          channel-egress-endpoint))
   common-lisp:nil))
(common-lisp:deftype channel-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (channel-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-channel-summary-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (cdi-input-specification common-lisp:nil :type
    (common-lisp:or cdi-input-specification common-lisp:null))
   (channel-class common-lisp:nil :type
    (common-lisp:or channel-class common-lisp:null))
   (destinations common-lisp:nil :type
    (common-lisp:or |__listOfOutputDestination| common-lisp:null))
   (egress-endpoints common-lisp:nil :type
    (common-lisp:or |__listOfChannelEgressEndpoint| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (input-attachments common-lisp:nil :type
    (common-lisp:or |__listOfInputAttachment| common-lisp:null))
   (input-specification common-lisp:nil :type
    (common-lisp:or input-specification common-lisp:null))
   (log-level common-lisp:nil :type
    (common-lisp:or log-level common-lisp:null))
   (maintenance common-lisp:nil :type
    (common-lisp:or maintenance-status common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (pipelines-running-count common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or channel-state common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (vpc common-lisp:nil :type
    (common-lisp:or vpc-output-settings-description common-lisp:null)))
 (common-lisp:export (common-lisp:list 'channel-summary 'make-channel-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-endpoints))
      (common-lisp:list
       (common-lisp:cons "EgressEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (claim-device-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-claim-device-request-"))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'claim-device-request 'make-claim-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input claim-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input claim-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input claim-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (claim-device-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-claim-device-response-")))
 (common-lisp:export
  (common-lisp:list 'claim-device-response 'make-claim-device-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          claim-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          claim-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          claim-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (color-space-passthrough-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-color-space-passthrough-settings-")))
 (common-lisp:export
  (common-lisp:list 'color-space-passthrough-settings
                    'make-color-space-passthrough-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          color-space-passthrough-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          color-space-passthrough-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          color-space-passthrough-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (medialive-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (create-channel (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-channel-"))
   (cdi-input-specification common-lisp:nil :type
    (common-lisp:or cdi-input-specification common-lisp:null))
   (channel-class common-lisp:nil :type
    (common-lisp:or channel-class common-lisp:null))
   (destinations common-lisp:nil :type
    (common-lisp:or |__listOfOutputDestination| common-lisp:null))
   (encoder-settings common-lisp:nil :type
    (common-lisp:or encoder-settings common-lisp:null))
   (input-attachments common-lisp:nil :type
    (common-lisp:or |__listOfInputAttachment| common-lisp:null))
   (input-specification common-lisp:nil :type
    (common-lisp:or input-specification common-lisp:null))
   (log-level common-lisp:nil :type
    (common-lisp:or log-level common-lisp:null))
   (maintenance common-lisp:nil :type
    (common-lisp:or maintenance-create-settings common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (reserved common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (vpc common-lisp:nil :type
    (common-lisp:or vpc-output-settings common-lisp:null)))
 (common-lisp:export (common-lisp:list 'create-channel 'make-create-channel))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-channel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-channel))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-settings))
      (common-lisp:list
       (common-lisp:cons "EncoderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved))
      (common-lisp:list
       (common-lisp:cons "Reserved"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-channel))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-channel-request-"))
   (cdi-input-specification common-lisp:nil :type
    (common-lisp:or cdi-input-specification common-lisp:null))
   (channel-class common-lisp:nil :type
    (common-lisp:or channel-class common-lisp:null))
   (destinations common-lisp:nil :type
    (common-lisp:or |__listOfOutputDestination| common-lisp:null))
   (encoder-settings common-lisp:nil :type
    (common-lisp:or encoder-settings common-lisp:null))
   (input-attachments common-lisp:nil :type
    (common-lisp:or |__listOfInputAttachment| common-lisp:null))
   (input-specification common-lisp:nil :type
    (common-lisp:or input-specification common-lisp:null))
   (log-level common-lisp:nil :type
    (common-lisp:or log-level common-lisp:null))
   (maintenance common-lisp:nil :type
    (common-lisp:or maintenance-create-settings common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (reserved common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (vpc common-lisp:nil :type
    (common-lisp:or vpc-output-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-channel-request 'make-create-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-settings))
      (common-lisp:list
       (common-lisp:cons "EncoderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reserved))
      (common-lisp:list
       (common-lisp:cons "Reserved"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-channel-response-"))
   (channel common-lisp:nil :type (common-lisp:or channel common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-channel-response 'make-create-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "Channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-channel-result-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-channel-result-model-"))
   (channel common-lisp:nil :type (common-lisp:or channel common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-channel-result-model
                    'make-create-channel-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "Channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-channel-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-input-"))
   (destinations common-lisp:nil :type
    (common-lisp:or |__listOfInputDestinationRequest| common-lisp:null))
   (input-devices common-lisp:nil :type
    (common-lisp:or |__listOfInputDeviceSettings| common-lisp:null))
   (input-security-groups common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (media-connect-flows common-lisp:nil :type
    (common-lisp:or |__listOfMediaConnectFlowRequest| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (sources common-lisp:nil :type
    (common-lisp:or |__listOfInputSourceRequest| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or input-type common-lisp:null))
   (vpc common-lisp:nil :type
    (common-lisp:or input-vpc-request common-lisp:null)))
 (common-lisp:export (common-lisp:list 'create-input 'make-create-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-devices))
      (common-lisp:list
       (common-lisp:cons "InputDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-security-groups))
      (common-lisp:list
       (common-lisp:cons "InputSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-connect-flows))
      (common-lisp:list
       (common-lisp:cons "MediaConnectFlows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-input-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-input-request-"))
   (destinations common-lisp:nil :type
    (common-lisp:or |__listOfInputDestinationRequest| common-lisp:null))
   (input-devices common-lisp:nil :type
    (common-lisp:or |__listOfInputDeviceSettings| common-lisp:null))
   (input-security-groups common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (media-connect-flows common-lisp:nil :type
    (common-lisp:or |__listOfMediaConnectFlowRequest| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (sources common-lisp:nil :type
    (common-lisp:or |__listOfInputSourceRequest| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or input-type common-lisp:null))
   (vpc common-lisp:nil :type
    (common-lisp:or input-vpc-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-input-request 'make-create-input-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-input-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-input-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-devices))
      (common-lisp:list
       (common-lisp:cons "InputDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-security-groups))
      (common-lisp:list
       (common-lisp:cons "InputSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-connect-flows))
      (common-lisp:list
       (common-lisp:cons "MediaConnectFlows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-input-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-input-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-input-response-"))
   (input common-lisp:nil :type (common-lisp:or input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-input-response 'make-create-input-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-input-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-input-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-input-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-input-result-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-input-result-model-"))
   (input common-lisp:nil :type (common-lisp:or input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-input-result-model
                    'make-create-input-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-input-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-input-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-input-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-input-security-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-input-security-group-request-"))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (whitelist-rules common-lisp:nil :type
    (common-lisp:or |__listOfInputWhitelistRuleCidr| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-input-security-group-request
                    'make-create-input-security-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-input-security-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-input-security-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'whitelist-rules))
      (common-lisp:list
       (common-lisp:cons "WhitelistRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-input-security-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-input-security-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-input-security-group-response-"))
   (security-group common-lisp:nil :type
    (common-lisp:or input-security-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-input-security-group-response
                    'make-create-input-security-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-input-security-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-input-security-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group))
      (common-lisp:list
       (common-lisp:cons "SecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-input-security-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-input-security-group-result-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-input-security-group-result-model-"))
   (security-group common-lisp:nil :type
    (common-lisp:or input-security-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-input-security-group-result-model
                    'make-create-input-security-group-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-input-security-group-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-input-security-group-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group))
      (common-lisp:list
       (common-lisp:cons "SecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-input-security-group-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-multiplex (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-multiplex-"))
   (availability-zones (common-lisp:error ":availability-zones is required")
    :type (common-lisp:or |__listOf__string| common-lisp:null))
   (multiplex-settings (common-lisp:error ":multiplex-settings is required")
    :type (common-lisp:or multiplex-settings common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (request-id (common-lisp:error ":request-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-multiplex 'make-create-multiplex))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-multiplex))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-multiplex))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-multiplex))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-multiplex-program (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-multiplex-program-"))
   (multiplex-program-settings
    (common-lisp:error ":multiplex-program-settings is required") :type
    (common-lisp:or multiplex-program-settings common-lisp:null))
   (program-name (common-lisp:error ":program-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (request-id (common-lisp:error ":request-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-multiplex-program 'make-create-multiplex-program))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiplex-program-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgramSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-name))
      (common-lisp:list
       (common-lisp:cons "ProgramName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-multiplex-program-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-multiplex-program-request-"))
   (multiplex-id (common-lisp:error ":multiplex-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (multiplex-program-settings
    (common-lisp:error ":multiplex-program-settings is required") :type
    (common-lisp:or multiplex-program-settings common-lisp:null))
   (program-name (common-lisp:error ":program-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (request-id (common-lisp:error ":request-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-multiplex-program-request
                    'make-create-multiplex-program-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiplex-program-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgramSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-name))
      (common-lisp:list
       (common-lisp:cons "ProgramName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-multiplex-program-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-multiplex-program-response-"))
   (multiplex-program common-lisp:nil :type
    (common-lisp:or multiplex-program common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-multiplex-program-response
                    'make-create-multiplex-program-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-program))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-multiplex-program-result-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-multiplex-program-result-model-"))
   (multiplex-program common-lisp:nil :type
    (common-lisp:or multiplex-program common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-multiplex-program-result-model
                    'make-create-multiplex-program-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-program))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-program-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-multiplex-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-multiplex-request-"))
   (availability-zones (common-lisp:error ":availability-zones is required")
    :type (common-lisp:or |__listOf__string| common-lisp:null))
   (multiplex-settings (common-lisp:error ":multiplex-settings is required")
    :type (common-lisp:or multiplex-settings common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (request-id (common-lisp:error ":request-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-multiplex-request 'make-create-multiplex-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-multiplex-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-multiplex-response-"))
   (multiplex common-lisp:nil :type
    (common-lisp:or multiplex common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-multiplex-response
                    'make-create-multiplex-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex))
      (common-lisp:list
       (common-lisp:cons "Multiplex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-multiplex-result-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-multiplex-result-model-"))
   (multiplex common-lisp:nil :type
    (common-lisp:or multiplex common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-multiplex-result-model
                    'make-create-multiplex-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex))
      (common-lisp:list
       (common-lisp:cons "Multiplex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multiplex-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-partner-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-partner-input-"))
   (request-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-partner-input 'make-create-partner-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-partner-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-partner-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-partner-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-partner-input-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-partner-input-request-"))
   (input-id (common-lisp:error ":input-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-partner-input-request
                    'make-create-partner-input-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-input-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-input-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-input-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-partner-input-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-partner-input-response-"))
   (input common-lisp:nil :type (common-lisp:or input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-partner-input-response
                    'make-create-partner-input-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-input-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-input-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-input-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-partner-input-result-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-partner-input-result-model-"))
   (input common-lisp:nil :type (common-lisp:or input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-partner-input-result-model
                    'make-create-partner-input-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-input-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-input-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-partner-input-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-tags-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-tags-request 'make-create-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-channel-request-"))
   (channel-id (common-lisp:error ":channel-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-channel-request 'make-delete-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-channel-response-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (cdi-input-specification common-lisp:nil :type
    (common-lisp:or cdi-input-specification common-lisp:null))
   (channel-class common-lisp:nil :type
    (common-lisp:or channel-class common-lisp:null))
   (destinations common-lisp:nil :type
    (common-lisp:or |__listOfOutputDestination| common-lisp:null))
   (egress-endpoints common-lisp:nil :type
    (common-lisp:or |__listOfChannelEgressEndpoint| common-lisp:null))
   (encoder-settings common-lisp:nil :type
    (common-lisp:or encoder-settings common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (input-attachments common-lisp:nil :type
    (common-lisp:or |__listOfInputAttachment| common-lisp:null))
   (input-specification common-lisp:nil :type
    (common-lisp:or input-specification common-lisp:null))
   (log-level common-lisp:nil :type
    (common-lisp:or log-level common-lisp:null))
   (maintenance common-lisp:nil :type
    (common-lisp:or maintenance-status common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (pipeline-details common-lisp:nil :type
    (common-lisp:or |__listOfPipelineDetail| common-lisp:null))
   (pipelines-running-count common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or channel-state common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (vpc common-lisp:nil :type
    (common-lisp:or vpc-output-settings-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-channel-response 'make-delete-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-endpoints))
      (common-lisp:list
       (common-lisp:cons "EgressEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-settings))
      (common-lisp:list
       (common-lisp:cons "EncoderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-details))
      (common-lisp:list
       (common-lisp:cons "PipelineDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-input-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-input-request-"))
   (input-id (common-lisp:error ":input-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-input-request 'make-delete-input-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-input-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-input-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-input-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-input-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-input-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-input-response 'make-delete-input-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-input-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-input-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-input-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-input-security-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-input-security-group-request-"))
   (input-security-group-id
    (common-lisp:error ":input-security-group-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-input-security-group-request
                    'make-delete-input-security-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-input-security-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-input-security-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-input-security-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-input-security-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-input-security-group-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-input-security-group-response
                    'make-delete-input-security-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-input-security-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-input-security-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-input-security-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-multiplex-program-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-multiplex-program-request-"))
   (multiplex-id (common-lisp:error ":multiplex-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (program-name (common-lisp:error ":program-name is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-multiplex-program-request
                    'make-delete-multiplex-program-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-program-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-program-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-program-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-multiplex-program-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-multiplex-program-response-"))
   (channel-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (multiplex-program-settings common-lisp:nil :type
    (common-lisp:or multiplex-program-settings common-lisp:null))
   (packet-identifiers-map common-lisp:nil :type
    (common-lisp:or multiplex-program-packet-identifiers-map common-lisp:null))
   (pipeline-details common-lisp:nil :type
    (common-lisp:or |__listOfMultiplexProgramPipelineDetail| common-lisp:null))
   (program-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-multiplex-program-response
                    'make-delete-multiplex-program-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-program-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-program-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "ChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiplex-program-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgramSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'packet-identifiers-map))
      (common-lisp:list
       (common-lisp:cons "PacketIdentifiersMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-details))
      (common-lisp:list
       (common-lisp:cons "PipelineDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-name))
      (common-lisp:list
       (common-lisp:cons "ProgramName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-program-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-multiplex-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-multiplex-request-"))
   (multiplex-id (common-lisp:error ":multiplex-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-multiplex-request 'make-delete-multiplex-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-multiplex-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-multiplex-response-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (availability-zones common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (destinations common-lisp:nil :type
    (common-lisp:or |__listOfMultiplexOutputDestination| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (multiplex-settings common-lisp:nil :type
    (common-lisp:or multiplex-settings common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (pipelines-running-count common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (program-count common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or multiplex-state common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-multiplex-response
                    'make-delete-multiplex-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-count))
      (common-lisp:list
       (common-lisp:cons "ProgramCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-multiplex-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-reservation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-reservation-request-"))
   (reservation-id (common-lisp:error ":reservation-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-reservation-request
                    'make-delete-reservation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-reservation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-reservation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-reservation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-reservation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-reservation-response-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (count common-lisp:nil :type (common-lisp:or |__integer| common-lisp:null))
   (currency-code common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (duration common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (duration-units common-lisp:nil :type
    (common-lisp:or offering-duration-units common-lisp:null))
   (end common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (fixed-price common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (offering-description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (offering-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (offering-type common-lisp:nil :type
    (common-lisp:or offering-type common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (renewal-settings common-lisp:nil :type
    (common-lisp:or renewal-settings common-lisp:null))
   (reservation-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (resource-specification common-lisp:nil :type
    (common-lisp:or reservation-resource-specification common-lisp:null))
   (start common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or reservation-state common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (usage-price common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-reservation-response
                    'make-delete-reservation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-reservation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-reservation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-units))
      (common-lisp:list
       (common-lisp:cons "DurationUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offering-description))
      (common-lisp:list
       (common-lisp:cons "OfferingDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-id))
      (common-lisp:list
       (common-lisp:cons "OfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-settings))
      (common-lisp:list
       (common-lisp:cons "RenewalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-id))
      (common-lisp:list
       (common-lisp:cons "ReservationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "ResourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-reservation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-schedule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-schedule-request-"))
   (channel-id (common-lisp:error ":channel-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-schedule-request 'make-delete-schedule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-schedule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-schedule-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-schedule-response 'make-delete-schedule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-schedule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-tags-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-tags-request 'make-delete-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-channel-request-"))
   (channel-id (common-lisp:error ":channel-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-channel-request 'make-describe-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-channel-response-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (cdi-input-specification common-lisp:nil :type
    (common-lisp:or cdi-input-specification common-lisp:null))
   (channel-class common-lisp:nil :type
    (common-lisp:or channel-class common-lisp:null))
   (destinations common-lisp:nil :type
    (common-lisp:or |__listOfOutputDestination| common-lisp:null))
   (egress-endpoints common-lisp:nil :type
    (common-lisp:or |__listOfChannelEgressEndpoint| common-lisp:null))
   (encoder-settings common-lisp:nil :type
    (common-lisp:or encoder-settings common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (input-attachments common-lisp:nil :type
    (common-lisp:or |__listOfInputAttachment| common-lisp:null))
   (input-specification common-lisp:nil :type
    (common-lisp:or input-specification common-lisp:null))
   (log-level common-lisp:nil :type
    (common-lisp:or log-level common-lisp:null))
   (maintenance common-lisp:nil :type
    (common-lisp:or maintenance-status common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (pipeline-details common-lisp:nil :type
    (common-lisp:or |__listOfPipelineDetail| common-lisp:null))
   (pipelines-running-count common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or channel-state common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (vpc common-lisp:nil :type
    (common-lisp:or vpc-output-settings-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-channel-response
                    'make-describe-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-endpoints))
      (common-lisp:list
       (common-lisp:cons "EgressEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-settings))
      (common-lisp:list
       (common-lisp:cons "EncoderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-details))
      (common-lisp:list
       (common-lisp:cons "PipelineDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-input-device-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-input-device-request-"))
   (input-device-id (common-lisp:error ":input-device-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-input-device-request
                    'make-describe-input-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-input-device-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-input-device-response-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (connection-state common-lisp:nil :type
    (common-lisp:or input-device-connection-state common-lisp:null))
   (device-settings-sync-state common-lisp:nil :type
    (common-lisp:or device-settings-sync-state common-lisp:null))
   (device-update-status common-lisp:nil :type
    (common-lisp:or device-update-status common-lisp:null))
   (hd-device-settings common-lisp:nil :type
    (common-lisp:or input-device-hd-settings common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (mac-address common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (network-settings common-lisp:nil :type
    (common-lisp:or input-device-network-settings common-lisp:null))
   (serial-number common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or input-device-type common-lisp:null))
   (uhd-device-settings common-lisp:nil :type
    (common-lisp:or input-device-uhd-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-input-device-response
                    'make-describe-input-device-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-state))
      (common-lisp:list
       (common-lisp:cons "ConnectionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-settings-sync-state))
      (common-lisp:list
       (common-lisp:cons "DeviceSettingsSyncState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-update-status))
      (common-lisp:list
       (common-lisp:cons "DeviceUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hd-device-settings))
      (common-lisp:list
       (common-lisp:cons "HdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-address))
      (common-lisp:list
       (common-lisp:cons "MacAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-settings))
      (common-lisp:list
       (common-lisp:cons "NetworkSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uhd-device-settings))
      (common-lisp:list
       (common-lisp:cons "UhdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-input-device-thumbnail-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-input-device-thumbnail-request-"))
   (input-device-id (common-lisp:error ":input-device-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (accept (common-lisp:error ":accept is required") :type
    (common-lisp:or accept-header common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-input-device-thumbnail-request
                    'make-describe-input-device-thumbnail-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-thumbnail-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept))
      (common-lisp:cons "accept" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-thumbnail-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-thumbnail-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-input-device-thumbnail-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-input-device-thumbnail-response-"))
   (body common-lisp:nil :type
    (common-lisp:or input-device-thumbnail common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or content-type common-lisp:null))
   (content-length common-lisp:nil :type
    (common-lisp:or |__long| common-lisp:null))
   (etag common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (last-modified common-lisp:nil :type
    (common-lisp:or |__timestamp| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-input-device-thumbnail-response
                    'make-describe-input-device-thumbnail-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-thumbnail-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-length))
      (common-lisp:cons "Content-Length" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etag))
      (common-lisp:cons "ETag" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:cons "Last-Modified" aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-thumbnail-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-device-thumbnail-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'body)))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-input-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-input-request-"))
   (input-id (common-lisp:error ":input-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-input-request 'make-describe-input-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-input-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-input-response-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (attached-channels common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (destinations common-lisp:nil :type
    (common-lisp:or |__listOfInputDestination| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (input-class common-lisp:nil :type
    (common-lisp:or input-class common-lisp:null))
   (input-devices common-lisp:nil :type
    (common-lisp:or |__listOfInputDeviceSettings| common-lisp:null))
   (input-partner-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (input-source-type common-lisp:nil :type
    (common-lisp:or input-source-type common-lisp:null))
   (media-connect-flows common-lisp:nil :type
    (common-lisp:or |__listOfMediaConnectFlow| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (security-groups common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (sources common-lisp:nil :type
    (common-lisp:or |__listOfInputSource| common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or input-state common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or input-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-input-response 'make-describe-input-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attached-channels))
      (common-lisp:list
       (common-lisp:cons "AttachedChannels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-class))
      (common-lisp:list
       (common-lisp:cons "InputClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-devices))
      (common-lisp:list
       (common-lisp:cons "InputDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-partner-ids))
      (common-lisp:list
       (common-lisp:cons "InputPartnerIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-source-type))
      (common-lisp:list
       (common-lisp:cons "InputSourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-connect-flows))
      (common-lisp:list
       (common-lisp:cons "MediaConnectFlows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-input-security-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-input-security-group-request-"))
   (input-security-group-id
    (common-lisp:error ":input-security-group-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-input-security-group-request
                    'make-describe-input-security-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-security-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-security-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-security-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-input-security-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-input-security-group-response-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (inputs common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or input-security-group-state common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (whitelist-rules common-lisp:nil :type
    (common-lisp:or |__listOfInputWhitelistRule| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-input-security-group-response
                    'make-describe-input-security-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-security-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-security-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'whitelist-rules))
      (common-lisp:list
       (common-lisp:cons "WhitelistRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-input-security-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-multiplex-program-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-multiplex-program-request-"))
   (multiplex-id (common-lisp:error ":multiplex-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (program-name (common-lisp:error ":program-name is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-multiplex-program-request
                    'make-describe-multiplex-program-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-program-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-program-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-program-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-multiplex-program-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-multiplex-program-response-"))
   (channel-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (multiplex-program-settings common-lisp:nil :type
    (common-lisp:or multiplex-program-settings common-lisp:null))
   (packet-identifiers-map common-lisp:nil :type
    (common-lisp:or multiplex-program-packet-identifiers-map common-lisp:null))
   (pipeline-details common-lisp:nil :type
    (common-lisp:or |__listOfMultiplexProgramPipelineDetail| common-lisp:null))
   (program-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-multiplex-program-response
                    'make-describe-multiplex-program-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-program-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-program-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "ChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiplex-program-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgramSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'packet-identifiers-map))
      (common-lisp:list
       (common-lisp:cons "PacketIdentifiersMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-details))
      (common-lisp:list
       (common-lisp:cons "PipelineDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-name))
      (common-lisp:list
       (common-lisp:cons "ProgramName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-program-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-multiplex-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-multiplex-request-"))
   (multiplex-id (common-lisp:error ":multiplex-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-multiplex-request
                    'make-describe-multiplex-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-multiplex-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-multiplex-response-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (availability-zones common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (destinations common-lisp:nil :type
    (common-lisp:or |__listOfMultiplexOutputDestination| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (multiplex-settings common-lisp:nil :type
    (common-lisp:or multiplex-settings common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (pipelines-running-count common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (program-count common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or multiplex-state common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-multiplex-response
                    'make-describe-multiplex-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-count))
      (common-lisp:list
       (common-lisp:cons "ProgramCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-multiplex-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-offering-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-offering-request-"))
   (offering-id (common-lisp:error ":offering-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-offering-request
                    'make-describe-offering-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-offering-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-offering-response-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (currency-code common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (duration common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (duration-units common-lisp:nil :type
    (common-lisp:or offering-duration-units common-lisp:null))
   (fixed-price common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null))
   (offering-description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (offering-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (offering-type common-lisp:nil :type
    (common-lisp:or offering-type common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (resource-specification common-lisp:nil :type
    (common-lisp:or reservation-resource-specification common-lisp:null))
   (usage-price common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-offering-response
                    'make-describe-offering-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-units))
      (common-lisp:list
       (common-lisp:cons "DurationUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offering-description))
      (common-lisp:list
       (common-lisp:cons "OfferingDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-id))
      (common-lisp:list
       (common-lisp:cons "OfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "ResourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-offering-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-reservation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-reservation-request-"))
   (reservation-id (common-lisp:error ":reservation-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-reservation-request
                    'make-describe-reservation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-reservation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-reservation-response-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (count common-lisp:nil :type (common-lisp:or |__integer| common-lisp:null))
   (currency-code common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (duration common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (duration-units common-lisp:nil :type
    (common-lisp:or offering-duration-units common-lisp:null))
   (end common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (fixed-price common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (offering-description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (offering-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (offering-type common-lisp:nil :type
    (common-lisp:or offering-type common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (renewal-settings common-lisp:nil :type
    (common-lisp:or renewal-settings common-lisp:null))
   (reservation-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (resource-specification common-lisp:nil :type
    (common-lisp:or reservation-resource-specification common-lisp:null))
   (start common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or reservation-state common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (usage-price common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-reservation-response
                    'make-describe-reservation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-units))
      (common-lisp:list
       (common-lisp:cons "DurationUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offering-description))
      (common-lisp:list
       (common-lisp:cons "OfferingDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-id))
      (common-lisp:list
       (common-lisp:cons "OfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-settings))
      (common-lisp:list
       (common-lisp:cons "RenewalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-id))
      (common-lisp:list
       (common-lisp:cons "ReservationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "ResourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-reservation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-schedule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-schedule-request-"))
   (channel-id (common-lisp:error ":channel-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-schedule-request
                    'make-describe-schedule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-schedule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-schedule-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (schedule-actions common-lisp:nil :type
    (common-lisp:or |__listOfScheduleAction| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-schedule-response
                    'make-describe-schedule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-schedule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-actions))
      (common-lisp:list
       (common-lisp:cons "ScheduleActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-schedule-response))
   common-lisp:nil))
(common-lisp:deftype device-settings-sync-state () 'common-lisp:string)
(common-lisp:deftype device-update-status () 'common-lisp:string)
(common-lisp:deftype dolby-eprogram-selection () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (dolby-vision81settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-dolby-vision81settings-")))
 (common-lisp:export
  (common-lisp:list 'dolby-vision81settings 'make-dolby-vision81settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dolby-vision81settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dolby-vision81settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dolby-vision81settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dvb-nit-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-dvb-nit-settings-"))
   (network-id (common-lisp:error ":network-id is required") :type
    (common-lisp:or |__integerMin0Max65536| common-lisp:null))
   (network-name (common-lisp:error ":network-name is required") :type
    (common-lisp:or |__stringMin1Max256| common-lisp:null))
   (rep-interval common-lisp:nil :type
    (common-lisp:or |__integerMin25Max10000| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dvb-nit-settings 'make-dvb-nit-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dvb-nit-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dvb-nit-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-id))
      (common-lisp:list
       (common-lisp:cons "NetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-name))
      (common-lisp:list
       (common-lisp:cons "NetworkName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rep-interval))
      (common-lisp:list
       (common-lisp:cons "RepInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dvb-nit-settings))
   common-lisp:nil))
(common-lisp:deftype dvb-sdt-output-sdt () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (dvb-sdt-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-dvb-sdt-settings-"))
   (output-sdt common-lisp:nil :type
    (common-lisp:or dvb-sdt-output-sdt common-lisp:null))
   (rep-interval common-lisp:nil :type
    (common-lisp:or |__integerMin25Max2000| common-lisp:null))
   (service-name common-lisp:nil :type
    (common-lisp:or |__stringMin1Max256| common-lisp:null))
   (service-provider-name common-lisp:nil :type
    (common-lisp:or |__stringMin1Max256| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dvb-sdt-settings 'make-dvb-sdt-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dvb-sdt-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dvb-sdt-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-sdt))
      (common-lisp:list
       (common-lisp:cons "OutputSdt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rep-interval))
      (common-lisp:list
       (common-lisp:cons "RepInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-provider-name))
      (common-lisp:list
       (common-lisp:cons "ServiceProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dvb-sdt-settings))
   common-lisp:nil))
(common-lisp:deftype dvb-sub-destination-alignment () 'common-lisp:string)
(common-lisp:deftype dvb-sub-destination-background-color ()
  'common-lisp:string)
(common-lisp:deftype dvb-sub-destination-font-color () 'common-lisp:string)
(common-lisp:deftype dvb-sub-destination-outline-color () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (dvb-sub-destination-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-dvb-sub-destination-settings-"))
   (alignment common-lisp:nil :type
    (common-lisp:or dvb-sub-destination-alignment common-lisp:null))
   (background-color common-lisp:nil :type
    (common-lisp:or dvb-sub-destination-background-color common-lisp:null))
   (background-opacity common-lisp:nil :type
    (common-lisp:or |__integerMin0Max255| common-lisp:null))
   (font common-lisp:nil :type
    (common-lisp:or input-location common-lisp:null))
   (font-color common-lisp:nil :type
    (common-lisp:or dvb-sub-destination-font-color common-lisp:null))
   (font-opacity common-lisp:nil :type
    (common-lisp:or |__integerMin0Max255| common-lisp:null))
   (font-resolution common-lisp:nil :type
    (common-lisp:or |__integerMin96Max600| common-lisp:null))
   (font-size common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (outline-color common-lisp:nil :type
    (common-lisp:or dvb-sub-destination-outline-color common-lisp:null))
   (outline-size common-lisp:nil :type
    (common-lisp:or |__integerMin0Max10| common-lisp:null))
   (shadow-color common-lisp:nil :type
    (common-lisp:or dvb-sub-destination-shadow-color common-lisp:null))
   (shadow-opacity common-lisp:nil :type
    (common-lisp:or |__integerMin0Max255| common-lisp:null))
   (shadow-xoffset common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (shadow-yoffset common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (teletext-grid-control common-lisp:nil :type
    (common-lisp:or dvb-sub-destination-teletext-grid-control
                    common-lisp:null))
   (xposition common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (yposition common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dvb-sub-destination-settings
                    'make-dvb-sub-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dvb-sub-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dvb-sub-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alignment))
      (common-lisp:list
       (common-lisp:cons "Alignment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-color))
      (common-lisp:list
       (common-lisp:cons "BackgroundColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'background-opacity))
      (common-lisp:list
       (common-lisp:cons "BackgroundOpacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font))
      (common-lisp:list
       (common-lisp:cons "Font"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-color))
      (common-lisp:list
       (common-lisp:cons "FontColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-opacity))
      (common-lisp:list
       (common-lisp:cons "FontOpacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-resolution))
      (common-lisp:list
       (common-lisp:cons "FontResolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-size))
      (common-lisp:list
       (common-lisp:cons "FontSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outline-color))
      (common-lisp:list
       (common-lisp:cons "OutlineColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outline-size))
      (common-lisp:list
       (common-lisp:cons "OutlineSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-color))
      (common-lisp:list
       (common-lisp:cons "ShadowColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-opacity))
      (common-lisp:list
       (common-lisp:cons "ShadowOpacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-xoffset))
      (common-lisp:list
       (common-lisp:cons "ShadowXOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-yoffset))
      (common-lisp:list
       (common-lisp:cons "ShadowYOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'teletext-grid-control))
      (common-lisp:list
       (common-lisp:cons "TeletextGridControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'xposition))
      (common-lisp:list
       (common-lisp:cons "XPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'yposition))
      (common-lisp:list
       (common-lisp:cons "YPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dvb-sub-destination-settings))
   common-lisp:nil))
(common-lisp:deftype dvb-sub-destination-shadow-color () 'common-lisp:string)
(common-lisp:deftype dvb-sub-destination-teletext-grid-control ()
  'common-lisp:string)
(common-lisp:deftype dvb-sub-ocr-language () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (dvb-sub-source-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-dvb-sub-source-settings-"))
   (ocr-language common-lisp:nil :type
    (common-lisp:or dvb-sub-ocr-language common-lisp:null))
   (pid common-lisp:nil :type
    (common-lisp:or |__integerMin1| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dvb-sub-source-settings 'make-dvb-sub-source-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dvb-sub-source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dvb-sub-source-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ocr-language))
      (common-lisp:list
       (common-lisp:cons "OcrLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pid))
      (common-lisp:list
       (common-lisp:cons "Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dvb-sub-source-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dvb-tdt-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-dvb-tdt-settings-"))
   (rep-interval common-lisp:nil :type
    (common-lisp:or |__integerMin1000Max30000| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dvb-tdt-settings 'make-dvb-tdt-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dvb-tdt-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dvb-tdt-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rep-interval))
      (common-lisp:list
       (common-lisp:cons "RepInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dvb-tdt-settings))
   common-lisp:nil))
(common-lisp:deftype eac3atmos-coding-mode () 'common-lisp:string)
(common-lisp:deftype eac3atmos-drc-line () 'common-lisp:string)
(common-lisp:deftype eac3atmos-drc-rf () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (eac3atmos-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-eac3atmos-settings-"))
   (bitrate common-lisp:nil :type (common-lisp:or |__double| common-lisp:null))
   (coding-mode common-lisp:nil :type
    (common-lisp:or eac3atmos-coding-mode common-lisp:null))
   (dialnorm common-lisp:nil :type
    (common-lisp:or |__integerMin1Max31| common-lisp:null))
   (drc-line common-lisp:nil :type
    (common-lisp:or eac3atmos-drc-line common-lisp:null))
   (drc-rf common-lisp:nil :type
    (common-lisp:or eac3atmos-drc-rf common-lisp:null))
   (height-trim common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null))
   (surround-trim common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'eac3atmos-settings 'make-eac3atmos-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input eac3atmos-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input eac3atmos-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coding-mode))
      (common-lisp:list
       (common-lisp:cons "CodingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialnorm))
      (common-lisp:list
       (common-lisp:cons "Dialnorm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drc-line))
      (common-lisp:list
       (common-lisp:cons "DrcLine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drc-rf))
      (common-lisp:list
       (common-lisp:cons "DrcRf"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height-trim))
      (common-lisp:list
       (common-lisp:cons "HeightTrim"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'surround-trim))
      (common-lisp:list
       (common-lisp:cons "SurroundTrim"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input eac3atmos-settings))
   common-lisp:nil))
(common-lisp:deftype eac3attenuation-control () 'common-lisp:string)
(common-lisp:deftype eac3bitstream-mode () 'common-lisp:string)
(common-lisp:deftype eac3coding-mode () 'common-lisp:string)
(common-lisp:deftype eac3dc-filter () 'common-lisp:string)
(common-lisp:deftype eac3drc-line () 'common-lisp:string)
(common-lisp:deftype eac3drc-rf () 'common-lisp:string)
(common-lisp:deftype eac3lfe-control () 'common-lisp:string)
(common-lisp:deftype eac3lfe-filter () 'common-lisp:string)
(common-lisp:deftype eac3metadata-control () 'common-lisp:string)
(common-lisp:deftype eac3passthrough-control () 'common-lisp:string)
(common-lisp:deftype eac3phase-control () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (eac3settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-eac3settings-"))
   (attenuation-control common-lisp:nil :type
    (common-lisp:or eac3attenuation-control common-lisp:null))
   (bitrate common-lisp:nil :type (common-lisp:or |__double| common-lisp:null))
   (bitstream-mode common-lisp:nil :type
    (common-lisp:or eac3bitstream-mode common-lisp:null))
   (coding-mode common-lisp:nil :type
    (common-lisp:or eac3coding-mode common-lisp:null))
   (dc-filter common-lisp:nil :type
    (common-lisp:or eac3dc-filter common-lisp:null))
   (dialnorm common-lisp:nil :type
    (common-lisp:or |__integerMin1Max31| common-lisp:null))
   (drc-line common-lisp:nil :type
    (common-lisp:or eac3drc-line common-lisp:null))
   (drc-rf common-lisp:nil :type (common-lisp:or eac3drc-rf common-lisp:null))
   (lfe-control common-lisp:nil :type
    (common-lisp:or eac3lfe-control common-lisp:null))
   (lfe-filter common-lisp:nil :type
    (common-lisp:or eac3lfe-filter common-lisp:null))
   (lo-ro-center-mix-level common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null))
   (lo-ro-surround-mix-level common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null))
   (lt-rt-center-mix-level common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null))
   (lt-rt-surround-mix-level common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null))
   (metadata-control common-lisp:nil :type
    (common-lisp:or eac3metadata-control common-lisp:null))
   (passthrough-control common-lisp:nil :type
    (common-lisp:or eac3passthrough-control common-lisp:null))
   (phase-control common-lisp:nil :type
    (common-lisp:or eac3phase-control common-lisp:null))
   (stereo-downmix common-lisp:nil :type
    (common-lisp:or eac3stereo-downmix common-lisp:null))
   (surround-ex-mode common-lisp:nil :type
    (common-lisp:or eac3surround-ex-mode common-lisp:null))
   (surround-mode common-lisp:nil :type
    (common-lisp:or eac3surround-mode common-lisp:null)))
 (common-lisp:export (common-lisp:list 'eac3settings 'make-eac3settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input eac3settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input eac3settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attenuation-control))
      (common-lisp:list
       (common-lisp:cons "AttenuationControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitstream-mode))
      (common-lisp:list
       (common-lisp:cons "BitstreamMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coding-mode))
      (common-lisp:list
       (common-lisp:cons "CodingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dc-filter))
      (common-lisp:list
       (common-lisp:cons "DcFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialnorm))
      (common-lisp:list
       (common-lisp:cons "Dialnorm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drc-line))
      (common-lisp:list
       (common-lisp:cons "DrcLine"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'drc-rf))
      (common-lisp:list
       (common-lisp:cons "DrcRf"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lfe-control))
      (common-lisp:list
       (common-lisp:cons "LfeControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lfe-filter))
      (common-lisp:list
       (common-lisp:cons "LfeFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lo-ro-center-mix-level))
      (common-lisp:list
       (common-lisp:cons "LoRoCenterMixLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lo-ro-surround-mix-level))
      (common-lisp:list
       (common-lisp:cons "LoRoSurroundMixLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lt-rt-center-mix-level))
      (common-lisp:list
       (common-lisp:cons "LtRtCenterMixLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lt-rt-surround-mix-level))
      (common-lisp:list
       (common-lisp:cons "LtRtSurroundMixLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-control))
      (common-lisp:list
       (common-lisp:cons "MetadataControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'passthrough-control))
      (common-lisp:list
       (common-lisp:cons "PassthroughControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phase-control))
      (common-lisp:list
       (common-lisp:cons "PhaseControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stereo-downmix))
      (common-lisp:list
       (common-lisp:cons "StereoDownmix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'surround-ex-mode))
      (common-lisp:list
       (common-lisp:cons "SurroundExMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'surround-mode))
      (common-lisp:list
       (common-lisp:cons "SurroundMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input eac3settings))
   common-lisp:nil))
(common-lisp:deftype eac3stereo-downmix () 'common-lisp:string)
(common-lisp:deftype eac3surround-ex-mode () 'common-lisp:string)
(common-lisp:deftype eac3surround-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ebu-tt-ddestination-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-ebu-tt-ddestination-settings-"))
   (copyright-holder common-lisp:nil :type
    (common-lisp:or |__stringMax1000| common-lisp:null))
   (fill-line-gap common-lisp:nil :type
    (common-lisp:or ebu-tt-dfill-line-gap-control common-lisp:null))
   (font-family common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (style-control common-lisp:nil :type
    (common-lisp:or ebu-tt-ddestination-style-control common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ebu-tt-ddestination-settings
                    'make-ebu-tt-ddestination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ebu-tt-ddestination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ebu-tt-ddestination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'copyright-holder))
      (common-lisp:list
       (common-lisp:cons "CopyrightHolder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fill-line-gap))
      (common-lisp:list
       (common-lisp:cons "FillLineGap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-family))
      (common-lisp:list
       (common-lisp:cons "FontFamily"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style-control))
      (common-lisp:list
       (common-lisp:cons "StyleControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ebu-tt-ddestination-settings))
   common-lisp:nil))
(common-lisp:deftype ebu-tt-ddestination-style-control () 'common-lisp:string)
(common-lisp:deftype ebu-tt-dfill-line-gap-control () 'common-lisp:string)
(common-lisp:deftype embedded-convert608to708 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (embedded-destination-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-embedded-destination-settings-")))
 (common-lisp:export
  (common-lisp:list 'embedded-destination-settings
                    'make-embedded-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          embedded-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          embedded-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          embedded-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (embedded-plus-scte20destination-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-embedded-plus-scte20destination-settings-")))
 (common-lisp:export
  (common-lisp:list 'embedded-plus-scte20destination-settings
                    'make-embedded-plus-scte20destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          embedded-plus-scte20destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          embedded-plus-scte20destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          embedded-plus-scte20destination-settings))
   common-lisp:nil))
(common-lisp:deftype embedded-scte20detection () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (embedded-source-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-embedded-source-settings-"))
   (convert608to708 common-lisp:nil :type
    (common-lisp:or embedded-convert608to708 common-lisp:null))
   (scte20detection common-lisp:nil :type
    (common-lisp:or embedded-scte20detection common-lisp:null))
   (source608channel-number common-lisp:nil :type
    (common-lisp:or |__integerMin1Max4| common-lisp:null))
   (source608track-number common-lisp:nil :type
    (common-lisp:or |__integerMin1Max5| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'embedded-source-settings 'make-embedded-source-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          embedded-source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          embedded-source-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'convert608to708))
      (common-lisp:list
       (common-lisp:cons "Convert608To708"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte20detection))
      (common-lisp:list
       (common-lisp:cons "Scte20Detection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source608channel-number))
      (common-lisp:list
       (common-lisp:cons "Source608ChannelNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source608track-number))
      (common-lisp:list
       (common-lisp:cons "Source608TrackNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          embedded-source-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (empty (:copier common-lisp:nil) (:conc-name "struct-shape-empty-")))
 (common-lisp:export (common-lisp:list 'empty 'make-empty))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input empty))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input empty))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input empty))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (encoder-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-encoder-settings-"))
   (audio-descriptions (common-lisp:error ":audio-descriptions is required")
    :type (common-lisp:or |__listOfAudioDescription| common-lisp:null))
   (avail-blanking common-lisp:nil :type
    (common-lisp:or avail-blanking common-lisp:null))
   (avail-configuration common-lisp:nil :type
    (common-lisp:or avail-configuration common-lisp:null))
   (blackout-slate common-lisp:nil :type
    (common-lisp:or blackout-slate common-lisp:null))
   (caption-descriptions common-lisp:nil :type
    (common-lisp:or |__listOfCaptionDescription| common-lisp:null))
   (feature-activations common-lisp:nil :type
    (common-lisp:or feature-activations common-lisp:null))
   (global-configuration common-lisp:nil :type
    (common-lisp:or global-configuration common-lisp:null))
   (motion-graphics-configuration common-lisp:nil :type
    (common-lisp:or motion-graphics-configuration common-lisp:null))
   (nielsen-configuration common-lisp:nil :type
    (common-lisp:or nielsen-configuration common-lisp:null))
   (output-groups (common-lisp:error ":output-groups is required") :type
    (common-lisp:or |__listOfOutputGroup| common-lisp:null))
   (timecode-config (common-lisp:error ":timecode-config is required") :type
    (common-lisp:or timecode-config common-lisp:null))
   (video-descriptions (common-lisp:error ":video-descriptions is required")
    :type (common-lisp:or |__listOfVideoDescription| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'encoder-settings 'make-encoder-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encoder-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encoder-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-descriptions))
      (common-lisp:list
       (common-lisp:cons "AudioDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'avail-blanking))
      (common-lisp:list
       (common-lisp:cons "AvailBlanking"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'avail-configuration))
      (common-lisp:list
       (common-lisp:cons "AvailConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blackout-slate))
      (common-lisp:list
       (common-lisp:cons "BlackoutSlate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'caption-descriptions))
      (common-lisp:list
       (common-lisp:cons "CaptionDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-activations))
      (common-lisp:list
       (common-lisp:cons "FeatureActivations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-configuration))
      (common-lisp:list
       (common-lisp:cons "GlobalConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'motion-graphics-configuration))
      (common-lisp:list
       (common-lisp:cons "MotionGraphicsConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nielsen-configuration))
      (common-lisp:list
       (common-lisp:cons "NielsenConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-groups))
      (common-lisp:list
       (common-lisp:cons "OutputGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timecode-config))
      (common-lisp:list
       (common-lisp:cons "TimecodeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-descriptions))
      (common-lisp:list
       (common-lisp:cons "VideoDescriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encoder-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (esam (:copier common-lisp:nil) (:conc-name "struct-shape-esam-"))
   (acquisition-point-id
    (common-lisp:error ":acquisition-point-id is required") :type
    (common-lisp:or |__stringMax256| common-lisp:null))
   (ad-avail-offset common-lisp:nil :type
    (common-lisp:or |__integerMinNegative1000Max1000| common-lisp:null))
   (password-param common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (pois-endpoint (common-lisp:error ":pois-endpoint is required") :type
    (common-lisp:or |__stringMax2048| common-lisp:null))
   (username common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (zone-identity common-lisp:nil :type
    (common-lisp:or |__stringMax256| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'esam 'make-esam))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input esam))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input esam))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'acquisition-point-id))
      (common-lisp:list
       (common-lisp:cons "AcquisitionPointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ad-avail-offset))
      (common-lisp:list
       (common-lisp:cons "AdAvailOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-param))
      (common-lisp:list
       (common-lisp:cons "PasswordParam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pois-endpoint))
      (common-lisp:list
       (common-lisp:cons "PoisEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'zone-identity))
      (common-lisp:list
       (common-lisp:cons "ZoneIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input esam))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (failover-condition (:copier common-lisp:nil)
      (:conc-name "struct-shape-failover-condition-"))
   (failover-condition-settings common-lisp:nil :type
    (common-lisp:or failover-condition-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'failover-condition 'make-failover-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failover-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failover-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failover-condition-settings))
      (common-lisp:list
       (common-lisp:cons "FailoverConditionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failover-condition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (failover-condition-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-failover-condition-settings-"))
   (audio-silence-settings common-lisp:nil :type
    (common-lisp:or audio-silence-failover-settings common-lisp:null))
   (input-loss-settings common-lisp:nil :type
    (common-lisp:or input-loss-failover-settings common-lisp:null))
   (video-black-settings common-lisp:nil :type
    (common-lisp:or video-black-failover-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'failover-condition-settings
                    'make-failover-condition-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          failover-condition-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          failover-condition-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-silence-settings))
      (common-lisp:list
       (common-lisp:cons "AudioSilenceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-loss-settings))
      (common-lisp:list
       (common-lisp:cons "InputLossSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'video-black-settings))
      (common-lisp:list
       (common-lisp:cons "VideoBlackSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          failover-condition-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (feature-activations (:copier common-lisp:nil)
      (:conc-name "struct-shape-feature-activations-"))
   (input-prepare-schedule-actions common-lisp:nil :type
    (common-lisp:or feature-activations-input-prepare-schedule-actions
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'feature-activations 'make-feature-activations))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input feature-activations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input feature-activations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-prepare-schedule-actions))
      (common-lisp:list
       (common-lisp:cons "InputPrepareScheduleActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input feature-activations))
   common-lisp:nil))
(common-lisp:deftype feature-activations-input-prepare-schedule-actions ()
  'common-lisp:string)
(common-lisp:deftype fec-output-include-fec () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (fec-output-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-fec-output-settings-"))
   (column-depth common-lisp:nil :type
    (common-lisp:or |__integerMin4Max20| common-lisp:null))
   (include-fec common-lisp:nil :type
    (common-lisp:or fec-output-include-fec common-lisp:null))
   (row-length common-lisp:nil :type
    (common-lisp:or |__integerMin1Max20| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'fec-output-settings 'make-fec-output-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fec-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fec-output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-depth))
      (common-lisp:list
       (common-lisp:cons "ColumnDepth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-fec))
      (common-lisp:list
       (common-lisp:cons "IncludeFec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'row-length))
      (common-lisp:list
       (common-lisp:cons "RowLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fec-output-settings))
   common-lisp:nil))
(common-lisp:deftype fixed-afd () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (fixed-mode-schedule-action-start-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-fixed-mode-schedule-action-start-settings-"))
   (time (common-lisp:error ":time is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'fixed-mode-schedule-action-start-settings
                    'make-fixed-mode-schedule-action-start-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          fixed-mode-schedule-action-start-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          fixed-mode-schedule-action-start-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time))
      (common-lisp:list
       (common-lisp:cons "Time"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          fixed-mode-schedule-action-start-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (fmp4hls-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-fmp4hls-settings-"))
   (audio-rendition-sets common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (nielsen-id3behavior common-lisp:nil :type
    (common-lisp:or fmp4nielsen-id3behavior common-lisp:null))
   (timed-metadata-behavior common-lisp:nil :type
    (common-lisp:or fmp4timed-metadata-behavior common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'fmp4hls-settings 'make-fmp4hls-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fmp4hls-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fmp4hls-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-rendition-sets))
      (common-lisp:list
       (common-lisp:cons "AudioRenditionSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nielsen-id3behavior))
      (common-lisp:list
       (common-lisp:cons "NielsenId3Behavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-behavior))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fmp4hls-settings))
   common-lisp:nil))
(common-lisp:deftype fmp4nielsen-id3behavior () 'common-lisp:string)
(common-lisp:deftype fmp4timed-metadata-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (follow-mode-schedule-action-start-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-follow-mode-schedule-action-start-settings-"))
   (follow-point (common-lisp:error ":follow-point is required") :type
    (common-lisp:or follow-point common-lisp:null))
   (reference-action-name
    (common-lisp:error ":reference-action-name is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'follow-mode-schedule-action-start-settings
                    'make-follow-mode-schedule-action-start-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          follow-mode-schedule-action-start-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          follow-mode-schedule-action-start-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'follow-point))
      (common-lisp:list
       (common-lisp:cons "FollowPoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'reference-action-name))
      (common-lisp:list
       (common-lisp:cons "ReferenceActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          follow-mode-schedule-action-start-settings))
   common-lisp:nil))
(common-lisp:deftype follow-point () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition forbidden-exception
     (medialive-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       forbidden-exception-message)))
 (common-lisp:export
  (common-lisp:list 'forbidden-exception 'forbidden-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (frame-capture-cdn-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-frame-capture-cdn-settings-"))
   (frame-capture-s3settings common-lisp:nil :type
    (common-lisp:or frame-capture-s3settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'frame-capture-cdn-settings
                    'make-frame-capture-cdn-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-cdn-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-cdn-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'frame-capture-s3settings))
      (common-lisp:list
       (common-lisp:cons "FrameCaptureS3Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-cdn-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (frame-capture-group-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-frame-capture-group-settings-"))
   (destination (common-lisp:error ":destination is required") :type
    (common-lisp:or output-location-ref common-lisp:null))
   (frame-capture-cdn-settings common-lisp:nil :type
    (common-lisp:or frame-capture-cdn-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'frame-capture-group-settings
                    'make-frame-capture-group-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'frame-capture-cdn-settings))
      (common-lisp:list
       (common-lisp:cons "FrameCaptureCdnSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-group-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (frame-capture-hls-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-frame-capture-hls-settings-")))
 (common-lisp:export
  (common-lisp:list 'frame-capture-hls-settings
                    'make-frame-capture-hls-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-hls-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-hls-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-hls-settings))
   common-lisp:nil))
(common-lisp:deftype frame-capture-interval-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (frame-capture-output-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-frame-capture-output-settings-"))
   (name-modifier common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'frame-capture-output-settings
                    'make-frame-capture-output-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-modifier))
      (common-lisp:list
       (common-lisp:cons "NameModifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-output-settings))
   common-lisp:nil))
(common-lisp:deftype frame-capture-s3log-uploads () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (frame-capture-s3settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-frame-capture-s3settings-"))
   (canned-acl common-lisp:nil :type
    (common-lisp:or s3canned-acl common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'frame-capture-s3settings 'make-frame-capture-s3settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-s3settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-s3settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canned-acl))
      (common-lisp:list
       (common-lisp:cons "CannedAcl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-s3settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (frame-capture-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-frame-capture-settings-"))
   (capture-interval common-lisp:nil :type
    (common-lisp:or |__integerMin1Max3600000| common-lisp:null))
   (capture-interval-units common-lisp:nil :type
    (common-lisp:or frame-capture-interval-unit common-lisp:null))
   (timecode-burnin-settings common-lisp:nil :type
    (common-lisp:or timecode-burnin-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'frame-capture-settings 'make-frame-capture-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capture-interval))
      (common-lisp:list
       (common-lisp:cons "CaptureInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capture-interval-units))
      (common-lisp:list
       (common-lisp:cons "CaptureIntervalUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timecode-burnin-settings))
      (common-lisp:list
       (common-lisp:cons "TimecodeBurninSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          frame-capture-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition gateway-timeout-exception
     (medialive-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       gateway-timeout-exception-message)))
 (common-lisp:export
  (common-lisp:list 'gateway-timeout-exception
                    'gateway-timeout-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (global-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-global-configuration-"))
   (initial-audio-gain common-lisp:nil :type
    (common-lisp:or |__integerMinNegative60Max60| common-lisp:null))
   (input-end-action common-lisp:nil :type
    (common-lisp:or global-configuration-input-end-action common-lisp:null))
   (input-loss-behavior common-lisp:nil :type
    (common-lisp:or input-loss-behavior common-lisp:null))
   (output-locking-mode common-lisp:nil :type
    (common-lisp:or global-configuration-output-locking-mode common-lisp:null))
   (output-timing-source common-lisp:nil :type
    (common-lisp:or global-configuration-output-timing-source
                    common-lisp:null))
   (support-low-framerate-inputs common-lisp:nil :type
    (common-lisp:or global-configuration-low-framerate-inputs
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'global-configuration 'make-global-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input global-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input global-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'initial-audio-gain))
      (common-lisp:list
       (common-lisp:cons "InitialAudioGain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-end-action))
      (common-lisp:list
       (common-lisp:cons "InputEndAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-loss-behavior))
      (common-lisp:list
       (common-lisp:cons "InputLossBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-locking-mode))
      (common-lisp:list
       (common-lisp:cons "OutputLockingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-timing-source))
      (common-lisp:list
       (common-lisp:cons "OutputTimingSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'support-low-framerate-inputs))
      (common-lisp:list
       (common-lisp:cons "SupportLowFramerateInputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input global-configuration))
   common-lisp:nil))
(common-lisp:deftype global-configuration-input-end-action ()
  'common-lisp:string)
(common-lisp:deftype global-configuration-low-framerate-inputs ()
  'common-lisp:string)
(common-lisp:deftype global-configuration-output-locking-mode ()
  'common-lisp:string)
(common-lisp:deftype global-configuration-output-timing-source ()
  'common-lisp:string)
(common-lisp:deftype h264adaptive-quantization () 'common-lisp:string)
(common-lisp:deftype h264color-metadata () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (h264color-space-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-h264color-space-settings-"))
   (color-space-passthrough-settings common-lisp:nil :type
    (common-lisp:or color-space-passthrough-settings common-lisp:null))
   (rec601settings common-lisp:nil :type
    (common-lisp:or rec601settings common-lisp:null))
   (rec709settings common-lisp:nil :type
    (common-lisp:or rec709settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'h264color-space-settings 'make-h264color-space-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          h264color-space-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          h264color-space-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'color-space-passthrough-settings))
      (common-lisp:list
       (common-lisp:cons "ColorSpacePassthroughSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rec601settings))
      (common-lisp:list
       (common-lisp:cons "Rec601Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rec709settings))
      (common-lisp:list
       (common-lisp:cons "Rec709Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          h264color-space-settings))
   common-lisp:nil))
(common-lisp:deftype h264entropy-encoding () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (h264filter-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-h264filter-settings-"))
   (temporal-filter-settings common-lisp:nil :type
    (common-lisp:or temporal-filter-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'h264filter-settings 'make-h264filter-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input h264filter-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input h264filter-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'temporal-filter-settings))
      (common-lisp:list
       (common-lisp:cons "TemporalFilterSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input h264filter-settings))
   common-lisp:nil))
(common-lisp:deftype h264flicker-aq () 'common-lisp:string)
(common-lisp:deftype h264force-field-pictures () 'common-lisp:string)
(common-lisp:deftype h264framerate-control () 'common-lisp:string)
(common-lisp:deftype h264gop-breference () 'common-lisp:string)
(common-lisp:deftype h264gop-size-units () 'common-lisp:string)
(common-lisp:deftype h264level () 'common-lisp:string)
(common-lisp:deftype h264look-ahead-rate-control () 'common-lisp:string)
(common-lisp:deftype h264par-control () 'common-lisp:string)
(common-lisp:deftype h264profile () 'common-lisp:string)
(common-lisp:deftype h264quality-level () 'common-lisp:string)
(common-lisp:deftype h264rate-control-mode () 'common-lisp:string)
(common-lisp:deftype h264scan-type () 'common-lisp:string)
(common-lisp:deftype h264scene-change-detect () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (h264settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-h264settings-"))
   (adaptive-quantization common-lisp:nil :type
    (common-lisp:or h264adaptive-quantization common-lisp:null))
   (afd-signaling common-lisp:nil :type
    (common-lisp:or afd-signaling common-lisp:null))
   (bitrate common-lisp:nil :type
    (common-lisp:or |__integerMin1000| common-lisp:null))
   (buf-fill-pct common-lisp:nil :type
    (common-lisp:or |__integerMin0Max100| common-lisp:null))
   (buf-size common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (color-metadata common-lisp:nil :type
    (common-lisp:or h264color-metadata common-lisp:null))
   (color-space-settings common-lisp:nil :type
    (common-lisp:or h264color-space-settings common-lisp:null))
   (entropy-encoding common-lisp:nil :type
    (common-lisp:or h264entropy-encoding common-lisp:null))
   (filter-settings common-lisp:nil :type
    (common-lisp:or h264filter-settings common-lisp:null))
   (fixed-afd common-lisp:nil :type
    (common-lisp:or fixed-afd common-lisp:null))
   (flicker-aq common-lisp:nil :type
    (common-lisp:or h264flicker-aq common-lisp:null))
   (force-field-pictures common-lisp:nil :type
    (common-lisp:or h264force-field-pictures common-lisp:null))
   (framerate-control common-lisp:nil :type
    (common-lisp:or h264framerate-control common-lisp:null))
   (framerate-denominator common-lisp:nil :type
    (common-lisp:or |__integerMin1| common-lisp:null))
   (framerate-numerator common-lisp:nil :type
    (common-lisp:or |__integerMin1| common-lisp:null))
   (gop-breference common-lisp:nil :type
    (common-lisp:or h264gop-breference common-lisp:null))
   (gop-closed-cadence common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (gop-num-bframes common-lisp:nil :type
    (common-lisp:or |__integerMin0Max7| common-lisp:null))
   (gop-size common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null))
   (gop-size-units common-lisp:nil :type
    (common-lisp:or h264gop-size-units common-lisp:null))
   (level common-lisp:nil :type (common-lisp:or h264level common-lisp:null))
   (look-ahead-rate-control common-lisp:nil :type
    (common-lisp:or h264look-ahead-rate-control common-lisp:null))
   (max-bitrate common-lisp:nil :type
    (common-lisp:or |__integerMin1000| common-lisp:null))
   (min-iinterval common-lisp:nil :type
    (common-lisp:or |__integerMin0Max30| common-lisp:null))
   (num-ref-frames common-lisp:nil :type
    (common-lisp:or |__integerMin1Max6| common-lisp:null))
   (par-control common-lisp:nil :type
    (common-lisp:or h264par-control common-lisp:null))
   (par-denominator common-lisp:nil :type
    (common-lisp:or |__integerMin1| common-lisp:null))
   (par-numerator common-lisp:nil :type
    (common-lisp:or |__integerMin1| common-lisp:null))
   (profile common-lisp:nil :type
    (common-lisp:or h264profile common-lisp:null))
   (quality-level common-lisp:nil :type
    (common-lisp:or h264quality-level common-lisp:null))
   (qvbr-quality-level common-lisp:nil :type
    (common-lisp:or |__integerMin1Max10| common-lisp:null))
   (rate-control-mode common-lisp:nil :type
    (common-lisp:or h264rate-control-mode common-lisp:null))
   (scan-type common-lisp:nil :type
    (common-lisp:or h264scan-type common-lisp:null))
   (scene-change-detect common-lisp:nil :type
    (common-lisp:or h264scene-change-detect common-lisp:null))
   (slices common-lisp:nil :type
    (common-lisp:or |__integerMin1Max32| common-lisp:null))
   (softness common-lisp:nil :type
    (common-lisp:or |__integerMin0Max128| common-lisp:null))
   (spatial-aq common-lisp:nil :type
    (common-lisp:or h264spatial-aq common-lisp:null))
   (subgop-length common-lisp:nil :type
    (common-lisp:or h264sub-gop-length common-lisp:null))
   (syntax common-lisp:nil :type (common-lisp:or h264syntax common-lisp:null))
   (temporal-aq common-lisp:nil :type
    (common-lisp:or h264temporal-aq common-lisp:null))
   (timecode-insertion common-lisp:nil :type
    (common-lisp:or h264timecode-insertion-behavior common-lisp:null))
   (timecode-burnin-settings common-lisp:nil :type
    (common-lisp:or timecode-burnin-settings common-lisp:null)))
 (common-lisp:export (common-lisp:list 'h264settings 'make-h264settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input h264settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input h264settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'adaptive-quantization))
      (common-lisp:list
       (common-lisp:cons "AdaptiveQuantization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'afd-signaling))
      (common-lisp:list
       (common-lisp:cons "AfdSignaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buf-fill-pct))
      (common-lisp:list
       (common-lisp:cons "BufFillPct"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buf-size))
      (common-lisp:list
       (common-lisp:cons "BufSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-metadata))
      (common-lisp:list
       (common-lisp:cons "ColorMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'color-space-settings))
      (common-lisp:list
       (common-lisp:cons "ColorSpaceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entropy-encoding))
      (common-lisp:list
       (common-lisp:cons "EntropyEncoding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-settings))
      (common-lisp:list
       (common-lisp:cons "FilterSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-afd))
      (common-lisp:list
       (common-lisp:cons "FixedAfd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flicker-aq))
      (common-lisp:list
       (common-lisp:cons "FlickerAq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'force-field-pictures))
      (common-lisp:list
       (common-lisp:cons "ForceFieldPictures"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-control))
      (common-lisp:list
       (common-lisp:cons "FramerateControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-denominator))
      (common-lisp:list
       (common-lisp:cons "FramerateDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-numerator))
      (common-lisp:list
       (common-lisp:cons "FramerateNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-breference))
      (common-lisp:list
       (common-lisp:cons "GopBReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-closed-cadence))
      (common-lisp:list
       (common-lisp:cons "GopClosedCadence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-num-bframes))
      (common-lisp:list
       (common-lisp:cons "GopNumBFrames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-size))
      (common-lisp:list
       (common-lisp:cons "GopSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-size-units))
      (common-lisp:list
       (common-lisp:cons "GopSizeUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level))
      (common-lisp:list
       (common-lisp:cons "Level"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'look-ahead-rate-control))
      (common-lisp:list
       (common-lisp:cons "LookAheadRateControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-iinterval))
      (common-lisp:list
       (common-lisp:cons "MinIInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-ref-frames))
      (common-lisp:list
       (common-lisp:cons "NumRefFrames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-control))
      (common-lisp:list
       (common-lisp:cons "ParControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-denominator))
      (common-lisp:list
       (common-lisp:cons "ParDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-numerator))
      (common-lisp:list
       (common-lisp:cons "ParNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile))
      (common-lisp:list
       (common-lisp:cons "Profile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quality-level))
      (common-lisp:list
       (common-lisp:cons "QualityLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qvbr-quality-level))
      (common-lisp:list
       (common-lisp:cons "QvbrQualityLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-control-mode))
      (common-lisp:list
       (common-lisp:cons "RateControlMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-type))
      (common-lisp:list
       (common-lisp:cons "ScanType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scene-change-detect))
      (common-lisp:list
       (common-lisp:cons "SceneChangeDetect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slices))
      (common-lisp:list
       (common-lisp:cons "Slices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'softness))
      (common-lisp:list
       (common-lisp:cons "Softness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spatial-aq))
      (common-lisp:list
       (common-lisp:cons "SpatialAq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subgop-length))
      (common-lisp:list
       (common-lisp:cons "SubgopLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'syntax))
      (common-lisp:list
       (common-lisp:cons "Syntax"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'temporal-aq))
      (common-lisp:list
       (common-lisp:cons "TemporalAq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timecode-insertion))
      (common-lisp:list
       (common-lisp:cons "TimecodeInsertion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timecode-burnin-settings))
      (common-lisp:list
       (common-lisp:cons "TimecodeBurninSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input h264settings))
   common-lisp:nil))
(common-lisp:deftype h264spatial-aq () 'common-lisp:string)
(common-lisp:deftype h264sub-gop-length () 'common-lisp:string)
(common-lisp:deftype h264syntax () 'common-lisp:string)
(common-lisp:deftype h264temporal-aq () 'common-lisp:string)
(common-lisp:deftype h264timecode-insertion-behavior () 'common-lisp:string)
(common-lisp:deftype h265adaptive-quantization () 'common-lisp:string)
(common-lisp:deftype h265alternative-transfer-function () 'common-lisp:string)
(common-lisp:deftype h265color-metadata () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (h265color-space-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-h265color-space-settings-"))
   (color-space-passthrough-settings common-lisp:nil :type
    (common-lisp:or color-space-passthrough-settings common-lisp:null))
   (dolby-vision81settings common-lisp:nil :type
    (common-lisp:or dolby-vision81settings common-lisp:null))
   (hdr10settings common-lisp:nil :type
    (common-lisp:or hdr10settings common-lisp:null))
   (rec601settings common-lisp:nil :type
    (common-lisp:or rec601settings common-lisp:null))
   (rec709settings common-lisp:nil :type
    (common-lisp:or rec709settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'h265color-space-settings 'make-h265color-space-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          h265color-space-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          h265color-space-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'color-space-passthrough-settings))
      (common-lisp:list
       (common-lisp:cons "ColorSpacePassthroughSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dolby-vision81settings))
      (common-lisp:list
       (common-lisp:cons "DolbyVision81Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hdr10settings))
      (common-lisp:list
       (common-lisp:cons "Hdr10Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rec601settings))
      (common-lisp:list
       (common-lisp:cons "Rec601Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rec709settings))
      (common-lisp:list
       (common-lisp:cons "Rec709Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          h265color-space-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (h265filter-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-h265filter-settings-"))
   (temporal-filter-settings common-lisp:nil :type
    (common-lisp:or temporal-filter-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'h265filter-settings 'make-h265filter-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input h265filter-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input h265filter-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'temporal-filter-settings))
      (common-lisp:list
       (common-lisp:cons "TemporalFilterSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input h265filter-settings))
   common-lisp:nil))
(common-lisp:deftype h265flicker-aq () 'common-lisp:string)
(common-lisp:deftype h265gop-size-units () 'common-lisp:string)
(common-lisp:deftype h265level () 'common-lisp:string)
(common-lisp:deftype h265look-ahead-rate-control () 'common-lisp:string)
(common-lisp:deftype h265profile () 'common-lisp:string)
(common-lisp:deftype h265rate-control-mode () 'common-lisp:string)
(common-lisp:deftype h265scan-type () 'common-lisp:string)
(common-lisp:deftype h265scene-change-detect () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (h265settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-h265settings-"))
   (adaptive-quantization common-lisp:nil :type
    (common-lisp:or h265adaptive-quantization common-lisp:null))
   (afd-signaling common-lisp:nil :type
    (common-lisp:or afd-signaling common-lisp:null))
   (alternative-transfer-function common-lisp:nil :type
    (common-lisp:or h265alternative-transfer-function common-lisp:null))
   (bitrate common-lisp:nil :type
    (common-lisp:or |__integerMin100000Max40000000| common-lisp:null))
   (buf-size common-lisp:nil :type
    (common-lisp:or |__integerMin100000Max80000000| common-lisp:null))
   (color-metadata common-lisp:nil :type
    (common-lisp:or h265color-metadata common-lisp:null))
   (color-space-settings common-lisp:nil :type
    (common-lisp:or h265color-space-settings common-lisp:null))
   (filter-settings common-lisp:nil :type
    (common-lisp:or h265filter-settings common-lisp:null))
   (fixed-afd common-lisp:nil :type
    (common-lisp:or fixed-afd common-lisp:null))
   (flicker-aq common-lisp:nil :type
    (common-lisp:or h265flicker-aq common-lisp:null))
   (framerate-denominator
    (common-lisp:error ":framerate-denominator is required") :type
    (common-lisp:or |__integerMin1Max3003| common-lisp:null))
   (framerate-numerator (common-lisp:error ":framerate-numerator is required")
    :type (common-lisp:or |__integerMin1| common-lisp:null))
   (gop-closed-cadence common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (gop-size common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null))
   (gop-size-units common-lisp:nil :type
    (common-lisp:or h265gop-size-units common-lisp:null))
   (level common-lisp:nil :type (common-lisp:or h265level common-lisp:null))
   (look-ahead-rate-control common-lisp:nil :type
    (common-lisp:or h265look-ahead-rate-control common-lisp:null))
   (max-bitrate common-lisp:nil :type
    (common-lisp:or |__integerMin100000Max40000000| common-lisp:null))
   (min-iinterval common-lisp:nil :type
    (common-lisp:or |__integerMin0Max30| common-lisp:null))
   (par-denominator common-lisp:nil :type
    (common-lisp:or |__integerMin1| common-lisp:null))
   (par-numerator common-lisp:nil :type
    (common-lisp:or |__integerMin1| common-lisp:null))
   (profile common-lisp:nil :type
    (common-lisp:or h265profile common-lisp:null))
   (qvbr-quality-level common-lisp:nil :type
    (common-lisp:or |__integerMin1Max10| common-lisp:null))
   (rate-control-mode common-lisp:nil :type
    (common-lisp:or h265rate-control-mode common-lisp:null))
   (scan-type common-lisp:nil :type
    (common-lisp:or h265scan-type common-lisp:null))
   (scene-change-detect common-lisp:nil :type
    (common-lisp:or h265scene-change-detect common-lisp:null))
   (slices common-lisp:nil :type
    (common-lisp:or |__integerMin1Max16| common-lisp:null))
   (tier common-lisp:nil :type (common-lisp:or h265tier common-lisp:null))
   (timecode-insertion common-lisp:nil :type
    (common-lisp:or h265timecode-insertion-behavior common-lisp:null))
   (timecode-burnin-settings common-lisp:nil :type
    (common-lisp:or timecode-burnin-settings common-lisp:null)))
 (common-lisp:export (common-lisp:list 'h265settings 'make-h265settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input h265settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input h265settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'adaptive-quantization))
      (common-lisp:list
       (common-lisp:cons "AdaptiveQuantization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'afd-signaling))
      (common-lisp:list
       (common-lisp:cons "AfdSignaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'alternative-transfer-function))
      (common-lisp:list
       (common-lisp:cons "AlternativeTransferFunction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buf-size))
      (common-lisp:list
       (common-lisp:cons "BufSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-metadata))
      (common-lisp:list
       (common-lisp:cons "ColorMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'color-space-settings))
      (common-lisp:list
       (common-lisp:cons "ColorSpaceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-settings))
      (common-lisp:list
       (common-lisp:cons "FilterSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-afd))
      (common-lisp:list
       (common-lisp:cons "FixedAfd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flicker-aq))
      (common-lisp:list
       (common-lisp:cons "FlickerAq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-denominator))
      (common-lisp:list
       (common-lisp:cons "FramerateDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-numerator))
      (common-lisp:list
       (common-lisp:cons "FramerateNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-closed-cadence))
      (common-lisp:list
       (common-lisp:cons "GopClosedCadence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-size))
      (common-lisp:list
       (common-lisp:cons "GopSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-size-units))
      (common-lisp:list
       (common-lisp:cons "GopSizeUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level))
      (common-lisp:list
       (common-lisp:cons "Level"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'look-ahead-rate-control))
      (common-lisp:list
       (common-lisp:cons "LookAheadRateControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-iinterval))
      (common-lisp:list
       (common-lisp:cons "MinIInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-denominator))
      (common-lisp:list
       (common-lisp:cons "ParDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'par-numerator))
      (common-lisp:list
       (common-lisp:cons "ParNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile))
      (common-lisp:list
       (common-lisp:cons "Profile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qvbr-quality-level))
      (common-lisp:list
       (common-lisp:cons "QvbrQualityLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-control-mode))
      (common-lisp:list
       (common-lisp:cons "RateControlMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-type))
      (common-lisp:list
       (common-lisp:cons "ScanType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scene-change-detect))
      (common-lisp:list
       (common-lisp:cons "SceneChangeDetect"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slices))
      (common-lisp:list
       (common-lisp:cons "Slices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tier))
      (common-lisp:list
       (common-lisp:cons "Tier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timecode-insertion))
      (common-lisp:list
       (common-lisp:cons "TimecodeInsertion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timecode-burnin-settings))
      (common-lisp:list
       (common-lisp:cons "TimecodeBurninSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input h265settings))
   common-lisp:nil))
(common-lisp:deftype h265tier () 'common-lisp:string)
(common-lisp:deftype h265timecode-insertion-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (hdr10settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-hdr10settings-"))
   (max-cll common-lisp:nil :type
    (common-lisp:or |__integerMin0Max32768| common-lisp:null))
   (max-fall common-lisp:nil :type
    (common-lisp:or |__integerMin0Max32768| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'hdr10settings 'make-hdr10settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hdr10settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hdr10settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-cll))
      (common-lisp:list
       (common-lisp:cons "MaxCll"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-fall))
      (common-lisp:list
       (common-lisp:cons "MaxFall"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hdr10settings))
   common-lisp:nil))
(common-lisp:deftype hls-ad-markers () 'common-lisp:string)
(common-lisp:deftype hls-akamai-http-transfer-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (hls-akamai-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-hls-akamai-settings-"))
   (connection-retry-interval common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (filecache-duration common-lisp:nil :type
    (common-lisp:or |__integerMin0Max600| common-lisp:null))
   (http-transfer-mode common-lisp:nil :type
    (common-lisp:or hls-akamai-http-transfer-mode common-lisp:null))
   (num-retries common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (restart-delay common-lisp:nil :type
    (common-lisp:or |__integerMin0Max15| common-lisp:null))
   (salt common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (token common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hls-akamai-settings 'make-hls-akamai-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hls-akamai-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hls-akamai-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-retry-interval))
      (common-lisp:list
       (common-lisp:cons "ConnectionRetryInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filecache-duration))
      (common-lisp:list
       (common-lisp:cons "FilecacheDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-transfer-mode))
      (common-lisp:list
       (common-lisp:cons "HttpTransferMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-retries))
      (common-lisp:list
       (common-lisp:cons "NumRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restart-delay))
      (common-lisp:list
       (common-lisp:cons "RestartDelay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'salt))
      (common-lisp:list
       (common-lisp:cons "Salt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token))
      (common-lisp:list
       (common-lisp:cons "Token"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hls-akamai-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (hls-basic-put-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-hls-basic-put-settings-"))
   (connection-retry-interval common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (filecache-duration common-lisp:nil :type
    (common-lisp:or |__integerMin0Max600| common-lisp:null))
   (num-retries common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (restart-delay common-lisp:nil :type
    (common-lisp:or |__integerMin0Max15| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hls-basic-put-settings 'make-hls-basic-put-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hls-basic-put-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hls-basic-put-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-retry-interval))
      (common-lisp:list
       (common-lisp:cons "ConnectionRetryInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filecache-duration))
      (common-lisp:list
       (common-lisp:cons "FilecacheDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-retries))
      (common-lisp:list
       (common-lisp:cons "NumRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restart-delay))
      (common-lisp:list
       (common-lisp:cons "RestartDelay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hls-basic-put-settings))
   common-lisp:nil))
(common-lisp:deftype hls-caption-language-setting () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (hls-cdn-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-hls-cdn-settings-"))
   (hls-akamai-settings common-lisp:nil :type
    (common-lisp:or hls-akamai-settings common-lisp:null))
   (hls-basic-put-settings common-lisp:nil :type
    (common-lisp:or hls-basic-put-settings common-lisp:null))
   (hls-media-store-settings common-lisp:nil :type
    (common-lisp:or hls-media-store-settings common-lisp:null))
   (hls-s3settings common-lisp:nil :type
    (common-lisp:or hls-s3settings common-lisp:null))
   (hls-webdav-settings common-lisp:nil :type
    (common-lisp:or hls-webdav-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hls-cdn-settings 'make-hls-cdn-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hls-cdn-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hls-cdn-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hls-akamai-settings))
      (common-lisp:list
       (common-lisp:cons "HlsAkamaiSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hls-basic-put-settings))
      (common-lisp:list
       (common-lisp:cons "HlsBasicPutSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hls-media-store-settings))
      (common-lisp:list
       (common-lisp:cons "HlsMediaStoreSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hls-s3settings))
      (common-lisp:list
       (common-lisp:cons "HlsS3Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hls-webdav-settings))
      (common-lisp:list
       (common-lisp:cons "HlsWebdavSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hls-cdn-settings))
   common-lisp:nil))
(common-lisp:deftype hls-client-cache () 'common-lisp:string)
(common-lisp:deftype hls-codec-specification () 'common-lisp:string)
(common-lisp:deftype hls-directory-structure () 'common-lisp:string)
(common-lisp:deftype hls-discontinuity-tags () 'common-lisp:string)
(common-lisp:deftype hls-encryption-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (hls-group-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-hls-group-settings-"))
   (ad-markers common-lisp:nil :type
    (common-lisp:or |__listOfHlsAdMarkers| common-lisp:null))
   (base-url-content common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (base-url-content1 common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (base-url-manifest common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (base-url-manifest1 common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (caption-language-mappings common-lisp:nil :type
    (common-lisp:or |__listOfCaptionLanguageMapping| common-lisp:null))
   (caption-language-setting common-lisp:nil :type
    (common-lisp:or hls-caption-language-setting common-lisp:null))
   (client-cache common-lisp:nil :type
    (common-lisp:or hls-client-cache common-lisp:null))
   (codec-specification common-lisp:nil :type
    (common-lisp:or hls-codec-specification common-lisp:null))
   (constant-iv common-lisp:nil :type
    (common-lisp:or |__stringMin32Max32| common-lisp:null))
   (destination (common-lisp:error ":destination is required") :type
    (common-lisp:or output-location-ref common-lisp:null))
   (directory-structure common-lisp:nil :type
    (common-lisp:or hls-directory-structure common-lisp:null))
   (discontinuity-tags common-lisp:nil :type
    (common-lisp:or hls-discontinuity-tags common-lisp:null))
   (encryption-type common-lisp:nil :type
    (common-lisp:or hls-encryption-type common-lisp:null))
   (hls-cdn-settings common-lisp:nil :type
    (common-lisp:or hls-cdn-settings common-lisp:null))
   (hls-id3segment-tagging common-lisp:nil :type
    (common-lisp:or hls-id3segment-tagging-state common-lisp:null))
   (iframe-only-playlists common-lisp:nil :type
    (common-lisp:or iframe-only-playlist-type common-lisp:null))
   (incomplete-segment-behavior common-lisp:nil :type
    (common-lisp:or hls-incomplete-segment-behavior common-lisp:null))
   (index-nsegments common-lisp:nil :type
    (common-lisp:or |__integerMin3| common-lisp:null))
   (input-loss-action common-lisp:nil :type
    (common-lisp:or input-loss-action-for-hls-out common-lisp:null))
   (iv-in-manifest common-lisp:nil :type
    (common-lisp:or hls-iv-in-manifest common-lisp:null))
   (iv-source common-lisp:nil :type
    (common-lisp:or hls-iv-source common-lisp:null))
   (keep-segments common-lisp:nil :type
    (common-lisp:or |__integerMin1| common-lisp:null))
   (key-format common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (key-format-versions common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (key-provider-settings common-lisp:nil :type
    (common-lisp:or key-provider-settings common-lisp:null))
   (manifest-compression common-lisp:nil :type
    (common-lisp:or hls-manifest-compression common-lisp:null))
   (manifest-duration-format common-lisp:nil :type
    (common-lisp:or hls-manifest-duration-format common-lisp:null))
   (min-segment-length common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (mode common-lisp:nil :type (common-lisp:or hls-mode common-lisp:null))
   (output-selection common-lisp:nil :type
    (common-lisp:or hls-output-selection common-lisp:null))
   (program-date-time common-lisp:nil :type
    (common-lisp:or hls-program-date-time common-lisp:null))
   (program-date-time-clock common-lisp:nil :type
    (common-lisp:or hls-program-date-time-clock common-lisp:null))
   (program-date-time-period common-lisp:nil :type
    (common-lisp:or |__integerMin0Max3600| common-lisp:null))
   (redundant-manifest common-lisp:nil :type
    (common-lisp:or hls-redundant-manifest common-lisp:null))
   (segment-length common-lisp:nil :type
    (common-lisp:or |__integerMin1| common-lisp:null))
   (segmentation-mode common-lisp:nil :type
    (common-lisp:or hls-segmentation-mode common-lisp:null))
   (segments-per-subdirectory common-lisp:nil :type
    (common-lisp:or |__integerMin1| common-lisp:null))
   (stream-inf-resolution common-lisp:nil :type
    (common-lisp:or hls-stream-inf-resolution common-lisp:null))
   (timed-metadata-id3frame common-lisp:nil :type
    (common-lisp:or hls-timed-metadata-id3frame common-lisp:null))
   (timed-metadata-id3period common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (timestamp-delta-milliseconds common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (ts-file-mode common-lisp:nil :type
    (common-lisp:or hls-ts-file-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hls-group-settings 'make-hls-group-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hls-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hls-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ad-markers))
      (common-lisp:list
       (common-lisp:cons "AdMarkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-url-content))
      (common-lisp:list
       (common-lisp:cons "BaseUrlContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-url-content1))
      (common-lisp:list
       (common-lisp:cons "BaseUrlContent1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-url-manifest))
      (common-lisp:list
       (common-lisp:cons "BaseUrlManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-url-manifest1))
      (common-lisp:list
       (common-lisp:cons "BaseUrlManifest1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'caption-language-mappings))
      (common-lisp:list
       (common-lisp:cons "CaptionLanguageMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'caption-language-setting))
      (common-lisp:list
       (common-lisp:cons "CaptionLanguageSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-cache))
      (common-lisp:list
       (common-lisp:cons "ClientCache"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec-specification))
      (common-lisp:list
       (common-lisp:cons "CodecSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constant-iv))
      (common-lisp:list
       (common-lisp:cons "ConstantIv"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-structure))
      (common-lisp:list
       (common-lisp:cons "DirectoryStructure"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'discontinuity-tags))
      (common-lisp:list
       (common-lisp:cons "DiscontinuityTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "EncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hls-cdn-settings))
      (common-lisp:list
       (common-lisp:cons "HlsCdnSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hls-id3segment-tagging))
      (common-lisp:list
       (common-lisp:cons "HlsId3SegmentTagging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'iframe-only-playlists))
      (common-lisp:list
       (common-lisp:cons "IFrameOnlyPlaylists"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'incomplete-segment-behavior))
      (common-lisp:list
       (common-lisp:cons "IncompleteSegmentBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'index-nsegments))
      (common-lisp:list
       (common-lisp:cons "IndexNSegments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-loss-action))
      (common-lisp:list
       (common-lisp:cons "InputLossAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iv-in-manifest))
      (common-lisp:list
       (common-lisp:cons "IvInManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iv-source))
      (common-lisp:list
       (common-lisp:cons "IvSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'keep-segments))
      (common-lisp:list
       (common-lisp:cons "KeepSegments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-format))
      (common-lisp:list
       (common-lisp:cons "KeyFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-format-versions))
      (common-lisp:list
       (common-lisp:cons "KeyFormatVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'key-provider-settings))
      (common-lisp:list
       (common-lisp:cons "KeyProviderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manifest-compression))
      (common-lisp:list
       (common-lisp:cons "ManifestCompression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manifest-duration-format))
      (common-lisp:list
       (common-lisp:cons "ManifestDurationFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-segment-length))
      (common-lisp:list
       (common-lisp:cons "MinSegmentLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-selection))
      (common-lisp:list
       (common-lisp:cons "OutputSelection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-date-time))
      (common-lisp:list
       (common-lisp:cons "ProgramDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'program-date-time-clock))
      (common-lisp:list
       (common-lisp:cons "ProgramDateTimeClock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'program-date-time-period))
      (common-lisp:list
       (common-lisp:cons "ProgramDateTimePeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redundant-manifest))
      (common-lisp:list
       (common-lisp:cons "RedundantManifest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-length))
      (common-lisp:list
       (common-lisp:cons "SegmentLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segmentation-mode))
      (common-lisp:list
       (common-lisp:cons "SegmentationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segments-per-subdirectory))
      (common-lisp:list
       (common-lisp:cons "SegmentsPerSubdirectory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-inf-resolution))
      (common-lisp:list
       (common-lisp:cons "StreamInfResolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-id3frame))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataId3Frame"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-id3period))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataId3Period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestamp-delta-milliseconds))
      (common-lisp:list
       (common-lisp:cons "TimestampDeltaMilliseconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ts-file-mode))
      (common-lisp:list
       (common-lisp:cons "TsFileMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hls-group-settings))
   common-lisp:nil))
(common-lisp:deftype hls-h265packaging-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (hls-id3segment-tagging-schedule-action-settings (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-hls-id3segment-tagging-schedule-action-settings-"))
   (tag (common-lisp:error ":tag is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hls-id3segment-tagging-schedule-action-settings
                    'make-hls-id3segment-tagging-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hls-id3segment-tagging-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hls-id3segment-tagging-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag))
      (common-lisp:list
       (common-lisp:cons "Tag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hls-id3segment-tagging-schedule-action-settings))
   common-lisp:nil))
(common-lisp:deftype hls-id3segment-tagging-state () 'common-lisp:string)
(common-lisp:deftype hls-incomplete-segment-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (hls-input-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-hls-input-settings-"))
   (bandwidth common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (buffer-segments common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (retries common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (retry-interval common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (scte35source common-lisp:nil :type
    (common-lisp:or hls-scte35source-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hls-input-settings 'make-hls-input-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hls-input-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hls-input-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bandwidth))
      (common-lisp:list
       (common-lisp:cons "Bandwidth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buffer-segments))
      (common-lisp:list
       (common-lisp:cons "BufferSegments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retries))
      (common-lisp:list
       (common-lisp:cons "Retries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retry-interval))
      (common-lisp:list
       (common-lisp:cons "RetryInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35source))
      (common-lisp:list
       (common-lisp:cons "Scte35Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hls-input-settings))
   common-lisp:nil))
(common-lisp:deftype hls-iv-in-manifest () 'common-lisp:string)
(common-lisp:deftype hls-iv-source () 'common-lisp:string)
(common-lisp:deftype hls-manifest-compression () 'common-lisp:string)
(common-lisp:deftype hls-manifest-duration-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (hls-media-store-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-hls-media-store-settings-"))
   (connection-retry-interval common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (filecache-duration common-lisp:nil :type
    (common-lisp:or |__integerMin0Max600| common-lisp:null))
   (media-store-storage-class common-lisp:nil :type
    (common-lisp:or hls-media-store-storage-class common-lisp:null))
   (num-retries common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (restart-delay common-lisp:nil :type
    (common-lisp:or |__integerMin0Max15| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hls-media-store-settings 'make-hls-media-store-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hls-media-store-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hls-media-store-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-retry-interval))
      (common-lisp:list
       (common-lisp:cons "ConnectionRetryInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filecache-duration))
      (common-lisp:list
       (common-lisp:cons "FilecacheDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-store-storage-class))
      (common-lisp:list
       (common-lisp:cons "MediaStoreStorageClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-retries))
      (common-lisp:list
       (common-lisp:cons "NumRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restart-delay))
      (common-lisp:list
       (common-lisp:cons "RestartDelay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hls-media-store-settings))
   common-lisp:nil))
(common-lisp:deftype hls-media-store-storage-class () 'common-lisp:string)
(common-lisp:deftype hls-mode () 'common-lisp:string)
(common-lisp:deftype hls-output-selection () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (hls-output-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-hls-output-settings-"))
   (h265packaging-type common-lisp:nil :type
    (common-lisp:or hls-h265packaging-type common-lisp:null))
   (hls-settings (common-lisp:error ":hls-settings is required") :type
    (common-lisp:or hls-settings common-lisp:null))
   (name-modifier common-lisp:nil :type
    (common-lisp:or |__stringMin1| common-lisp:null))
   (segment-modifier common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hls-output-settings 'make-hls-output-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hls-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hls-output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'h265packaging-type))
      (common-lisp:list
       (common-lisp:cons "H265PackagingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hls-settings))
      (common-lisp:list
       (common-lisp:cons "HlsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-modifier))
      (common-lisp:list
       (common-lisp:cons "NameModifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-modifier))
      (common-lisp:list
       (common-lisp:cons "SegmentModifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hls-output-settings))
   common-lisp:nil))
(common-lisp:deftype hls-program-date-time () 'common-lisp:string)
(common-lisp:deftype hls-program-date-time-clock () 'common-lisp:string)
(common-lisp:deftype hls-redundant-manifest () 'common-lisp:string)
(common-lisp:deftype hls-s3log-uploads () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (hls-s3settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-hls-s3settings-"))
   (canned-acl common-lisp:nil :type
    (common-lisp:or s3canned-acl common-lisp:null)))
 (common-lisp:export (common-lisp:list 'hls-s3settings 'make-hls-s3settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hls-s3settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hls-s3settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canned-acl))
      (common-lisp:list
       (common-lisp:cons "CannedAcl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hls-s3settings))
   common-lisp:nil))
(common-lisp:deftype hls-scte35source-type () 'common-lisp:string)
(common-lisp:deftype hls-segmentation-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (hls-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-hls-settings-"))
   (audio-only-hls-settings common-lisp:nil :type
    (common-lisp:or audio-only-hls-settings common-lisp:null))
   (fmp4hls-settings common-lisp:nil :type
    (common-lisp:or fmp4hls-settings common-lisp:null))
   (frame-capture-hls-settings common-lisp:nil :type
    (common-lisp:or frame-capture-hls-settings common-lisp:null))
   (standard-hls-settings common-lisp:nil :type
    (common-lisp:or standard-hls-settings common-lisp:null)))
 (common-lisp:export (common-lisp:list 'hls-settings 'make-hls-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hls-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hls-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-only-hls-settings))
      (common-lisp:list
       (common-lisp:cons "AudioOnlyHlsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fmp4hls-settings))
      (common-lisp:list
       (common-lisp:cons "Fmp4HlsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'frame-capture-hls-settings))
      (common-lisp:list
       (common-lisp:cons "FrameCaptureHlsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standard-hls-settings))
      (common-lisp:list
       (common-lisp:cons "StandardHlsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hls-settings))
   common-lisp:nil))
(common-lisp:deftype hls-stream-inf-resolution () 'common-lisp:string)
(common-lisp:deftype hls-timed-metadata-id3frame () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (hls-timed-metadata-schedule-action-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-hls-timed-metadata-schedule-action-settings-"))
   (id3 (common-lisp:error ":id3 is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hls-timed-metadata-schedule-action-settings
                    'make-hls-timed-metadata-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hls-timed-metadata-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hls-timed-metadata-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id3))
      (common-lisp:list
       (common-lisp:cons "Id3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hls-timed-metadata-schedule-action-settings))
   common-lisp:nil))
(common-lisp:deftype hls-ts-file-mode () 'common-lisp:string)
(common-lisp:deftype hls-webdav-http-transfer-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (hls-webdav-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-hls-webdav-settings-"))
   (connection-retry-interval common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (filecache-duration common-lisp:nil :type
    (common-lisp:or |__integerMin0Max600| common-lisp:null))
   (http-transfer-mode common-lisp:nil :type
    (common-lisp:or hls-webdav-http-transfer-mode common-lisp:null))
   (num-retries common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (restart-delay common-lisp:nil :type
    (common-lisp:or |__integerMin0Max15| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hls-webdav-settings 'make-hls-webdav-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hls-webdav-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hls-webdav-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-retry-interval))
      (common-lisp:list
       (common-lisp:cons "ConnectionRetryInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filecache-duration))
      (common-lisp:list
       (common-lisp:cons "FilecacheDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'http-transfer-mode))
      (common-lisp:list
       (common-lisp:cons "HttpTransferMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-retries))
      (common-lisp:list
       (common-lisp:cons "NumRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restart-delay))
      (common-lisp:list
       (common-lisp:cons "RestartDelay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hls-webdav-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (html-motion-graphics-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-html-motion-graphics-settings-")))
 (common-lisp:export
  (common-lisp:list 'html-motion-graphics-settings
                    'make-html-motion-graphics-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          html-motion-graphics-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          html-motion-graphics-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          html-motion-graphics-settings))
   common-lisp:nil))
(common-lisp:deftype iframe-only-playlist-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (immediate-mode-schedule-action-start-settings (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-immediate-mode-schedule-action-start-settings-")))
 (common-lisp:export
  (common-lisp:list 'immediate-mode-schedule-action-start-settings
                    'make-immediate-mode-schedule-action-start-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          immediate-mode-schedule-action-start-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          immediate-mode-schedule-action-start-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          immediate-mode-schedule-action-start-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input (:copier common-lisp:nil) (:conc-name "struct-shape-input-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (attached-channels common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (destinations common-lisp:nil :type
    (common-lisp:or |__listOfInputDestination| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (input-class common-lisp:nil :type
    (common-lisp:or input-class common-lisp:null))
   (input-devices common-lisp:nil :type
    (common-lisp:or |__listOfInputDeviceSettings| common-lisp:null))
   (input-partner-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (input-source-type common-lisp:nil :type
    (common-lisp:or input-source-type common-lisp:null))
   (media-connect-flows common-lisp:nil :type
    (common-lisp:or |__listOfMediaConnectFlow| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (security-groups common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (sources common-lisp:nil :type
    (common-lisp:or |__listOfInputSource| common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or input-state common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or input-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'input 'make-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attached-channels))
      (common-lisp:list
       (common-lisp:cons "AttachedChannels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-class))
      (common-lisp:list
       (common-lisp:cons "InputClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-devices))
      (common-lisp:list
       (common-lisp:cons "InputDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-partner-ids))
      (common-lisp:list
       (common-lisp:cons "InputPartnerIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-source-type))
      (common-lisp:list
       (common-lisp:cons "InputSourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-connect-flows))
      (common-lisp:list
       (common-lisp:cons "MediaConnectFlows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-attachment (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-attachment-"))
   (automatic-input-failover-settings common-lisp:nil :type
    (common-lisp:or automatic-input-failover-settings common-lisp:null))
   (input-attachment-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (input-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (input-settings common-lisp:nil :type
    (common-lisp:or input-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-attachment 'make-input-attachment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-attachment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-attachment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'automatic-input-failover-settings))
      (common-lisp:list
       (common-lisp:cons "AutomaticInputFailoverSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-attachment-name))
      (common-lisp:list
       (common-lisp:cons "InputAttachmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-id))
      (common-lisp:list
       (common-lisp:cons "InputId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-settings))
      (common-lisp:list
       (common-lisp:cons "InputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-attachment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-channel-level (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-channel-level-"))
   (gain (common-lisp:error ":gain is required") :type
    (common-lisp:or |__integerMinNegative60Max6| common-lisp:null))
   (input-channel (common-lisp:error ":input-channel is required") :type
    (common-lisp:or |__integerMin0Max15| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-channel-level 'make-input-channel-level))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-channel-level))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-channel-level))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gain))
      (common-lisp:list
       (common-lisp:cons "Gain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-channel))
      (common-lisp:list
       (common-lisp:cons "InputChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-channel-level))
   common-lisp:nil))
(common-lisp:deftype input-class () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (input-clipping-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-clipping-settings-"))
   (input-timecode-source
    (common-lisp:error ":input-timecode-source is required") :type
    (common-lisp:or input-timecode-source common-lisp:null))
   (start-timecode common-lisp:nil :type
    (common-lisp:or start-timecode common-lisp:null))
   (stop-timecode common-lisp:nil :type
    (common-lisp:or stop-timecode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-clipping-settings 'make-input-clipping-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-clipping-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-clipping-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-timecode-source))
      (common-lisp:list
       (common-lisp:cons "InputTimecodeSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-timecode))
      (common-lisp:list
       (common-lisp:cons "StartTimecode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-timecode))
      (common-lisp:list
       (common-lisp:cons "StopTimecode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-clipping-settings))
   common-lisp:nil))
(common-lisp:deftype input-codec () 'common-lisp:string)
(common-lisp:deftype input-deblock-filter () 'common-lisp:string)
(common-lisp:deftype input-denoise-filter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (input-destination (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-destination-"))
   (ip common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (vpc common-lisp:nil :type
    (common-lisp:or input-destination-vpc common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-destination 'make-input-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip))
      (common-lisp:list
       (common-lisp:cons "Ip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-destination-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-destination-request-"))
   (stream-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-destination-request
                    'make-input-destination-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-destination-vpc (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-destination-vpc-"))
   (availability-zone common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (network-interface-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-destination-vpc 'make-input-destination-vpc))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-destination-vpc))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-destination-vpc))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zone))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-destination-vpc))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-device (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-device-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (connection-state common-lisp:nil :type
    (common-lisp:or input-device-connection-state common-lisp:null))
   (device-settings-sync-state common-lisp:nil :type
    (common-lisp:or device-settings-sync-state common-lisp:null))
   (device-update-status common-lisp:nil :type
    (common-lisp:or device-update-status common-lisp:null))
   (hd-device-settings common-lisp:nil :type
    (common-lisp:or input-device-hd-settings common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (mac-address common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (network-settings common-lisp:nil :type
    (common-lisp:or input-device-network-settings common-lisp:null))
   (serial-number common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or input-device-type common-lisp:null))
   (uhd-device-settings common-lisp:nil :type
    (common-lisp:or input-device-uhd-settings common-lisp:null)))
 (common-lisp:export (common-lisp:list 'input-device 'make-input-device))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-state))
      (common-lisp:list
       (common-lisp:cons "ConnectionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-settings-sync-state))
      (common-lisp:list
       (common-lisp:cons "DeviceSettingsSyncState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-update-status))
      (common-lisp:list
       (common-lisp:cons "DeviceUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hd-device-settings))
      (common-lisp:list
       (common-lisp:cons "HdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-address))
      (common-lisp:list
       (common-lisp:cons "MacAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-settings))
      (common-lisp:list
       (common-lisp:cons "NetworkSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uhd-device-settings))
      (common-lisp:list
       (common-lisp:cons "UhdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-device))
   common-lisp:nil))
(common-lisp:deftype input-device-active-input () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (input-device-configurable-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-device-configurable-settings-"))
   (configured-input common-lisp:nil :type
    (common-lisp:or input-device-configured-input common-lisp:null))
   (max-bitrate common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (latency-ms common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-device-configurable-settings
                    'make-input-device-configurable-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-device-configurable-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-device-configurable-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured-input))
      (common-lisp:list
       (common-lisp:cons "ConfiguredInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latency-ms))
      (common-lisp:list
       (common-lisp:cons "LatencyMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-device-configurable-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-device-configuration-validation-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-device-configuration-validation-error-"))
   (message common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (validation-errors common-lisp:nil :type
    (common-lisp:or |__listOfValidationError| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-device-configuration-validation-error
                    'make-input-device-configuration-validation-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-device-configuration-validation-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-device-configuration-validation-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-errors))
      (common-lisp:list
       (common-lisp:cons "ValidationErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-device-configuration-validation-error))
   common-lisp:nil))
(common-lisp:deftype input-device-configured-input () 'common-lisp:string)
(common-lisp:deftype input-device-connection-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (input-device-hd-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-device-hd-settings-"))
   (active-input common-lisp:nil :type
    (common-lisp:or input-device-active-input common-lisp:null))
   (configured-input common-lisp:nil :type
    (common-lisp:or input-device-configured-input common-lisp:null))
   (device-state common-lisp:nil :type
    (common-lisp:or input-device-state common-lisp:null))
   (framerate common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null))
   (height common-lisp:nil :type (common-lisp:or |__integer| common-lisp:null))
   (max-bitrate common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (scan-type common-lisp:nil :type
    (common-lisp:or input-device-scan-type common-lisp:null))
   (width common-lisp:nil :type (common-lisp:or |__integer| common-lisp:null))
   (latency-ms common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-device-hd-settings 'make-input-device-hd-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-device-hd-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-device-hd-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-input))
      (common-lisp:list
       (common-lisp:cons "ActiveInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured-input))
      (common-lisp:list
       (common-lisp:cons "ConfiguredInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-state))
      (common-lisp:list
       (common-lisp:cons "DeviceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate))
      (common-lisp:list
       (common-lisp:cons "Framerate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-type))
      (common-lisp:list
       (common-lisp:cons "ScanType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latency-ms))
      (common-lisp:list
       (common-lisp:cons "LatencyMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-device-hd-settings))
   common-lisp:nil))
(common-lisp:deftype input-device-ip-scheme () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (input-device-network-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-device-network-settings-"))
   (dns-addresses common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (gateway common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (ip-address common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (ip-scheme common-lisp:nil :type
    (common-lisp:or input-device-ip-scheme common-lisp:null))
   (subnet-mask common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-device-network-settings
                    'make-input-device-network-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-device-network-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-device-network-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dns-addresses))
      (common-lisp:list
       (common-lisp:cons "DnsAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway))
      (common-lisp:list
       (common-lisp:cons "Gateway"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-scheme))
      (common-lisp:list
       (common-lisp:cons "IpScheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-mask))
      (common-lisp:list
       (common-lisp:cons "SubnetMask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-device-network-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-device-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-device-request-"))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-device-request 'make-input-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-device-request))
   common-lisp:nil))
(common-lisp:deftype input-device-scan-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (input-device-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-device-settings-"))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-device-settings 'make-input-device-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-device-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-device-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-device-settings))
   common-lisp:nil))
(common-lisp:deftype input-device-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (input-device-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-device-summary-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (connection-state common-lisp:nil :type
    (common-lisp:or input-device-connection-state common-lisp:null))
   (device-settings-sync-state common-lisp:nil :type
    (common-lisp:or device-settings-sync-state common-lisp:null))
   (device-update-status common-lisp:nil :type
    (common-lisp:or device-update-status common-lisp:null))
   (hd-device-settings common-lisp:nil :type
    (common-lisp:or input-device-hd-settings common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (mac-address common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (network-settings common-lisp:nil :type
    (common-lisp:or input-device-network-settings common-lisp:null))
   (serial-number common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or input-device-type common-lisp:null))
   (uhd-device-settings common-lisp:nil :type
    (common-lisp:or input-device-uhd-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-device-summary 'make-input-device-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-device-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-device-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-state))
      (common-lisp:list
       (common-lisp:cons "ConnectionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-settings-sync-state))
      (common-lisp:list
       (common-lisp:cons "DeviceSettingsSyncState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-update-status))
      (common-lisp:list
       (common-lisp:cons "DeviceUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hd-device-settings))
      (common-lisp:list
       (common-lisp:cons "HdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-address))
      (common-lisp:list
       (common-lisp:cons "MacAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-settings))
      (common-lisp:list
       (common-lisp:cons "NetworkSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uhd-device-settings))
      (common-lisp:list
       (common-lisp:cons "UhdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-device-summary))
   common-lisp:nil))
(common-lisp:deftype input-device-transfer-type () 'common-lisp:string)
(common-lisp:deftype input-device-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (input-device-uhd-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-device-uhd-settings-"))
   (active-input common-lisp:nil :type
    (common-lisp:or input-device-active-input common-lisp:null))
   (configured-input common-lisp:nil :type
    (common-lisp:or input-device-configured-input common-lisp:null))
   (device-state common-lisp:nil :type
    (common-lisp:or input-device-state common-lisp:null))
   (framerate common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null))
   (height common-lisp:nil :type (common-lisp:or |__integer| common-lisp:null))
   (max-bitrate common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (scan-type common-lisp:nil :type
    (common-lisp:or input-device-scan-type common-lisp:null))
   (width common-lisp:nil :type (common-lisp:or |__integer| common-lisp:null))
   (latency-ms common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-device-uhd-settings
                    'make-input-device-uhd-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-device-uhd-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-device-uhd-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-input))
      (common-lisp:list
       (common-lisp:cons "ActiveInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configured-input))
      (common-lisp:list
       (common-lisp:cons "ConfiguredInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-state))
      (common-lisp:list
       (common-lisp:cons "DeviceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate))
      (common-lisp:list
       (common-lisp:cons "Framerate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaxBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-type))
      (common-lisp:list
       (common-lisp:cons "ScanType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latency-ms))
      (common-lisp:list
       (common-lisp:cons "LatencyMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-device-uhd-settings))
   common-lisp:nil))
(common-lisp:deftype input-filter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (input-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-location-"))
   (password-param common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (uri (common-lisp:error ":uri is required") :type
    (common-lisp:or |__stringMax2048| common-lisp:null))
   (username common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'input-location 'make-input-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-param))
      (common-lisp:list
       (common-lisp:cons "PasswordParam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uri))
      (common-lisp:list
       (common-lisp:cons "Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-location))
   common-lisp:nil))
(common-lisp:deftype input-loss-action-for-hls-out () 'common-lisp:string)
(common-lisp:deftype input-loss-action-for-ms-smooth-out () 'common-lisp:string)
(common-lisp:deftype input-loss-action-for-rtmp-out () 'common-lisp:string)
(common-lisp:deftype input-loss-action-for-udp-out () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (input-loss-behavior (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-loss-behavior-"))
   (black-frame-msec common-lisp:nil :type
    (common-lisp:or |__integerMin0Max1000000| common-lisp:null))
   (input-loss-image-color common-lisp:nil :type
    (common-lisp:or |__stringMin6Max6| common-lisp:null))
   (input-loss-image-slate common-lisp:nil :type
    (common-lisp:or input-location common-lisp:null))
   (input-loss-image-type common-lisp:nil :type
    (common-lisp:or input-loss-image-type common-lisp:null))
   (repeat-frame-msec common-lisp:nil :type
    (common-lisp:or |__integerMin0Max1000000| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-loss-behavior 'make-input-loss-behavior))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-loss-behavior))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-loss-behavior))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'black-frame-msec))
      (common-lisp:list
       (common-lisp:cons "BlackFrameMsec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-loss-image-color))
      (common-lisp:list
       (common-lisp:cons "InputLossImageColor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-loss-image-slate))
      (common-lisp:list
       (common-lisp:cons "InputLossImageSlate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-loss-image-type))
      (common-lisp:list
       (common-lisp:cons "InputLossImageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repeat-frame-msec))
      (common-lisp:list
       (common-lisp:cons "RepeatFrameMsec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-loss-behavior))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-loss-failover-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-loss-failover-settings-"))
   (input-loss-threshold-msec common-lisp:nil :type
    (common-lisp:or |__integerMin100| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-loss-failover-settings
                    'make-input-loss-failover-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-loss-failover-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-loss-failover-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-loss-threshold-msec))
      (common-lisp:list
       (common-lisp:cons "InputLossThresholdMsec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-loss-failover-settings))
   common-lisp:nil))
(common-lisp:deftype input-loss-image-type () 'common-lisp:string)
(common-lisp:deftype input-maximum-bitrate () 'common-lisp:string)
(common-lisp:deftype input-preference () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (input-prepare-schedule-action-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-prepare-schedule-action-settings-"))
   (input-attachment-name-reference common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (input-clipping-settings common-lisp:nil :type
    (common-lisp:or input-clipping-settings common-lisp:null))
   (url-path common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-prepare-schedule-action-settings
                    'make-input-prepare-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-prepare-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-prepare-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-attachment-name-reference))
      (common-lisp:list
       (common-lisp:cons "InputAttachmentNameReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-clipping-settings))
      (common-lisp:list
       (common-lisp:cons "InputClippingSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url-path))
      (common-lisp:list
       (common-lisp:cons "UrlPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-prepare-schedule-action-settings))
   common-lisp:nil))
(common-lisp:deftype input-resolution () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (input-security-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-security-group-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (inputs common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or input-security-group-state common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (whitelist-rules common-lisp:nil :type
    (common-lisp:or |__listOfInputWhitelistRule| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-security-group 'make-input-security-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'whitelist-rules))
      (common-lisp:list
       (common-lisp:cons "WhitelistRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-security-group))
   common-lisp:nil))
(common-lisp:deftype input-security-group-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (input-security-group-whitelist-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-security-group-whitelist-request-"))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (whitelist-rules common-lisp:nil :type
    (common-lisp:or |__listOfInputWhitelistRuleCidr| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-security-group-whitelist-request
                    'make-input-security-group-whitelist-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-security-group-whitelist-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-security-group-whitelist-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'whitelist-rules))
      (common-lisp:list
       (common-lisp:cons "WhitelistRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-security-group-whitelist-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-settings-"))
   (audio-selectors common-lisp:nil :type
    (common-lisp:or |__listOfAudioSelector| common-lisp:null))
   (caption-selectors common-lisp:nil :type
    (common-lisp:or |__listOfCaptionSelector| common-lisp:null))
   (deblock-filter common-lisp:nil :type
    (common-lisp:or input-deblock-filter common-lisp:null))
   (denoise-filter common-lisp:nil :type
    (common-lisp:or input-denoise-filter common-lisp:null))
   (filter-strength common-lisp:nil :type
    (common-lisp:or |__integerMin1Max5| common-lisp:null))
   (input-filter common-lisp:nil :type
    (common-lisp:or input-filter common-lisp:null))
   (network-input-settings common-lisp:nil :type
    (common-lisp:or network-input-settings common-lisp:null))
   (scte35pid common-lisp:nil :type
    (common-lisp:or |__integerMin32Max8191| common-lisp:null))
   (smpte2038data-preference common-lisp:nil :type
    (common-lisp:or smpte2038data-preference common-lisp:null))
   (source-end-behavior common-lisp:nil :type
    (common-lisp:or input-source-end-behavior common-lisp:null))
   (video-selector common-lisp:nil :type
    (common-lisp:or video-selector common-lisp:null)))
 (common-lisp:export (common-lisp:list 'input-settings 'make-input-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-selectors))
      (common-lisp:list
       (common-lisp:cons "AudioSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caption-selectors))
      (common-lisp:list
       (common-lisp:cons "CaptionSelectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deblock-filter))
      (common-lisp:list
       (common-lisp:cons "DeblockFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'denoise-filter))
      (common-lisp:list
       (common-lisp:cons "DenoiseFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-strength))
      (common-lisp:list
       (common-lisp:cons "FilterStrength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-filter))
      (common-lisp:list
       (common-lisp:cons "InputFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-input-settings))
      (common-lisp:list
       (common-lisp:cons "NetworkInputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35pid))
      (common-lisp:list
       (common-lisp:cons "Scte35Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'smpte2038data-preference))
      (common-lisp:list
       (common-lisp:cons "Smpte2038DataPreference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-end-behavior))
      (common-lisp:list
       (common-lisp:cons "SourceEndBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-selector))
      (common-lisp:list
       (common-lisp:cons "VideoSelector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-source-"))
   (password-param common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (username common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'input-source 'make-input-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-param))
      (common-lisp:list
       (common-lisp:cons "PasswordParam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-source))
   common-lisp:nil))
(common-lisp:deftype input-source-end-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (input-source-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-source-request-"))
   (password-param common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (username common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-source-request 'make-input-source-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-source-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-source-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-param))
      (common-lisp:list
       (common-lisp:cons "PasswordParam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-source-request))
   common-lisp:nil))
(common-lisp:deftype input-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (input-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-specification-"))
   (codec common-lisp:nil :type (common-lisp:or input-codec common-lisp:null))
   (maximum-bitrate common-lisp:nil :type
    (common-lisp:or input-maximum-bitrate common-lisp:null))
   (resolution common-lisp:nil :type
    (common-lisp:or input-resolution common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-specification 'make-input-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec))
      (common-lisp:list
       (common-lisp:cons "Codec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaximumBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution))
      (common-lisp:list
       (common-lisp:cons "Resolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-specification))
   common-lisp:nil))
(common-lisp:deftype input-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (input-switch-schedule-action-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-switch-schedule-action-settings-"))
   (input-attachment-name-reference
    (common-lisp:error ":input-attachment-name-reference is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (input-clipping-settings common-lisp:nil :type
    (common-lisp:or input-clipping-settings common-lisp:null))
   (url-path common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-switch-schedule-action-settings
                    'make-input-switch-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-switch-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-switch-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-attachment-name-reference))
      (common-lisp:list
       (common-lisp:cons "InputAttachmentNameReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-clipping-settings))
      (common-lisp:list
       (common-lisp:cons "InputClippingSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url-path))
      (common-lisp:list
       (common-lisp:cons "UrlPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-switch-schedule-action-settings))
   common-lisp:nil))
(common-lisp:deftype input-timecode-source () 'common-lisp:string)
(common-lisp:deftype input-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (input-vpc-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-vpc-request-"))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (subnet-ids (common-lisp:error ":subnet-ids is required") :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-vpc-request 'make-input-vpc-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-vpc-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-vpc-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-vpc-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-whitelist-rule (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-whitelist-rule-"))
   (cidr common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-whitelist-rule 'make-input-whitelist-rule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-whitelist-rule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-whitelist-rule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr))
      (common-lisp:list
       (common-lisp:cons "Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-whitelist-rule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (input-whitelist-rule-cidr (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-whitelist-rule-cidr-"))
   (cidr common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'input-whitelist-rule-cidr
                    'make-input-whitelist-rule-cidr))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          input-whitelist-rule-cidr))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          input-whitelist-rule-cidr))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidr))
      (common-lisp:list
       (common-lisp:cons "Cidr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          input-whitelist-rule-cidr))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-server-error-exception
     (medialive-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-error-exception
                    'internal-server-error-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (internal-service-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-internal-service-error-"))
   (message common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'internal-service-error 'make-internal-service-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          internal-service-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          internal-service-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          internal-service-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-invalid-request-"))
   (message common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'invalid-request 'make-invalid-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input invalid-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input invalid-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input invalid-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (key-provider-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-key-provider-settings-"))
   (static-key-settings common-lisp:nil :type
    (common-lisp:or static-key-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'key-provider-settings 'make-key-provider-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          key-provider-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          key-provider-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-key-settings))
      (common-lisp:list
       (common-lisp:cons "StaticKeySettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          key-provider-settings))
   common-lisp:nil))
(common-lisp:deftype last-frame-clipping-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (limit-exceeded (:copier common-lisp:nil)
      (:conc-name "struct-shape-limit-exceeded-"))
   (message common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'limit-exceeded 'make-limit-exceeded))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input limit-exceeded))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input limit-exceeded))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input limit-exceeded))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-channels-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-channels-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-channels-request 'make-list-channels-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-channels-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-channels-response-"))
   (channels common-lisp:nil :type
    (common-lisp:or |__listOfChannelSummary| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-channels-response 'make-list-channels-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "Channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-channels-result-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-channels-result-model-"))
   (channels common-lisp:nil :type
    (common-lisp:or |__listOfChannelSummary| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-channels-result-model
                    'make-list-channels-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels))
      (common-lisp:list
       (common-lisp:cons "Channels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-channels-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-input-device-transfers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-input-device-transfers-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (transfer-type (common-lisp:error ":transfer-type is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-input-device-transfers-request
                    'make-list-input-device-transfers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-input-device-transfers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-input-device-transfers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-input-device-transfers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-input-device-transfers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-input-device-transfers-response-"))
   (input-device-transfers common-lisp:nil :type
    (common-lisp:or |__listOfTransferringInputDeviceSummary| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-input-device-transfers-response
                    'make-list-input-device-transfers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-input-device-transfers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-input-device-transfers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-device-transfers))
      (common-lisp:list
       (common-lisp:cons "InputDeviceTransfers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-input-device-transfers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-input-device-transfers-result-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-input-device-transfers-result-model-"))
   (input-device-transfers common-lisp:nil :type
    (common-lisp:or |__listOfTransferringInputDeviceSummary| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-input-device-transfers-result-model
                    'make-list-input-device-transfers-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-input-device-transfers-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-input-device-transfers-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-device-transfers))
      (common-lisp:list
       (common-lisp:cons "InputDeviceTransfers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-input-device-transfers-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-input-devices-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-input-devices-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-input-devices-request
                    'make-list-input-devices-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-input-devices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-input-devices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-input-devices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-input-devices-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-input-devices-response-"))
   (input-devices common-lisp:nil :type
    (common-lisp:or |__listOfInputDeviceSummary| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-input-devices-response
                    'make-list-input-devices-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-input-devices-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-input-devices-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-devices))
      (common-lisp:list
       (common-lisp:cons "InputDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-input-devices-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-input-devices-result-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-input-devices-result-model-"))
   (input-devices common-lisp:nil :type
    (common-lisp:or |__listOfInputDeviceSummary| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-input-devices-result-model
                    'make-list-input-devices-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-input-devices-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-input-devices-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-devices))
      (common-lisp:list
       (common-lisp:cons "InputDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-input-devices-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-input-security-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-input-security-groups-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-input-security-groups-request
                    'make-list-input-security-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-input-security-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-input-security-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-input-security-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-input-security-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-input-security-groups-response-"))
   (input-security-groups common-lisp:nil :type
    (common-lisp:or |__listOfInputSecurityGroup| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-input-security-groups-response
                    'make-list-input-security-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-input-security-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-input-security-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-security-groups))
      (common-lisp:list
       (common-lisp:cons "InputSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-input-security-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-input-security-groups-result-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-input-security-groups-result-model-"))
   (input-security-groups common-lisp:nil :type
    (common-lisp:or |__listOfInputSecurityGroup| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-input-security-groups-result-model
                    'make-list-input-security-groups-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-input-security-groups-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-input-security-groups-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-security-groups))
      (common-lisp:list
       (common-lisp:cons "InputSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-input-security-groups-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-inputs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-inputs-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-inputs-request 'make-list-inputs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-inputs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-inputs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-inputs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-inputs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-inputs-response-"))
   (inputs common-lisp:nil :type
    (common-lisp:or |__listOfInput| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-inputs-response 'make-list-inputs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-inputs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-inputs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-inputs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-inputs-result-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-inputs-result-model-"))
   (inputs common-lisp:nil :type
    (common-lisp:or |__listOfInput| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-inputs-result-model 'make-list-inputs-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-inputs-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-inputs-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inputs))
      (common-lisp:list
       (common-lisp:cons "Inputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-inputs-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-multiplex-programs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-multiplex-programs-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (multiplex-id (common-lisp:error ":multiplex-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-multiplex-programs-request
                    'make-list-multiplex-programs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplex-programs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplex-programs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplex-programs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-multiplex-programs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-multiplex-programs-response-"))
   (multiplex-programs common-lisp:nil :type
    (common-lisp:or |__listOfMultiplexProgramSummary| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-multiplex-programs-response
                    'make-list-multiplex-programs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplex-programs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplex-programs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-programs))
      (common-lisp:list
       (common-lisp:cons "MultiplexPrograms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplex-programs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-multiplex-programs-result-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-multiplex-programs-result-model-"))
   (multiplex-programs common-lisp:nil :type
    (common-lisp:or |__listOfMultiplexProgramSummary| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-multiplex-programs-result-model
                    'make-list-multiplex-programs-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplex-programs-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplex-programs-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-programs))
      (common-lisp:list
       (common-lisp:cons "MultiplexPrograms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplex-programs-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-multiplexes-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-multiplexes-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-multiplexes-request 'make-list-multiplexes-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplexes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplexes-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplexes-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-multiplexes-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-multiplexes-response-"))
   (multiplexes common-lisp:nil :type
    (common-lisp:or |__listOfMultiplexSummary| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-multiplexes-response
                    'make-list-multiplexes-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplexes-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplexes-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplexes))
      (common-lisp:list
       (common-lisp:cons "Multiplexes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplexes-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-multiplexes-result-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-multiplexes-result-model-"))
   (multiplexes common-lisp:nil :type
    (common-lisp:or |__listOfMultiplexSummary| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-multiplexes-result-model
                    'make-list-multiplexes-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplexes-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplexes-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplexes))
      (common-lisp:list
       (common-lisp:cons "Multiplexes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multiplexes-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-offerings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-offerings-request-"))
   (channel-class common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (channel-configuration common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (codec common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (duration common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (maximum-bitrate common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (maximum-framerate common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (resolution common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (special-feature common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (video-quality common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-offerings-request 'make-list-offerings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-offerings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-offerings-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (offerings common-lisp:nil :type
    (common-lisp:or |__listOfOffering| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-offerings-response 'make-list-offerings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offerings))
      (common-lisp:list
       (common-lisp:cons "Offerings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-offerings-result-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-offerings-result-model-"))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (offerings common-lisp:nil :type
    (common-lisp:or |__listOfOffering| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-offerings-result-model
                    'make-list-offerings-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offerings))
      (common-lisp:list
       (common-lisp:cons "Offerings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-offerings-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-reservations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-reservations-request-"))
   (channel-class common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (codec common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (maximum-bitrate common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (maximum-framerate common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (resolution common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (special-feature common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (video-quality common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-reservations-request
                    'make-list-reservations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-reservations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-reservations-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (reservations common-lisp:nil :type
    (common-lisp:or |__listOfReservation| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-reservations-response
                    'make-list-reservations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservations))
      (common-lisp:list
       (common-lisp:cons "Reservations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-reservations-result-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-reservations-result-model-"))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (reservations common-lisp:nil :type
    (common-lisp:or |__listOfReservation| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-reservations-result-model
                    'make-list-reservations-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservations))
      (common-lisp:list
       (common-lisp:cons "Reservations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-reservations-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype log-level () 'common-lisp:string)
(common-lisp:deftype m2ts-absent-input-audio-behavior () 'common-lisp:string)
(common-lisp:deftype m2ts-arib () 'common-lisp:string)
(common-lisp:deftype m2ts-arib-captions-pid-control () 'common-lisp:string)
(common-lisp:deftype m2ts-audio-buffer-model () 'common-lisp:string)
(common-lisp:deftype m2ts-audio-interval () 'common-lisp:string)
(common-lisp:deftype m2ts-audio-stream-type () 'common-lisp:string)
(common-lisp:deftype m2ts-buffer-model () 'common-lisp:string)
(common-lisp:deftype m2ts-cc-descriptor () 'common-lisp:string)
(common-lisp:deftype m2ts-ebif-control () 'common-lisp:string)
(common-lisp:deftype m2ts-ebp-placement () 'common-lisp:string)
(common-lisp:deftype m2ts-es-rate-in-pes () 'common-lisp:string)
(common-lisp:deftype m2ts-klv () 'common-lisp:string)
(common-lisp:deftype m2ts-nielsen-id3behavior () 'common-lisp:string)
(common-lisp:deftype m2ts-pcr-control () 'common-lisp:string)
(common-lisp:deftype m2ts-rate-mode () 'common-lisp:string)
(common-lisp:deftype m2ts-scte35control () 'common-lisp:string)
(common-lisp:deftype m2ts-segmentation-markers () 'common-lisp:string)
(common-lisp:deftype m2ts-segmentation-style () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (m2ts-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-m2ts-settings-"))
   (absent-input-audio-behavior common-lisp:nil :type
    (common-lisp:or m2ts-absent-input-audio-behavior common-lisp:null))
   (arib common-lisp:nil :type (common-lisp:or m2ts-arib common-lisp:null))
   (arib-captions-pid common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (arib-captions-pid-control common-lisp:nil :type
    (common-lisp:or m2ts-arib-captions-pid-control common-lisp:null))
   (audio-buffer-model common-lisp:nil :type
    (common-lisp:or m2ts-audio-buffer-model common-lisp:null))
   (audio-frames-per-pes common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (audio-pids common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (audio-stream-type common-lisp:nil :type
    (common-lisp:or m2ts-audio-stream-type common-lisp:null))
   (bitrate common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (buffer-model common-lisp:nil :type
    (common-lisp:or m2ts-buffer-model common-lisp:null))
   (cc-descriptor common-lisp:nil :type
    (common-lisp:or m2ts-cc-descriptor common-lisp:null))
   (dvb-nit-settings common-lisp:nil :type
    (common-lisp:or dvb-nit-settings common-lisp:null))
   (dvb-sdt-settings common-lisp:nil :type
    (common-lisp:or dvb-sdt-settings common-lisp:null))
   (dvb-sub-pids common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (dvb-tdt-settings common-lisp:nil :type
    (common-lisp:or dvb-tdt-settings common-lisp:null))
   (dvb-teletext-pid common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (ebif common-lisp:nil :type
    (common-lisp:or m2ts-ebif-control common-lisp:null))
   (ebp-audio-interval common-lisp:nil :type
    (common-lisp:or m2ts-audio-interval common-lisp:null))
   (ebp-lookahead-ms common-lisp:nil :type
    (common-lisp:or |__integerMin0Max10000| common-lisp:null))
   (ebp-placement common-lisp:nil :type
    (common-lisp:or m2ts-ebp-placement common-lisp:null))
   (ecm-pid common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (es-rate-in-pes common-lisp:nil :type
    (common-lisp:or m2ts-es-rate-in-pes common-lisp:null))
   (etv-platform-pid common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (etv-signal-pid common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (fragment-time common-lisp:nil :type
    (common-lisp:or |__doubleMin0| common-lisp:null))
   (klv common-lisp:nil :type (common-lisp:or m2ts-klv common-lisp:null))
   (klv-data-pids common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (nielsen-id3behavior common-lisp:nil :type
    (common-lisp:or m2ts-nielsen-id3behavior common-lisp:null))
   (null-packet-bitrate common-lisp:nil :type
    (common-lisp:or |__doubleMin0| common-lisp:null))
   (pat-interval common-lisp:nil :type
    (common-lisp:or |__integerMin0Max1000| common-lisp:null))
   (pcr-control common-lisp:nil :type
    (common-lisp:or m2ts-pcr-control common-lisp:null))
   (pcr-period common-lisp:nil :type
    (common-lisp:or |__integerMin0Max500| common-lisp:null))
   (pcr-pid common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (pmt-interval common-lisp:nil :type
    (common-lisp:or |__integerMin0Max1000| common-lisp:null))
   (pmt-pid common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (program-num common-lisp:nil :type
    (common-lisp:or |__integerMin0Max65535| common-lisp:null))
   (rate-mode common-lisp:nil :type
    (common-lisp:or m2ts-rate-mode common-lisp:null))
   (scte27pids common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (scte35control common-lisp:nil :type
    (common-lisp:or m2ts-scte35control common-lisp:null))
   (scte35pid common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (segmentation-markers common-lisp:nil :type
    (common-lisp:or m2ts-segmentation-markers common-lisp:null))
   (segmentation-style common-lisp:nil :type
    (common-lisp:or m2ts-segmentation-style common-lisp:null))
   (segmentation-time common-lisp:nil :type
    (common-lisp:or |__doubleMin1| common-lisp:null))
   (timed-metadata-behavior common-lisp:nil :type
    (common-lisp:or m2ts-timed-metadata-behavior common-lisp:null))
   (timed-metadata-pid common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (transport-stream-id common-lisp:nil :type
    (common-lisp:or |__integerMin0Max65535| common-lisp:null))
   (video-pid common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (scte35preroll-pullup-milliseconds common-lisp:nil :type
    (common-lisp:or |__doubleMin0Max5000| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'm2ts-settings 'make-m2ts-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input m2ts-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input m2ts-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'absent-input-audio-behavior))
      (common-lisp:list
       (common-lisp:cons "AbsentInputAudioBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arib))
      (common-lisp:list
       (common-lisp:cons "Arib"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arib-captions-pid))
      (common-lisp:list
       (common-lisp:cons "AribCaptionsPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'arib-captions-pid-control))
      (common-lisp:list
       (common-lisp:cons "AribCaptionsPidControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-buffer-model))
      (common-lisp:list
       (common-lisp:cons "AudioBufferModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-frames-per-pes))
      (common-lisp:list
       (common-lisp:cons "AudioFramesPerPes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-pids))
      (common-lisp:list
       (common-lisp:cons "AudioPids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-stream-type))
      (common-lisp:list
       (common-lisp:cons "AudioStreamType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buffer-model))
      (common-lisp:list
       (common-lisp:cons "BufferModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cc-descriptor))
      (common-lisp:list
       (common-lisp:cons "CcDescriptor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dvb-nit-settings))
      (common-lisp:list
       (common-lisp:cons "DvbNitSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dvb-sdt-settings))
      (common-lisp:list
       (common-lisp:cons "DvbSdtSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dvb-sub-pids))
      (common-lisp:list
       (common-lisp:cons "DvbSubPids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dvb-tdt-settings))
      (common-lisp:list
       (common-lisp:cons "DvbTdtSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dvb-teletext-pid))
      (common-lisp:list
       (common-lisp:cons "DvbTeletextPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebif))
      (common-lisp:list
       (common-lisp:cons "Ebif"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebp-audio-interval))
      (common-lisp:list
       (common-lisp:cons "EbpAudioInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebp-lookahead-ms))
      (common-lisp:list
       (common-lisp:cons "EbpLookaheadMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ebp-placement))
      (common-lisp:list
       (common-lisp:cons "EbpPlacement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecm-pid))
      (common-lisp:list
       (common-lisp:cons "EcmPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'es-rate-in-pes))
      (common-lisp:list
       (common-lisp:cons "EsRateInPes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etv-platform-pid))
      (common-lisp:list
       (common-lisp:cons "EtvPlatformPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etv-signal-pid))
      (common-lisp:list
       (common-lisp:cons "EtvSignalPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fragment-time))
      (common-lisp:list
       (common-lisp:cons "FragmentTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'klv))
      (common-lisp:list
       (common-lisp:cons "Klv"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'klv-data-pids))
      (common-lisp:list
       (common-lisp:cons "KlvDataPids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nielsen-id3behavior))
      (common-lisp:list
       (common-lisp:cons "NielsenId3Behavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'null-packet-bitrate))
      (common-lisp:list
       (common-lisp:cons "NullPacketBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pat-interval))
      (common-lisp:list
       (common-lisp:cons "PatInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pcr-control))
      (common-lisp:list
       (common-lisp:cons "PcrControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pcr-period))
      (common-lisp:list
       (common-lisp:cons "PcrPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pcr-pid))
      (common-lisp:list
       (common-lisp:cons "PcrPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pmt-interval))
      (common-lisp:list
       (common-lisp:cons "PmtInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pmt-pid))
      (common-lisp:list
       (common-lisp:cons "PmtPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-num))
      (common-lisp:list
       (common-lisp:cons "ProgramNum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rate-mode))
      (common-lisp:list
       (common-lisp:cons "RateMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte27pids))
      (common-lisp:list
       (common-lisp:cons "Scte27Pids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35control))
      (common-lisp:list
       (common-lisp:cons "Scte35Control"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35pid))
      (common-lisp:list
       (common-lisp:cons "Scte35Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segmentation-markers))
      (common-lisp:list
       (common-lisp:cons "SegmentationMarkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segmentation-style))
      (common-lisp:list
       (common-lisp:cons "SegmentationStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segmentation-time))
      (common-lisp:list
       (common-lisp:cons "SegmentationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-behavior))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timed-metadata-pid))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transport-stream-id))
      (common-lisp:list
       (common-lisp:cons "TransportStreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-pid))
      (common-lisp:list
       (common-lisp:cons "VideoPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte35preroll-pullup-milliseconds))
      (common-lisp:list
       (common-lisp:cons "Scte35PrerollPullupMilliseconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input m2ts-settings))
   common-lisp:nil))
(common-lisp:deftype m2ts-timed-metadata-behavior () 'common-lisp:string)
(common-lisp:deftype m3u8nielsen-id3behavior () 'common-lisp:string)
(common-lisp:deftype m3u8pcr-control () 'common-lisp:string)
(common-lisp:deftype m3u8scte35behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (m3u8settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-m3u8settings-"))
   (audio-frames-per-pes common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (audio-pids common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (ecm-pid common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (nielsen-id3behavior common-lisp:nil :type
    (common-lisp:or m3u8nielsen-id3behavior common-lisp:null))
   (pat-interval common-lisp:nil :type
    (common-lisp:or |__integerMin0Max1000| common-lisp:null))
   (pcr-control common-lisp:nil :type
    (common-lisp:or m3u8pcr-control common-lisp:null))
   (pcr-period common-lisp:nil :type
    (common-lisp:or |__integerMin0Max500| common-lisp:null))
   (pcr-pid common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (pmt-interval common-lisp:nil :type
    (common-lisp:or |__integerMin0Max1000| common-lisp:null))
   (pmt-pid common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (program-num common-lisp:nil :type
    (common-lisp:or |__integerMin0Max65535| common-lisp:null))
   (scte35behavior common-lisp:nil :type
    (common-lisp:or m3u8scte35behavior common-lisp:null))
   (scte35pid common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (timed-metadata-behavior common-lisp:nil :type
    (common-lisp:or m3u8timed-metadata-behavior common-lisp:null))
   (timed-metadata-pid common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (transport-stream-id common-lisp:nil :type
    (common-lisp:or |__integerMin0Max65535| common-lisp:null))
   (video-pid common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'm3u8settings 'make-m3u8settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input m3u8settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input m3u8settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-frames-per-pes))
      (common-lisp:list
       (common-lisp:cons "AudioFramesPerPes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-pids))
      (common-lisp:list
       (common-lisp:cons "AudioPids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ecm-pid))
      (common-lisp:list
       (common-lisp:cons "EcmPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nielsen-id3behavior))
      (common-lisp:list
       (common-lisp:cons "NielsenId3Behavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pat-interval))
      (common-lisp:list
       (common-lisp:cons "PatInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pcr-control))
      (common-lisp:list
       (common-lisp:cons "PcrControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pcr-period))
      (common-lisp:list
       (common-lisp:cons "PcrPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pcr-pid))
      (common-lisp:list
       (common-lisp:cons "PcrPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pmt-interval))
      (common-lisp:list
       (common-lisp:cons "PmtInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pmt-pid))
      (common-lisp:list
       (common-lisp:cons "PmtPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-num))
      (common-lisp:list
       (common-lisp:cons "ProgramNum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35behavior))
      (common-lisp:list
       (common-lisp:cons "Scte35Behavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35pid))
      (common-lisp:list
       (common-lisp:cons "Scte35Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-behavior))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timed-metadata-pid))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transport-stream-id))
      (common-lisp:list
       (common-lisp:cons "TransportStreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-pid))
      (common-lisp:list
       (common-lisp:cons "VideoPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input m3u8settings))
   common-lisp:nil))
(common-lisp:deftype m3u8timed-metadata-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (maintenance-create-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-maintenance-create-settings-"))
   (maintenance-day common-lisp:nil :type
    (common-lisp:or maintenance-day common-lisp:null))
   (maintenance-start-time common-lisp:nil :type
    (common-lisp:or |__stringPattern010920300| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'maintenance-create-settings
                    'make-maintenance-create-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-create-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-create-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance-day))
      (common-lisp:list
       (common-lisp:cons "MaintenanceDay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-start-time))
      (common-lisp:list
       (common-lisp:cons "MaintenanceStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-create-settings))
   common-lisp:nil))
(common-lisp:deftype maintenance-day () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (maintenance-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-maintenance-status-"))
   (maintenance-day common-lisp:nil :type
    (common-lisp:or maintenance-day common-lisp:null))
   (maintenance-deadline common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (maintenance-scheduled-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (maintenance-start-time common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'maintenance-status 'make-maintenance-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input maintenance-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input maintenance-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance-day))
      (common-lisp:list
       (common-lisp:cons "MaintenanceDay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-deadline))
      (common-lisp:list
       (common-lisp:cons "MaintenanceDeadline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-scheduled-date))
      (common-lisp:list
       (common-lisp:cons "MaintenanceScheduledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-start-time))
      (common-lisp:list
       (common-lisp:cons "MaintenanceStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input maintenance-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (maintenance-update-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-maintenance-update-settings-"))
   (maintenance-day common-lisp:nil :type
    (common-lisp:or maintenance-day common-lisp:null))
   (maintenance-scheduled-date common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (maintenance-start-time common-lisp:nil :type
    (common-lisp:or |__stringPattern010920300| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'maintenance-update-settings
                    'make-maintenance-update-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-update-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-update-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance-day))
      (common-lisp:list
       (common-lisp:cons "MaintenanceDay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-scheduled-date))
      (common-lisp:list
       (common-lisp:cons "MaintenanceScheduledDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maintenance-start-time))
      (common-lisp:list
       (common-lisp:cons "MaintenanceStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          maintenance-update-settings))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (media-connect-flow (:copier common-lisp:nil)
      (:conc-name "struct-shape-media-connect-flow-"))
   (flow-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'media-connect-flow 'make-media-connect-flow))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input media-connect-flow))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input media-connect-flow))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input media-connect-flow))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (media-connect-flow-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-media-connect-flow-request-"))
   (flow-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'media-connect-flow-request
                    'make-media-connect-flow-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-connect-flow-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-connect-flow-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-arn))
      (common-lisp:list
       (common-lisp:cons "FlowArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-connect-flow-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (media-package-group-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-media-package-group-settings-"))
   (destination (common-lisp:error ":destination is required") :type
    (common-lisp:or output-location-ref common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'media-package-group-settings
                    'make-media-package-group-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-package-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-package-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-package-group-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (media-package-output-destination-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-media-package-output-destination-settings-"))
   (channel-id common-lisp:nil :type
    (common-lisp:or |__stringMin1| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'media-package-output-destination-settings
                    'make-media-package-output-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-package-output-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-package-output-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "ChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-package-output-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (media-package-output-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-media-package-output-settings-")))
 (common-lisp:export
  (common-lisp:list 'media-package-output-settings
                    'make-media-package-output-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          media-package-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          media-package-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          media-package-output-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (motion-graphics-activate-schedule-action-settings
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-motion-graphics-activate-schedule-action-settings-"))
   (duration common-lisp:nil :type
    (common-lisp:or |__longMin0Max86400000| common-lisp:null))
   (password-param common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (username common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'motion-graphics-activate-schedule-action-settings
                    'make-motion-graphics-activate-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-activate-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-activate-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-param))
      (common-lisp:list
       (common-lisp:cons "PasswordParam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-activate-schedule-action-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (motion-graphics-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-motion-graphics-configuration-"))
   (motion-graphics-insertion common-lisp:nil :type
    (common-lisp:or motion-graphics-insertion common-lisp:null))
   (motion-graphics-settings
    (common-lisp:error ":motion-graphics-settings is required") :type
    (common-lisp:or motion-graphics-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'motion-graphics-configuration
                    'make-motion-graphics-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'motion-graphics-insertion))
      (common-lisp:list
       (common-lisp:cons "MotionGraphicsInsertion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'motion-graphics-settings))
      (common-lisp:list
       (common-lisp:cons "MotionGraphicsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (motion-graphics-deactivate-schedule-action-settings
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-motion-graphics-deactivate-schedule-action-settings-")))
 (common-lisp:export
  (common-lisp:list 'motion-graphics-deactivate-schedule-action-settings
                    'make-motion-graphics-deactivate-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-deactivate-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-deactivate-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-deactivate-schedule-action-settings))
   common-lisp:nil))
(common-lisp:deftype motion-graphics-insertion () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (motion-graphics-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-motion-graphics-settings-"))
   (html-motion-graphics-settings common-lisp:nil :type
    (common-lisp:or html-motion-graphics-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'motion-graphics-settings 'make-motion-graphics-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'html-motion-graphics-settings))
      (common-lisp:list
       (common-lisp:cons "HtmlMotionGraphicsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          motion-graphics-settings))
   common-lisp:nil))
(common-lisp:deftype mp2coding-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (mp2settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-mp2settings-"))
   (bitrate common-lisp:nil :type (common-lisp:or |__double| common-lisp:null))
   (coding-mode common-lisp:nil :type
    (common-lisp:or mp2coding-mode common-lisp:null))
   (sample-rate common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'mp2settings 'make-mp2settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mp2settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mp2settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bitrate))
      (common-lisp:list
       (common-lisp:cons "Bitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coding-mode))
      (common-lisp:list
       (common-lisp:cons "CodingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-rate))
      (common-lisp:list
       (common-lisp:cons "SampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mp2settings))
   common-lisp:nil))
(common-lisp:deftype mpeg2adaptive-quantization () 'common-lisp:string)
(common-lisp:deftype mpeg2color-metadata () 'common-lisp:string)
(common-lisp:deftype mpeg2color-space () 'common-lisp:string)
(common-lisp:deftype mpeg2display-ratio () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (mpeg2filter-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-mpeg2filter-settings-"))
   (temporal-filter-settings common-lisp:nil :type
    (common-lisp:or temporal-filter-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'mpeg2filter-settings 'make-mpeg2filter-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mpeg2filter-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mpeg2filter-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'temporal-filter-settings))
      (common-lisp:list
       (common-lisp:cons "TemporalFilterSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mpeg2filter-settings))
   common-lisp:nil))
(common-lisp:deftype mpeg2gop-size-units () 'common-lisp:string)
(common-lisp:deftype mpeg2scan-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (mpeg2settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-mpeg2settings-"))
   (adaptive-quantization common-lisp:nil :type
    (common-lisp:or mpeg2adaptive-quantization common-lisp:null))
   (afd-signaling common-lisp:nil :type
    (common-lisp:or afd-signaling common-lisp:null))
   (color-metadata common-lisp:nil :type
    (common-lisp:or mpeg2color-metadata common-lisp:null))
   (color-space common-lisp:nil :type
    (common-lisp:or mpeg2color-space common-lisp:null))
   (display-aspect-ratio common-lisp:nil :type
    (common-lisp:or mpeg2display-ratio common-lisp:null))
   (filter-settings common-lisp:nil :type
    (common-lisp:or mpeg2filter-settings common-lisp:null))
   (fixed-afd common-lisp:nil :type
    (common-lisp:or fixed-afd common-lisp:null))
   (framerate-denominator
    (common-lisp:error ":framerate-denominator is required") :type
    (common-lisp:or |__integerMin1| common-lisp:null))
   (framerate-numerator (common-lisp:error ":framerate-numerator is required")
    :type (common-lisp:or |__integerMin1| common-lisp:null))
   (gop-closed-cadence common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (gop-num-bframes common-lisp:nil :type
    (common-lisp:or |__integerMin0Max7| common-lisp:null))
   (gop-size common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null))
   (gop-size-units common-lisp:nil :type
    (common-lisp:or mpeg2gop-size-units common-lisp:null))
   (scan-type common-lisp:nil :type
    (common-lisp:or mpeg2scan-type common-lisp:null))
   (subgop-length common-lisp:nil :type
    (common-lisp:or mpeg2sub-gop-length common-lisp:null))
   (timecode-insertion common-lisp:nil :type
    (common-lisp:or mpeg2timecode-insertion-behavior common-lisp:null))
   (timecode-burnin-settings common-lisp:nil :type
    (common-lisp:or timecode-burnin-settings common-lisp:null)))
 (common-lisp:export (common-lisp:list 'mpeg2settings 'make-mpeg2settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mpeg2settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mpeg2settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'adaptive-quantization))
      (common-lisp:list
       (common-lisp:cons "AdaptiveQuantization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'afd-signaling))
      (common-lisp:list
       (common-lisp:cons "AfdSignaling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-metadata))
      (common-lisp:list
       (common-lisp:cons "ColorMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-space))
      (common-lisp:list
       (common-lisp:cons "ColorSpace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'display-aspect-ratio))
      (common-lisp:list
       (common-lisp:cons "DisplayAspectRatio"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-settings))
      (common-lisp:list
       (common-lisp:cons "FilterSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-afd))
      (common-lisp:list
       (common-lisp:cons "FixedAfd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'framerate-denominator))
      (common-lisp:list
       (common-lisp:cons "FramerateDenominator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framerate-numerator))
      (common-lisp:list
       (common-lisp:cons "FramerateNumerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-closed-cadence))
      (common-lisp:list
       (common-lisp:cons "GopClosedCadence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-num-bframes))
      (common-lisp:list
       (common-lisp:cons "GopNumBFrames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-size))
      (common-lisp:list
       (common-lisp:cons "GopSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gop-size-units))
      (common-lisp:list
       (common-lisp:cons "GopSizeUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scan-type))
      (common-lisp:list
       (common-lisp:cons "ScanType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subgop-length))
      (common-lisp:list
       (common-lisp:cons "SubgopLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timecode-insertion))
      (common-lisp:list
       (common-lisp:cons "TimecodeInsertion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timecode-burnin-settings))
      (common-lisp:list
       (common-lisp:cons "TimecodeBurninSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mpeg2settings))
   common-lisp:nil))
(common-lisp:deftype mpeg2sub-gop-length () 'common-lisp:string)
(common-lisp:deftype mpeg2timecode-insertion-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ms-smooth-group-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-ms-smooth-group-settings-"))
   (acquisition-point-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (audio-only-timecode-control common-lisp:nil :type
    (common-lisp:or smooth-group-audio-only-timecode-control common-lisp:null))
   (certificate-mode common-lisp:nil :type
    (common-lisp:or smooth-group-certificate-mode common-lisp:null))
   (connection-retry-interval common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (destination (common-lisp:error ":destination is required") :type
    (common-lisp:or output-location-ref common-lisp:null))
   (event-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (event-id-mode common-lisp:nil :type
    (common-lisp:or smooth-group-event-id-mode common-lisp:null))
   (event-stop-behavior common-lisp:nil :type
    (common-lisp:or smooth-group-event-stop-behavior common-lisp:null))
   (filecache-duration common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (fragment-length common-lisp:nil :type
    (common-lisp:or |__integerMin1| common-lisp:null))
   (input-loss-action common-lisp:nil :type
    (common-lisp:or input-loss-action-for-ms-smooth-out common-lisp:null))
   (num-retries common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (restart-delay common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (segmentation-mode common-lisp:nil :type
    (common-lisp:or smooth-group-segmentation-mode common-lisp:null))
   (send-delay-ms common-lisp:nil :type
    (common-lisp:or |__integerMin0Max10000| common-lisp:null))
   (sparse-track-type common-lisp:nil :type
    (common-lisp:or smooth-group-sparse-track-type common-lisp:null))
   (stream-manifest-behavior common-lisp:nil :type
    (common-lisp:or smooth-group-stream-manifest-behavior common-lisp:null))
   (timestamp-offset common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (timestamp-offset-mode common-lisp:nil :type
    (common-lisp:or smooth-group-timestamp-offset-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ms-smooth-group-settings 'make-ms-smooth-group-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ms-smooth-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ms-smooth-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'acquisition-point-id))
      (common-lisp:list
       (common-lisp:cons "AcquisitionPointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-only-timecode-control))
      (common-lisp:list
       (common-lisp:cons "AudioOnlyTimecodeControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-mode))
      (common-lisp:list
       (common-lisp:cons "CertificateMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-retry-interval))
      (common-lisp:list
       (common-lisp:cons "ConnectionRetryInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "EventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id-mode))
      (common-lisp:list
       (common-lisp:cons "EventIdMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-stop-behavior))
      (common-lisp:list
       (common-lisp:cons "EventStopBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filecache-duration))
      (common-lisp:list
       (common-lisp:cons "FilecacheDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fragment-length))
      (common-lisp:list
       (common-lisp:cons "FragmentLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-loss-action))
      (common-lisp:list
       (common-lisp:cons "InputLossAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-retries))
      (common-lisp:list
       (common-lisp:cons "NumRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restart-delay))
      (common-lisp:list
       (common-lisp:cons "RestartDelay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segmentation-mode))
      (common-lisp:list
       (common-lisp:cons "SegmentationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'send-delay-ms))
      (common-lisp:list
       (common-lisp:cons "SendDelayMs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sparse-track-type))
      (common-lisp:list
       (common-lisp:cons "SparseTrackType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'stream-manifest-behavior))
      (common-lisp:list
       (common-lisp:cons "StreamManifestBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp-offset))
      (common-lisp:list
       (common-lisp:cons "TimestampOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timestamp-offset-mode))
      (common-lisp:list
       (common-lisp:cons "TimestampOffsetMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ms-smooth-group-settings))
   common-lisp:nil))
(common-lisp:deftype ms-smooth-h265packaging-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ms-smooth-output-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-ms-smooth-output-settings-"))
   (h265packaging-type common-lisp:nil :type
    (common-lisp:or ms-smooth-h265packaging-type common-lisp:null))
   (name-modifier common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ms-smooth-output-settings
                    'make-ms-smooth-output-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ms-smooth-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ms-smooth-output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'h265packaging-type))
      (common-lisp:list
       (common-lisp:cons "H265PackagingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-modifier))
      (common-lisp:list
       (common-lisp:cons "NameModifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ms-smooth-output-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (multiplex (:copier common-lisp:nil)
      (:conc-name "struct-shape-multiplex-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (availability-zones common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (destinations common-lisp:nil :type
    (common-lisp:or |__listOfMultiplexOutputDestination| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (multiplex-settings common-lisp:nil :type
    (common-lisp:or multiplex-settings common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (pipelines-running-count common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (program-count common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or multiplex-state common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export (common-lisp:list 'multiplex 'make-multiplex))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input multiplex))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input multiplex))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-count))
      (common-lisp:list
       (common-lisp:cons "ProgramCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input multiplex))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (multiplex-configuration-validation-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-multiplex-configuration-validation-error-"))
   (message common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (validation-errors common-lisp:nil :type
    (common-lisp:or |__listOfValidationError| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'multiplex-configuration-validation-error
                    'make-multiplex-configuration-validation-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-configuration-validation-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-configuration-validation-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-errors))
      (common-lisp:list
       (common-lisp:cons "ValidationErrors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-configuration-validation-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (multiplex-group-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-multiplex-group-settings-")))
 (common-lisp:export
  (common-lisp:list 'multiplex-group-settings 'make-multiplex-group-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-group-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (multiplex-media-connect-output-destination-settings
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-multiplex-media-connect-output-destination-settings-"))
   (entitlement-arn common-lisp:nil :type
    (common-lisp:or |__stringMin1| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'multiplex-media-connect-output-destination-settings
                    'make-multiplex-media-connect-output-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-media-connect-output-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-media-connect-output-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entitlement-arn))
      (common-lisp:list
       (common-lisp:cons "EntitlementArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-media-connect-output-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (multiplex-output-destination (:copier common-lisp:nil)
      (:conc-name "struct-shape-multiplex-output-destination-"))
   (media-connect-settings common-lisp:nil :type
    (common-lisp:or multiplex-media-connect-output-destination-settings
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'multiplex-output-destination
                    'make-multiplex-output-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-output-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-output-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-connect-settings))
      (common-lisp:list
       (common-lisp:cons "MediaConnectSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-output-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (multiplex-output-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-multiplex-output-settings-"))
   (destination (common-lisp:error ":destination is required") :type
    (common-lisp:or output-location-ref common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'multiplex-output-settings
                    'make-multiplex-output-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-output-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (multiplex-program (:copier common-lisp:nil)
      (:conc-name "struct-shape-multiplex-program-"))
   (channel-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (multiplex-program-settings common-lisp:nil :type
    (common-lisp:or multiplex-program-settings common-lisp:null))
   (packet-identifiers-map common-lisp:nil :type
    (common-lisp:or multiplex-program-packet-identifiers-map common-lisp:null))
   (pipeline-details common-lisp:nil :type
    (common-lisp:or |__listOfMultiplexProgramPipelineDetail| common-lisp:null))
   (program-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'multiplex-program 'make-multiplex-program))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input multiplex-program))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input multiplex-program))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "ChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiplex-program-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgramSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'packet-identifiers-map))
      (common-lisp:list
       (common-lisp:cons "PacketIdentifiersMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-details))
      (common-lisp:list
       (common-lisp:cons "PipelineDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-name))
      (common-lisp:list
       (common-lisp:cons "ProgramName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input multiplex-program))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (multiplex-program-channel-destination-settings (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-multiplex-program-channel-destination-settings-"))
   (multiplex-id common-lisp:nil :type
    (common-lisp:or |__stringMin1| common-lisp:null))
   (program-name common-lisp:nil :type
    (common-lisp:or |__stringMin1| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'multiplex-program-channel-destination-settings
                    'make-multiplex-program-channel-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-channel-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-channel-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-id))
      (common-lisp:list
       (common-lisp:cons "MultiplexId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-name))
      (common-lisp:list
       (common-lisp:cons "ProgramName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-channel-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (multiplex-program-packet-identifiers-map (:copier common-lisp:nil)
      (:conc-name "struct-shape-multiplex-program-packet-identifiers-map-"))
   (audio-pids common-lisp:nil :type
    (common-lisp:or |__listOf__integer| common-lisp:null))
   (dvb-sub-pids common-lisp:nil :type
    (common-lisp:or |__listOf__integer| common-lisp:null))
   (dvb-teletext-pid common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (etv-platform-pid common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (etv-signal-pid common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (klv-data-pids common-lisp:nil :type
    (common-lisp:or |__listOf__integer| common-lisp:null))
   (pcr-pid common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (pmt-pid common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (private-metadata-pid common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (scte27pids common-lisp:nil :type
    (common-lisp:or |__listOf__integer| common-lisp:null))
   (scte35pid common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (timed-metadata-pid common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (video-pid common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'multiplex-program-packet-identifiers-map
                    'make-multiplex-program-packet-identifiers-map))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-packet-identifiers-map))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-packet-identifiers-map))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-pids))
      (common-lisp:list
       (common-lisp:cons "AudioPids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dvb-sub-pids))
      (common-lisp:list
       (common-lisp:cons "DvbSubPids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dvb-teletext-pid))
      (common-lisp:list
       (common-lisp:cons "DvbTeletextPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etv-platform-pid))
      (common-lisp:list
       (common-lisp:cons "EtvPlatformPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'etv-signal-pid))
      (common-lisp:list
       (common-lisp:cons "EtvSignalPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'klv-data-pids))
      (common-lisp:list
       (common-lisp:cons "KlvDataPids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pcr-pid))
      (common-lisp:list
       (common-lisp:cons "PcrPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pmt-pid))
      (common-lisp:list
       (common-lisp:cons "PmtPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-metadata-pid))
      (common-lisp:list
       (common-lisp:cons "PrivateMetadataPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte27pids))
      (common-lisp:list
       (common-lisp:cons "Scte27Pids"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35pid))
      (common-lisp:list
       (common-lisp:cons "Scte35Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timed-metadata-pid))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-pid))
      (common-lisp:list
       (common-lisp:cons "VideoPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-packet-identifiers-map))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (multiplex-program-pipeline-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-multiplex-program-pipeline-detail-"))
   (active-channel-pipeline common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (pipeline-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'multiplex-program-pipeline-detail
                    'make-multiplex-program-pipeline-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-pipeline-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-pipeline-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-channel-pipeline))
      (common-lisp:list
       (common-lisp:cons "ActiveChannelPipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-id))
      (common-lisp:list
       (common-lisp:cons "PipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-pipeline-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (multiplex-program-service-descriptor (:copier common-lisp:nil)
      (:conc-name "struct-shape-multiplex-program-service-descriptor-"))
   (provider-name (common-lisp:error ":provider-name is required") :type
    (common-lisp:or |__stringMax256| common-lisp:null))
   (service-name (common-lisp:error ":service-name is required") :type
    (common-lisp:or |__stringMax256| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'multiplex-program-service-descriptor
                    'make-multiplex-program-service-descriptor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-service-descriptor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-service-descriptor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-name))
      (common-lisp:list
       (common-lisp:cons "ProviderName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-service-descriptor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (multiplex-program-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-multiplex-program-settings-"))
   (preferred-channel-pipeline common-lisp:nil :type
    (common-lisp:or preferred-channel-pipeline common-lisp:null))
   (program-number (common-lisp:error ":program-number is required") :type
    (common-lisp:or |__integerMin0Max65535| common-lisp:null))
   (service-descriptor common-lisp:nil :type
    (common-lisp:or multiplex-program-service-descriptor common-lisp:null))
   (video-settings common-lisp:nil :type
    (common-lisp:or multiplex-video-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'multiplex-program-settings
                    'make-multiplex-program-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preferred-channel-pipeline))
      (common-lisp:list
       (common-lisp:cons "PreferredChannelPipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-number))
      (common-lisp:list
       (common-lisp:cons "ProgramNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-descriptor))
      (common-lisp:list
       (common-lisp:cons "ServiceDescriptor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-settings))
      (common-lisp:list
       (common-lisp:cons "VideoSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (multiplex-program-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-multiplex-program-summary-"))
   (channel-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (program-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'multiplex-program-summary
                    'make-multiplex-program-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-id))
      (common-lisp:list
       (common-lisp:cons "ChannelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-name))
      (common-lisp:list
       (common-lisp:cons "ProgramName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-program-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (multiplex-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-multiplex-settings-"))
   (maximum-video-buffer-delay-milliseconds common-lisp:nil :type
    (common-lisp:or |__integerMin800Max3000| common-lisp:null))
   (transport-stream-bitrate
    (common-lisp:error ":transport-stream-bitrate is required") :type
    (common-lisp:or |__integerMin1000000Max100000000| common-lisp:null))
   (transport-stream-id (common-lisp:error ":transport-stream-id is required")
    :type (common-lisp:or |__integerMin0Max65535| common-lisp:null))
   (transport-stream-reserved-bitrate common-lisp:nil :type
    (common-lisp:or |__integerMin0Max100000000| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'multiplex-settings 'make-multiplex-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input multiplex-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input multiplex-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-video-buffer-delay-milliseconds))
      (common-lisp:list
       (common-lisp:cons "MaximumVideoBufferDelayMilliseconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transport-stream-bitrate))
      (common-lisp:list
       (common-lisp:cons "TransportStreamBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transport-stream-id))
      (common-lisp:list
       (common-lisp:cons "TransportStreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transport-stream-reserved-bitrate))
      (common-lisp:list
       (common-lisp:cons "TransportStreamReservedBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input multiplex-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (multiplex-settings-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-multiplex-settings-summary-"))
   (transport-stream-bitrate common-lisp:nil :type
    (common-lisp:or |__integerMin1000000Max100000000| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'multiplex-settings-summary
                    'make-multiplex-settings-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-settings-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-settings-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transport-stream-bitrate))
      (common-lisp:list
       (common-lisp:cons "TransportStreamBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-settings-summary))
   common-lisp:nil))
(common-lisp:deftype multiplex-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (multiplex-statmux-video-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-multiplex-statmux-video-settings-"))
   (maximum-bitrate common-lisp:nil :type
    (common-lisp:or |__integerMin100000Max100000000| common-lisp:null))
   (minimum-bitrate common-lisp:nil :type
    (common-lisp:or |__integerMin100000Max100000000| common-lisp:null))
   (priority common-lisp:nil :type
    (common-lisp:or |__integerMinNegative5Max5| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'multiplex-statmux-video-settings
                    'make-multiplex-statmux-video-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-statmux-video-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-statmux-video-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaximumBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum-bitrate))
      (common-lisp:list
       (common-lisp:cons "MinimumBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'priority))
      (common-lisp:list
       (common-lisp:cons "Priority"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-statmux-video-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (multiplex-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-multiplex-summary-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (availability-zones common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (multiplex-settings common-lisp:nil :type
    (common-lisp:or multiplex-settings-summary common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (pipelines-running-count common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (program-count common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or multiplex-state common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'multiplex-summary 'make-multiplex-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input multiplex-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input multiplex-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-count))
      (common-lisp:list
       (common-lisp:cons "ProgramCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input multiplex-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (multiplex-video-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-multiplex-video-settings-"))
   (constant-bitrate common-lisp:nil :type
    (common-lisp:or |__integerMin100000Max100000000| common-lisp:null))
   (statmux-settings common-lisp:nil :type
    (common-lisp:or multiplex-statmux-video-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'multiplex-video-settings 'make-multiplex-video-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-video-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-video-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constant-bitrate))
      (common-lisp:list
       (common-lisp:cons "ConstantBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statmux-settings))
      (common-lisp:list
       (common-lisp:cons "StatmuxSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multiplex-video-settings))
   common-lisp:nil))
(common-lisp:deftype network-input-server-validation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (network-input-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-input-settings-"))
   (hls-input-settings common-lisp:nil :type
    (common-lisp:or hls-input-settings common-lisp:null))
   (server-validation common-lisp:nil :type
    (common-lisp:or network-input-server-validation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-input-settings 'make-network-input-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-input-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-input-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hls-input-settings))
      (common-lisp:list
       (common-lisp:cons "HlsInputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-validation))
      (common-lisp:list
       (common-lisp:cons "ServerValidation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-input-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (nielsen-cbet (:copier common-lisp:nil)
      (:conc-name "struct-shape-nielsen-cbet-"))
   (cbet-check-digit-string
    (common-lisp:error ":cbet-check-digit-string is required") :type
    (common-lisp:or |__stringMin2Max2| common-lisp:null))
   (cbet-stepaside (common-lisp:error ":cbet-stepaside is required") :type
    (common-lisp:or nielsen-watermarks-cbet-stepaside common-lisp:null))
   (csid (common-lisp:error ":csid is required") :type
    (common-lisp:or |__stringMin1Max7| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'nielsen-cbet 'make-nielsen-cbet))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input nielsen-cbet))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input nielsen-cbet))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cbet-check-digit-string))
      (common-lisp:list
       (common-lisp:cons "CbetCheckDigitString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cbet-stepaside))
      (common-lisp:list
       (common-lisp:cons "CbetStepaside"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csid))
      (common-lisp:list
       (common-lisp:cons "Csid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input nielsen-cbet))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (nielsen-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-nielsen-configuration-"))
   (distributor-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (nielsen-pcm-to-id3tagging common-lisp:nil :type
    (common-lisp:or nielsen-pcm-to-id3tagging-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'nielsen-configuration 'make-nielsen-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          nielsen-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          nielsen-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'distributor-id))
      (common-lisp:list
       (common-lisp:cons "DistributorId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nielsen-pcm-to-id3tagging))
      (common-lisp:list
       (common-lisp:cons "NielsenPcmToId3Tagging"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          nielsen-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (nielsen-naes-ii-nw (:copier common-lisp:nil)
      (:conc-name "struct-shape-nielsen-naes-ii-nw-"))
   (check-digit-string (common-lisp:error ":check-digit-string is required")
    :type (common-lisp:or |__stringMin2Max2| common-lisp:null))
   (sid (common-lisp:error ":sid is required") :type
    (common-lisp:or |__doubleMin1Max65535| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'nielsen-naes-ii-nw 'make-nielsen-naes-ii-nw))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input nielsen-naes-ii-nw))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input nielsen-naes-ii-nw))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-digit-string))
      (common-lisp:list
       (common-lisp:cons "CheckDigitString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sid))
      (common-lisp:list
       (common-lisp:cons "Sid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input nielsen-naes-ii-nw))
   common-lisp:nil))
(common-lisp:deftype nielsen-pcm-to-id3tagging-state () 'common-lisp:string)
(common-lisp:deftype nielsen-watermarks-cbet-stepaside () 'common-lisp:string)
(common-lisp:deftype nielsen-watermarks-distribution-types ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (nielsen-watermarks-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-nielsen-watermarks-settings-"))
   (nielsen-cbet-settings common-lisp:nil :type
    (common-lisp:or nielsen-cbet common-lisp:null))
   (nielsen-distribution-type common-lisp:nil :type
    (common-lisp:or nielsen-watermarks-distribution-types common-lisp:null))
   (nielsen-naes-ii-nw-settings common-lisp:nil :type
    (common-lisp:or nielsen-naes-ii-nw common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'nielsen-watermarks-settings
                    'make-nielsen-watermarks-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          nielsen-watermarks-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          nielsen-watermarks-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nielsen-cbet-settings))
      (common-lisp:list
       (common-lisp:cons "NielsenCbetSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nielsen-distribution-type))
      (common-lisp:list
       (common-lisp:cons "NielsenDistributionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nielsen-naes-ii-nw-settings))
      (common-lisp:list
       (common-lisp:cons "NielsenNaesIiNwSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          nielsen-watermarks-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition not-found-exception
     (medialive-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'not-found-exception 'not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (offering (:copier common-lisp:nil) (:conc-name "struct-shape-offering-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (currency-code common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (duration common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (duration-units common-lisp:nil :type
    (common-lisp:or offering-duration-units common-lisp:null))
   (fixed-price common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null))
   (offering-description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (offering-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (offering-type common-lisp:nil :type
    (common-lisp:or offering-type common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (resource-specification common-lisp:nil :type
    (common-lisp:or reservation-resource-specification common-lisp:null))
   (usage-price common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'offering 'make-offering))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input offering))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input offering))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-units))
      (common-lisp:list
       (common-lisp:cons "DurationUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offering-description))
      (common-lisp:list
       (common-lisp:cons "OfferingDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-id))
      (common-lisp:list
       (common-lisp:cons "OfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "ResourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input offering))
   common-lisp:nil))
(common-lisp:deftype offering-duration-units () 'common-lisp:string)
(common-lisp:deftype offering-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (output (:copier common-lisp:nil) (:conc-name "struct-shape-output-"))
   (audio-description-names common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (caption-description-names common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (output-name common-lisp:nil :type
    (common-lisp:or |__stringMin1Max255| common-lisp:null))
   (output-settings (common-lisp:error ":output-settings is required") :type
    (common-lisp:or output-settings common-lisp:null))
   (video-description-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'output 'make-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-description-names))
      (common-lisp:list
       (common-lisp:cons "AudioDescriptionNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'caption-description-names))
      (common-lisp:list
       (common-lisp:cons "CaptionDescriptionNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-name))
      (common-lisp:list
       (common-lisp:cons "OutputName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-settings))
      (common-lisp:list
       (common-lisp:cons "OutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'video-description-name))
      (common-lisp:list
       (common-lisp:cons "VideoDescriptionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (output-destination (:copier common-lisp:nil)
      (:conc-name "struct-shape-output-destination-"))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (media-package-settings common-lisp:nil :type
    (common-lisp:or |__listOfMediaPackageOutputDestinationSettings|
                    common-lisp:null))
   (multiplex-settings common-lisp:nil :type
    (common-lisp:or multiplex-program-channel-destination-settings
                    common-lisp:null))
   (settings common-lisp:nil :type
    (common-lisp:or |__listOfOutputDestinationSettings| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'output-destination 'make-output-destination))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-destination))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-destination))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-package-settings))
      (common-lisp:list
       (common-lisp:cons "MediaPackageSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'settings))
      (common-lisp:list
       (common-lisp:cons "Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-destination))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (output-destination-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-output-destination-settings-"))
   (password-param common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (stream-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (username common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'output-destination-settings
                    'make-output-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          output-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          output-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-param))
      (common-lisp:list
       (common-lisp:cons "PasswordParam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'username))
      (common-lisp:list
       (common-lisp:cons "Username"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          output-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (output-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-output-group-"))
   (name common-lisp:nil :type
    (common-lisp:or |__stringMax32| common-lisp:null))
   (output-group-settings
    (common-lisp:error ":output-group-settings is required") :type
    (common-lisp:or output-group-settings common-lisp:null))
   (outputs (common-lisp:error ":outputs is required") :type
    (common-lisp:or |__listOfOutput| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'output-group 'make-output-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-group-settings))
      (common-lisp:list
       (common-lisp:cons "OutputGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (output-group-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-output-group-settings-"))
   (archive-group-settings common-lisp:nil :type
    (common-lisp:or archive-group-settings common-lisp:null))
   (frame-capture-group-settings common-lisp:nil :type
    (common-lisp:or frame-capture-group-settings common-lisp:null))
   (hls-group-settings common-lisp:nil :type
    (common-lisp:or hls-group-settings common-lisp:null))
   (media-package-group-settings common-lisp:nil :type
    (common-lisp:or media-package-group-settings common-lisp:null))
   (ms-smooth-group-settings common-lisp:nil :type
    (common-lisp:or ms-smooth-group-settings common-lisp:null))
   (multiplex-group-settings common-lisp:nil :type
    (common-lisp:or multiplex-group-settings common-lisp:null))
   (rtmp-group-settings common-lisp:nil :type
    (common-lisp:or rtmp-group-settings common-lisp:null))
   (udp-group-settings common-lisp:nil :type
    (common-lisp:or udp-group-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'output-group-settings 'make-output-group-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          output-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          output-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'archive-group-settings))
      (common-lisp:list
       (common-lisp:cons "ArchiveGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'frame-capture-group-settings))
      (common-lisp:list
       (common-lisp:cons "FrameCaptureGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hls-group-settings))
      (common-lisp:list
       (common-lisp:cons "HlsGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-package-group-settings))
      (common-lisp:list
       (common-lisp:cons "MediaPackageGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ms-smooth-group-settings))
      (common-lisp:list
       (common-lisp:cons "MsSmoothGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiplex-group-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rtmp-group-settings))
      (common-lisp:list
       (common-lisp:cons "RtmpGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'udp-group-settings))
      (common-lisp:list
       (common-lisp:cons "UdpGroupSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          output-group-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (output-location-ref (:copier common-lisp:nil)
      (:conc-name "struct-shape-output-location-ref-"))
   (destination-ref-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'output-location-ref 'make-output-location-ref))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-location-ref))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-location-ref))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-ref-id))
      (common-lisp:list
       (common-lisp:cons "DestinationRefId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-location-ref))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (output-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-output-settings-"))
   (archive-output-settings common-lisp:nil :type
    (common-lisp:or archive-output-settings common-lisp:null))
   (frame-capture-output-settings common-lisp:nil :type
    (common-lisp:or frame-capture-output-settings common-lisp:null))
   (hls-output-settings common-lisp:nil :type
    (common-lisp:or hls-output-settings common-lisp:null))
   (media-package-output-settings common-lisp:nil :type
    (common-lisp:or media-package-output-settings common-lisp:null))
   (ms-smooth-output-settings common-lisp:nil :type
    (common-lisp:or ms-smooth-output-settings common-lisp:null))
   (multiplex-output-settings common-lisp:nil :type
    (common-lisp:or multiplex-output-settings common-lisp:null))
   (rtmp-output-settings common-lisp:nil :type
    (common-lisp:or rtmp-output-settings common-lisp:null))
   (udp-output-settings common-lisp:nil :type
    (common-lisp:or udp-output-settings common-lisp:null)))
 (common-lisp:export (common-lisp:list 'output-settings 'make-output-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'archive-output-settings))
      (common-lisp:list
       (common-lisp:cons "ArchiveOutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'frame-capture-output-settings))
      (common-lisp:list
       (common-lisp:cons "FrameCaptureOutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hls-output-settings))
      (common-lisp:list
       (common-lisp:cons "HlsOutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'media-package-output-settings))
      (common-lisp:list
       (common-lisp:cons "MediaPackageOutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ms-smooth-output-settings))
      (common-lisp:list
       (common-lisp:cons "MsSmoothOutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiplex-output-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexOutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rtmp-output-settings))
      (common-lisp:list
       (common-lisp:cons "RtmpOutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'udp-output-settings))
      (common-lisp:list
       (common-lisp:cons "UdpOutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pass-through-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-pass-through-settings-")))
 (common-lisp:export
  (common-lisp:list 'pass-through-settings 'make-pass-through-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pass-through-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pass-through-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pass-through-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pause-state-schedule-action-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-pause-state-schedule-action-settings-"))
   (pipelines common-lisp:nil :type
    (common-lisp:or |__listOfPipelinePauseStateSettings| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pause-state-schedule-action-settings
                    'make-pause-state-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pause-state-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pause-state-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipelines))
      (common-lisp:list
       (common-lisp:cons "Pipelines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pause-state-schedule-action-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pipeline-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-pipeline-detail-"))
   (active-input-attachment-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (active-input-switch-action-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (active-motion-graphics-action-name common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (active-motion-graphics-uri common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (pipeline-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'pipeline-detail 'make-pipeline-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pipeline-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pipeline-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-input-attachment-name))
      (common-lisp:list
       (common-lisp:cons "ActiveInputAttachmentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-input-switch-action-name))
      (common-lisp:list
       (common-lisp:cons "ActiveInputSwitchActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-motion-graphics-action-name))
      (common-lisp:list
       (common-lisp:cons "ActiveMotionGraphicsActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'active-motion-graphics-uri))
      (common-lisp:list
       (common-lisp:cons "ActiveMotionGraphicsUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-id))
      (common-lisp:list
       (common-lisp:cons "PipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pipeline-detail))
   common-lisp:nil))
(common-lisp:deftype pipeline-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (pipeline-pause-state-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-pipeline-pause-state-settings-"))
   (pipeline-id (common-lisp:error ":pipeline-id is required") :type
    (common-lisp:or pipeline-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pipeline-pause-state-settings
                    'make-pipeline-pause-state-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-pause-state-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-pause-state-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-id))
      (common-lisp:list
       (common-lisp:cons "PipelineId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-pause-state-settings))
   common-lisp:nil))
(common-lisp:deftype preferred-channel-pipeline () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (purchase-offering (:copier common-lisp:nil)
      (:conc-name "struct-shape-purchase-offering-"))
   (count (common-lisp:error ":count is required") :type
    (common-lisp:or |__integerMin1| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (renewal-settings common-lisp:nil :type
    (common-lisp:or renewal-settings common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (start common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'purchase-offering 'make-purchase-offering))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input purchase-offering))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input purchase-offering))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-settings))
      (common-lisp:list
       (common-lisp:cons "RenewalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input purchase-offering))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (purchase-offering-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-purchase-offering-request-"))
   (count (common-lisp:error ":count is required") :type
    (common-lisp:or |__integerMin1| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (offering-id (common-lisp:error ":offering-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (renewal-settings common-lisp:nil :type
    (common-lisp:or renewal-settings common-lisp:null))
   (request-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (start common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'purchase-offering-request
                    'make-purchase-offering-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-settings))
      (common-lisp:list
       (common-lisp:cons "RenewalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-id))
      (common-lisp:list
       (common-lisp:cons "RequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (purchase-offering-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-purchase-offering-response-"))
   (reservation common-lisp:nil :type
    (common-lisp:or reservation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'purchase-offering-response
                    'make-purchase-offering-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation))
      (common-lisp:list
       (common-lisp:cons "Reservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (purchase-offering-result-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-purchase-offering-result-model-"))
   (reservation common-lisp:nil :type
    (common-lisp:or reservation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'purchase-offering-result-model
                    'make-purchase-offering-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation))
      (common-lisp:list
       (common-lisp:cons "Reservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          purchase-offering-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (raw-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-raw-settings-")))
 (common-lisp:export (common-lisp:list 'raw-settings 'make-raw-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input raw-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input raw-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input raw-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reboot-input-device (:copier common-lisp:nil)
      (:conc-name "struct-shape-reboot-input-device-"))
   (force common-lisp:nil :type
    (common-lisp:or reboot-input-device-force common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reboot-input-device 'make-reboot-input-device))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reboot-input-device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reboot-input-device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "Force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reboot-input-device))
   common-lisp:nil))
(common-lisp:deftype reboot-input-device-force () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (reboot-input-device-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-reboot-input-device-request-"))
   (force common-lisp:nil :type
    (common-lisp:or reboot-input-device-force common-lisp:null))
   (input-device-id (common-lisp:error ":input-device-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reboot-input-device-request
                    'make-reboot-input-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-input-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-input-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'force))
      (common-lisp:list
       (common-lisp:cons "Force"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-input-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reboot-input-device-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-reboot-input-device-response-")))
 (common-lisp:export
  (common-lisp:list 'reboot-input-device-response
                    'make-reboot-input-device-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reboot-input-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reboot-input-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reboot-input-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rec601settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-rec601settings-")))
 (common-lisp:export (common-lisp:list 'rec601settings 'make-rec601settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rec601settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rec601settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rec601settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rec709settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-rec709settings-")))
 (common-lisp:export (common-lisp:list 'rec709settings 'make-rec709settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rec709settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rec709settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rec709settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reject-input-device-transfer-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-reject-input-device-transfer-request-"))
   (input-device-id (common-lisp:error ":input-device-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reject-input-device-transfer-request
                    'make-reject-input-device-transfer-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-input-device-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-input-device-transfer-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-input-device-transfer-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reject-input-device-transfer-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-reject-input-device-transfer-response-")))
 (common-lisp:export
  (common-lisp:list 'reject-input-device-transfer-response
                    'make-reject-input-device-transfer-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reject-input-device-transfer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reject-input-device-transfer-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reject-input-device-transfer-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remix-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-remix-settings-"))
   (channel-mappings (common-lisp:error ":channel-mappings is required") :type
    (common-lisp:or |__listOfAudioChannelMapping| common-lisp:null))
   (channels-in common-lisp:nil :type
    (common-lisp:or |__integerMin1Max16| common-lisp:null))
   (channels-out common-lisp:nil :type
    (common-lisp:or |__integerMin1Max8| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'remix-settings 'make-remix-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input remix-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input remix-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-mappings))
      (common-lisp:list
       (common-lisp:cons "ChannelMappings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels-in))
      (common-lisp:list
       (common-lisp:cons "ChannelsIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channels-out))
      (common-lisp:list
       (common-lisp:cons "ChannelsOut"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input remix-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (renewal-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-renewal-settings-"))
   (automatic-renewal common-lisp:nil :type
    (common-lisp:or reservation-automatic-renewal common-lisp:null))
   (renewal-count common-lisp:nil :type
    (common-lisp:or |__integerMin1| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'renewal-settings 'make-renewal-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input renewal-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input renewal-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'automatic-renewal))
      (common-lisp:list
       (common-lisp:cons "AutomaticRenewal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-count))
      (common-lisp:list
       (common-lisp:cons "RenewalCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input renewal-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reservation (:copier common-lisp:nil)
      (:conc-name "struct-shape-reservation-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (count common-lisp:nil :type (common-lisp:or |__integer| common-lisp:null))
   (currency-code common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (duration common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (duration-units common-lisp:nil :type
    (common-lisp:or offering-duration-units common-lisp:null))
   (end common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (fixed-price common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (offering-description common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (offering-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (offering-type common-lisp:nil :type
    (common-lisp:or offering-type common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (renewal-settings common-lisp:nil :type
    (common-lisp:or renewal-settings common-lisp:null))
   (reservation-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (resource-specification common-lisp:nil :type
    (common-lisp:or reservation-resource-specification common-lisp:null))
   (start common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or reservation-state common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (usage-price common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'reservation 'make-reservation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input reservation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input reservation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'currency-code))
      (common-lisp:list
       (common-lisp:cons "CurrencyCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-units))
      (common-lisp:list
       (common-lisp:cons "DurationUnits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end))
      (common-lisp:list
       (common-lisp:cons "End"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fixed-price))
      (common-lisp:list
       (common-lisp:cons "FixedPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offering-description))
      (common-lisp:list
       (common-lisp:cons "OfferingDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-id))
      (common-lisp:list
       (common-lisp:cons "OfferingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offering-type))
      (common-lisp:list
       (common-lisp:cons "OfferingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-settings))
      (common-lisp:list
       (common-lisp:cons "RenewalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation-id))
      (common-lisp:list
       (common-lisp:cons "ReservationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specification))
      (common-lisp:list
       (common-lisp:cons "ResourceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start))
      (common-lisp:list
       (common-lisp:cons "Start"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'usage-price))
      (common-lisp:list
       (common-lisp:cons "UsagePrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input reservation))
   common-lisp:nil))
(common-lisp:deftype reservation-automatic-renewal () 'common-lisp:string)
(common-lisp:deftype reservation-codec () 'common-lisp:string)
(common-lisp:deftype reservation-maximum-bitrate () 'common-lisp:string)
(common-lisp:deftype reservation-maximum-framerate () 'common-lisp:string)
(common-lisp:deftype reservation-resolution () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (reservation-resource-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-reservation-resource-specification-"))
   (channel-class common-lisp:nil :type
    (common-lisp:or channel-class common-lisp:null))
   (codec common-lisp:nil :type
    (common-lisp:or reservation-codec common-lisp:null))
   (maximum-bitrate common-lisp:nil :type
    (common-lisp:or reservation-maximum-bitrate common-lisp:null))
   (maximum-framerate common-lisp:nil :type
    (common-lisp:or reservation-maximum-framerate common-lisp:null))
   (resolution common-lisp:nil :type
    (common-lisp:or reservation-resolution common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or reservation-resource-type common-lisp:null))
   (special-feature common-lisp:nil :type
    (common-lisp:or reservation-special-feature common-lisp:null))
   (video-quality common-lisp:nil :type
    (common-lisp:or reservation-video-quality common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reservation-resource-specification
                    'make-reservation-resource-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reservation-resource-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reservation-resource-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec))
      (common-lisp:list
       (common-lisp:cons "Codec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-bitrate))
      (common-lisp:list
       (common-lisp:cons "MaximumBitrate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum-framerate))
      (common-lisp:list
       (common-lisp:cons "MaximumFramerate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution))
      (common-lisp:list
       (common-lisp:cons "Resolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'special-feature))
      (common-lisp:list
       (common-lisp:cons "SpecialFeature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-quality))
      (common-lisp:list
       (common-lisp:cons "VideoQuality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reservation-resource-specification))
   common-lisp:nil))
(common-lisp:deftype reservation-resource-type () 'common-lisp:string)
(common-lisp:deftype reservation-special-feature () 'common-lisp:string)
(common-lisp:deftype reservation-state () 'common-lisp:string)
(common-lisp:deftype reservation-video-quality () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resource-conflict (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-conflict-"))
   (message common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-conflict 'make-resource-conflict))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-conflict))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-conflict))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-conflict))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-not-found (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-not-found-"))
   (message common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found 'make-resource-not-found))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-not-found))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-not-found))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-not-found))
   common-lisp:nil))
(common-lisp:deftype rtmp-ad-markers () 'common-lisp:string)
(common-lisp:deftype rtmp-cache-full-behavior () 'common-lisp:string)
(common-lisp:deftype rtmp-caption-data () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (rtmp-caption-info-destination-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-rtmp-caption-info-destination-settings-")))
 (common-lisp:export
  (common-lisp:list 'rtmp-caption-info-destination-settings
                    'make-rtmp-caption-info-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rtmp-caption-info-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rtmp-caption-info-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rtmp-caption-info-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rtmp-group-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-rtmp-group-settings-"))
   (ad-markers common-lisp:nil :type
    (common-lisp:or |__listOfRtmpAdMarkers| common-lisp:null))
   (authentication-scheme common-lisp:nil :type
    (common-lisp:or authentication-scheme common-lisp:null))
   (cache-full-behavior common-lisp:nil :type
    (common-lisp:or rtmp-cache-full-behavior common-lisp:null))
   (cache-length common-lisp:nil :type
    (common-lisp:or |__integerMin30| common-lisp:null))
   (caption-data common-lisp:nil :type
    (common-lisp:or rtmp-caption-data common-lisp:null))
   (input-loss-action common-lisp:nil :type
    (common-lisp:or input-loss-action-for-rtmp-out common-lisp:null))
   (restart-delay common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rtmp-group-settings 'make-rtmp-group-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rtmp-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rtmp-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ad-markers))
      (common-lisp:list
       (common-lisp:cons "AdMarkers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-scheme))
      (common-lisp:list
       (common-lisp:cons "AuthenticationScheme"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-full-behavior))
      (common-lisp:list
       (common-lisp:cons "CacheFullBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-length))
      (common-lisp:list
       (common-lisp:cons "CacheLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caption-data))
      (common-lisp:list
       (common-lisp:cons "CaptionData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-loss-action))
      (common-lisp:list
       (common-lisp:cons "InputLossAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'restart-delay))
      (common-lisp:list
       (common-lisp:cons "RestartDelay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rtmp-group-settings))
   common-lisp:nil))
(common-lisp:deftype rtmp-output-certificate-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (rtmp-output-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-rtmp-output-settings-"))
   (certificate-mode common-lisp:nil :type
    (common-lisp:or rtmp-output-certificate-mode common-lisp:null))
   (connection-retry-interval common-lisp:nil :type
    (common-lisp:or |__integerMin1| common-lisp:null))
   (destination (common-lisp:error ":destination is required") :type
    (common-lisp:or output-location-ref common-lisp:null))
   (num-retries common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rtmp-output-settings 'make-rtmp-output-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rtmp-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rtmp-output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-mode))
      (common-lisp:list
       (common-lisp:cons "CertificateMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-retry-interval))
      (common-lisp:list
       (common-lisp:cons "ConnectionRetryInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'num-retries))
      (common-lisp:list
       (common-lisp:cons "NumRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rtmp-output-settings))
   common-lisp:nil))
(common-lisp:deftype s3canned-acl () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (schedule-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-schedule-action-"))
   (action-name (common-lisp:error ":action-name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (schedule-action-settings
    (common-lisp:error ":schedule-action-settings is required") :type
    (common-lisp:or schedule-action-settings common-lisp:null))
   (schedule-action-start-settings
    (common-lisp:error ":schedule-action-start-settings is required") :type
    (common-lisp:or schedule-action-start-settings common-lisp:null)))
 (common-lisp:export (common-lisp:list 'schedule-action 'make-schedule-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schedule-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schedule-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "ActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schedule-action-settings))
      (common-lisp:list
       (common-lisp:cons "ScheduleActionSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'schedule-action-start-settings))
      (common-lisp:list
       (common-lisp:cons "ScheduleActionStartSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schedule-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (schedule-action-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-schedule-action-settings-"))
   (hls-id3segment-tagging-settings common-lisp:nil :type
    (common-lisp:or hls-id3segment-tagging-schedule-action-settings
                    common-lisp:null))
   (hls-timed-metadata-settings common-lisp:nil :type
    (common-lisp:or hls-timed-metadata-schedule-action-settings
                    common-lisp:null))
   (input-prepare-settings common-lisp:nil :type
    (common-lisp:or input-prepare-schedule-action-settings common-lisp:null))
   (input-switch-settings common-lisp:nil :type
    (common-lisp:or input-switch-schedule-action-settings common-lisp:null))
   (motion-graphics-image-activate-settings common-lisp:nil :type
    (common-lisp:or motion-graphics-activate-schedule-action-settings
                    common-lisp:null))
   (motion-graphics-image-deactivate-settings common-lisp:nil :type
    (common-lisp:or motion-graphics-deactivate-schedule-action-settings
                    common-lisp:null))
   (pause-state-settings common-lisp:nil :type
    (common-lisp:or pause-state-schedule-action-settings common-lisp:null))
   (scte35input-settings common-lisp:nil :type
    (common-lisp:or scte35input-schedule-action-settings common-lisp:null))
   (scte35return-to-network-settings common-lisp:nil :type
    (common-lisp:or scte35return-to-network-schedule-action-settings
                    common-lisp:null))
   (scte35splice-insert-settings common-lisp:nil :type
    (common-lisp:or scte35splice-insert-schedule-action-settings
                    common-lisp:null))
   (scte35time-signal-settings common-lisp:nil :type
    (common-lisp:or scte35time-signal-schedule-action-settings
                    common-lisp:null))
   (static-image-activate-settings common-lisp:nil :type
    (common-lisp:or static-image-activate-schedule-action-settings
                    common-lisp:null))
   (static-image-deactivate-settings common-lisp:nil :type
    (common-lisp:or static-image-deactivate-schedule-action-settings
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'schedule-action-settings 'make-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hls-id3segment-tagging-settings))
      (common-lisp:list
       (common-lisp:cons "HlsId3SegmentTaggingSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hls-timed-metadata-settings))
      (common-lisp:list
       (common-lisp:cons "HlsTimedMetadataSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-prepare-settings))
      (common-lisp:list
       (common-lisp:cons "InputPrepareSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-switch-settings))
      (common-lisp:list
       (common-lisp:cons "InputSwitchSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'motion-graphics-image-activate-settings))
      (common-lisp:list
       (common-lisp:cons "MotionGraphicsImageActivateSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'motion-graphics-image-deactivate-settings))
      (common-lisp:list
       (common-lisp:cons "MotionGraphicsImageDeactivateSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pause-state-settings))
      (common-lisp:list
       (common-lisp:cons "PauseStateSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte35input-settings))
      (common-lisp:list
       (common-lisp:cons "Scte35InputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte35return-to-network-settings))
      (common-lisp:list
       (common-lisp:cons "Scte35ReturnToNetworkSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte35splice-insert-settings))
      (common-lisp:list
       (common-lisp:cons "Scte35SpliceInsertSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte35time-signal-settings))
      (common-lisp:list
       (common-lisp:cons "Scte35TimeSignalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'static-image-activate-settings))
      (common-lisp:list
       (common-lisp:cons "StaticImageActivateSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'static-image-deactivate-settings))
      (common-lisp:list
       (common-lisp:cons "StaticImageDeactivateSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schedule-action-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (schedule-action-start-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-schedule-action-start-settings-"))
   (fixed-mode-schedule-action-start-settings common-lisp:nil :type
    (common-lisp:or fixed-mode-schedule-action-start-settings
                    common-lisp:null))
   (follow-mode-schedule-action-start-settings common-lisp:nil :type
    (common-lisp:or follow-mode-schedule-action-start-settings
                    common-lisp:null))
   (immediate-mode-schedule-action-start-settings common-lisp:nil :type
    (common-lisp:or immediate-mode-schedule-action-start-settings
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'schedule-action-start-settings
                    'make-schedule-action-start-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schedule-action-start-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schedule-action-start-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fixed-mode-schedule-action-start-settings))
      (common-lisp:list
       (common-lisp:cons "FixedModeScheduleActionStartSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'follow-mode-schedule-action-start-settings))
      (common-lisp:list
       (common-lisp:cons "FollowModeScheduleActionStartSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'immediate-mode-schedule-action-start-settings))
      (common-lisp:list
       (common-lisp:cons "ImmediateModeScheduleActionStartSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schedule-action-start-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (schedule-delete-result-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-schedule-delete-result-model-")))
 (common-lisp:export
  (common-lisp:list 'schedule-delete-result-model
                    'make-schedule-delete-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schedule-delete-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schedule-delete-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schedule-delete-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (schedule-describe-result-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-schedule-describe-result-model-"))
   (next-token common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (schedule-actions (common-lisp:error ":schedule-actions is required") :type
    (common-lisp:or |__listOfScheduleAction| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'schedule-describe-result-model
                    'make-schedule-describe-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          schedule-describe-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          schedule-describe-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-actions))
      (common-lisp:list
       (common-lisp:cons "ScheduleActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          schedule-describe-result-model))
   common-lisp:nil))
(common-lisp:deftype scte20convert608to708 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (scte20plus-embedded-destination-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-scte20plus-embedded-destination-settings-")))
 (common-lisp:export
  (common-lisp:list 'scte20plus-embedded-destination-settings
                    'make-scte20plus-embedded-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte20plus-embedded-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte20plus-embedded-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte20plus-embedded-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scte20source-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-scte20source-settings-"))
   (convert608to708 common-lisp:nil :type
    (common-lisp:or scte20convert608to708 common-lisp:null))
   (source608channel-number common-lisp:nil :type
    (common-lisp:or |__integerMin1Max4| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scte20source-settings 'make-scte20source-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte20source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte20source-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'convert608to708))
      (common-lisp:list
       (common-lisp:cons "Convert608To708"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source608channel-number))
      (common-lisp:list
       (common-lisp:cons "Source608ChannelNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte20source-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scte27destination-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-scte27destination-settings-")))
 (common-lisp:export
  (common-lisp:list 'scte27destination-settings
                    'make-scte27destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte27destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte27destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte27destination-settings))
   common-lisp:nil))
(common-lisp:deftype scte27ocr-language () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (scte27source-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-scte27source-settings-"))
   (ocr-language common-lisp:nil :type
    (common-lisp:or scte27ocr-language common-lisp:null))
   (pid common-lisp:nil :type
    (common-lisp:or |__integerMin1| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scte27source-settings 'make-scte27source-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte27source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte27source-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ocr-language))
      (common-lisp:list
       (common-lisp:cons "OcrLanguage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pid))
      (common-lisp:list
       (common-lisp:cons "Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte27source-settings))
   common-lisp:nil))
(common-lisp:deftype scte35apos-no-regional-blackout-behavior ()
  'common-lisp:string)
(common-lisp:deftype scte35apos-web-delivery-allowed-behavior ()
  'common-lisp:string)
(common-lisp:deftype scte35archive-allowed-flag () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (scte35delivery-restrictions (:copier common-lisp:nil)
      (:conc-name "struct-shape-scte35delivery-restrictions-"))
   (archive-allowed-flag
    (common-lisp:error ":archive-allowed-flag is required") :type
    (common-lisp:or scte35archive-allowed-flag common-lisp:null))
   (device-restrictions (common-lisp:error ":device-restrictions is required")
    :type (common-lisp:or scte35device-restrictions common-lisp:null))
   (no-regional-blackout-flag
    (common-lisp:error ":no-regional-blackout-flag is required") :type
    (common-lisp:or scte35no-regional-blackout-flag common-lisp:null))
   (web-delivery-allowed-flag
    (common-lisp:error ":web-delivery-allowed-flag is required") :type
    (common-lisp:or scte35web-delivery-allowed-flag common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scte35delivery-restrictions
                    'make-scte35delivery-restrictions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte35delivery-restrictions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte35delivery-restrictions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'archive-allowed-flag))
      (common-lisp:list
       (common-lisp:cons "ArchiveAllowedFlag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-restrictions))
      (common-lisp:list
       (common-lisp:cons "DeviceRestrictions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'no-regional-blackout-flag))
      (common-lisp:list
       (common-lisp:cons "NoRegionalBlackoutFlag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'web-delivery-allowed-flag))
      (common-lisp:list
       (common-lisp:cons "WebDeliveryAllowedFlag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte35delivery-restrictions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scte35descriptor (:copier common-lisp:nil)
      (:conc-name "struct-shape-scte35descriptor-"))
   (scte35descriptor-settings
    (common-lisp:error ":scte35descriptor-settings is required") :type
    (common-lisp:or scte35descriptor-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scte35descriptor 'make-scte35descriptor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scte35descriptor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scte35descriptor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scte35descriptor-settings))
      (common-lisp:list
       (common-lisp:cons "Scte35DescriptorSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scte35descriptor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scte35descriptor-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-scte35descriptor-settings-"))
   (segmentation-descriptor-scte35descriptor-settings
    (common-lisp:error
     ":segmentation-descriptor-scte35descriptor-settings is required")
    :type (common-lisp:or scte35segmentation-descriptor common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scte35descriptor-settings
                    'make-scte35descriptor-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte35descriptor-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte35descriptor-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segmentation-descriptor-scte35descriptor-settings))
      (common-lisp:list
       (common-lisp:cons "SegmentationDescriptorScte35DescriptorSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte35descriptor-settings))
   common-lisp:nil))
(common-lisp:deftype scte35device-restrictions () 'common-lisp:string)
(common-lisp:deftype scte35input-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (scte35input-schedule-action-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-scte35input-schedule-action-settings-"))
   (input-attachment-name-reference common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (mode (common-lisp:error ":mode is required") :type
    (common-lisp:or scte35input-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scte35input-schedule-action-settings
                    'make-scte35input-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte35input-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte35input-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-attachment-name-reference))
      (common-lisp:list
       (common-lisp:cons "InputAttachmentNameReference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte35input-schedule-action-settings))
   common-lisp:nil))
(common-lisp:deftype scte35no-regional-blackout-flag () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (scte35return-to-network-schedule-action-settings
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-scte35return-to-network-schedule-action-settings-"))
   (splice-event-id (common-lisp:error ":splice-event-id is required") :type
    (common-lisp:or |__longMin0Max4294967295| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scte35return-to-network-schedule-action-settings
                    'make-scte35return-to-network-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte35return-to-network-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte35return-to-network-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'splice-event-id))
      (common-lisp:list
       (common-lisp:cons "SpliceEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte35return-to-network-schedule-action-settings))
   common-lisp:nil))
(common-lisp:deftype scte35segmentation-cancel-indicator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (scte35segmentation-descriptor (:copier common-lisp:nil)
      (:conc-name "struct-shape-scte35segmentation-descriptor-"))
   (delivery-restrictions common-lisp:nil :type
    (common-lisp:or scte35delivery-restrictions common-lisp:null))
   (segment-num common-lisp:nil :type
    (common-lisp:or |__integerMin0Max255| common-lisp:null))
   (segmentation-cancel-indicator
    (common-lisp:error ":segmentation-cancel-indicator is required") :type
    (common-lisp:or scte35segmentation-cancel-indicator common-lisp:null))
   (segmentation-duration common-lisp:nil :type
    (common-lisp:or |__longMin0Max1099511627775| common-lisp:null))
   (segmentation-event-id
    (common-lisp:error ":segmentation-event-id is required") :type
    (common-lisp:or |__longMin0Max4294967295| common-lisp:null))
   (segmentation-type-id common-lisp:nil :type
    (common-lisp:or |__integerMin0Max255| common-lisp:null))
   (segmentation-upid common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (segmentation-upid-type common-lisp:nil :type
    (common-lisp:or |__integerMin0Max255| common-lisp:null))
   (segments-expected common-lisp:nil :type
    (common-lisp:or |__integerMin0Max255| common-lisp:null))
   (sub-segment-num common-lisp:nil :type
    (common-lisp:or |__integerMin0Max255| common-lisp:null))
   (sub-segments-expected common-lisp:nil :type
    (common-lisp:or |__integerMin0Max255| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scte35segmentation-descriptor
                    'make-scte35segmentation-descriptor))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte35segmentation-descriptor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte35segmentation-descriptor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'delivery-restrictions))
      (common-lisp:list
       (common-lisp:cons "DeliveryRestrictions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segment-num))
      (common-lisp:list
       (common-lisp:cons "SegmentNum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segmentation-cancel-indicator))
      (common-lisp:list
       (common-lisp:cons "SegmentationCancelIndicator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segmentation-duration))
      (common-lisp:list
       (common-lisp:cons "SegmentationDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segmentation-event-id))
      (common-lisp:list
       (common-lisp:cons "SegmentationEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segmentation-type-id))
      (common-lisp:list
       (common-lisp:cons "SegmentationTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segmentation-upid))
      (common-lisp:list
       (common-lisp:cons "SegmentationUpid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'segmentation-upid-type))
      (common-lisp:list
       (common-lisp:cons "SegmentationUpidType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'segments-expected))
      (common-lisp:list
       (common-lisp:cons "SegmentsExpected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-segment-num))
      (common-lisp:list
       (common-lisp:cons "SubSegmentNum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sub-segments-expected))
      (common-lisp:list
       (common-lisp:cons "SubSegmentsExpected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte35segmentation-descriptor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scte35splice-insert (:copier common-lisp:nil)
      (:conc-name "struct-shape-scte35splice-insert-"))
   (ad-avail-offset common-lisp:nil :type
    (common-lisp:or |__integerMinNegative1000Max1000| common-lisp:null))
   (no-regional-blackout-flag common-lisp:nil :type
    (common-lisp:or scte35splice-insert-no-regional-blackout-behavior
                    common-lisp:null))
   (web-delivery-allowed-flag common-lisp:nil :type
    (common-lisp:or scte35splice-insert-web-delivery-allowed-behavior
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scte35splice-insert 'make-scte35splice-insert))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scte35splice-insert))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scte35splice-insert))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ad-avail-offset))
      (common-lisp:list
       (common-lisp:cons "AdAvailOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'no-regional-blackout-flag))
      (common-lisp:list
       (common-lisp:cons "NoRegionalBlackoutFlag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'web-delivery-allowed-flag))
      (common-lisp:list
       (common-lisp:cons "WebDeliveryAllowedFlag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scte35splice-insert))
   common-lisp:nil))
(common-lisp:deftype scte35splice-insert-no-regional-blackout-behavior ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (scte35splice-insert-schedule-action-settings (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-scte35splice-insert-schedule-action-settings-"))
   (duration common-lisp:nil :type
    (common-lisp:or |__longMin0Max8589934591| common-lisp:null))
   (splice-event-id (common-lisp:error ":splice-event-id is required") :type
    (common-lisp:or |__longMin0Max4294967295| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scte35splice-insert-schedule-action-settings
                    'make-scte35splice-insert-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte35splice-insert-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte35splice-insert-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'splice-event-id))
      (common-lisp:list
       (common-lisp:cons "SpliceEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte35splice-insert-schedule-action-settings))
   common-lisp:nil))
(common-lisp:deftype scte35splice-insert-web-delivery-allowed-behavior ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (scte35time-signal-apos (:copier common-lisp:nil)
      (:conc-name "struct-shape-scte35time-signal-apos-"))
   (ad-avail-offset common-lisp:nil :type
    (common-lisp:or |__integerMinNegative1000Max1000| common-lisp:null))
   (no-regional-blackout-flag common-lisp:nil :type
    (common-lisp:or scte35apos-no-regional-blackout-behavior common-lisp:null))
   (web-delivery-allowed-flag common-lisp:nil :type
    (common-lisp:or scte35apos-web-delivery-allowed-behavior
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scte35time-signal-apos 'make-scte35time-signal-apos))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte35time-signal-apos))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte35time-signal-apos))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ad-avail-offset))
      (common-lisp:list
       (common-lisp:cons "AdAvailOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'no-regional-blackout-flag))
      (common-lisp:list
       (common-lisp:cons "NoRegionalBlackoutFlag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'web-delivery-allowed-flag))
      (common-lisp:list
       (common-lisp:cons "WebDeliveryAllowedFlag"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte35time-signal-apos))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (scte35time-signal-schedule-action-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-scte35time-signal-schedule-action-settings-"))
   (scte35descriptors (common-lisp:error ":scte35descriptors is required")
    :type (common-lisp:or |__listOfScte35Descriptor| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scte35time-signal-schedule-action-settings
                    'make-scte35time-signal-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          scte35time-signal-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          scte35time-signal-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scte35descriptors))
      (common-lisp:list
       (common-lisp:cons "Scte35Descriptors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          scte35time-signal-schedule-action-settings))
   common-lisp:nil))
(common-lisp:deftype scte35web-delivery-allowed-flag () 'common-lisp:string)
(common-lisp:deftype smooth-group-audio-only-timecode-control ()
  'common-lisp:string)
(common-lisp:deftype smooth-group-certificate-mode () 'common-lisp:string)
(common-lisp:deftype smooth-group-event-id-mode () 'common-lisp:string)
(common-lisp:deftype smooth-group-event-stop-behavior () 'common-lisp:string)
(common-lisp:deftype smooth-group-segmentation-mode () 'common-lisp:string)
(common-lisp:deftype smooth-group-sparse-track-type () 'common-lisp:string)
(common-lisp:deftype smooth-group-stream-manifest-behavior ()
  'common-lisp:string)
(common-lisp:deftype smooth-group-timestamp-offset-mode () 'common-lisp:string)
(common-lisp:deftype smpte2038data-preference () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (smpte-tt-destination-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-smpte-tt-destination-settings-")))
 (common-lisp:export
  (common-lisp:list 'smpte-tt-destination-settings
                    'make-smpte-tt-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          smpte-tt-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          smpte-tt-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          smpte-tt-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (standard-hls-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-standard-hls-settings-"))
   (audio-rendition-sets common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (m3u8settings (common-lisp:error ":m3u8settings is required") :type
    (common-lisp:or m3u8settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'standard-hls-settings 'make-standard-hls-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          standard-hls-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          standard-hls-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-rendition-sets))
      (common-lisp:list
       (common-lisp:cons "AudioRenditionSets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'm3u8settings))
      (common-lisp:list
       (common-lisp:cons "M3u8Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          standard-hls-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-channel-request-"))
   (channel-id (common-lisp:error ":channel-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-channel-request 'make-start-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-channel-response-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (cdi-input-specification common-lisp:nil :type
    (common-lisp:or cdi-input-specification common-lisp:null))
   (channel-class common-lisp:nil :type
    (common-lisp:or channel-class common-lisp:null))
   (destinations common-lisp:nil :type
    (common-lisp:or |__listOfOutputDestination| common-lisp:null))
   (egress-endpoints common-lisp:nil :type
    (common-lisp:or |__listOfChannelEgressEndpoint| common-lisp:null))
   (encoder-settings common-lisp:nil :type
    (common-lisp:or encoder-settings common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (input-attachments common-lisp:nil :type
    (common-lisp:or |__listOfInputAttachment| common-lisp:null))
   (input-specification common-lisp:nil :type
    (common-lisp:or input-specification common-lisp:null))
   (log-level common-lisp:nil :type
    (common-lisp:or log-level common-lisp:null))
   (maintenance common-lisp:nil :type
    (common-lisp:or maintenance-status common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (pipeline-details common-lisp:nil :type
    (common-lisp:or |__listOfPipelineDetail| common-lisp:null))
   (pipelines-running-count common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or channel-state common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (vpc common-lisp:nil :type
    (common-lisp:or vpc-output-settings-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-channel-response 'make-start-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-endpoints))
      (common-lisp:list
       (common-lisp:cons "EgressEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-settings))
      (common-lisp:list
       (common-lisp:cons "EncoderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-details))
      (common-lisp:list
       (common-lisp:cons "PipelineDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-input-device-maintenance-window-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-start-input-device-maintenance-window-request-"))
   (input-device-id (common-lisp:error ":input-device-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-input-device-maintenance-window-request
                    'make-start-input-device-maintenance-window-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-input-device-maintenance-window-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-input-device-maintenance-window-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-input-device-maintenance-window-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-input-device-maintenance-window-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-start-input-device-maintenance-window-response-")))
 (common-lisp:export
  (common-lisp:list 'start-input-device-maintenance-window-response
                    'make-start-input-device-maintenance-window-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-input-device-maintenance-window-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-input-device-maintenance-window-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-input-device-maintenance-window-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-multiplex-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-multiplex-request-"))
   (multiplex-id (common-lisp:error ":multiplex-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-multiplex-request 'make-start-multiplex-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-multiplex-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-multiplex-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-multiplex-response-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (availability-zones common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (destinations common-lisp:nil :type
    (common-lisp:or |__listOfMultiplexOutputDestination| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (multiplex-settings common-lisp:nil :type
    (common-lisp:or multiplex-settings common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (pipelines-running-count common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (program-count common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or multiplex-state common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-multiplex-response 'make-start-multiplex-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-multiplex-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-multiplex-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-count))
      (common-lisp:list
       (common-lisp:cons "ProgramCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-multiplex-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-timecode (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-timecode-"))
   (timecode common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'start-timecode 'make-start-timecode))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input start-timecode))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input start-timecode))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timecode))
      (common-lisp:list
       (common-lisp:cons "Timecode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input start-timecode))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (static-image-activate-schedule-action-settings (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-static-image-activate-schedule-action-settings-"))
   (duration common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (fade-in common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (fade-out common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (height common-lisp:nil :type
    (common-lisp:or |__integerMin1| common-lisp:null))
   (image (common-lisp:error ":image is required") :type
    (common-lisp:or input-location common-lisp:null))
   (image-x common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (image-y common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (layer common-lisp:nil :type
    (common-lisp:or |__integerMin0Max7| common-lisp:null))
   (opacity common-lisp:nil :type
    (common-lisp:or |__integerMin0Max100| common-lisp:null))
   (width common-lisp:nil :type
    (common-lisp:or |__integerMin1| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'static-image-activate-schedule-action-settings
                    'make-static-image-activate-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          static-image-activate-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          static-image-activate-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration))
      (common-lisp:list
       (common-lisp:cons "Duration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fade-in))
      (common-lisp:list
       (common-lisp:cons "FadeIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fade-out))
      (common-lisp:list
       (common-lisp:cons "FadeOut"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-x))
      (common-lisp:list
       (common-lisp:cons "ImageX"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-y))
      (common-lisp:list
       (common-lisp:cons "ImageY"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer))
      (common-lisp:list
       (common-lisp:cons "Layer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'opacity))
      (common-lisp:list
       (common-lisp:cons "Opacity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          static-image-activate-schedule-action-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (static-image-deactivate-schedule-action-settings
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-static-image-deactivate-schedule-action-settings-"))
   (fade-out common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null))
   (layer common-lisp:nil :type
    (common-lisp:or |__integerMin0Max7| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'static-image-deactivate-schedule-action-settings
                    'make-static-image-deactivate-schedule-action-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          static-image-deactivate-schedule-action-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          static-image-deactivate-schedule-action-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fade-out))
      (common-lisp:list
       (common-lisp:cons "FadeOut"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'layer))
      (common-lisp:list
       (common-lisp:cons "Layer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          static-image-deactivate-schedule-action-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (static-key-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-static-key-settings-"))
   (key-provider-server common-lisp:nil :type
    (common-lisp:or input-location common-lisp:null))
   (static-key-value (common-lisp:error ":static-key-value is required") :type
    (common-lisp:or |__stringMin32Max32| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'static-key-settings 'make-static-key-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input static-key-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input static-key-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-provider-server))
      (common-lisp:list
       (common-lisp:cons "KeyProviderServer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'static-key-value))
      (common-lisp:list
       (common-lisp:cons "StaticKeyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input static-key-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-channel-request-"))
   (channel-id (common-lisp:error ":channel-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-channel-request 'make-stop-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-channel-response-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (cdi-input-specification common-lisp:nil :type
    (common-lisp:or cdi-input-specification common-lisp:null))
   (channel-class common-lisp:nil :type
    (common-lisp:or channel-class common-lisp:null))
   (destinations common-lisp:nil :type
    (common-lisp:or |__listOfOutputDestination| common-lisp:null))
   (egress-endpoints common-lisp:nil :type
    (common-lisp:or |__listOfChannelEgressEndpoint| common-lisp:null))
   (encoder-settings common-lisp:nil :type
    (common-lisp:or encoder-settings common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (input-attachments common-lisp:nil :type
    (common-lisp:or |__listOfInputAttachment| common-lisp:null))
   (input-specification common-lisp:nil :type
    (common-lisp:or input-specification common-lisp:null))
   (log-level common-lisp:nil :type
    (common-lisp:or log-level common-lisp:null))
   (maintenance common-lisp:nil :type
    (common-lisp:or maintenance-status common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (pipeline-details common-lisp:nil :type
    (common-lisp:or |__listOfPipelineDetail| common-lisp:null))
   (pipelines-running-count common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or channel-state common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (vpc common-lisp:nil :type
    (common-lisp:or vpc-output-settings-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-channel-response 'make-stop-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-endpoints))
      (common-lisp:list
       (common-lisp:cons "EgressEndpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-settings))
      (common-lisp:list
       (common-lisp:cons "EncoderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-details))
      (common-lisp:list
       (common-lisp:cons "PipelineDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc))
      (common-lisp:list
       (common-lisp:cons "Vpc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-multiplex-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-multiplex-request-"))
   (multiplex-id (common-lisp:error ":multiplex-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-multiplex-request 'make-stop-multiplex-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-multiplex-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-multiplex-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-multiplex-response-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (availability-zones common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (destinations common-lisp:nil :type
    (common-lisp:or |__listOfMultiplexOutputDestination| common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (multiplex-settings common-lisp:nil :type
    (common-lisp:or multiplex-settings common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (pipelines-running-count common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (program-count common-lisp:nil :type
    (common-lisp:or |__integer| common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or multiplex-state common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-multiplex-response 'make-stop-multiplex-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-multiplex-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-multiplex-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipelines-running-count))
      (common-lisp:list
       (common-lisp:cons "PipelinesRunningCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-count))
      (common-lisp:list
       (common-lisp:cons "ProgramCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-multiplex-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-timecode (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-timecode-"))
   (last-frame-clipping-behavior common-lisp:nil :type
    (common-lisp:or last-frame-clipping-behavior common-lisp:null))
   (timecode common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'stop-timecode 'make-stop-timecode))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stop-timecode))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stop-timecode))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-frame-clipping-behavior))
      (common-lisp:list
       (common-lisp:cons "LastFrameClippingBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timecode))
      (common-lisp:list
       (common-lisp:cons "Timecode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stop-timecode))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun |make-tags| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (tags-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-tags-model-"))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tags-model 'make-tags-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tags-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tags-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tags-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (teletext-destination-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-teletext-destination-settings-")))
 (common-lisp:export
  (common-lisp:list 'teletext-destination-settings
                    'make-teletext-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          teletext-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          teletext-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          teletext-destination-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (teletext-source-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-teletext-source-settings-"))
   (output-rectangle common-lisp:nil :type
    (common-lisp:or caption-rectangle common-lisp:null))
   (page-number common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'teletext-source-settings 'make-teletext-source-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          teletext-source-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          teletext-source-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-rectangle))
      (common-lisp:list
       (common-lisp:cons "OutputRectangle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'page-number))
      (common-lisp:list
       (common-lisp:cons "PageNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          teletext-source-settings))
   common-lisp:nil))
(common-lisp:deftype temporal-filter-post-filter-sharpening ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (temporal-filter-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-temporal-filter-settings-"))
   (post-filter-sharpening common-lisp:nil :type
    (common-lisp:or temporal-filter-post-filter-sharpening common-lisp:null))
   (strength common-lisp:nil :type
    (common-lisp:or temporal-filter-strength common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'temporal-filter-settings 'make-temporal-filter-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          temporal-filter-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          temporal-filter-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-filter-sharpening))
      (common-lisp:list
       (common-lisp:cons "PostFilterSharpening"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'strength))
      (common-lisp:list
       (common-lisp:cons "Strength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          temporal-filter-settings))
   common-lisp:nil))
(common-lisp:deftype temporal-filter-strength () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (thumbnail-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-thumbnail-data-"))
   (body common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'thumbnail-data 'make-thumbnail-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input thumbnail-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input thumbnail-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'body))
      (common-lisp:list
       (common-lisp:cons "Body"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input thumbnail-data))
   common-lisp:nil))
(common-lisp:deftype timecode-burnin-font-size () 'common-lisp:string)
(common-lisp:deftype timecode-burnin-position () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (timecode-burnin-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-timecode-burnin-settings-"))
   (font-size (common-lisp:error ":font-size is required") :type
    (common-lisp:or timecode-burnin-font-size common-lisp:null))
   (position (common-lisp:error ":position is required") :type
    (common-lisp:or timecode-burnin-position common-lisp:null))
   (prefix common-lisp:nil :type
    (common-lisp:or |__stringMax255| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'timecode-burnin-settings 'make-timecode-burnin-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          timecode-burnin-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          timecode-burnin-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'font-size))
      (common-lisp:list
       (common-lisp:cons "FontSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "Position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          timecode-burnin-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (timecode-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-timecode-config-"))
   (source (common-lisp:error ":source is required") :type
    (common-lisp:or timecode-config-source common-lisp:null))
   (sync-threshold common-lisp:nil :type
    (common-lisp:or |__integerMin1Max1000000| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'timecode-config 'make-timecode-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timecode-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timecode-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sync-threshold))
      (common-lisp:list
       (common-lisp:cons "SyncThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timecode-config))
   common-lisp:nil))
(common-lisp:deftype timecode-config-source () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition too-many-requests-exception
     (medialive-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-requests-exception-message)))
 (common-lisp:export
  (common-lisp:list 'too-many-requests-exception
                    'too-many-requests-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (transfer-input-device (:copier common-lisp:nil)
      (:conc-name "struct-shape-transfer-input-device-"))
   (target-customer-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (target-region common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (transfer-message common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transfer-input-device 'make-transfer-input-device))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transfer-input-device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transfer-input-device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-customer-id))
      (common-lisp:list
       (common-lisp:cons "TargetCustomerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-region))
      (common-lisp:list
       (common-lisp:cons "TargetRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-message))
      (common-lisp:list
       (common-lisp:cons "TransferMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transfer-input-device))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (transfer-input-device-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-transfer-input-device-request-"))
   (input-device-id (common-lisp:error ":input-device-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (target-customer-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (target-region common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (transfer-message common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transfer-input-device-request
                    'make-transfer-input-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transfer-input-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transfer-input-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-customer-id))
      (common-lisp:list
       (common-lisp:cons "TargetCustomerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-region))
      (common-lisp:list
       (common-lisp:cons "TargetRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-message))
      (common-lisp:list
       (common-lisp:cons "TransferMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transfer-input-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (transfer-input-device-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-transfer-input-device-response-")))
 (common-lisp:export
  (common-lisp:list 'transfer-input-device-response
                    'make-transfer-input-device-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transfer-input-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transfer-input-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transfer-input-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (transferring-input-device-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-transferring-input-device-summary-"))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (target-customer-id common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (transfer-type common-lisp:nil :type
    (common-lisp:or input-device-transfer-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transferring-input-device-summary
                    'make-transferring-input-device-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transferring-input-device-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transferring-input-device-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-customer-id))
      (common-lisp:list
       (common-lisp:cons "TargetCustomerId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transfer-type))
      (common-lisp:list
       (common-lisp:cons "TransferType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transferring-input-device-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ttml-destination-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-ttml-destination-settings-"))
   (style-control common-lisp:nil :type
    (common-lisp:or ttml-destination-style-control common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ttml-destination-settings
                    'make-ttml-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ttml-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ttml-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style-control))
      (common-lisp:list
       (common-lisp:cons "StyleControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ttml-destination-settings))
   common-lisp:nil))
(common-lisp:deftype ttml-destination-style-control () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (udp-container-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-udp-container-settings-"))
   (m2ts-settings common-lisp:nil :type
    (common-lisp:or m2ts-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'udp-container-settings 'make-udp-container-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          udp-container-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          udp-container-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'm2ts-settings))
      (common-lisp:list
       (common-lisp:cons "M2tsSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          udp-container-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (udp-group-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-udp-group-settings-"))
   (input-loss-action common-lisp:nil :type
    (common-lisp:or input-loss-action-for-udp-out common-lisp:null))
   (timed-metadata-id3frame common-lisp:nil :type
    (common-lisp:or udp-timed-metadata-id3frame common-lisp:null))
   (timed-metadata-id3period common-lisp:nil :type
    (common-lisp:or |__integerMin0| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'udp-group-settings 'make-udp-group-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input udp-group-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input udp-group-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-loss-action))
      (common-lisp:list
       (common-lisp:cons "InputLossAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-id3frame))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataId3Frame"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'timed-metadata-id3period))
      (common-lisp:list
       (common-lisp:cons "TimedMetadataId3Period"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input udp-group-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (udp-output-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-udp-output-settings-"))
   (buffer-msec common-lisp:nil :type
    (common-lisp:or |__integerMin0Max10000| common-lisp:null))
   (container-settings (common-lisp:error ":container-settings is required")
    :type (common-lisp:or udp-container-settings common-lisp:null))
   (destination (common-lisp:error ":destination is required") :type
    (common-lisp:or output-location-ref common-lisp:null))
   (fec-output-settings common-lisp:nil :type
    (common-lisp:or fec-output-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'udp-output-settings 'make-udp-output-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input udp-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input udp-output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buffer-msec))
      (common-lisp:list
       (common-lisp:cons "BufferMsec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-settings))
      (common-lisp:list
       (common-lisp:cons "ContainerSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fec-output-settings))
      (common-lisp:list
       (common-lisp:cons "FecOutputSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input udp-output-settings))
   common-lisp:nil))
(common-lisp:deftype udp-timed-metadata-id3frame () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition unprocessable-entity-exception
     (medialive-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unprocessable-entity-exception-message)
      (validation-errors :initarg :validation-errors :initform common-lisp:nil
       :reader unprocessable-entity-exception-validation-errors)))
 (common-lisp:export
  (common-lisp:list 'unprocessable-entity-exception
                    'unprocessable-entity-exception-message
                    'unprocessable-entity-exception-validation-errors)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-channel (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-channel-"))
   (cdi-input-specification common-lisp:nil :type
    (common-lisp:or cdi-input-specification common-lisp:null))
   (destinations common-lisp:nil :type
    (common-lisp:or |__listOfOutputDestination| common-lisp:null))
   (encoder-settings common-lisp:nil :type
    (common-lisp:or encoder-settings common-lisp:null))
   (input-attachments common-lisp:nil :type
    (common-lisp:or |__listOfInputAttachment| common-lisp:null))
   (input-specification common-lisp:nil :type
    (common-lisp:or input-specification common-lisp:null))
   (log-level common-lisp:nil :type
    (common-lisp:or log-level common-lisp:null))
   (maintenance common-lisp:nil :type
    (common-lisp:or maintenance-update-settings common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'update-channel 'make-update-channel))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-channel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-channel))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-settings))
      (common-lisp:list
       (common-lisp:cons "EncoderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-channel))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-channel-class (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-channel-class-"))
   (channel-class (common-lisp:error ":channel-class is required") :type
    (common-lisp:or channel-class common-lisp:null))
   (destinations common-lisp:nil :type
    (common-lisp:or |__listOfOutputDestination| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-channel-class 'make-update-channel-class))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-channel-class))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-channel-class))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-channel-class))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-channel-class-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-channel-class-request-"))
   (channel-class (common-lisp:error ":channel-class is required") :type
    (common-lisp:or channel-class common-lisp:null))
   (channel-id (common-lisp:error ":channel-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (destinations common-lisp:nil :type
    (common-lisp:or |__listOfOutputDestination| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-channel-class-request
                    'make-update-channel-class-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-class-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-class-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-class))
      (common-lisp:list
       (common-lisp:cons "ChannelClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-class-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-channel-class-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-channel-class-response-"))
   (channel common-lisp:nil :type (common-lisp:or channel common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-channel-class-response
                    'make-update-channel-class-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-class-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-class-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "Channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-class-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-channel-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-channel-request-"))
   (cdi-input-specification common-lisp:nil :type
    (common-lisp:or cdi-input-specification common-lisp:null))
   (channel-id (common-lisp:error ":channel-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (destinations common-lisp:nil :type
    (common-lisp:or |__listOfOutputDestination| common-lisp:null))
   (encoder-settings common-lisp:nil :type
    (common-lisp:or encoder-settings common-lisp:null))
   (input-attachments common-lisp:nil :type
    (common-lisp:or |__listOfInputAttachment| common-lisp:null))
   (input-specification common-lisp:nil :type
    (common-lisp:or input-specification common-lisp:null))
   (log-level common-lisp:nil :type
    (common-lisp:or log-level common-lisp:null))
   (maintenance common-lisp:nil :type
    (common-lisp:or maintenance-update-settings common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-channel-request 'make-update-channel-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cdi-input-specification))
      (common-lisp:list
       (common-lisp:cons "CdiInputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoder-settings))
      (common-lisp:list
       (common-lisp:cons "EncoderSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-attachments))
      (common-lisp:list
       (common-lisp:cons "InputAttachments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-specification))
      (common-lisp:list
       (common-lisp:cons "InputSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maintenance))
      (common-lisp:list
       (common-lisp:cons "Maintenance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-channel-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-channel-response-"))
   (channel common-lisp:nil :type (common-lisp:or channel common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-channel-response 'make-update-channel-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "Channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-channel-result-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-channel-result-model-"))
   (channel common-lisp:nil :type (common-lisp:or channel common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-channel-result-model
                    'make-update-channel-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel))
      (common-lisp:list
       (common-lisp:cons "Channel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-channel-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-input-"))
   (destinations common-lisp:nil :type
    (common-lisp:or |__listOfInputDestinationRequest| common-lisp:null))
   (input-devices common-lisp:nil :type
    (common-lisp:or |__listOfInputDeviceRequest| common-lisp:null))
   (input-security-groups common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (media-connect-flows common-lisp:nil :type
    (common-lisp:or |__listOfMediaConnectFlowRequest| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (sources common-lisp:nil :type
    (common-lisp:or |__listOfInputSourceRequest| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'update-input 'make-update-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-devices))
      (common-lisp:list
       (common-lisp:cons "InputDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-security-groups))
      (common-lisp:list
       (common-lisp:cons "InputSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-connect-flows))
      (common-lisp:list
       (common-lisp:cons "MediaConnectFlows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-input-device (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-input-device-"))
   (hd-device-settings common-lisp:nil :type
    (common-lisp:or input-device-configurable-settings common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (uhd-device-settings common-lisp:nil :type
    (common-lisp:or input-device-configurable-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-input-device 'make-update-input-device))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-input-device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-input-device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hd-device-settings))
      (common-lisp:list
       (common-lisp:cons "HdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uhd-device-settings))
      (common-lisp:list
       (common-lisp:cons "UhdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-input-device))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-input-device-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-input-device-request-"))
   (hd-device-settings common-lisp:nil :type
    (common-lisp:or input-device-configurable-settings common-lisp:null))
   (input-device-id (common-lisp:error ":input-device-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (uhd-device-settings common-lisp:nil :type
    (common-lisp:or input-device-configurable-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-input-device-request
                    'make-update-input-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-input-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-input-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hd-device-settings))
      (common-lisp:list
       (common-lisp:cons "HdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uhd-device-settings))
      (common-lisp:list
       (common-lisp:cons "UhdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-input-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-input-device-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-input-device-response-"))
   (arn common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (connection-state common-lisp:nil :type
    (common-lisp:or input-device-connection-state common-lisp:null))
   (device-settings-sync-state common-lisp:nil :type
    (common-lisp:or device-settings-sync-state common-lisp:null))
   (device-update-status common-lisp:nil :type
    (common-lisp:or device-update-status common-lisp:null))
   (hd-device-settings common-lisp:nil :type
    (common-lisp:or input-device-hd-settings common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (mac-address common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (network-settings common-lisp:nil :type
    (common-lisp:or input-device-network-settings common-lisp:null))
   (serial-number common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or input-device-type common-lisp:null))
   (uhd-device-settings common-lisp:nil :type
    (common-lisp:or input-device-uhd-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-input-device-response
                    'make-update-input-device-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-input-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-input-device-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-state))
      (common-lisp:list
       (common-lisp:cons "ConnectionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-settings-sync-state))
      (common-lisp:list
       (common-lisp:cons "DeviceSettingsSyncState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-update-status))
      (common-lisp:list
       (common-lisp:cons "DeviceUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hd-device-settings))
      (common-lisp:list
       (common-lisp:cons "HdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-address))
      (common-lisp:list
       (common-lisp:cons "MacAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-settings))
      (common-lisp:list
       (common-lisp:cons "NetworkSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uhd-device-settings))
      (common-lisp:list
       (common-lisp:cons "UhdDeviceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-input-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-input-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-input-request-"))
   (destinations common-lisp:nil :type
    (common-lisp:or |__listOfInputDestinationRequest| common-lisp:null))
   (input-devices common-lisp:nil :type
    (common-lisp:or |__listOfInputDeviceRequest| common-lisp:null))
   (input-id (common-lisp:error ":input-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (input-security-groups common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (media-connect-flows common-lisp:nil :type
    (common-lisp:or |__listOfMediaConnectFlowRequest| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (role-arn common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (sources common-lisp:nil :type
    (common-lisp:or |__listOfInputSourceRequest| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-input-request 'make-update-input-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-input-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-input-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-devices))
      (common-lisp:list
       (common-lisp:cons "InputDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-security-groups))
      (common-lisp:list
       (common-lisp:cons "InputSecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-connect-flows))
      (common-lisp:list
       (common-lisp:cons "MediaConnectFlows"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-input-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-input-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-input-response-"))
   (input common-lisp:nil :type (common-lisp:or input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-input-response 'make-update-input-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-input-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-input-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-input-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-input-result-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-input-result-model-"))
   (input common-lisp:nil :type (common-lisp:or input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-input-result-model
                    'make-update-input-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-input-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-input-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-input-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-input-security-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-input-security-group-request-"))
   (input-security-group-id
    (common-lisp:error ":input-security-group-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (whitelist-rules common-lisp:nil :type
    (common-lisp:or |__listOfInputWhitelistRuleCidr| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-input-security-group-request
                    'make-update-input-security-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-input-security-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-input-security-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'whitelist-rules))
      (common-lisp:list
       (common-lisp:cons "WhitelistRules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-input-security-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-input-security-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-input-security-group-response-"))
   (security-group common-lisp:nil :type
    (common-lisp:or input-security-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-input-security-group-response
                    'make-update-input-security-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-input-security-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-input-security-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group))
      (common-lisp:list
       (common-lisp:cons "SecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-input-security-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-input-security-group-result-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-input-security-group-result-model-"))
   (security-group common-lisp:nil :type
    (common-lisp:or input-security-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-input-security-group-result-model
                    'make-update-input-security-group-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-input-security-group-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-input-security-group-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group))
      (common-lisp:list
       (common-lisp:cons "SecurityGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-input-security-group-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-multiplex (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-multiplex-"))
   (multiplex-settings common-lisp:nil :type
    (common-lisp:or multiplex-settings common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-multiplex 'make-update-multiplex))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-multiplex))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-multiplex))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-multiplex))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-multiplex-program (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-multiplex-program-"))
   (multiplex-program-settings common-lisp:nil :type
    (common-lisp:or multiplex-program-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-multiplex-program 'make-update-multiplex-program))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiplex-program-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgramSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-multiplex-program-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-multiplex-program-request-"))
   (multiplex-id (common-lisp:error ":multiplex-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (multiplex-program-settings common-lisp:nil :type
    (common-lisp:or multiplex-program-settings common-lisp:null))
   (program-name (common-lisp:error ":program-name is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-multiplex-program-request
                    'make-update-multiplex-program-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multiplex-program-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgramSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-multiplex-program-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-multiplex-program-response-"))
   (multiplex-program common-lisp:nil :type
    (common-lisp:or multiplex-program common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-multiplex-program-response
                    'make-update-multiplex-program-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-program))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-multiplex-program-result-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-multiplex-program-result-model-"))
   (multiplex-program common-lisp:nil :type
    (common-lisp:or multiplex-program common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-multiplex-program-result-model
                    'make-update-multiplex-program-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-program))
      (common-lisp:list
       (common-lisp:cons "MultiplexProgram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-program-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-multiplex-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-multiplex-request-"))
   (multiplex-id (common-lisp:error ":multiplex-id is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (multiplex-settings common-lisp:nil :type
    (common-lisp:or multiplex-settings common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-multiplex-request 'make-update-multiplex-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex-settings))
      (common-lisp:list
       (common-lisp:cons "MultiplexSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-multiplex-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-multiplex-response-"))
   (multiplex common-lisp:nil :type
    (common-lisp:or multiplex common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-multiplex-response
                    'make-update-multiplex-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex))
      (common-lisp:list
       (common-lisp:cons "Multiplex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-multiplex-result-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-multiplex-result-model-"))
   (multiplex common-lisp:nil :type
    (common-lisp:or multiplex common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-multiplex-result-model
                    'make-update-multiplex-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multiplex))
      (common-lisp:list
       (common-lisp:cons "Multiplex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-multiplex-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-reservation (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-reservation-"))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (renewal-settings common-lisp:nil :type
    (common-lisp:or renewal-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-reservation 'make-update-reservation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-reservation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-reservation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-settings))
      (common-lisp:list
       (common-lisp:cons "RenewalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-reservation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-reservation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-reservation-request-"))
   (name common-lisp:nil :type (common-lisp:or |__string| common-lisp:null))
   (renewal-settings common-lisp:nil :type
    (common-lisp:or renewal-settings common-lisp:null))
   (reservation-id (common-lisp:error ":reservation-id is required") :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-reservation-request
                    'make-update-reservation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-reservation-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-reservation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'renewal-settings))
      (common-lisp:list
       (common-lisp:cons "RenewalSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-reservation-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-reservation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-reservation-response-"))
   (reservation common-lisp:nil :type
    (common-lisp:or reservation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-reservation-response
                    'make-update-reservation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-reservation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-reservation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation))
      (common-lisp:list
       (common-lisp:cons "Reservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-reservation-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-reservation-result-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-reservation-result-model-"))
   (reservation common-lisp:nil :type
    (common-lisp:or reservation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-reservation-result-model
                    'make-update-reservation-result-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-reservation-result-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-reservation-result-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reservation))
      (common-lisp:list
       (common-lisp:cons "Reservation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-reservation-result-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (validation-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-validation-error-"))
   (element-path common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or |__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validation-error 'make-validation-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input validation-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input validation-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'element-path))
      (common-lisp:list
       (common-lisp:cons "ElementPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input validation-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (video-black-failover-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-video-black-failover-settings-"))
   (black-detect-threshold common-lisp:nil :type
    (common-lisp:or |__doubleMin0Max1| common-lisp:null))
   (video-black-threshold-msec common-lisp:nil :type
    (common-lisp:or |__integerMin1000| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'video-black-failover-settings
                    'make-video-black-failover-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          video-black-failover-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          video-black-failover-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'black-detect-threshold))
      (common-lisp:list
       (common-lisp:cons "BlackDetectThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'video-black-threshold-msec))
      (common-lisp:list
       (common-lisp:cons "VideoBlackThresholdMsec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          video-black-failover-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (video-codec-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-video-codec-settings-"))
   (frame-capture-settings common-lisp:nil :type
    (common-lisp:or frame-capture-settings common-lisp:null))
   (h264settings common-lisp:nil :type
    (common-lisp:or h264settings common-lisp:null))
   (h265settings common-lisp:nil :type
    (common-lisp:or h265settings common-lisp:null))
   (mpeg2settings common-lisp:nil :type
    (common-lisp:or mpeg2settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'video-codec-settings 'make-video-codec-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input video-codec-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input video-codec-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'frame-capture-settings))
      (common-lisp:list
       (common-lisp:cons "FrameCaptureSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'h264settings))
      (common-lisp:list
       (common-lisp:cons "H264Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'h265settings))
      (common-lisp:list
       (common-lisp:cons "H265Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mpeg2settings))
      (common-lisp:list
       (common-lisp:cons "Mpeg2Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input video-codec-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (video-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-video-description-"))
   (codec-settings common-lisp:nil :type
    (common-lisp:or video-codec-settings common-lisp:null))
   (height common-lisp:nil :type (common-lisp:or |__integer| common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |__string| common-lisp:null))
   (respond-to-afd common-lisp:nil :type
    (common-lisp:or video-description-respond-to-afd common-lisp:null))
   (scaling-behavior common-lisp:nil :type
    (common-lisp:or video-description-scaling-behavior common-lisp:null))
   (sharpness common-lisp:nil :type
    (common-lisp:or |__integerMin0Max100| common-lisp:null))
   (width common-lisp:nil :type (common-lisp:or |__integer| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'video-description 'make-video-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input video-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input video-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'codec-settings))
      (common-lisp:list
       (common-lisp:cons "CodecSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'height))
      (common-lisp:list
       (common-lisp:cons "Height"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'respond-to-afd))
      (common-lisp:list
       (common-lisp:cons "RespondToAfd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-behavior))
      (common-lisp:list
       (common-lisp:cons "ScalingBehavior"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sharpness))
      (common-lisp:list
       (common-lisp:cons "Sharpness"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'width))
      (common-lisp:list
       (common-lisp:cons "Width"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input video-description))
   common-lisp:nil))
(common-lisp:deftype video-description-respond-to-afd () 'common-lisp:string)
(common-lisp:deftype video-description-scaling-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (video-selector (:copier common-lisp:nil)
      (:conc-name "struct-shape-video-selector-"))
   (color-space common-lisp:nil :type
    (common-lisp:or video-selector-color-space common-lisp:null))
   (color-space-settings common-lisp:nil :type
    (common-lisp:or video-selector-color-space-settings common-lisp:null))
   (color-space-usage common-lisp:nil :type
    (common-lisp:or video-selector-color-space-usage common-lisp:null))
   (selector-settings common-lisp:nil :type
    (common-lisp:or video-selector-settings common-lisp:null)))
 (common-lisp:export (common-lisp:list 'video-selector 'make-video-selector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input video-selector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input video-selector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-space))
      (common-lisp:list
       (common-lisp:cons "ColorSpace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'color-space-settings))
      (common-lisp:list
       (common-lisp:cons "ColorSpaceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'color-space-usage))
      (common-lisp:list
       (common-lisp:cons "ColorSpaceUsage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'selector-settings))
      (common-lisp:list
       (common-lisp:cons "SelectorSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input video-selector))
   common-lisp:nil))
(common-lisp:deftype video-selector-color-space () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (video-selector-color-space-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-video-selector-color-space-settings-"))
   (hdr10settings common-lisp:nil :type
    (common-lisp:or hdr10settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'video-selector-color-space-settings
                    'make-video-selector-color-space-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          video-selector-color-space-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          video-selector-color-space-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hdr10settings))
      (common-lisp:list
       (common-lisp:cons "Hdr10Settings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          video-selector-color-space-settings))
   common-lisp:nil))
(common-lisp:deftype video-selector-color-space-usage () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (video-selector-pid (:copier common-lisp:nil)
      (:conc-name "struct-shape-video-selector-pid-"))
   (pid common-lisp:nil :type
    (common-lisp:or |__integerMin0Max8191| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'video-selector-pid 'make-video-selector-pid))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input video-selector-pid))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input video-selector-pid))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pid))
      (common-lisp:list
       (common-lisp:cons "Pid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input video-selector-pid))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (video-selector-program-id (:copier common-lisp:nil)
      (:conc-name "struct-shape-video-selector-program-id-"))
   (program-id common-lisp:nil :type
    (common-lisp:or |__integerMin0Max65536| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'video-selector-program-id
                    'make-video-selector-program-id))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          video-selector-program-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          video-selector-program-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'program-id))
      (common-lisp:list
       (common-lisp:cons "ProgramId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          video-selector-program-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (video-selector-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-video-selector-settings-"))
   (video-selector-pid common-lisp:nil :type
    (common-lisp:or video-selector-pid common-lisp:null))
   (video-selector-program-id common-lisp:nil :type
    (common-lisp:or video-selector-program-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'video-selector-settings 'make-video-selector-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          video-selector-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          video-selector-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'video-selector-pid))
      (common-lisp:list
       (common-lisp:cons "VideoSelectorPid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'video-selector-program-id))
      (common-lisp:list
       (common-lisp:cons "VideoSelectorProgramId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          video-selector-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-output-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-output-settings-"))
   (public-address-allocation-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (subnet-ids (common-lisp:error ":subnet-ids is required") :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-output-settings 'make-vpc-output-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-output-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-output-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-address-allocation-ids))
      (common-lisp:list
       (common-lisp:cons "PublicAddressAllocationIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-output-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-output-settings-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-output-settings-description-"))
   (availability-zones common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (network-interface-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null))
   (subnet-ids common-lisp:nil :type
    (common-lisp:or |__listOf__string| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-output-settings-description
                    'make-vpc-output-settings-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-output-settings-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-output-settings-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'availability-zones))
      (common-lisp:list
       (common-lisp:cons "AvailabilityZones"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-ids))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-output-settings-description))
   common-lisp:nil))
(common-lisp:deftype wav-coding-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (wav-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-wav-settings-"))
   (bit-depth common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null))
   (coding-mode common-lisp:nil :type
    (common-lisp:or wav-coding-mode common-lisp:null))
   (sample-rate common-lisp:nil :type
    (common-lisp:or |__double| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'wav-settings 'make-wav-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input wav-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input wav-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bit-depth))
      (common-lisp:list
       (common-lisp:cons "BitDepth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'coding-mode))
      (common-lisp:list
       (common-lisp:cons "CodingMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-rate))
      (common-lisp:list
       (common-lisp:cons "SampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input wav-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (webvtt-destination-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-webvtt-destination-settings-"))
   (style-control common-lisp:nil :type
    (common-lisp:or webvtt-destination-style-control common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'webvtt-destination-settings
                    'make-webvtt-destination-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          webvtt-destination-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          webvtt-destination-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'style-control))
      (common-lisp:list
       (common-lisp:cons "StyleControl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          webvtt-destination-settings))
   common-lisp:nil))
(common-lisp:deftype webvtt-destination-style-control () 'common-lisp:string)
(common-lisp:deftype |__boolean| () 'common-lisp:boolean)
(common-lisp:deftype |__double| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMin0| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMin0Max1| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMin0Max100| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMin0Max5000| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMin1| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMin1Max65535| () 'common-lisp:double-float)
(common-lisp:deftype |__doubleMinNegative59Max0| () 'common-lisp:double-float)
(common-lisp:deftype |__integer| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max10| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max100| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max1000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max10000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max1000000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max100000000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max128| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max15| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max255| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max30| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max32768| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max3600| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max500| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max600| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max65535| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max65536| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max7| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin0Max8191| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin100| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1000000Max100000000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin100000Max100000000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin100000Max40000000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin100000Max80000000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1000Max30000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max10| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max1000000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max16| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max20| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max3003| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max31| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max32| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max3600000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max4| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max5| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max6| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin1Max8| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin25Max10000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin25Max2000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin3| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin30| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin32Max8191| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin4Max20| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin800Max3000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMin96Max600| () 'common-lisp:integer)
(common-lisp:deftype |__integerMinNegative1000Max1000| () 'common-lisp:integer)
(common-lisp:deftype |__integerMinNegative5Max5| () 'common-lisp:integer)
(common-lisp:deftype |__integerMinNegative60Max6| () 'common-lisp:integer)
(common-lisp:deftype |__integerMinNegative60Max60| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |__listOfAudioChannelMapping| ()
   '(trivial-types:proper-list audio-channel-mapping))
 (common-lisp:defun |make-__listofaudiochannelmapping|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list audio-channel-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfAudioDescription| ()
   '(trivial-types:proper-list audio-description))
 (common-lisp:defun |make-__listofaudiodescription|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list audio-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfAudioSelector| ()
   '(trivial-types:proper-list audio-selector))
 (common-lisp:defun |make-__listofaudioselector|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list audio-selector))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfAudioTrack| ()
   '(trivial-types:proper-list audio-track))
 (common-lisp:defun |make-__listofaudiotrack|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list audio-track))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfBatchFailedResultModel| ()
   '(trivial-types:proper-list batch-failed-result-model))
 (common-lisp:defun |make-__listofbatchfailedresultmodel|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-failed-result-model))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfBatchSuccessfulResultModel| ()
   '(trivial-types:proper-list batch-successful-result-model))
 (common-lisp:defun |make-__listofbatchsuccessfulresultmodel|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-successful-result-model))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfCaptionDescription| ()
   '(trivial-types:proper-list caption-description))
 (common-lisp:defun |make-__listofcaptiondescription|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list caption-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfCaptionLanguageMapping| ()
   '(trivial-types:proper-list caption-language-mapping))
 (common-lisp:defun |make-__listofcaptionlanguagemapping|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            caption-language-mapping))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfCaptionSelector| ()
   '(trivial-types:proper-list caption-selector))
 (common-lisp:defun |make-__listofcaptionselector|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list caption-selector))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfChannelEgressEndpoint| ()
   '(trivial-types:proper-list channel-egress-endpoint))
 (common-lisp:defun |make-__listofchannelegressendpoint|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list channel-egress-endpoint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfChannelSummary| ()
   '(trivial-types:proper-list channel-summary))
 (common-lisp:defun |make-__listofchannelsummary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list channel-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfFailoverCondition| ()
   '(trivial-types:proper-list failover-condition))
 (common-lisp:defun |make-__listoffailovercondition|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list failover-condition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfHlsAdMarkers| ()
   '(trivial-types:proper-list hls-ad-markers))
 (common-lisp:defun |make-__listofhlsadmarkers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hls-ad-markers))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInput| () '(trivial-types:proper-list input))
 (common-lisp:defun |make-__listofinput|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputAttachment| ()
   '(trivial-types:proper-list input-attachment))
 (common-lisp:defun |make-__listofinputattachment|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-attachment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputChannelLevel| ()
   '(trivial-types:proper-list input-channel-level))
 (common-lisp:defun |make-__listofinputchannellevel|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-channel-level))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputDestination| ()
   '(trivial-types:proper-list input-destination))
 (common-lisp:defun |make-__listofinputdestination|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-destination))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputDestinationRequest| ()
   '(trivial-types:proper-list input-destination-request))
 (common-lisp:defun |make-__listofinputdestinationrequest|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            input-destination-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputDeviceRequest| ()
   '(trivial-types:proper-list input-device-request))
 (common-lisp:defun |make-__listofinputdevicerequest|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-device-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputDeviceSettings| ()
   '(trivial-types:proper-list input-device-settings))
 (common-lisp:defun |make-__listofinputdevicesettings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-device-settings))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputDeviceSummary| ()
   '(trivial-types:proper-list input-device-summary))
 (common-lisp:defun |make-__listofinputdevicesummary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-device-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputSecurityGroup| ()
   '(trivial-types:proper-list input-security-group))
 (common-lisp:defun |make-__listofinputsecuritygroup|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-security-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputSource| ()
   '(trivial-types:proper-list input-source))
 (common-lisp:defun |make-__listofinputsource|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputSourceRequest| ()
   '(trivial-types:proper-list input-source-request))
 (common-lisp:defun |make-__listofinputsourcerequest|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-source-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputWhitelistRule| ()
   '(trivial-types:proper-list input-whitelist-rule))
 (common-lisp:defun |make-__listofinputwhitelistrule|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-whitelist-rule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfInputWhitelistRuleCidr| ()
   '(trivial-types:proper-list input-whitelist-rule-cidr))
 (common-lisp:defun |make-__listofinputwhitelistrulecidr|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            input-whitelist-rule-cidr))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMediaConnectFlow| ()
   '(trivial-types:proper-list media-connect-flow))
 (common-lisp:defun |make-__listofmediaconnectflow|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list media-connect-flow))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMediaConnectFlowRequest| ()
   '(trivial-types:proper-list media-connect-flow-request))
 (common-lisp:defun |make-__listofmediaconnectflowrequest|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            media-connect-flow-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMediaPackageOutputDestinationSettings| ()
   '(trivial-types:proper-list media-package-output-destination-settings))
 (common-lisp:defun |make-__listofmediapackageoutputdestinationsettings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            media-package-output-destination-settings))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMultiplexOutputDestination| ()
   '(trivial-types:proper-list multiplex-output-destination))
 (common-lisp:defun |make-__listofmultiplexoutputdestination|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            multiplex-output-destination))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMultiplexProgramPipelineDetail| ()
   '(trivial-types:proper-list multiplex-program-pipeline-detail))
 (common-lisp:defun |make-__listofmultiplexprogrampipelinedetail|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            multiplex-program-pipeline-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMultiplexProgramSummary| ()
   '(trivial-types:proper-list multiplex-program-summary))
 (common-lisp:defun |make-__listofmultiplexprogramsummary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            multiplex-program-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfMultiplexSummary| ()
   '(trivial-types:proper-list multiplex-summary))
 (common-lisp:defun |make-__listofmultiplexsummary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list multiplex-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfOffering| ()
   '(trivial-types:proper-list offering))
 (common-lisp:defun |make-__listofoffering|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list offering))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfOutput| () '(trivial-types:proper-list output))
 (common-lisp:defun |make-__listofoutput|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfOutputDestination| ()
   '(trivial-types:proper-list output-destination))
 (common-lisp:defun |make-__listofoutputdestination|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-destination))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfOutputDestinationSettings| ()
   '(trivial-types:proper-list output-destination-settings))
 (common-lisp:defun |make-__listofoutputdestinationsettings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            output-destination-settings))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfOutputGroup| ()
   '(trivial-types:proper-list output-group))
 (common-lisp:defun |make-__listofoutputgroup|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfPipelineDetail| ()
   '(trivial-types:proper-list pipeline-detail))
 (common-lisp:defun |make-__listofpipelinedetail|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pipeline-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfPipelinePauseStateSettings| ()
   '(trivial-types:proper-list pipeline-pause-state-settings))
 (common-lisp:defun |make-__listofpipelinepausestatesettings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pipeline-pause-state-settings))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfReservation| ()
   '(trivial-types:proper-list reservation))
 (common-lisp:defun |make-__listofreservation|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list reservation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfRtmpAdMarkers| ()
   '(trivial-types:proper-list rtmp-ad-markers))
 (common-lisp:defun |make-__listofrtmpadmarkers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rtmp-ad-markers))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfScheduleAction| ()
   '(trivial-types:proper-list schedule-action))
 (common-lisp:defun |make-__listofscheduleaction|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list schedule-action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfScte35Descriptor| ()
   '(trivial-types:proper-list scte35descriptor))
 (common-lisp:defun |make-__listofscte35descriptor|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scte35descriptor))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfTransferringInputDeviceSummary| ()
   '(trivial-types:proper-list transferring-input-device-summary))
 (common-lisp:defun |make-__listoftransferringinputdevicesummary|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            transferring-input-device-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfValidationError| ()
   '(trivial-types:proper-list validation-error))
 (common-lisp:defun |make-__listofvalidationerror|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list validation-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOfVideoDescription| ()
   '(trivial-types:proper-list video-description))
 (common-lisp:defun |make-__listofvideodescription|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list video-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOf__integer| ()
   '(trivial-types:proper-list |__integer|))
 (common-lisp:defun |make-__listof__integer|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |__integer|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |__listOf__string| ()
   '(trivial-types:proper-list |__string|))
 (common-lisp:defun |make-__listof__string|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |__string|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |__long| () 'common-lisp:integer)
(common-lisp:deftype |__longMin0Max1099511627775| () 'common-lisp:integer)
(common-lisp:deftype |__longMin0Max4294967295| () 'common-lisp:integer)
(common-lisp:deftype |__longMin0Max8589934591| () 'common-lisp:integer)
(common-lisp:deftype |__longMin0Max86400000| () 'common-lisp:integer)
(common-lisp:deftype |__string| () 'common-lisp:string)
(common-lisp:deftype |__stringMax1000| () 'common-lisp:string)
(common-lisp:deftype |__stringMax2048| () 'common-lisp:string)
(common-lisp:deftype |__stringMax255| () 'common-lisp:string)
(common-lisp:deftype |__stringMax256| () 'common-lisp:string)
(common-lisp:deftype |__stringMax32| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max255| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max256| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max35| () 'common-lisp:string)
(common-lisp:deftype |__stringMin1Max7| () 'common-lisp:string)
(common-lisp:deftype |__stringMin2Max2| () 'common-lisp:string)
(common-lisp:deftype |__stringMin32Max32| () 'common-lisp:string)
(common-lisp:deftype |__stringMin34Max34| () 'common-lisp:string)
(common-lisp:deftype |__stringMin3Max3| () 'common-lisp:string)
(common-lisp:deftype |__stringMin6Max6| () 'common-lisp:string)
(common-lisp:deftype |__stringPattern010920300| () 'common-lisp:string)
(common-lisp:deftype |__timestampIso8601| () 'common-lisp:string)
(common-lisp:deftype |__timestampUnix| () 'common-lisp:string)
(common-lisp:deftype input-device-thumbnail ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype accept-header () 'common-lisp:string)
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:deftype |__timestamp| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun accept-input-device-transfer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-device-id)
   (common-lisp:declare (common-lisp:ignorable input-device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-accept-input-device-transfer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputDevices/~A/accept"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-device-id))))
                                                        "AcceptInputDeviceTransfer"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'accept-input-device-transfer))
(common-lisp:progn
 (common-lisp:defun batch-delete
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-ids input-ids
                     input-security-group-ids multiplex-ids)
   (common-lisp:declare
    (common-lisp:ignorable channel-ids input-ids input-security-group-ids
     multiplex-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-delete-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/prod/batch/delete"
                                                        "BatchDelete"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-delete))
(common-lisp:progn
 (common-lisp:defun batch-start
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-ids multiplex-ids)
   (common-lisp:declare (common-lisp:ignorable channel-ids multiplex-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-start-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/prod/batch/start"
                                                        "BatchStart"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-start))
(common-lisp:progn
 (common-lisp:defun batch-stop
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-ids multiplex-ids)
   (common-lisp:declare (common-lisp:ignorable channel-ids multiplex-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-stop-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/prod/batch/stop"
                                                        "BatchStop"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-stop))
(common-lisp:progn
 (common-lisp:defun batch-update-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-id creates deletes)
   (common-lisp:declare (common-lisp:ignorable channel-id creates deletes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-update-schedule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/channels/~A/schedule"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-id))))
                                                        "BatchUpdateSchedule"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-update-schedule))
(common-lisp:progn
 (common-lisp:defun cancel-input-device-transfer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-device-id)
   (common-lisp:declare (common-lisp:ignorable input-device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-input-device-transfer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputDevices/~A/cancel"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-device-id))))
                                                        "CancelInputDeviceTransfer"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-input-device-transfer))
(common-lisp:progn
 (common-lisp:defun claim-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-claim-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/prod/claimDevice"
                                                        "ClaimDevice"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'claim-device))
(common-lisp:progn
 (common-lisp:defun create-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cdi-input-specification channel-class
                     destinations encoder-settings input-attachments
                     input-specification log-level maintenance name request-id
                     reserved role-arn tags vpc)
   (common-lisp:declare
    (common-lisp:ignorable cdi-input-specification channel-class destinations
     encoder-settings input-attachments input-specification log-level
     maintenance name request-id reserved role-arn tags vpc))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/prod/channels"
                                                        "CreateChannel"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-channel))
(common-lisp:progn
 (common-lisp:defun create-input
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destinations input-devices
                     input-security-groups media-connect-flows name request-id
                     role-arn sources tags type vpc)
   (common-lisp:declare
    (common-lisp:ignorable destinations input-devices input-security-groups
     media-connect-flows name request-id role-arn sources tags type vpc))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-input-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/prod/inputs"
                                                        "CreateInput"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-input))
(common-lisp:progn
 (common-lisp:defun create-input-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key tags whitelist-rules)
   (common-lisp:declare (common-lisp:ignorable tags whitelist-rules))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-input-security-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/prod/inputSecurityGroups"
                                                        "CreateInputSecurityGroup"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-input-security-group))
(common-lisp:progn
 (common-lisp:defun create-multiplex
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key availability-zones multiplex-settings
                     name request-id tags)
   (common-lisp:declare
    (common-lisp:ignorable availability-zones multiplex-settings name
     request-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-multiplex-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        "/prod/multiplexes"
                                                        "CreateMultiplex"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-multiplex))
(common-lisp:progn
 (common-lisp:defun create-multiplex-program
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key multiplex-id multiplex-program-settings
                     program-name request-id)
   (common-lisp:declare
    (common-lisp:ignorable multiplex-id multiplex-program-settings program-name
     request-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-multiplex-program-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A/programs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))))
                                                        "CreateMultiplexProgram"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-multiplex-program))
(common-lisp:progn
 (common-lisp:defun create-partner-input
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-id request-id tags)
   (common-lisp:declare (common-lisp:ignorable input-id request-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-partner-input-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputs/~A/partners"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-id))))
                                                        "CreatePartnerInput"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-partner-input))
(common-lisp:progn
 (common-lisp:defun create-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "CreateTags"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-tags))
(common-lisp:progn
 (common-lisp:defun delete-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-id)
   (common-lisp:declare (common-lisp:ignorable channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/channels/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-id))))
                                                        "DeleteChannel"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-channel))
(common-lisp:progn
 (common-lisp:defun delete-input
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-id)
   (common-lisp:declare (common-lisp:ignorable input-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-input-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-id))))
                                                        "DeleteInput"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-input))
(common-lisp:progn
 (common-lisp:defun delete-input-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-security-group-id)
   (common-lisp:declare (common-lisp:ignorable input-security-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-input-security-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputSecurityGroups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-security-group-id))))
                                                        "DeleteInputSecurityGroup"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-input-security-group))
(common-lisp:progn
 (common-lisp:defun delete-multiplex
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key multiplex-id)
   (common-lisp:declare (common-lisp:ignorable multiplex-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-multiplex-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))))
                                                        "DeleteMultiplex"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-multiplex))
(common-lisp:progn
 (common-lisp:defun delete-multiplex-program
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key multiplex-id program-name)
   (common-lisp:declare (common-lisp:ignorable multiplex-id program-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-multiplex-program-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A/programs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'program-name))))
                                                        "DeleteMultiplexProgram"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-multiplex-program))
(common-lisp:progn
 (common-lisp:defun delete-reservation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reservation-id)
   (common-lisp:declare (common-lisp:ignorable reservation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-reservation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/reservations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'reservation-id))))
                                                        "DeleteReservation"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-reservation))
(common-lisp:progn
 (common-lisp:defun delete-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-id)
   (common-lisp:declare (common-lisp:ignorable channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-schedule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/channels/~A/schedule"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-id))))
                                                        "DeleteSchedule"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-schedule))
(common-lisp:progn
 (common-lisp:defun delete-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "DeleteTags"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-tags))
(common-lisp:progn
 (common-lisp:defun describe-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-id)
   (common-lisp:declare (common-lisp:ignorable channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/channels/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-id))))
                                                        "DescribeChannel"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-channel))
(common-lisp:progn
 (common-lisp:defun describe-input
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-id)
   (common-lisp:declare (common-lisp:ignorable input-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-input-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-id))))
                                                        "DescribeInput"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-input))
(common-lisp:progn
 (common-lisp:defun describe-input-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-device-id)
   (common-lisp:declare (common-lisp:ignorable input-device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-input-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputDevices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-device-id))))
                                                        "DescribeInputDevice"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-input-device))
(common-lisp:progn
 (common-lisp:defun describe-input-device-thumbnail
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-device-id accept)
   (common-lisp:declare (common-lisp:ignorable input-device-id accept))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-input-device-thumbnail-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputDevices/~A/thumbnailData"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-device-id))))
                                                        "DescribeInputDeviceThumbnail"
                                                        "2017-10-14")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-input-device-thumbnail))
(common-lisp:progn
 (common-lisp:defun describe-input-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-security-group-id)
   (common-lisp:declare (common-lisp:ignorable input-security-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-input-security-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputSecurityGroups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-security-group-id))))
                                                        "DescribeInputSecurityGroup"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-input-security-group))
(common-lisp:progn
 (common-lisp:defun describe-multiplex
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key multiplex-id)
   (common-lisp:declare (common-lisp:ignorable multiplex-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-multiplex-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))))
                                                        "DescribeMultiplex"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-multiplex))
(common-lisp:progn
 (common-lisp:defun describe-multiplex-program
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key multiplex-id program-name)
   (common-lisp:declare (common-lisp:ignorable multiplex-id program-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-multiplex-program-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A/programs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'program-name))))
                                                        "DescribeMultiplexProgram"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-multiplex-program))
(common-lisp:progn
 (common-lisp:defun describe-offering
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key offering-id)
   (common-lisp:declare (common-lisp:ignorable offering-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-offering-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/offerings/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'offering-id))))
                                                        "DescribeOffering"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-offering))
(common-lisp:progn
 (common-lisp:defun describe-reservation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key reservation-id)
   (common-lisp:declare (common-lisp:ignorable reservation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-reservation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/reservations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'reservation-id))))
                                                        "DescribeReservation"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-reservation))
(common-lisp:progn
 (common-lisp:defun describe-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-id max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable channel-id max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-schedule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/channels/~A/schedule"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-id))))
                                                        "DescribeSchedule"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-schedule))
(common-lisp:progn
 (common-lisp:defun list-channels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-channels-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/prod/channels"
                                                        "ListChannels"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-channels))
(common-lisp:progn
 (common-lisp:defun list-input-device-transfers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token transfer-type)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token transfer-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-input-device-transfers-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/prod/inputDeviceTransfers"
                                                        "ListInputDeviceTransfers"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-input-device-transfers))
(common-lisp:progn
 (common-lisp:defun list-input-devices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-input-devices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/prod/inputDevices"
                                                        "ListInputDevices"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-input-devices))
(common-lisp:progn
 (common-lisp:defun list-input-security-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-input-security-groups-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/prod/inputSecurityGroups"
                                                        "ListInputSecurityGroups"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-input-security-groups))
(common-lisp:progn
 (common-lisp:defun list-inputs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-inputs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/prod/inputs"
                                                        "ListInputs"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-inputs))
(common-lisp:progn
 (common-lisp:defun list-multiplex-programs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results multiplex-id next-token)
   (common-lisp:declare
    (common-lisp:ignorable max-results multiplex-id next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-multiplex-programs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A/programs"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))))
                                                        "ListMultiplexPrograms"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-multiplex-programs))
(common-lisp:progn
 (common-lisp:defun list-multiplexes
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-multiplexes-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/prod/multiplexes"
                                                        "ListMultiplexes"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-multiplexes))
(common-lisp:progn
 (common-lisp:defun list-offerings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-class channel-configuration codec
                     duration max-results maximum-bitrate maximum-framerate
                     next-token resolution resource-type special-feature
                     video-quality)
   (common-lisp:declare
    (common-lisp:ignorable channel-class channel-configuration codec duration
     max-results maximum-bitrate maximum-framerate next-token resolution
     resource-type special-feature video-quality))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-offerings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/prod/offerings"
                                                        "ListOfferings"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-offerings))
(common-lisp:progn
 (common-lisp:defun list-reservations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-class codec max-results
                     maximum-bitrate maximum-framerate next-token resolution
                     resource-type special-feature video-quality)
   (common-lisp:declare
    (common-lisp:ignorable channel-class codec max-results maximum-bitrate
     maximum-framerate next-token resolution resource-type special-feature
     video-quality))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-reservations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/prod/reservations"
                                                        "ListReservations"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-reservations))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun purchase-offering
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key count name offering-id renewal-settings
                     request-id start tags)
   (common-lisp:declare
    (common-lisp:ignorable count name offering-id renewal-settings request-id
     start tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-purchase-offering-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/offerings/~A/purchase"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'offering-id))))
                                                        "PurchaseOffering"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'purchase-offering))
(common-lisp:progn
 (common-lisp:defun reboot-input-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key force input-device-id)
   (common-lisp:declare (common-lisp:ignorable force input-device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reboot-input-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputDevices/~A/reboot"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-device-id))))
                                                        "RebootInputDevice"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reboot-input-device))
(common-lisp:progn
 (common-lisp:defun reject-input-device-transfer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-device-id)
   (common-lisp:declare (common-lisp:ignorable input-device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reject-input-device-transfer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputDevices/~A/reject"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-device-id))))
                                                        "RejectInputDeviceTransfer"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reject-input-device-transfer))
(common-lisp:progn
 (common-lisp:defun start-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-id)
   (common-lisp:declare (common-lisp:ignorable channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/channels/~A/start"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-id))))
                                                        "StartChannel"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-channel))
(common-lisp:progn
 (common-lisp:defun start-input-device-maintenance-window
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-device-id)
   (common-lisp:declare (common-lisp:ignorable input-device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-input-device-maintenance-window-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputDevices/~A/startInputDeviceMaintenanceWindow"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-device-id))))
                                                        "StartInputDeviceMaintenanceWindow"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-input-device-maintenance-window))
(common-lisp:progn
 (common-lisp:defun start-multiplex
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key multiplex-id)
   (common-lisp:declare (common-lisp:ignorable multiplex-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-multiplex-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A/start"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))))
                                                        "StartMultiplex"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-multiplex))
(common-lisp:progn
 (common-lisp:defun stop-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-id)
   (common-lisp:declare (common-lisp:ignorable channel-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/channels/~A/stop"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-id))))
                                                        "StopChannel"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-channel))
(common-lisp:progn
 (common-lisp:defun stop-multiplex
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key multiplex-id)
   (common-lisp:declare (common-lisp:ignorable multiplex-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-multiplex-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A/stop"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))))
                                                        "StopMultiplex"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-multiplex))
(common-lisp:progn
 (common-lisp:defun transfer-input-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-device-id target-customer-id
                     target-region transfer-message)
   (common-lisp:declare
    (common-lisp:ignorable input-device-id target-customer-id target-region
     transfer-message))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-transfer-input-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputDevices/~A/transfer"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-device-id))))
                                                        "TransferInputDevice"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'transfer-input-device))
(common-lisp:progn
 (common-lisp:defun update-channel
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cdi-input-specification channel-id
                     destinations encoder-settings input-attachments
                     input-specification log-level maintenance name role-arn)
   (common-lisp:declare
    (common-lisp:ignorable cdi-input-specification channel-id destinations
     encoder-settings input-attachments input-specification log-level
     maintenance name role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-channel-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/channels/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-id))))
                                                        "UpdateChannel"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-channel))
(common-lisp:progn
 (common-lisp:defun update-channel-class
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key channel-class channel-id destinations)
   (common-lisp:declare
    (common-lisp:ignorable channel-class channel-id destinations))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-channel-class-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/channels/~A/channelClass"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'channel-id))))
                                                        "UpdateChannelClass"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-channel-class))
(common-lisp:progn
 (common-lisp:defun update-input
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destinations input-devices input-id
                     input-security-groups media-connect-flows name role-arn
                     sources)
   (common-lisp:declare
    (common-lisp:ignorable destinations input-devices input-id
     input-security-groups media-connect-flows name role-arn sources))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-input-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-id))))
                                                        "UpdateInput"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-input))
(common-lisp:progn
 (common-lisp:defun update-input-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hd-device-settings input-device-id name
                     uhd-device-settings)
   (common-lisp:declare
    (common-lisp:ignorable hd-device-settings input-device-id name
     uhd-device-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-input-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputDevices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-device-id))))
                                                        "UpdateInputDevice"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-input-device))
(common-lisp:progn
 (common-lisp:defun update-input-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key input-security-group-id tags
                     whitelist-rules)
   (common-lisp:declare
    (common-lisp:ignorable input-security-group-id tags whitelist-rules))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-input-security-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/inputSecurityGroups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'input-security-group-id))))
                                                        "UpdateInputSecurityGroup"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-input-security-group))
(common-lisp:progn
 (common-lisp:defun update-multiplex
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key multiplex-id multiplex-settings name)
   (common-lisp:declare
    (common-lisp:ignorable multiplex-id multiplex-settings name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-multiplex-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))))
                                                        "UpdateMultiplex"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-multiplex))
(common-lisp:progn
 (common-lisp:defun update-multiplex-program
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key multiplex-id multiplex-program-settings
                     program-name)
   (common-lisp:declare
    (common-lisp:ignorable multiplex-id multiplex-program-settings
     program-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-multiplex-program-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/multiplexes/~A/programs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multiplex-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'program-name))))
                                                        "UpdateMultiplexProgram"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-multiplex-program))
(common-lisp:progn
 (common-lisp:defun update-reservation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name renewal-settings reservation-id)
   (common-lisp:declare
    (common-lisp:ignorable name renewal-settings reservation-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-reservation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'medialive-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/prod/reservations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'reservation-id))))
                                                        "UpdateReservation"
                                                        "2017-10-14"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-reservation))
