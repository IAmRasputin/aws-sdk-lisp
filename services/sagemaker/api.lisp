;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/sagemaker/api
  (:use)
  (:nicknames #:aws/sagemaker)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/sagemaker/api)
(common-lisp:progn
 (common-lisp:defclass sagemaker-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "sagemaker"))
 (common-lisp:export 'sagemaker-request))
(common-lisp:progn
 (common-lisp:define-condition sagemaker-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'sagemaker-error))
(common-lisp:defvar *error-map*
  '(("ConflictException" . conflict-exception)
    ("ResourceInUse" . resource-in-use)
    ("ResourceLimitExceeded" . resource-limit-exceeded)
    ("ResourceNotFound" . resource-not-found)))
(common-lisp:deftype accept () 'common-lisp:string)
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:deftype action-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (action-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-source-"))
   (source-uri (common-lisp:error ":source-uri is required") :type
    (common-lisp:or string2048 common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (source-id common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null)))
 (common-lisp:export (common-lisp:list 'action-source 'make-action-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-uri))
      (common-lisp:list
       (common-lisp:cons "SourceUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id))
      (common-lisp:list
       (common-lisp:cons "SourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-source))
   common-lisp:nil))
(common-lisp:deftype action-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype action-summaries ()
   '(trivial-types:proper-list action-summary))
 (common-lisp:defun |make-action-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (action-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-action-summary-"))
   (action-arn common-lisp:nil :type
    (common-lisp:or action-arn common-lisp:null))
   (action-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (source common-lisp:nil :type
    (common-lisp:or action-source common-lisp:null))
   (action-type common-lisp:nil :type
    (common-lisp:or string64 common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or action-status common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'action-summary 'make-action-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input action-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input action-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-arn))
      (common-lisp:list
       (common-lisp:cons "ActionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "ActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "ActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input action-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-association-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-association-request-"))
   (source-arn (common-lisp:error ":source-arn is required") :type
    (common-lisp:or association-entity-arn common-lisp:null))
   (destination-arn (common-lisp:error ":destination-arn is required") :type
    (common-lisp:or association-entity-arn common-lisp:null))
   (association-type common-lisp:nil :type
    (common-lisp:or association-edge-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-association-request 'make-add-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-arn))
      (common-lisp:list
       (common-lisp:cons "DestinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-type))
      (common-lisp:list
       (common-lisp:cons "AssociationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-association-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-association-response-"))
   (source-arn common-lisp:nil :type
    (common-lisp:or association-entity-arn common-lisp:null))
   (destination-arn common-lisp:nil :type
    (common-lisp:or association-entity-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-association-response 'make-add-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-arn))
      (common-lisp:list
       (common-lisp:cons "DestinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-tags-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-tags-input-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'add-tags-input 'make-add-tags-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-tags-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-tags-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-tags-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-tags-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-tags-output-"))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'add-tags-output 'make-add-tags-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input add-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input add-tags-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input add-tags-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype additional-code-repository-names-or-urls ()
   '(trivial-types:proper-list code-repository-name-or-url))
 (common-lisp:defun |make-additional-code-repository-names-or-urls|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            code-repository-name-or-url))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (additional-inference-specification-definition (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-additional-inference-specification-definition-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (containers (common-lisp:error ":containers is required") :type
    (common-lisp:or model-package-container-definition-list common-lisp:null))
   (supported-transform-instance-types common-lisp:nil :type
    (common-lisp:or transform-instance-types common-lisp:null))
   (supported-realtime-inference-instance-types common-lisp:nil :type
    (common-lisp:or realtime-inference-instance-types common-lisp:null))
   (supported-content-types common-lisp:nil :type
    (common-lisp:or content-types common-lisp:null))
   (supported-response-mimetypes common-lisp:nil :type
    (common-lisp:or response-mimetypes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'additional-inference-specification-definition
                    'make-additional-inference-specification-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          additional-inference-specification-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          additional-inference-specification-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'containers))
      (common-lisp:list
       (common-lisp:cons "Containers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-transform-instance-types))
      (common-lisp:list
       (common-lisp:cons "SupportedTransformInstanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-realtime-inference-instance-types))
      (common-lisp:list
       (common-lisp:cons "SupportedRealtimeInferenceInstanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-content-types))
      (common-lisp:list
       (common-lisp:cons "SupportedContentTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-response-mimetypes))
      (common-lisp:list
       (common-lisp:cons "SupportedResponseMIMETypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          additional-inference-specification-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype additional-inference-specifications ()
   '(trivial-types:proper-list additional-inference-specification-definition))
 (common-lisp:defun |make-additional-inference-specifications|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            additional-inference-specification-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (agent-version (:copier common-lisp:nil)
      (:conc-name "struct-shape-agent-version-"))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or edge-version common-lisp:null))
   (agent-count (common-lisp:error ":agent-count is required") :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export (common-lisp:list 'agent-version 'make-agent-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input agent-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input agent-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-count))
      (common-lisp:list
       (common-lisp:cons "AgentCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input agent-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype agent-versions ()
   '(trivial-types:proper-list agent-version))
 (common-lisp:defun |make-agent-versions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list agent-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (alarm (:copier common-lisp:nil) (:conc-name "struct-shape-alarm-"))
   (alarm-name common-lisp:nil :type
    (common-lisp:or alarm-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'alarm 'make-alarm))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alarm))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alarm))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-name))
      (common-lisp:list
       (common-lisp:cons "AlarmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alarm))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype alarm-list () '(trivial-types:proper-list alarm))
 (common-lisp:defun |make-alarm-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list alarm))
   aws-sdk/generator/shape::members))
(common-lisp:deftype alarm-name () 'common-lisp:string)
(common-lisp:deftype algorithm-arn () 'common-lisp:string)
(common-lisp:deftype algorithm-image () 'common-lisp:string)
(common-lisp:deftype algorithm-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (algorithm-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-algorithm-specification-"))
   (training-image common-lisp:nil :type
    (common-lisp:or algorithm-image common-lisp:null))
   (algorithm-name common-lisp:nil :type
    (common-lisp:or arn-or-name common-lisp:null))
   (training-input-mode (common-lisp:error ":training-input-mode is required")
    :type (common-lisp:or training-input-mode common-lisp:null))
   (metric-definitions common-lisp:nil :type
    (common-lisp:or metric-definition-list common-lisp:null))
   (enable-sage-maker-metrics-time-series common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (container-entrypoint common-lisp:nil :type
    (common-lisp:or training-container-entrypoint common-lisp:null))
   (container-arguments common-lisp:nil :type
    (common-lisp:or training-container-arguments common-lisp:null))
   (training-image-config common-lisp:nil :type
    (common-lisp:or training-image-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'algorithm-specification 'make-algorithm-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          algorithm-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          algorithm-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-image))
      (common-lisp:list
       (common-lisp:cons "TrainingImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm-name))
      (common-lisp:list
       (common-lisp:cons "AlgorithmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-input-mode))
      (common-lisp:list
       (common-lisp:cons "TrainingInputMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-definitions))
      (common-lisp:list
       (common-lisp:cons "MetricDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-sage-maker-metrics-time-series))
      (common-lisp:list
       (common-lisp:cons "EnableSageMakerMetricsTimeSeries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-entrypoint))
      (common-lisp:list
       (common-lisp:cons "ContainerEntrypoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-arguments))
      (common-lisp:list
       (common-lisp:cons "ContainerArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-image-config))
      (common-lisp:list
       (common-lisp:cons "TrainingImageConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          algorithm-specification))
   common-lisp:nil))
(common-lisp:deftype algorithm-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (algorithm-status-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-algorithm-status-details-"))
   (validation-statuses common-lisp:nil :type
    (common-lisp:or algorithm-status-item-list common-lisp:null))
   (image-scan-statuses common-lisp:nil :type
    (common-lisp:or algorithm-status-item-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'algorithm-status-details 'make-algorithm-status-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          algorithm-status-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          algorithm-status-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-statuses))
      (common-lisp:list
       (common-lisp:cons "ValidationStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-scan-statuses))
      (common-lisp:list
       (common-lisp:cons "ImageScanStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          algorithm-status-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (algorithm-status-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-algorithm-status-item-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or detailed-algorithm-status common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'algorithm-status-item 'make-algorithm-status-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          algorithm-status-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          algorithm-status-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          algorithm-status-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype algorithm-status-item-list ()
   '(trivial-types:proper-list algorithm-status-item))
 (common-lisp:defun |make-algorithm-status-item-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list algorithm-status-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (algorithm-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-algorithm-summary-"))
   (algorithm-name (common-lisp:error ":algorithm-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (algorithm-arn (common-lisp:error ":algorithm-arn is required") :type
    (common-lisp:or algorithm-arn common-lisp:null))
   (algorithm-description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or creation-time common-lisp:null))
   (algorithm-status (common-lisp:error ":algorithm-status is required") :type
    (common-lisp:or algorithm-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'algorithm-summary 'make-algorithm-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input algorithm-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input algorithm-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm-name))
      (common-lisp:list
       (common-lisp:cons "AlgorithmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm-arn))
      (common-lisp:list
       (common-lisp:cons "AlgorithmArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'algorithm-description))
      (common-lisp:list
       (common-lisp:cons "AlgorithmDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm-status))
      (common-lisp:list
       (common-lisp:cons "AlgorithmStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input algorithm-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype algorithm-summary-list ()
   '(trivial-types:proper-list algorithm-summary))
 (common-lisp:defun |make-algorithm-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list algorithm-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (algorithm-validation-profile (:copier common-lisp:nil)
      (:conc-name "struct-shape-algorithm-validation-profile-"))
   (profile-name (common-lisp:error ":profile-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (training-job-definition
    (common-lisp:error ":training-job-definition is required") :type
    (common-lisp:or training-job-definition common-lisp:null))
   (transform-job-definition common-lisp:nil :type
    (common-lisp:or transform-job-definition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'algorithm-validation-profile
                    'make-algorithm-validation-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          algorithm-validation-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          algorithm-validation-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-name))
      (common-lisp:list
       (common-lisp:cons "ProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-job-definition))
      (common-lisp:list
       (common-lisp:cons "TrainingJobDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transform-job-definition))
      (common-lisp:list
       (common-lisp:cons "TransformJobDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          algorithm-validation-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype algorithm-validation-profiles ()
   '(trivial-types:proper-list algorithm-validation-profile))
 (common-lisp:defun |make-algorithm-validation-profiles|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            algorithm-validation-profile))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (algorithm-validation-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-algorithm-validation-specification-"))
   (validation-role (common-lisp:error ":validation-role is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (validation-profiles (common-lisp:error ":validation-profiles is required")
    :type (common-lisp:or algorithm-validation-profiles common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'algorithm-validation-specification
                    'make-algorithm-validation-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          algorithm-validation-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          algorithm-validation-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-role))
      (common-lisp:list
       (common-lisp:cons "ValidationRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-profiles))
      (common-lisp:list
       (common-lisp:cons "ValidationProfiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          algorithm-validation-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (annotation-consolidation-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-annotation-consolidation-config-"))
   (annotation-consolidation-lambda-arn
    (common-lisp:error ":annotation-consolidation-lambda-arn is required")
    :type (common-lisp:or lambda-function-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'annotation-consolidation-config
                    'make-annotation-consolidation-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          annotation-consolidation-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          annotation-consolidation-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'annotation-consolidation-lambda-arn))
      (common-lisp:list
       (common-lisp:cons "AnnotationConsolidationLambdaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          annotation-consolidation-config))
   common-lisp:nil))
(common-lisp:deftype app-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (app-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-app-details-"))
   (domain-id common-lisp:nil :type
    (common-lisp:or domain-id common-lisp:null))
   (user-profile-name common-lisp:nil :type
    (common-lisp:or user-profile-name common-lisp:null))
   (app-type common-lisp:nil :type (common-lisp:or app-type common-lisp:null))
   (app-name common-lisp:nil :type (common-lisp:or app-name common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or app-status common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (space-name common-lisp:nil :type
    (common-lisp:or space-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'app-details 'make-app-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input app-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input app-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-profile-name))
      (common-lisp:list
       (common-lisp:cons "UserProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-type))
      (common-lisp:list
       (common-lisp:cons "AppType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-name))
      (common-lisp:list
       (common-lisp:cons "AppName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "SpaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input app-details))
   common-lisp:nil))
(common-lisp:deftype app-image-config-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (app-image-config-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-app-image-config-details-"))
   (app-image-config-arn common-lisp:nil :type
    (common-lisp:or app-image-config-arn common-lisp:null))
   (app-image-config-name common-lisp:nil :type
    (common-lisp:or app-image-config-name common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (kernel-gateway-image-config common-lisp:nil :type
    (common-lisp:or kernel-gateway-image-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'app-image-config-details 'make-app-image-config-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          app-image-config-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          app-image-config-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-image-config-arn))
      (common-lisp:list
       (common-lisp:cons "AppImageConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-image-config-name))
      (common-lisp:list
       (common-lisp:cons "AppImageConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kernel-gateway-image-config))
      (common-lisp:list
       (common-lisp:cons "KernelGatewayImageConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          app-image-config-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype app-image-config-list ()
   '(trivial-types:proper-list app-image-config-details))
 (common-lisp:defun |make-app-image-config-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            app-image-config-details))
   aws-sdk/generator/shape::members))
(common-lisp:deftype app-image-config-name () 'common-lisp:string)
(common-lisp:deftype app-image-config-sort-key () 'common-lisp:string)
(common-lisp:deftype app-instance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype app-list () '(trivial-types:proper-list app-details))
 (common-lisp:defun |make-app-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list app-details))
   aws-sdk/generator/shape::members))
(common-lisp:deftype app-managed () 'common-lisp:boolean)
(common-lisp:deftype app-name () 'common-lisp:string)
(common-lisp:deftype app-network-access-type () 'common-lisp:string)
(common-lisp:deftype app-security-group-management () 'common-lisp:string)
(common-lisp:deftype app-sort-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (app-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-app-specification-"))
   (image-uri (common-lisp:error ":image-uri is required") :type
    (common-lisp:or image-uri common-lisp:null))
   (container-entrypoint common-lisp:nil :type
    (common-lisp:or container-entrypoint common-lisp:null))
   (container-arguments common-lisp:nil :type
    (common-lisp:or container-arguments common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'app-specification 'make-app-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input app-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input app-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-uri))
      (common-lisp:list
       (common-lisp:cons "ImageUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-entrypoint))
      (common-lisp:list
       (common-lisp:cons "ContainerEntrypoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-arguments))
      (common-lisp:list
       (common-lisp:cons "ContainerArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input app-specification))
   common-lisp:nil))
(common-lisp:deftype app-status () 'common-lisp:string)
(common-lisp:deftype app-type () 'common-lisp:string)
(common-lisp:deftype approval-description () 'common-lisp:string)
(common-lisp:deftype arn-or-name () 'common-lisp:string)
(common-lisp:deftype artifact-arn () 'common-lisp:string)
(common-lisp:deftype artifact-digest () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (artifact-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-artifact-source-"))
   (source-uri (common-lisp:error ":source-uri is required") :type
    (common-lisp:or string2048 common-lisp:null))
   (source-types common-lisp:nil :type
    (common-lisp:or artifact-source-types common-lisp:null)))
 (common-lisp:export (common-lisp:list 'artifact-source 'make-artifact-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input artifact-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input artifact-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-uri))
      (common-lisp:list
       (common-lisp:cons "SourceUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-types))
      (common-lisp:list
       (common-lisp:cons "SourceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input artifact-source))
   common-lisp:nil))
(common-lisp:deftype artifact-source-id-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (artifact-source-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-artifact-source-type-"))
   (source-id-type (common-lisp:error ":source-id-type is required") :type
    (common-lisp:or artifact-source-id-type common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or string256 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'artifact-source-type 'make-artifact-source-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input artifact-source-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input artifact-source-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id-type))
      (common-lisp:list
       (common-lisp:cons "SourceIdType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input artifact-source-type))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype artifact-source-types ()
   '(trivial-types:proper-list artifact-source-type))
 (common-lisp:defun |make-artifact-source-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list artifact-source-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype artifact-summaries ()
   '(trivial-types:proper-list artifact-summary))
 (common-lisp:defun |make-artifact-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list artifact-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (artifact-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-artifact-summary-"))
   (artifact-arn common-lisp:nil :type
    (common-lisp:or artifact-arn common-lisp:null))
   (artifact-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (source common-lisp:nil :type
    (common-lisp:or artifact-source common-lisp:null))
   (artifact-type common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'artifact-summary 'make-artifact-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input artifact-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input artifact-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-arn))
      (common-lisp:list
       (common-lisp:cons "ArtifactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-name))
      (common-lisp:list
       (common-lisp:cons "ArtifactName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-type))
      (common-lisp:list
       (common-lisp:cons "ArtifactType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input artifact-summary))
   common-lisp:nil))
(common-lisp:deftype assembly-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (associate-trial-component-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-trial-component-request-"))
   (trial-component-name
    (common-lisp:error ":trial-component-name is required") :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (trial-name (common-lisp:error ":trial-name is required") :type
    (common-lisp:or experiment-entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-trial-component-request
                    'make-associate-trial-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-trial-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-trial-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trial-component-name))
      (common-lisp:list
       (common-lisp:cons "TrialComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-name))
      (common-lisp:list
       (common-lisp:cons "TrialName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-trial-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-trial-component-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-trial-component-response-"))
   (trial-component-arn common-lisp:nil :type
    (common-lisp:or trial-component-arn common-lisp:null))
   (trial-arn common-lisp:nil :type
    (common-lisp:or trial-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-trial-component-response
                    'make-associate-trial-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-trial-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-trial-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-component-arn))
      (common-lisp:list
       (common-lisp:cons "TrialComponentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-arn))
      (common-lisp:list
       (common-lisp:cons "TrialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-trial-component-response))
   common-lisp:nil))
(common-lisp:deftype association-edge-type () 'common-lisp:string)
(common-lisp:deftype association-entity-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype association-summaries ()
   '(trivial-types:proper-list association-summary))
 (common-lisp:defun |make-association-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list association-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (association-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-association-summary-"))
   (source-arn common-lisp:nil :type
    (common-lisp:or association-entity-arn common-lisp:null))
   (destination-arn common-lisp:nil :type
    (common-lisp:or association-entity-arn common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (destination-type common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (association-type common-lisp:nil :type
    (common-lisp:or association-edge-type common-lisp:null))
   (source-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (destination-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'association-summary 'make-association-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input association-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input association-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-arn))
      (common-lisp:list
       (common-lisp:cons "DestinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-type))
      (common-lisp:list
       (common-lisp:cons "DestinationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-type))
      (common-lisp:list
       (common-lisp:cons "AssociationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-name))
      (common-lisp:list
       (common-lisp:cons "SourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-name))
      (common-lisp:list
       (common-lisp:cons "DestinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input association-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (async-inference-client-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-async-inference-client-config-"))
   (max-concurrent-invocations-per-instance common-lisp:nil :type
    (common-lisp:or max-concurrent-invocations-per-instance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'async-inference-client-config
                    'make-async-inference-client-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          async-inference-client-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          async-inference-client-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-concurrent-invocations-per-instance))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrentInvocationsPerInstance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          async-inference-client-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (async-inference-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-async-inference-config-"))
   (client-config common-lisp:nil :type
    (common-lisp:or async-inference-client-config common-lisp:null))
   (output-config (common-lisp:error ":output-config is required") :type
    (common-lisp:or async-inference-output-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'async-inference-config 'make-async-inference-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          async-inference-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          async-inference-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-config))
      (common-lisp:list
       (common-lisp:cons "ClientConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          async-inference-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (async-inference-notification-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-async-inference-notification-config-"))
   (success-topic common-lisp:nil :type
    (common-lisp:or sns-topic-arn common-lisp:null))
   (error-topic common-lisp:nil :type
    (common-lisp:or sns-topic-arn common-lisp:null))
   (include-inference-response-in common-lisp:nil :type
    (common-lisp:or async-notification-topic-type-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'async-inference-notification-config
                    'make-async-inference-notification-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          async-inference-notification-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          async-inference-notification-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-topic))
      (common-lisp:list
       (common-lisp:cons "SuccessTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-topic))
      (common-lisp:list
       (common-lisp:cons "ErrorTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'include-inference-response-in))
      (common-lisp:list
       (common-lisp:cons "IncludeInferenceResponseIn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          async-inference-notification-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (async-inference-output-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-async-inference-output-config-"))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (s3output-path common-lisp:nil :type
    (common-lisp:or destination-s3uri common-lisp:null))
   (notification-config common-lisp:nil :type
    (common-lisp:or async-inference-notification-config common-lisp:null))
   (s3failure-path common-lisp:nil :type
    (common-lisp:or destination-s3uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'async-inference-output-config
                    'make-async-inference-output-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          async-inference-output-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          async-inference-output-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3output-path))
      (common-lisp:list
       (common-lisp:cons "S3OutputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification-config))
      (common-lisp:list
       (common-lisp:cons "NotificationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3failure-path))
      (common-lisp:list
       (common-lisp:cons "S3FailurePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          async-inference-output-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype async-notification-topic-type-list ()
   '(trivial-types:proper-list async-notification-topic-types))
 (common-lisp:defun |make-async-notification-topic-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            async-notification-topic-types))
   aws-sdk/generator/shape::members))
(common-lisp:deftype async-notification-topic-types () 'common-lisp:string)
(common-lisp:deftype athena-catalog () 'common-lisp:string)
(common-lisp:deftype athena-database () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (athena-dataset-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-athena-dataset-definition-"))
   (catalog (common-lisp:error ":catalog is required") :type
    (common-lisp:or athena-catalog common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or athena-database common-lisp:null))
   (query-string (common-lisp:error ":query-string is required") :type
    (common-lisp:or athena-query-string common-lisp:null))
   (work-group common-lisp:nil :type
    (common-lisp:or athena-work-group common-lisp:null))
   (output-s3uri (common-lisp:error ":output-s3uri is required") :type
    (common-lisp:or s3uri common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (output-format (common-lisp:error ":output-format is required") :type
    (common-lisp:or athena-result-format common-lisp:null))
   (output-compression common-lisp:nil :type
    (common-lisp:or athena-result-compression-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'athena-dataset-definition
                    'make-athena-dataset-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          athena-dataset-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          athena-dataset-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog))
      (common-lisp:list
       (common-lisp:cons "Catalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "QueryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'work-group))
      (common-lisp:list
       (common-lisp:cons "WorkGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3uri))
      (common-lisp:list
       (common-lisp:cons "OutputS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-format))
      (common-lisp:list
       (common-lisp:cons "OutputFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-compression))
      (common-lisp:list
       (common-lisp:cons "OutputCompression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          athena-dataset-definition))
   common-lisp:nil))
(common-lisp:deftype athena-query-string () 'common-lisp:string)
(common-lisp:deftype athena-result-compression-type () 'common-lisp:string)
(common-lisp:deftype athena-result-format () 'common-lisp:string)
(common-lisp:deftype athena-work-group () 'common-lisp:string)
(common-lisp:deftype attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attribute-names ()
   '(trivial-types:proper-list attribute-name))
 (common-lisp:defun |make-attribute-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype auth-mode () 'common-lisp:string)
(common-lisp:deftype auto-generate-endpoint-name () 'common-lisp:boolean)
(common-lisp:deftype auto-mlalgorithm () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (auto-mlalgorithm-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-mlalgorithm-config-"))
   (auto-mlalgorithms (common-lisp:error ":auto-mlalgorithms is required")
    :type (common-lisp:or auto-mlalgorithms common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-mlalgorithm-config 'make-auto-mlalgorithm-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-mlalgorithm-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-mlalgorithm-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mlalgorithms))
      (common-lisp:list
       (common-lisp:cons "AutoMLAlgorithms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-mlalgorithm-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auto-mlalgorithms ()
   '(trivial-types:proper-list auto-mlalgorithm))
 (common-lisp:defun |make-auto-mlalgorithms|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auto-mlalgorithm))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype auto-mlalgorithms-config ()
   '(trivial-types:proper-list auto-mlalgorithm-config))
 (common-lisp:defun |make-auto-mlalgorithms-config|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auto-mlalgorithm-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (auto-mlcandidate (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-mlcandidate-"))
   (candidate-name (common-lisp:error ":candidate-name is required") :type
    (common-lisp:or candidate-name common-lisp:null))
   (final-auto-mljob-objective-metric common-lisp:nil :type
    (common-lisp:or final-auto-mljob-objective-metric common-lisp:null))
   (objective-status (common-lisp:error ":objective-status is required") :type
    (common-lisp:or objective-status common-lisp:null))
   (candidate-steps (common-lisp:error ":candidate-steps is required") :type
    (common-lisp:or candidate-steps common-lisp:null))
   (candidate-status (common-lisp:error ":candidate-status is required") :type
    (common-lisp:or candidate-status common-lisp:null))
   (inference-containers common-lisp:nil :type
    (common-lisp:or auto-mlcontainer-definitions common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or auto-mlfailure-reason common-lisp:null))
   (candidate-properties common-lisp:nil :type
    (common-lisp:or candidate-properties common-lisp:null))
   (inference-container-definitions common-lisp:nil :type
    (common-lisp:or auto-mlinference-container-definitions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-mlcandidate 'make-auto-mlcandidate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-mlcandidate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-mlcandidate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'candidate-name))
      (common-lisp:list
       (common-lisp:cons "CandidateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'final-auto-mljob-objective-metric))
      (common-lisp:list
       (common-lisp:cons "FinalAutoMLJobObjectiveMetric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'objective-status))
      (common-lisp:list
       (common-lisp:cons "ObjectiveStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'candidate-steps))
      (common-lisp:list
       (common-lisp:cons "CandidateSteps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'candidate-status))
      (common-lisp:list
       (common-lisp:cons "CandidateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-containers))
      (common-lisp:list
       (common-lisp:cons "InferenceContainers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'candidate-properties))
      (common-lisp:list
       (common-lisp:cons "CandidateProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-container-definitions))
      (common-lisp:list
       (common-lisp:cons "InferenceContainerDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-mlcandidate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (auto-mlcandidate-generation-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-mlcandidate-generation-config-"))
   (feature-specification-s3uri common-lisp:nil :type
    (common-lisp:or s3uri common-lisp:null))
   (algorithms-config common-lisp:nil :type
    (common-lisp:or auto-mlalgorithms-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-mlcandidate-generation-config
                    'make-auto-mlcandidate-generation-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-mlcandidate-generation-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-mlcandidate-generation-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'feature-specification-s3uri))
      (common-lisp:list
       (common-lisp:cons "FeatureSpecificationS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithms-config))
      (common-lisp:list
       (common-lisp:cons "AlgorithmsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-mlcandidate-generation-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (auto-mlcandidate-step (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-mlcandidate-step-"))
   (candidate-step-type (common-lisp:error ":candidate-step-type is required")
    :type (common-lisp:or candidate-step-type common-lisp:null))
   (candidate-step-arn (common-lisp:error ":candidate-step-arn is required")
    :type (common-lisp:or candidate-step-arn common-lisp:null))
   (candidate-step-name (common-lisp:error ":candidate-step-name is required")
    :type (common-lisp:or candidate-step-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-mlcandidate-step 'make-auto-mlcandidate-step))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-mlcandidate-step))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-mlcandidate-step))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'candidate-step-type))
      (common-lisp:list
       (common-lisp:cons "CandidateStepType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'candidate-step-arn))
      (common-lisp:list
       (common-lisp:cons "CandidateStepArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'candidate-step-name))
      (common-lisp:list
       (common-lisp:cons "CandidateStepName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-mlcandidate-step))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auto-mlcandidates ()
   '(trivial-types:proper-list auto-mlcandidate))
 (common-lisp:defun |make-auto-mlcandidates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auto-mlcandidate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (auto-mlchannel (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-mlchannel-"))
   (data-source (common-lisp:error ":data-source is required") :type
    (common-lisp:or auto-mldata-source common-lisp:null))
   (compression-type common-lisp:nil :type
    (common-lisp:or compression-type common-lisp:null))
   (target-attribute-name
    (common-lisp:error ":target-attribute-name is required") :type
    (common-lisp:or target-attribute-name common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or content-type common-lisp:null))
   (channel-type common-lisp:nil :type
    (common-lisp:or auto-mlchannel-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'auto-mlchannel 'make-auto-mlchannel))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-mlchannel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-mlchannel))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression-type))
      (common-lisp:list
       (common-lisp:cons "CompressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-attribute-name))
      (common-lisp:list
       (common-lisp:cons "TargetAttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-type))
      (common-lisp:list
       (common-lisp:cons "ChannelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-mlchannel))
   common-lisp:nil))
(common-lisp:deftype auto-mlchannel-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (auto-mlcontainer-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-mlcontainer-definition-"))
   (image (common-lisp:error ":image is required") :type
    (common-lisp:or container-image common-lisp:null))
   (model-data-url (common-lisp:error ":model-data-url is required") :type
    (common-lisp:or url common-lisp:null))
   (environment common-lisp:nil :type
    (common-lisp:or environment-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-mlcontainer-definition
                    'make-auto-mlcontainer-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-mlcontainer-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-mlcontainer-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-data-url))
      (common-lisp:list
       (common-lisp:cons "ModelDataUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-mlcontainer-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auto-mlcontainer-definitions ()
   '(trivial-types:proper-list auto-mlcontainer-definition))
 (common-lisp:defun |make-auto-mlcontainer-definitions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            auto-mlcontainer-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (auto-mldata-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-mldata-source-"))
   (s3data-source (common-lisp:error ":s3data-source is required") :type
    (common-lisp:or auto-mls3data-source common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-mldata-source 'make-auto-mldata-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-mldata-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-mldata-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3data-source))
      (common-lisp:list
       (common-lisp:cons "S3DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-mldata-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (auto-mldata-split-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-mldata-split-config-"))
   (validation-fraction common-lisp:nil :type
    (common-lisp:or validation-fraction common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-mldata-split-config 'make-auto-mldata-split-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-mldata-split-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-mldata-split-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-fraction))
      (common-lisp:list
       (common-lisp:cons "ValidationFraction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-mldata-split-config))
   common-lisp:nil))
(common-lisp:deftype auto-mlfailure-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype auto-mlinference-container-definitions ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-auto-mlinference-container-definitions|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype auto-mlinput-data-config ()
   '(trivial-types:proper-list auto-mlchannel))
 (common-lisp:defun |make-auto-mlinput-data-config|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auto-mlchannel))
   aws-sdk/generator/shape::members))
(common-lisp:deftype auto-mljob-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (auto-mljob-artifacts (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-mljob-artifacts-"))
   (candidate-definition-notebook-location common-lisp:nil :type
    (common-lisp:or candidate-definition-notebook-location common-lisp:null))
   (data-exploration-notebook-location common-lisp:nil :type
    (common-lisp:or data-exploration-notebook-location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-mljob-artifacts 'make-auto-mljob-artifacts))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-mljob-artifacts))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-mljob-artifacts))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'candidate-definition-notebook-location))
      (common-lisp:list
       (common-lisp:cons "CandidateDefinitionNotebookLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-exploration-notebook-location))
      (common-lisp:list
       (common-lisp:cons "DataExplorationNotebookLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-mljob-artifacts))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (auto-mljob-channel (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-mljob-channel-"))
   (channel-type common-lisp:nil :type
    (common-lisp:or auto-mlchannel-type common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or content-type common-lisp:null))
   (compression-type common-lisp:nil :type
    (common-lisp:or compression-type common-lisp:null))
   (data-source common-lisp:nil :type
    (common-lisp:or auto-mldata-source common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-mljob-channel 'make-auto-mljob-channel))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-mljob-channel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-mljob-channel))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-type))
      (common-lisp:list
       (common-lisp:cons "ChannelType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression-type))
      (common-lisp:list
       (common-lisp:cons "CompressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-mljob-channel))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (auto-mljob-completion-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-mljob-completion-criteria-"))
   (max-candidates common-lisp:nil :type
    (common-lisp:or max-candidates common-lisp:null))
   (max-runtime-per-training-job-in-seconds common-lisp:nil :type
    (common-lisp:or max-runtime-per-training-job-in-seconds common-lisp:null))
   (max-auto-mljob-runtime-in-seconds common-lisp:nil :type
    (common-lisp:or max-auto-mljob-runtime-in-seconds common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-mljob-completion-criteria
                    'make-auto-mljob-completion-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-mljob-completion-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-mljob-completion-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-candidates))
      (common-lisp:list
       (common-lisp:cons "MaxCandidates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-runtime-per-training-job-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaxRuntimePerTrainingJobInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-auto-mljob-runtime-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaxAutoMLJobRuntimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-mljob-completion-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (auto-mljob-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-mljob-config-"))
   (completion-criteria common-lisp:nil :type
    (common-lisp:or auto-mljob-completion-criteria common-lisp:null))
   (security-config common-lisp:nil :type
    (common-lisp:or auto-mlsecurity-config common-lisp:null))
   (data-split-config common-lisp:nil :type
    (common-lisp:or auto-mldata-split-config common-lisp:null))
   (candidate-generation-config common-lisp:nil :type
    (common-lisp:or auto-mlcandidate-generation-config common-lisp:null))
   (mode common-lisp:nil :type (common-lisp:or auto-mlmode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-mljob-config 'make-auto-mljob-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-mljob-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-mljob-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-criteria))
      (common-lisp:list
       (common-lisp:cons "CompletionCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-config))
      (common-lisp:list
       (common-lisp:cons "SecurityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-split-config))
      (common-lisp:list
       (common-lisp:cons "DataSplitConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'candidate-generation-config))
      (common-lisp:list
       (common-lisp:cons "CandidateGenerationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-mljob-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auto-mljob-input-data-config ()
   '(trivial-types:proper-list auto-mljob-channel))
 (common-lisp:defun |make-auto-mljob-input-data-config|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auto-mljob-channel))
   aws-sdk/generator/shape::members))
(common-lisp:deftype auto-mljob-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (auto-mljob-objective (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-mljob-objective-"))
   (metric-name (common-lisp:error ":metric-name is required") :type
    (common-lisp:or auto-mlmetric-enum common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-mljob-objective 'make-auto-mljob-objective))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-mljob-objective))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-mljob-objective))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-mljob-objective))
   common-lisp:nil))
(common-lisp:deftype auto-mljob-objective-type () 'common-lisp:string)
(common-lisp:deftype auto-mljob-secondary-status () 'common-lisp:string)
(common-lisp:deftype auto-mljob-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (auto-mljob-step-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-mljob-step-metadata-"))
   (arn common-lisp:nil :type
    (common-lisp:or auto-mljob-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-mljob-step-metadata 'make-auto-mljob-step-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-mljob-step-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-mljob-step-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-mljob-step-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auto-mljob-summaries ()
   '(trivial-types:proper-list auto-mljob-summary))
 (common-lisp:defun |make-auto-mljob-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auto-mljob-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (auto-mljob-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-mljob-summary-"))
   (auto-mljob-name (common-lisp:error ":auto-mljob-name is required") :type
    (common-lisp:or auto-mljob-name common-lisp:null))
   (auto-mljob-arn (common-lisp:error ":auto-mljob-arn is required") :type
    (common-lisp:or auto-mljob-arn common-lisp:null))
   (auto-mljob-status (common-lisp:error ":auto-mljob-status is required")
    :type (common-lisp:or auto-mljob-status common-lisp:null))
   (auto-mljob-secondary-status
    (common-lisp:error ":auto-mljob-secondary-status is required") :type
    (common-lisp:or auto-mljob-secondary-status common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or auto-mlfailure-reason common-lisp:null))
   (partial-failure-reasons common-lisp:nil :type
    (common-lisp:or auto-mlpartial-failure-reasons common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-mljob-summary 'make-auto-mljob-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-mljob-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-mljob-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mljob-name))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mljob-arn))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mljob-status))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-mljob-secondary-status))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobSecondaryStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partial-failure-reasons))
      (common-lisp:list
       (common-lisp:cons "PartialFailureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-mljob-summary))
   common-lisp:nil))
(common-lisp:deftype auto-mlmax-results () 'common-lisp:integer)
(common-lisp:deftype auto-mlmetric-enum () 'common-lisp:string)
(common-lisp:deftype auto-mlmetric-extended-enum () 'common-lisp:string)
(common-lisp:deftype auto-mlmode () 'common-lisp:string)
(common-lisp:deftype auto-mlname-contains () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (auto-mloutput-data-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-mloutput-data-config-"))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (s3output-path (common-lisp:error ":s3output-path is required") :type
    (common-lisp:or s3uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-mloutput-data-config
                    'make-auto-mloutput-data-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-mloutput-data-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-mloutput-data-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3output-path))
      (common-lisp:list
       (common-lisp:cons "S3OutputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-mloutput-data-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (auto-mlpartial-failure-reason (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-mlpartial-failure-reason-"))
   (partial-failure-message common-lisp:nil :type
    (common-lisp:or auto-mlfailure-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-mlpartial-failure-reason
                    'make-auto-mlpartial-failure-reason))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-mlpartial-failure-reason))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-mlpartial-failure-reason))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partial-failure-message))
      (common-lisp:list
       (common-lisp:cons "PartialFailureMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-mlpartial-failure-reason))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auto-mlpartial-failure-reasons ()
   '(trivial-types:proper-list auto-mlpartial-failure-reason))
 (common-lisp:defun |make-auto-mlpartial-failure-reasons|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            auto-mlpartial-failure-reason))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (auto-mlproblem-type-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-mlproblem-type-config-"))
   (image-classification-job-config common-lisp:nil :type
    (common-lisp:or image-classification-job-config common-lisp:null))
   (text-classification-job-config common-lisp:nil :type
    (common-lisp:or text-classification-job-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-mlproblem-type-config
                    'make-auto-mlproblem-type-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-mlproblem-type-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-mlproblem-type-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-classification-job-config))
      (common-lisp:list
       (common-lisp:cons "ImageClassificationJobConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'text-classification-job-config))
      (common-lisp:list
       (common-lisp:cons "TextClassificationJobConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-mlproblem-type-config))
   common-lisp:nil))
(common-lisp:deftype auto-mlprocessing-unit () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (auto-mls3data-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-mls3data-source-"))
   (s3data-type (common-lisp:error ":s3data-type is required") :type
    (common-lisp:or auto-mls3data-type common-lisp:null))
   (s3uri (common-lisp:error ":s3uri is required") :type
    (common-lisp:or s3uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-mls3data-source 'make-auto-mls3data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-mls3data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-mls3data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3data-type))
      (common-lisp:list
       (common-lisp:cons "S3DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-mls3data-source))
   common-lisp:nil))
(common-lisp:deftype auto-mls3data-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (auto-mlsecurity-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-mlsecurity-config-"))
   (volume-kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (enable-inter-container-traffic-encryption common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (vpc-config common-lisp:nil :type
    (common-lisp:or vpc-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-mlsecurity-config 'make-auto-mlsecurity-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-mlsecurity-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-mlsecurity-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "VolumeKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-inter-container-traffic-encryption))
      (common-lisp:list
       (common-lisp:cons "EnableInterContainerTrafficEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-mlsecurity-config))
   common-lisp:nil))
(common-lisp:deftype auto-mlsort-by () 'common-lisp:string)
(common-lisp:deftype auto-mlsort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (auto-rollback-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-rollback-config-"))
   (alarms common-lisp:nil :type (common-lisp:or alarm-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-rollback-config 'make-auto-rollback-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input auto-rollback-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input auto-rollback-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarms))
      (common-lisp:list
       (common-lisp:cons "Alarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input auto-rollback-config))
   common-lisp:nil))
(common-lisp:deftype aws-managed-human-loop-request-source ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (batch-data-capture-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-data-capture-config-"))
   (destination-s3uri (common-lisp:error ":destination-s3uri is required")
    :type (common-lisp:or s3uri common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (generate-inference-id common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-data-capture-config
                    'make-batch-data-capture-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-data-capture-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-data-capture-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-s3uri))
      (common-lisp:list
       (common-lisp:cons "DestinationS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generate-inference-id))
      (common-lisp:list
       (common-lisp:cons "GenerateInferenceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-data-capture-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-describe-model-package-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-describe-model-package-error-"))
   (error-code (common-lisp:error ":error-code is required") :type
    (common-lisp:or string common-lisp:null))
   (error-response (common-lisp:error ":error-response is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-describe-model-package-error
                    'make-batch-describe-model-package-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-model-package-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-model-package-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-response))
      (common-lisp:list
       (common-lisp:cons "ErrorResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-model-package-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-describe-model-package-error-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-batch-describe-model-package-error-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-describe-model-package-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-describe-model-package-input-"))
   (model-package-arn-list
    (common-lisp:error ":model-package-arn-list is required") :type
    (common-lisp:or model-package-arn-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-describe-model-package-input
                    'make-batch-describe-model-package-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-model-package-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-model-package-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-arn-list))
      (common-lisp:list
       (common-lisp:cons "ModelPackageArnList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-model-package-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-describe-model-package-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-describe-model-package-output-"))
   (model-package-summaries common-lisp:nil :type
    (common-lisp:or model-package-summaries common-lisp:null))
   (batch-describe-model-package-error-map common-lisp:nil :type
    (common-lisp:or batch-describe-model-package-error-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-describe-model-package-output
                    'make-batch-describe-model-package-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-model-package-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-model-package-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-summaries))
      (common-lisp:list
       (common-lisp:cons "ModelPackageSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-describe-model-package-error-map))
      (common-lisp:list
       (common-lisp:cons "BatchDescribeModelPackageErrorMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-model-package-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-describe-model-package-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-describe-model-package-summary-"))
   (model-package-group-name
    (common-lisp:error ":model-package-group-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (model-package-version common-lisp:nil :type
    (common-lisp:or model-package-version common-lisp:null))
   (model-package-arn (common-lisp:error ":model-package-arn is required")
    :type (common-lisp:or model-package-arn common-lisp:null))
   (model-package-description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or creation-time common-lisp:null))
   (inference-specification
    (common-lisp:error ":inference-specification is required") :type
    (common-lisp:or inference-specification common-lisp:null))
   (model-package-status
    (common-lisp:error ":model-package-status is required") :type
    (common-lisp:or model-package-status common-lisp:null))
   (model-approval-status common-lisp:nil :type
    (common-lisp:or model-approval-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-describe-model-package-summary
                    'make-batch-describe-model-package-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-model-package-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-model-package-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-name))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-version))
      (common-lisp:list
       (common-lisp:cons "ModelPackageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-package-arn))
      (common-lisp:list
       (common-lisp:cons "ModelPackageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-description))
      (common-lisp:list
       (common-lisp:cons "ModelPackageDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-specification))
      (common-lisp:list
       (common-lisp:cons "InferenceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-status))
      (common-lisp:list
       (common-lisp:cons "ModelPackageStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-approval-status))
      (common-lisp:list
       (common-lisp:cons "ModelApprovalStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-model-package-summary))
   common-lisp:nil))
(common-lisp:deftype batch-strategy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (batch-transform-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-transform-input-"))
   (data-captured-destination-s3uri
    (common-lisp:error ":data-captured-destination-s3uri is required") :type
    (common-lisp:or destination-s3uri common-lisp:null))
   (dataset-format (common-lisp:error ":dataset-format is required") :type
    (common-lisp:or monitoring-dataset-format common-lisp:null))
   (local-path (common-lisp:error ":local-path is required") :type
    (common-lisp:or processing-local-path common-lisp:null))
   (s3input-mode common-lisp:nil :type
    (common-lisp:or processing-s3input-mode common-lisp:null))
   (s3data-distribution-type common-lisp:nil :type
    (common-lisp:or processing-s3data-distribution-type common-lisp:null))
   (features-attribute common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (inference-attribute common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (probability-attribute common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (probability-threshold-attribute common-lisp:nil :type
    (common-lisp:or probability-threshold-attribute common-lisp:null))
   (start-time-offset common-lisp:nil :type
    (common-lisp:or monitoring-time-offset-string common-lisp:null))
   (end-time-offset common-lisp:nil :type
    (common-lisp:or monitoring-time-offset-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-transform-input 'make-batch-transform-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-transform-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-transform-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-captured-destination-s3uri))
      (common-lisp:list
       (common-lisp:cons "DataCapturedDestinationS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-format))
      (common-lisp:list
       (common-lisp:cons "DatasetFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-path))
      (common-lisp:list
       (common-lisp:cons "LocalPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3input-mode))
      (common-lisp:list
       (common-lisp:cons "S3InputMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3data-distribution-type))
      (common-lisp:list
       (common-lisp:cons "S3DataDistributionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'features-attribute))
      (common-lisp:list
       (common-lisp:cons "FeaturesAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inference-attribute))
      (common-lisp:list
       (common-lisp:cons "InferenceAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'probability-attribute))
      (common-lisp:list
       (common-lisp:cons "ProbabilityAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'probability-threshold-attribute))
      (common-lisp:list
       (common-lisp:cons "ProbabilityThresholdAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time-offset))
      (common-lisp:list
       (common-lisp:cons "StartTimeOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time-offset))
      (common-lisp:list
       (common-lisp:cons "EndTimeOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-transform-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (best-objective-not-improving (:copier common-lisp:nil)
      (:conc-name "struct-shape-best-objective-not-improving-"))
   (max-number-of-training-jobs-not-improving common-lisp:nil :type
    (common-lisp:or max-number-of-training-jobs-not-improving
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'best-objective-not-improving
                    'make-best-objective-not-improving))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          best-objective-not-improving))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          best-objective-not-improving))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-number-of-training-jobs-not-improving))
      (common-lisp:list
       (common-lisp:cons "MaxNumberOfTrainingJobsNotImproving"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          best-objective-not-improving))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (bias (:copier common-lisp:nil) (:conc-name "struct-shape-bias-"))
   (report common-lisp:nil :type
    (common-lisp:or metrics-source common-lisp:null))
   (pre-training-report common-lisp:nil :type
    (common-lisp:or metrics-source common-lisp:null))
   (post-training-report common-lisp:nil :type
    (common-lisp:or metrics-source common-lisp:null)))
 (common-lisp:export (common-lisp:list 'bias 'make-bias))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input bias))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input bias))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report))
      (common-lisp:list
       (common-lisp:cons "Report"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pre-training-report))
      (common-lisp:list
       (common-lisp:cons "PreTrainingReport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-training-report))
      (common-lisp:list
       (common-lisp:cons "PostTrainingReport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input bias))
   common-lisp:nil))
(common-lisp:deftype billable-time-in-seconds () 'common-lisp:integer)
(common-lisp:deftype blocked-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (blue-green-update-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-blue-green-update-policy-"))
   (traffic-routing-configuration
    (common-lisp:error ":traffic-routing-configuration is required") :type
    (common-lisp:or traffic-routing-config common-lisp:null))
   (termination-wait-in-seconds common-lisp:nil :type
    (common-lisp:or termination-wait-in-seconds common-lisp:null))
   (maximum-execution-timeout-in-seconds common-lisp:nil :type
    (common-lisp:or maximum-execution-timeout-in-seconds common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'blue-green-update-policy 'make-blue-green-update-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          blue-green-update-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          blue-green-update-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'traffic-routing-configuration))
      (common-lisp:list
       (common-lisp:cons "TrafficRoutingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'termination-wait-in-seconds))
      (common-lisp:list
       (common-lisp:cons "TerminationWaitInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-execution-timeout-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaximumExecutionTimeoutInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          blue-green-update-policy))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boolean-operator () 'common-lisp:string)
(common-lisp:deftype branch () 'common-lisp:string)
(common-lisp:deftype bucket-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cache-hit-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-cache-hit-result-"))
   (source-pipeline-execution-arn common-lisp:nil :type
    (common-lisp:or pipeline-execution-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cache-hit-result 'make-cache-hit-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cache-hit-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cache-hit-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-pipeline-execution-arn))
      (common-lisp:list
       (common-lisp:cons "SourcePipelineExecutionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cache-hit-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (callback-step-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-callback-step-metadata-"))
   (callback-token common-lisp:nil :type
    (common-lisp:or callback-token common-lisp:null))
   (sqs-queue-url common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (output-parameters common-lisp:nil :type
    (common-lisp:or output-parameter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'callback-step-metadata 'make-callback-step-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          callback-step-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          callback-step-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'callback-token))
      (common-lisp:list
       (common-lisp:cons "CallbackToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sqs-queue-url))
      (common-lisp:list
       (common-lisp:cons "SqsQueueUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-parameters))
      (common-lisp:list
       (common-lisp:cons "OutputParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          callback-step-metadata))
   common-lisp:nil))
(common-lisp:deftype callback-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (candidate-artifact-locations (:copier common-lisp:nil)
      (:conc-name "struct-shape-candidate-artifact-locations-"))
   (explainability (common-lisp:error ":explainability is required") :type
    (common-lisp:or explainability-location common-lisp:null))
   (model-insights common-lisp:nil :type
    (common-lisp:or model-insights-location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'candidate-artifact-locations
                    'make-candidate-artifact-locations))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          candidate-artifact-locations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          candidate-artifact-locations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explainability))
      (common-lisp:list
       (common-lisp:cons "Explainability"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-insights))
      (common-lisp:list
       (common-lisp:cons "ModelInsights"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          candidate-artifact-locations))
   common-lisp:nil))
(common-lisp:deftype candidate-definition-notebook-location ()
  'common-lisp:string)
(common-lisp:deftype candidate-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (candidate-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-candidate-properties-"))
   (candidate-artifact-locations common-lisp:nil :type
    (common-lisp:or candidate-artifact-locations common-lisp:null))
   (candidate-metrics common-lisp:nil :type
    (common-lisp:or metric-data-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'candidate-properties 'make-candidate-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input candidate-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input candidate-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'candidate-artifact-locations))
      (common-lisp:list
       (common-lisp:cons "CandidateArtifactLocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'candidate-metrics))
      (common-lisp:list
       (common-lisp:cons "CandidateMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input candidate-properties))
   common-lisp:nil))
(common-lisp:deftype candidate-sort-by () 'common-lisp:string)
(common-lisp:deftype candidate-status () 'common-lisp:string)
(common-lisp:deftype candidate-step-arn () 'common-lisp:string)
(common-lisp:deftype candidate-step-name () 'common-lisp:string)
(common-lisp:deftype candidate-step-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype candidate-steps ()
   '(trivial-types:proper-list auto-mlcandidate-step))
 (common-lisp:defun |make-candidate-steps|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auto-mlcandidate-step))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (canvas-app-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-canvas-app-settings-"))
   (time-series-forecasting-settings common-lisp:nil :type
    (common-lisp:or time-series-forecasting-settings common-lisp:null))
   (model-register-settings common-lisp:nil :type
    (common-lisp:or model-register-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'canvas-app-settings 'make-canvas-app-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input canvas-app-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input canvas-app-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-series-forecasting-settings))
      (common-lisp:list
       (common-lisp:cons "TimeSeriesForecastingSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-register-settings))
      (common-lisp:list
       (common-lisp:cons "ModelRegisterSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input canvas-app-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (capacity-size (:copier common-lisp:nil)
      (:conc-name "struct-shape-capacity-size-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or capacity-size-type common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or capacity-size-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'capacity-size 'make-capacity-size))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input capacity-size))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input capacity-size))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input capacity-size))
   common-lisp:nil))
(common-lisp:deftype capacity-size-type () 'common-lisp:string)
(common-lisp:deftype capacity-size-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (capture-content-type-header (:copier common-lisp:nil)
      (:conc-name "struct-shape-capture-content-type-header-"))
   (csv-content-types common-lisp:nil :type
    (common-lisp:or csv-content-types common-lisp:null))
   (json-content-types common-lisp:nil :type
    (common-lisp:or json-content-types common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'capture-content-type-header
                    'make-capture-content-type-header))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          capture-content-type-header))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          capture-content-type-header))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csv-content-types))
      (common-lisp:list
       (common-lisp:cons "CsvContentTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json-content-types))
      (common-lisp:list
       (common-lisp:cons "JsonContentTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          capture-content-type-header))
   common-lisp:nil))
(common-lisp:deftype capture-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (capture-option (:copier common-lisp:nil)
      (:conc-name "struct-shape-capture-option-"))
   (capture-mode (common-lisp:error ":capture-mode is required") :type
    (common-lisp:or capture-mode common-lisp:null)))
 (common-lisp:export (common-lisp:list 'capture-option 'make-capture-option))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input capture-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input capture-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capture-mode))
      (common-lisp:list
       (common-lisp:cons "CaptureMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input capture-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype capture-option-list ()
   '(trivial-types:proper-list capture-option))
 (common-lisp:defun |make-capture-option-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list capture-option))
   aws-sdk/generator/shape::members))
(common-lisp:deftype capture-status () 'common-lisp:string)
(common-lisp:deftype catalog () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (categorical-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-categorical-parameter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string64 common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or categorical-parameter-range-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'categorical-parameter 'make-categorical-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          categorical-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          categorical-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          categorical-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (categorical-parameter-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-categorical-parameter-range-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or parameter-key common-lisp:null))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or parameter-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'categorical-parameter-range
                    'make-categorical-parameter-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          categorical-parameter-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          categorical-parameter-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          categorical-parameter-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (categorical-parameter-range-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-categorical-parameter-range-specification-"))
   (values (common-lisp:error ":values is required") :type
    (common-lisp:or parameter-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'categorical-parameter-range-specification
                    'make-categorical-parameter-range-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          categorical-parameter-range-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          categorical-parameter-range-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          categorical-parameter-range-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype categorical-parameter-range-values ()
   '(trivial-types:proper-list string128))
 (common-lisp:defun |make-categorical-parameter-range-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string128))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype categorical-parameter-ranges ()
   '(trivial-types:proper-list categorical-parameter-range))
 (common-lisp:defun |make-categorical-parameter-ranges|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            categorical-parameter-range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype categorical-parameters ()
   '(trivial-types:proper-list categorical-parameter))
 (common-lisp:defun |make-categorical-parameters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list categorical-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cents () 'common-lisp:integer)
(common-lisp:deftype certify-for-marketplace () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (channel (:copier common-lisp:nil) (:conc-name "struct-shape-channel-"))
   (channel-name (common-lisp:error ":channel-name is required") :type
    (common-lisp:or channel-name common-lisp:null))
   (data-source (common-lisp:error ":data-source is required") :type
    (common-lisp:or data-source common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or content-type common-lisp:null))
   (compression-type common-lisp:nil :type
    (common-lisp:or compression-type common-lisp:null))
   (record-wrapper-type common-lisp:nil :type
    (common-lisp:or record-wrapper common-lisp:null))
   (input-mode common-lisp:nil :type
    (common-lisp:or training-input-mode common-lisp:null))
   (shuffle-config common-lisp:nil :type
    (common-lisp:or shuffle-config common-lisp:null)))
 (common-lisp:export (common-lisp:list 'channel 'make-channel))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input channel))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input channel))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-name))
      (common-lisp:list
       (common-lisp:cons "ChannelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression-type))
      (common-lisp:list
       (common-lisp:cons "CompressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'record-wrapper-type))
      (common-lisp:list
       (common-lisp:cons "RecordWrapperType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-mode))
      (common-lisp:list
       (common-lisp:cons "InputMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shuffle-config))
      (common-lisp:list
       (common-lisp:cons "ShuffleConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input channel))
   common-lisp:nil))
(common-lisp:deftype channel-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (channel-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-channel-specification-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or channel-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (is-required common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (supported-content-types
    (common-lisp:error ":supported-content-types is required") :type
    (common-lisp:or content-types common-lisp:null))
   (supported-compression-types common-lisp:nil :type
    (common-lisp:or compression-types common-lisp:null))
   (supported-input-modes
    (common-lisp:error ":supported-input-modes is required") :type
    (common-lisp:or input-modes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'channel-specification 'make-channel-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          channel-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          channel-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-required))
      (common-lisp:list
       (common-lisp:cons "IsRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-content-types))
      (common-lisp:list
       (common-lisp:cons "SupportedContentTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-compression-types))
      (common-lisp:list
       (common-lisp:cons "SupportedCompressionTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-input-modes))
      (common-lisp:list
       (common-lisp:cons "SupportedInputModes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          channel-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype channel-specifications ()
   '(trivial-types:proper-list channel-specification))
 (common-lisp:defun |make-channel-specifications|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list channel-specification))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (checkpoint-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-checkpoint-config-"))
   (s3uri (common-lisp:error ":s3uri is required") :type
    (common-lisp:or s3uri common-lisp:null))
   (local-path common-lisp:nil :type
    (common-lisp:or directory-path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'checkpoint-config 'make-checkpoint-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input checkpoint-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input checkpoint-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-path))
      (common-lisp:list
       (common-lisp:cons "LocalPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input checkpoint-config))
   common-lisp:nil))
(common-lisp:deftype cidr () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cidrs () '(trivial-types:proper-list cidr))
 (common-lisp:defun |make-cidrs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cidr))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (clarify-check-step-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-clarify-check-step-metadata-"))
   (check-type common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (baseline-used-for-drift-check-constraints common-lisp:nil :type
    (common-lisp:or string1024 common-lisp:null))
   (calculated-baseline-constraints common-lisp:nil :type
    (common-lisp:or string1024 common-lisp:null))
   (model-package-group-name common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (violation-report common-lisp:nil :type
    (common-lisp:or string1024 common-lisp:null))
   (check-job-arn common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (skip-check common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (register-new-baseline common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'clarify-check-step-metadata
                    'make-clarify-check-step-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          clarify-check-step-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          clarify-check-step-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-type))
      (common-lisp:list
       (common-lisp:cons "CheckType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'baseline-used-for-drift-check-constraints))
      (common-lisp:list
       (common-lisp:cons "BaselineUsedForDriftCheckConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculated-baseline-constraints))
      (common-lisp:list
       (common-lisp:cons "CalculatedBaselineConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-name))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-report))
      (common-lisp:list
       (common-lisp:cons "ViolationReport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-job-arn))
      (common-lisp:list
       (common-lisp:cons "CheckJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skip-check))
      (common-lisp:list
       (common-lisp:cons "SkipCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'register-new-baseline))
      (common-lisp:list
       (common-lisp:cons "RegisterNewBaseline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          clarify-check-step-metadata))
   common-lisp:nil))
(common-lisp:deftype clarify-content-template () 'common-lisp:string)
(common-lisp:deftype clarify-enable-explanations () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (clarify-explainer-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-clarify-explainer-config-"))
   (enable-explanations common-lisp:nil :type
    (common-lisp:or clarify-enable-explanations common-lisp:null))
   (inference-config common-lisp:nil :type
    (common-lisp:or clarify-inference-config common-lisp:null))
   (shap-config (common-lisp:error ":shap-config is required") :type
    (common-lisp:or clarify-shap-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'clarify-explainer-config 'make-clarify-explainer-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          clarify-explainer-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          clarify-explainer-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-explanations))
      (common-lisp:list
       (common-lisp:cons "EnableExplanations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inference-config))
      (common-lisp:list
       (common-lisp:cons "InferenceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shap-config))
      (common-lisp:list
       (common-lisp:cons "ShapConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          clarify-explainer-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype clarify-feature-headers ()
   '(trivial-types:proper-list clarify-header))
 (common-lisp:defun |make-clarify-feature-headers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list clarify-header))
   aws-sdk/generator/shape::members))
(common-lisp:deftype clarify-feature-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype clarify-feature-types ()
   '(trivial-types:proper-list clarify-feature-type))
 (common-lisp:defun |make-clarify-feature-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list clarify-feature-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype clarify-features-attribute () 'common-lisp:string)
(common-lisp:deftype clarify-header () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (clarify-inference-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-clarify-inference-config-"))
   (features-attribute common-lisp:nil :type
    (common-lisp:or clarify-features-attribute common-lisp:null))
   (content-template common-lisp:nil :type
    (common-lisp:or clarify-content-template common-lisp:null))
   (max-record-count common-lisp:nil :type
    (common-lisp:or clarify-max-record-count common-lisp:null))
   (max-payload-in-mb common-lisp:nil :type
    (common-lisp:or clarify-max-payload-in-mb common-lisp:null))
   (probability-index common-lisp:nil :type
    (common-lisp:or clarify-probability-index common-lisp:null))
   (label-index common-lisp:nil :type
    (common-lisp:or clarify-label-index common-lisp:null))
   (probability-attribute common-lisp:nil :type
    (common-lisp:or clarify-probability-attribute common-lisp:null))
   (label-attribute common-lisp:nil :type
    (common-lisp:or clarify-label-attribute common-lisp:null))
   (label-headers common-lisp:nil :type
    (common-lisp:or clarify-label-headers common-lisp:null))
   (feature-headers common-lisp:nil :type
    (common-lisp:or clarify-feature-headers common-lisp:null))
   (feature-types common-lisp:nil :type
    (common-lisp:or clarify-feature-types common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'clarify-inference-config 'make-clarify-inference-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          clarify-inference-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          clarify-inference-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'features-attribute))
      (common-lisp:list
       (common-lisp:cons "FeaturesAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-template))
      (common-lisp:list
       (common-lisp:cons "ContentTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-record-count))
      (common-lisp:list
       (common-lisp:cons "MaxRecordCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-payload-in-mb))
      (common-lisp:list
       (common-lisp:cons "MaxPayloadInMB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'probability-index))
      (common-lisp:list
       (common-lisp:cons "ProbabilityIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-index))
      (common-lisp:list
       (common-lisp:cons "LabelIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'probability-attribute))
      (common-lisp:list
       (common-lisp:cons "ProbabilityAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-attribute))
      (common-lisp:list
       (common-lisp:cons "LabelAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-headers))
      (common-lisp:list
       (common-lisp:cons "LabelHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-headers))
      (common-lisp:list
       (common-lisp:cons "FeatureHeaders"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-types))
      (common-lisp:list
       (common-lisp:cons "FeatureTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          clarify-inference-config))
   common-lisp:nil))
(common-lisp:deftype clarify-label-attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype clarify-label-headers ()
   '(trivial-types:proper-list clarify-header))
 (common-lisp:defun |make-clarify-label-headers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list clarify-header))
   aws-sdk/generator/shape::members))
(common-lisp:deftype clarify-label-index () 'common-lisp:integer)
(common-lisp:deftype clarify-max-payload-in-mb () 'common-lisp:integer)
(common-lisp:deftype clarify-max-record-count () 'common-lisp:integer)
(common-lisp:deftype clarify-mime-type () 'common-lisp:string)
(common-lisp:deftype clarify-probability-attribute () 'common-lisp:string)
(common-lisp:deftype clarify-probability-index () 'common-lisp:integer)
(common-lisp:deftype clarify-shap-baseline () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (clarify-shap-baseline-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-clarify-shap-baseline-config-"))
   (mime-type common-lisp:nil :type
    (common-lisp:or clarify-mime-type common-lisp:null))
   (shap-baseline common-lisp:nil :type
    (common-lisp:or clarify-shap-baseline common-lisp:null))
   (shap-baseline-uri common-lisp:nil :type
    (common-lisp:or url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'clarify-shap-baseline-config
                    'make-clarify-shap-baseline-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          clarify-shap-baseline-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          clarify-shap-baseline-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mime-type))
      (common-lisp:list
       (common-lisp:cons "MimeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shap-baseline))
      (common-lisp:list
       (common-lisp:cons "ShapBaseline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shap-baseline-uri))
      (common-lisp:list
       (common-lisp:cons "ShapBaselineUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          clarify-shap-baseline-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (clarify-shap-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-clarify-shap-config-"))
   (shap-baseline-config
    (common-lisp:error ":shap-baseline-config is required") :type
    (common-lisp:or clarify-shap-baseline-config common-lisp:null))
   (number-of-samples common-lisp:nil :type
    (common-lisp:or clarify-shap-number-of-samples common-lisp:null))
   (use-logit common-lisp:nil :type
    (common-lisp:or clarify-shap-use-logit common-lisp:null))
   (seed common-lisp:nil :type
    (common-lisp:or clarify-shap-seed common-lisp:null))
   (text-config common-lisp:nil :type
    (common-lisp:or clarify-text-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'clarify-shap-config 'make-clarify-shap-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input clarify-shap-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input clarify-shap-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shap-baseline-config))
      (common-lisp:list
       (common-lisp:cons "ShapBaselineConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-samples))
      (common-lisp:list
       (common-lisp:cons "NumberOfSamples"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use-logit))
      (common-lisp:list
       (common-lisp:cons "UseLogit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'seed))
      (common-lisp:list
       (common-lisp:cons "Seed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-config))
      (common-lisp:list
       (common-lisp:cons "TextConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input clarify-shap-config))
   common-lisp:nil))
(common-lisp:deftype clarify-shap-number-of-samples () 'common-lisp:integer)
(common-lisp:deftype clarify-shap-seed () 'common-lisp:integer)
(common-lisp:deftype clarify-shap-use-logit () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (clarify-text-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-clarify-text-config-"))
   (language (common-lisp:error ":language is required") :type
    (common-lisp:or clarify-text-language common-lisp:null))
   (granularity (common-lisp:error ":granularity is required") :type
    (common-lisp:or clarify-text-granularity common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'clarify-text-config 'make-clarify-text-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input clarify-text-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input clarify-text-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'language))
      (common-lisp:list
       (common-lisp:cons "Language"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularity))
      (common-lisp:list
       (common-lisp:cons "Granularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input clarify-text-config))
   common-lisp:nil))
(common-lisp:deftype clarify-text-granularity () 'common-lisp:string)
(common-lisp:deftype clarify-text-language () 'common-lisp:string)
(common-lisp:deftype client-id () 'common-lisp:string)
(common-lisp:deftype client-secret () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype code-repositories ()
   '(trivial-types:proper-list code-repository))
 (common-lisp:defun |make-code-repositories|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list code-repository))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (code-repository (:copier common-lisp:nil)
      (:conc-name "struct-shape-code-repository-"))
   (repository-url (common-lisp:error ":repository-url is required") :type
    (common-lisp:or repository-url common-lisp:null)))
 (common-lisp:export (common-lisp:list 'code-repository 'make-code-repository))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-repository))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-repository))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-url))
      (common-lisp:list
       (common-lisp:cons "RepositoryUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-repository))
   common-lisp:nil))
(common-lisp:deftype code-repository-arn () 'common-lisp:string)
(common-lisp:deftype code-repository-contains () 'common-lisp:string)
(common-lisp:deftype code-repository-name-contains () 'common-lisp:string)
(common-lisp:deftype code-repository-name-or-url () 'common-lisp:string)
(common-lisp:deftype code-repository-sort-by () 'common-lisp:string)
(common-lisp:deftype code-repository-sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (code-repository-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-code-repository-summary-"))
   (code-repository-name
    (common-lisp:error ":code-repository-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (code-repository-arn (common-lisp:error ":code-repository-arn is required")
    :type (common-lisp:or code-repository-arn common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or creation-time common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or last-modified-time common-lisp:null))
   (git-config common-lisp:nil :type
    (common-lisp:or git-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'code-repository-summary 'make-code-repository-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          code-repository-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          code-repository-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-repository-name))
      (common-lisp:list
       (common-lisp:cons "CodeRepositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-repository-arn))
      (common-lisp:list
       (common-lisp:cons "CodeRepositoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'git-config))
      (common-lisp:list
       (common-lisp:cons "GitConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          code-repository-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype code-repository-summary-list ()
   '(trivial-types:proper-list code-repository-summary))
 (common-lisp:defun |make-code-repository-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list code-repository-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cognito-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-cognito-config-"))
   (user-pool (common-lisp:error ":user-pool is required") :type
    (common-lisp:or cognito-user-pool common-lisp:null))
   (client-id (common-lisp:error ":client-id is required") :type
    (common-lisp:or client-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cognito-config 'make-cognito-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cognito-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cognito-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool))
      (common-lisp:list
       (common-lisp:cons "UserPool"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cognito-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cognito-member-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-cognito-member-definition-"))
   (user-pool (common-lisp:error ":user-pool is required") :type
    (common-lisp:or cognito-user-pool common-lisp:null))
   (user-group (common-lisp:error ":user-group is required") :type
    (common-lisp:or cognito-user-group common-lisp:null))
   (client-id (common-lisp:error ":client-id is required") :type
    (common-lisp:or client-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cognito-member-definition
                    'make-cognito-member-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cognito-member-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cognito-member-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-pool))
      (common-lisp:list
       (common-lisp:cons "UserPool"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-group))
      (common-lisp:list
       (common-lisp:cons "UserGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cognito-member-definition))
   common-lisp:nil))
(common-lisp:deftype cognito-user-group () 'common-lisp:string)
(common-lisp:deftype cognito-user-pool () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (collection-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-collection-configuration-"))
   (collection-name common-lisp:nil :type
    (common-lisp:or collection-name common-lisp:null))
   (collection-parameters common-lisp:nil :type
    (common-lisp:or collection-parameters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'collection-configuration 'make-collection-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          collection-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          collection-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'collection-name))
      (common-lisp:list
       (common-lisp:cons "CollectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collection-parameters))
      (common-lisp:list
       (common-lisp:cons "CollectionParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          collection-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype collection-configurations ()
   '(trivial-types:proper-list collection-configuration))
 (common-lisp:defun |make-collection-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            collection-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:deftype collection-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype collection-parameters () 'common-lisp:hash-table)
 (common-lisp:defun |make-collection-parameters|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype compilation-job-arn () 'common-lisp:string)
(common-lisp:deftype compilation-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype compilation-job-summaries ()
   '(trivial-types:proper-list compilation-job-summary))
 (common-lisp:defun |make-compilation-job-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list compilation-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (compilation-job-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-compilation-job-summary-"))
   (compilation-job-name
    (common-lisp:error ":compilation-job-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (compilation-job-arn (common-lisp:error ":compilation-job-arn is required")
    :type (common-lisp:or compilation-job-arn common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or creation-time common-lisp:null))
   (compilation-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (compilation-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (compilation-target-device common-lisp:nil :type
    (common-lisp:or target-device common-lisp:null))
   (compilation-target-platform-os common-lisp:nil :type
    (common-lisp:or target-platform-os common-lisp:null))
   (compilation-target-platform-arch common-lisp:nil :type
    (common-lisp:or target-platform-arch common-lisp:null))
   (compilation-target-platform-accelerator common-lisp:nil :type
    (common-lisp:or target-platform-accelerator common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or last-modified-time common-lisp:null))
   (compilation-job-status
    (common-lisp:error ":compilation-job-status is required") :type
    (common-lisp:or compilation-job-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'compilation-job-summary 'make-compilation-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          compilation-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          compilation-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compilation-job-name))
      (common-lisp:list
       (common-lisp:cons "CompilationJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compilation-job-arn))
      (common-lisp:list
       (common-lisp:cons "CompilationJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compilation-start-time))
      (common-lisp:list
       (common-lisp:cons "CompilationStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compilation-end-time))
      (common-lisp:list
       (common-lisp:cons "CompilationEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compilation-target-device))
      (common-lisp:list
       (common-lisp:cons "CompilationTargetDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compilation-target-platform-os))
      (common-lisp:list
       (common-lisp:cons "CompilationTargetPlatformOs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compilation-target-platform-arch))
      (common-lisp:list
       (common-lisp:cons "CompilationTargetPlatformArch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compilation-target-platform-accelerator))
      (common-lisp:list
       (common-lisp:cons "CompilationTargetPlatformAccelerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compilation-job-status))
      (common-lisp:list
       (common-lisp:cons "CompilationJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          compilation-job-summary))
   common-lisp:nil))
(common-lisp:deftype compiler-options () 'common-lisp:string)
(common-lisp:deftype complete-on-convergence () 'common-lisp:string)
(common-lisp:deftype compression-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype compression-types ()
   '(trivial-types:proper-list compression-type))
 (common-lisp:defun |make-compression-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list compression-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype condition-outcome () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (condition-step-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-condition-step-metadata-"))
   (outcome common-lisp:nil :type
    (common-lisp:or condition-outcome common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'condition-step-metadata 'make-condition-step-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          condition-step-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          condition-step-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outcome))
      (common-lisp:list
       (common-lisp:cons "Outcome"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          condition-step-metadata))
   common-lisp:nil))
(common-lisp:deftype config-key () 'common-lisp:string)
(common-lisp:deftype config-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (sagemaker-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype container-argument () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype container-arguments ()
   '(trivial-types:proper-list container-argument))
 (common-lisp:defun |make-container-arguments|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list container-argument))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (container-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-container-definition-"))
   (container-hostname common-lisp:nil :type
    (common-lisp:or container-hostname common-lisp:null))
   (image common-lisp:nil :type
    (common-lisp:or container-image common-lisp:null))
   (image-config common-lisp:nil :type
    (common-lisp:or image-config common-lisp:null))
   (mode common-lisp:nil :type
    (common-lisp:or container-mode common-lisp:null))
   (model-data-url common-lisp:nil :type (common-lisp:or url common-lisp:null))
   (environment common-lisp:nil :type
    (common-lisp:or environment-map common-lisp:null))
   (model-package-name common-lisp:nil :type
    (common-lisp:or versioned-arn-or-name common-lisp:null))
   (inference-specification-name common-lisp:nil :type
    (common-lisp:or inference-specification-name common-lisp:null))
   (multi-model-config common-lisp:nil :type
    (common-lisp:or multi-model-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'container-definition 'make-container-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input container-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input container-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-hostname))
      (common-lisp:list
       (common-lisp:cons "ContainerHostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-config))
      (common-lisp:list
       (common-lisp:cons "ImageConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-data-url))
      (common-lisp:list
       (common-lisp:cons "ModelDataUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-package-name))
      (common-lisp:list
       (common-lisp:cons "ModelPackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-specification-name))
      (common-lisp:list
       (common-lisp:cons "InferenceSpecificationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-model-config))
      (common-lisp:list
       (common-lisp:cons "MultiModelConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input container-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype container-definition-list ()
   '(trivial-types:proper-list container-definition))
 (common-lisp:defun |make-container-definition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list container-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype container-entrypoint ()
   '(trivial-types:proper-list container-entrypoint-string))
 (common-lisp:defun |make-container-entrypoint|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            container-entrypoint-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype container-entrypoint-string () 'common-lisp:string)
(common-lisp:deftype container-hostname () 'common-lisp:string)
(common-lisp:deftype container-image () 'common-lisp:string)
(common-lisp:deftype container-mode () 'common-lisp:string)
(common-lisp:deftype content-classifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype content-classifiers ()
   '(trivial-types:proper-list content-classifier))
 (common-lisp:defun |make-content-classifiers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list content-classifier))
   aws-sdk/generator/shape::members))
(common-lisp:deftype content-column () 'common-lisp:string)
(common-lisp:deftype content-digest () 'common-lisp:string)
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype content-types ()
   '(trivial-types:proper-list content-type))
 (common-lisp:defun |make-content-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list content-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype context-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (context-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-context-source-"))
   (source-uri (common-lisp:error ":source-uri is required") :type
    (common-lisp:or string2048 common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (source-id common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null)))
 (common-lisp:export (common-lisp:list 'context-source 'make-context-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input context-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input context-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-uri))
      (common-lisp:list
       (common-lisp:cons "SourceUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-id))
      (common-lisp:list
       (common-lisp:cons "SourceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input context-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype context-summaries ()
   '(trivial-types:proper-list context-summary))
 (common-lisp:defun |make-context-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list context-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (context-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-context-summary-"))
   (context-arn common-lisp:nil :type
    (common-lisp:or context-arn common-lisp:null))
   (context-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (source common-lisp:nil :type
    (common-lisp:or context-source common-lisp:null))
   (context-type common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'context-summary 'make-context-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input context-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input context-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-arn))
      (common-lisp:list
       (common-lisp:cons "ContextArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-name))
      (common-lisp:list
       (common-lisp:cons "ContextName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-type))
      (common-lisp:list
       (common-lisp:cons "ContextType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input context-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (continuous-parameter-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-continuous-parameter-range-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or parameter-key common-lisp:null))
   (min-value (common-lisp:error ":min-value is required") :type
    (common-lisp:or parameter-value common-lisp:null))
   (max-value (common-lisp:error ":max-value is required") :type
    (common-lisp:or parameter-value common-lisp:null))
   (scaling-type common-lisp:nil :type
    (common-lisp:or hyper-parameter-scaling-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'continuous-parameter-range
                    'make-continuous-parameter-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          continuous-parameter-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          continuous-parameter-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-value))
      (common-lisp:list
       (common-lisp:cons "MinValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-value))
      (common-lisp:list
       (common-lisp:cons "MaxValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-type))
      (common-lisp:list
       (common-lisp:cons "ScalingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          continuous-parameter-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (continuous-parameter-range-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-continuous-parameter-range-specification-"))
   (min-value (common-lisp:error ":min-value is required") :type
    (common-lisp:or parameter-value common-lisp:null))
   (max-value (common-lisp:error ":max-value is required") :type
    (common-lisp:or parameter-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'continuous-parameter-range-specification
                    'make-continuous-parameter-range-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          continuous-parameter-range-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          continuous-parameter-range-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-value))
      (common-lisp:list
       (common-lisp:cons "MinValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-value))
      (common-lisp:list
       (common-lisp:cons "MaxValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          continuous-parameter-range-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype continuous-parameter-ranges ()
   '(trivial-types:proper-list continuous-parameter-range))
 (common-lisp:defun |make-continuous-parameter-ranges|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            continuous-parameter-range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (convergence-detected (:copier common-lisp:nil)
      (:conc-name "struct-shape-convergence-detected-"))
   (complete-on-convergence common-lisp:nil :type
    (common-lisp:or complete-on-convergence common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'convergence-detected 'make-convergence-detected))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input convergence-detected))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input convergence-detected))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'complete-on-convergence))
      (common-lisp:list
       (common-lisp:cons "CompleteOnConvergence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input convergence-detected))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-action-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-action-request-"))
   (action-name (common-lisp:error ":action-name is required") :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (source (common-lisp:error ":source is required") :type
    (common-lisp:or action-source common-lisp:null))
   (action-type (common-lisp:error ":action-type is required") :type
    (common-lisp:or string256 common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or experiment-description common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or action-status common-lisp:null))
   (properties common-lisp:nil :type
    (common-lisp:or lineage-entity-parameters common-lisp:null))
   (metadata-properties common-lisp:nil :type
    (common-lisp:or metadata-properties common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-action-request 'make-create-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "ActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "ActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-properties))
      (common-lisp:list
       (common-lisp:cons "MetadataProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-action-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-action-response-"))
   (action-arn common-lisp:nil :type
    (common-lisp:or action-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-action-response 'make-create-action-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-action-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-arn))
      (common-lisp:list
       (common-lisp:cons "ActionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-algorithm-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-algorithm-input-"))
   (algorithm-name (common-lisp:error ":algorithm-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (algorithm-description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (training-specification
    (common-lisp:error ":training-specification is required") :type
    (common-lisp:or training-specification common-lisp:null))
   (inference-specification common-lisp:nil :type
    (common-lisp:or inference-specification common-lisp:null))
   (validation-specification common-lisp:nil :type
    (common-lisp:or algorithm-validation-specification common-lisp:null))
   (certify-for-marketplace common-lisp:nil :type
    (common-lisp:or certify-for-marketplace common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-algorithm-input 'make-create-algorithm-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-algorithm-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-algorithm-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm-name))
      (common-lisp:list
       (common-lisp:cons "AlgorithmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'algorithm-description))
      (common-lisp:list
       (common-lisp:cons "AlgorithmDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-specification))
      (common-lisp:list
       (common-lisp:cons "TrainingSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-specification))
      (common-lisp:list
       (common-lisp:cons "InferenceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'validation-specification))
      (common-lisp:list
       (common-lisp:cons "ValidationSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certify-for-marketplace))
      (common-lisp:list
       (common-lisp:cons "CertifyForMarketplace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-algorithm-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-algorithm-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-algorithm-output-"))
   (algorithm-arn (common-lisp:error ":algorithm-arn is required") :type
    (common-lisp:or algorithm-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-algorithm-output 'make-create-algorithm-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-algorithm-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-algorithm-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm-arn))
      (common-lisp:list
       (common-lisp:cons "AlgorithmArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-algorithm-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-app-image-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-app-image-config-request-"))
   (app-image-config-name
    (common-lisp:error ":app-image-config-name is required") :type
    (common-lisp:or app-image-config-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (kernel-gateway-image-config common-lisp:nil :type
    (common-lisp:or kernel-gateway-image-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-app-image-config-request
                    'make-create-app-image-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-app-image-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-app-image-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-image-config-name))
      (common-lisp:list
       (common-lisp:cons "AppImageConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kernel-gateway-image-config))
      (common-lisp:list
       (common-lisp:cons "KernelGatewayImageConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-app-image-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-app-image-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-app-image-config-response-"))
   (app-image-config-arn common-lisp:nil :type
    (common-lisp:or app-image-config-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-app-image-config-response
                    'make-create-app-image-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-app-image-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-app-image-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-image-config-arn))
      (common-lisp:list
       (common-lisp:cons "AppImageConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-app-image-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-app-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-app-request-"))
   (domain-id (common-lisp:error ":domain-id is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (user-profile-name common-lisp:nil :type
    (common-lisp:or user-profile-name common-lisp:null))
   (app-type (common-lisp:error ":app-type is required") :type
    (common-lisp:or app-type common-lisp:null))
   (app-name (common-lisp:error ":app-name is required") :type
    (common-lisp:or app-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (resource-spec common-lisp:nil :type
    (common-lisp:or resource-spec common-lisp:null))
   (space-name common-lisp:nil :type
    (common-lisp:or space-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-app-request 'make-create-app-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-app-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-app-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-profile-name))
      (common-lisp:list
       (common-lisp:cons "UserProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-type))
      (common-lisp:list
       (common-lisp:cons "AppType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-name))
      (common-lisp:list
       (common-lisp:cons "AppName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-spec))
      (common-lisp:list
       (common-lisp:cons "ResourceSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "SpaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-app-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-app-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-app-response-"))
   (app-arn common-lisp:nil :type (common-lisp:or app-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-app-response 'make-create-app-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-app-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-app-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "AppArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-app-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-artifact-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-artifact-request-"))
   (artifact-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (source (common-lisp:error ":source is required") :type
    (common-lisp:or artifact-source common-lisp:null))
   (artifact-type (common-lisp:error ":artifact-type is required") :type
    (common-lisp:or string256 common-lisp:null))
   (properties common-lisp:nil :type
    (common-lisp:or lineage-entity-parameters common-lisp:null))
   (metadata-properties common-lisp:nil :type
    (common-lisp:or metadata-properties common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-artifact-request 'make-create-artifact-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-artifact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-artifact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-name))
      (common-lisp:list
       (common-lisp:cons "ArtifactName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-type))
      (common-lisp:list
       (common-lisp:cons "ArtifactType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-properties))
      (common-lisp:list
       (common-lisp:cons "MetadataProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-artifact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-artifact-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-artifact-response-"))
   (artifact-arn common-lisp:nil :type
    (common-lisp:or artifact-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-artifact-response 'make-create-artifact-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-artifact-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-artifact-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-arn))
      (common-lisp:list
       (common-lisp:cons "ArtifactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-artifact-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-auto-mljob-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-auto-mljob-request-"))
   (auto-mljob-name (common-lisp:error ":auto-mljob-name is required") :type
    (common-lisp:or auto-mljob-name common-lisp:null))
   (input-data-config (common-lisp:error ":input-data-config is required")
    :type (common-lisp:or auto-mlinput-data-config common-lisp:null))
   (output-data-config (common-lisp:error ":output-data-config is required")
    :type (common-lisp:or auto-mloutput-data-config common-lisp:null))
   (problem-type common-lisp:nil :type
    (common-lisp:or problem-type common-lisp:null))
   (auto-mljob-objective common-lisp:nil :type
    (common-lisp:or auto-mljob-objective common-lisp:null))
   (auto-mljob-config common-lisp:nil :type
    (common-lisp:or auto-mljob-config common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (generate-candidate-definitions-only common-lisp:nil :type
    (common-lisp:or generate-candidate-definitions-only common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (model-deploy-config common-lisp:nil :type
    (common-lisp:or model-deploy-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-auto-mljob-request
                    'make-create-auto-mljob-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-mljob-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-mljob-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mljob-name))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "OutputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'problem-type))
      (common-lisp:list
       (common-lisp:cons "ProblemType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-mljob-objective))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobObjective"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mljob-config))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generate-candidate-definitions-only))
      (common-lisp:list
       (common-lisp:cons "GenerateCandidateDefinitionsOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-deploy-config))
      (common-lisp:list
       (common-lisp:cons "ModelDeployConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-mljob-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-auto-mljob-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-auto-mljob-response-"))
   (auto-mljob-arn (common-lisp:error ":auto-mljob-arn is required") :type
    (common-lisp:or auto-mljob-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-auto-mljob-response
                    'make-create-auto-mljob-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-mljob-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-mljob-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mljob-arn))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-mljob-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-auto-mljob-v2request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-auto-mljob-v2request-"))
   (auto-mljob-name (common-lisp:error ":auto-mljob-name is required") :type
    (common-lisp:or auto-mljob-name common-lisp:null))
   (auto-mljob-input-data-config
    (common-lisp:error ":auto-mljob-input-data-config is required") :type
    (common-lisp:or auto-mljob-input-data-config common-lisp:null))
   (output-data-config (common-lisp:error ":output-data-config is required")
    :type (common-lisp:or auto-mloutput-data-config common-lisp:null))
   (auto-mlproblem-type-config
    (common-lisp:error ":auto-mlproblem-type-config is required") :type
    (common-lisp:or auto-mlproblem-type-config common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (security-config common-lisp:nil :type
    (common-lisp:or auto-mlsecurity-config common-lisp:null))
   (auto-mljob-objective common-lisp:nil :type
    (common-lisp:or auto-mljob-objective common-lisp:null))
   (model-deploy-config common-lisp:nil :type
    (common-lisp:or model-deploy-config common-lisp:null))
   (data-split-config common-lisp:nil :type
    (common-lisp:or auto-mldata-split-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-auto-mljob-v2request
                    'make-create-auto-mljob-v2request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-mljob-v2request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-mljob-v2request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mljob-name))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-mljob-input-data-config))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobInputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "OutputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-mlproblem-type-config))
      (common-lisp:list
       (common-lisp:cons "AutoMLProblemTypeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-config))
      (common-lisp:list
       (common-lisp:cons "SecurityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-mljob-objective))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobObjective"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-deploy-config))
      (common-lisp:list
       (common-lisp:cons "ModelDeployConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-split-config))
      (common-lisp:list
       (common-lisp:cons "DataSplitConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-mljob-v2request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-auto-mljob-v2response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-auto-mljob-v2response-"))
   (auto-mljob-arn (common-lisp:error ":auto-mljob-arn is required") :type
    (common-lisp:or auto-mljob-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-auto-mljob-v2response
                    'make-create-auto-mljob-v2response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-mljob-v2response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-mljob-v2response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mljob-arn))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-mljob-v2response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-code-repository-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-code-repository-input-"))
   (code-repository-name
    (common-lisp:error ":code-repository-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (git-config (common-lisp:error ":git-config is required") :type
    (common-lisp:or git-config common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-code-repository-input
                    'make-create-code-repository-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-code-repository-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-code-repository-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-repository-name))
      (common-lisp:list
       (common-lisp:cons "CodeRepositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'git-config))
      (common-lisp:list
       (common-lisp:cons "GitConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-code-repository-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-code-repository-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-code-repository-output-"))
   (code-repository-arn (common-lisp:error ":code-repository-arn is required")
    :type (common-lisp:or code-repository-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-code-repository-output
                    'make-create-code-repository-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-code-repository-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-code-repository-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-repository-arn))
      (common-lisp:list
       (common-lisp:cons "CodeRepositoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-code-repository-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-compilation-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-compilation-job-request-"))
   (compilation-job-name
    (common-lisp:error ":compilation-job-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (model-package-version-arn common-lisp:nil :type
    (common-lisp:or model-package-arn common-lisp:null))
   (input-config common-lisp:nil :type
    (common-lisp:or input-config common-lisp:null))
   (output-config (common-lisp:error ":output-config is required") :type
    (common-lisp:or output-config common-lisp:null))
   (vpc-config common-lisp:nil :type
    (common-lisp:or neo-vpc-config common-lisp:null))
   (stopping-condition (common-lisp:error ":stopping-condition is required")
    :type (common-lisp:or stopping-condition common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-compilation-job-request
                    'make-create-compilation-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-compilation-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-compilation-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compilation-job-name))
      (common-lisp:list
       (common-lisp:cons "CompilationJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-version-arn))
      (common-lisp:list
       (common-lisp:cons "ModelPackageVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-config))
      (common-lisp:list
       (common-lisp:cons "InputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-condition))
      (common-lisp:list
       (common-lisp:cons "StoppingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-compilation-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-compilation-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-compilation-job-response-"))
   (compilation-job-arn (common-lisp:error ":compilation-job-arn is required")
    :type (common-lisp:or compilation-job-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-compilation-job-response
                    'make-create-compilation-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-compilation-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-compilation-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compilation-job-arn))
      (common-lisp:list
       (common-lisp:cons "CompilationJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-compilation-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-context-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-context-request-"))
   (context-name (common-lisp:error ":context-name is required") :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (source (common-lisp:error ":source is required") :type
    (common-lisp:or context-source common-lisp:null))
   (context-type (common-lisp:error ":context-type is required") :type
    (common-lisp:or string256 common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or experiment-description common-lisp:null))
   (properties common-lisp:nil :type
    (common-lisp:or lineage-entity-parameters common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-context-request 'make-create-context-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-context-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-context-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-name))
      (common-lisp:list
       (common-lisp:cons "ContextName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-type))
      (common-lisp:list
       (common-lisp:cons "ContextType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-context-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-context-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-context-response-"))
   (context-arn common-lisp:nil :type
    (common-lisp:or context-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-context-response 'make-create-context-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-context-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-context-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-arn))
      (common-lisp:list
       (common-lisp:cons "ContextArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-context-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-data-quality-job-definition-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-data-quality-job-definition-request-"))
   (job-definition-name (common-lisp:error ":job-definition-name is required")
    :type (common-lisp:or monitoring-job-definition-name common-lisp:null))
   (data-quality-baseline-config common-lisp:nil :type
    (common-lisp:or data-quality-baseline-config common-lisp:null))
   (data-quality-app-specification
    (common-lisp:error ":data-quality-app-specification is required") :type
    (common-lisp:or data-quality-app-specification common-lisp:null))
   (data-quality-job-input
    (common-lisp:error ":data-quality-job-input is required") :type
    (common-lisp:or data-quality-job-input common-lisp:null))
   (data-quality-job-output-config
    (common-lisp:error ":data-quality-job-output-config is required") :type
    (common-lisp:or monitoring-output-config common-lisp:null))
   (job-resources (common-lisp:error ":job-resources is required") :type
    (common-lisp:or monitoring-resources common-lisp:null))
   (network-config common-lisp:nil :type
    (common-lisp:or monitoring-network-config common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (stopping-condition common-lisp:nil :type
    (common-lisp:or monitoring-stopping-condition common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-data-quality-job-definition-request
                    'make-create-data-quality-job-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-quality-job-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-quality-job-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-definition-name))
      (common-lisp:list
       (common-lisp:cons "JobDefinitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-quality-baseline-config))
      (common-lisp:list
       (common-lisp:cons "DataQualityBaselineConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-quality-app-specification))
      (common-lisp:list
       (common-lisp:cons "DataQualityAppSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-quality-job-input))
      (common-lisp:list
       (common-lisp:cons "DataQualityJobInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-quality-job-output-config))
      (common-lisp:list
       (common-lisp:cons "DataQualityJobOutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-resources))
      (common-lisp:list
       (common-lisp:cons "JobResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-config))
      (common-lisp:list
       (common-lisp:cons "NetworkConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-condition))
      (common-lisp:list
       (common-lisp:cons "StoppingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-quality-job-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-data-quality-job-definition-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-data-quality-job-definition-response-"))
   (job-definition-arn (common-lisp:error ":job-definition-arn is required")
    :type (common-lisp:or monitoring-job-definition-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-data-quality-job-definition-response
                    'make-create-data-quality-job-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-data-quality-job-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-data-quality-job-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-definition-arn))
      (common-lisp:list
       (common-lisp:cons "JobDefinitionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-data-quality-job-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-device-fleet-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-device-fleet-request-"))
   (device-fleet-name (common-lisp:error ":device-fleet-name is required")
    :type (common-lisp:or entity-name common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or device-fleet-description common-lisp:null))
   (output-config (common-lisp:error ":output-config is required") :type
    (common-lisp:or edge-output-config common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (enable-iot-role-alias common-lisp:nil :type
    (common-lisp:or enable-iot-role-alias common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-device-fleet-request
                    'make-create-device-fleet-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-device-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-device-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-fleet-name))
      (common-lisp:list
       (common-lisp:cons "DeviceFleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iot-role-alias))
      (common-lisp:list
       (common-lisp:cons "EnableIotRoleAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-device-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-domain-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-domain-request-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (auth-mode (common-lisp:error ":auth-mode is required") :type
    (common-lisp:or auth-mode common-lisp:null))
   (default-user-settings
    (common-lisp:error ":default-user-settings is required") :type
    (common-lisp:or user-settings common-lisp:null))
   (subnet-ids (common-lisp:error ":subnet-ids is required") :type
    (common-lisp:or subnets common-lisp:null))
   (vpc-id (common-lisp:error ":vpc-id is required") :type
    (common-lisp:or vpc-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (app-network-access-type common-lisp:nil :type
    (common-lisp:or app-network-access-type common-lisp:null))
   (home-efs-file-system-kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (app-security-group-management common-lisp:nil :type
    (common-lisp:or app-security-group-management common-lisp:null))
   (domain-settings common-lisp:nil :type
    (common-lisp:or domain-settings common-lisp:null))
   (default-space-settings common-lisp:nil :type
    (common-lisp:or default-space-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-domain-request 'make-create-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-mode))
      (common-lisp:list
       (common-lisp:cons "AuthMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-user-settings))
      (common-lisp:list
       (common-lisp:cons "DefaultUserSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-network-access-type))
      (common-lisp:list
       (common-lisp:cons "AppNetworkAccessType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'home-efs-file-system-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "HomeEfsFileSystemKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-security-group-management))
      (common-lisp:list
       (common-lisp:cons "AppSecurityGroupManagement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-settings))
      (common-lisp:list
       (common-lisp:cons "DomainSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-space-settings))
      (common-lisp:list
       (common-lisp:cons "DefaultSpaceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-domain-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-domain-response-"))
   (domain-arn common-lisp:nil :type
    (common-lisp:or domain-arn common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or string1024 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-domain-response 'make-create-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-arn))
      (common-lisp:list
       (common-lisp:cons "DomainArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-edge-deployment-plan-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-edge-deployment-plan-request-"))
   (edge-deployment-plan-name
    (common-lisp:error ":edge-deployment-plan-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (model-configs (common-lisp:error ":model-configs is required") :type
    (common-lisp:or edge-deployment-model-configs common-lisp:null))
   (device-fleet-name (common-lisp:error ":device-fleet-name is required")
    :type (common-lisp:or entity-name common-lisp:null))
   (stages common-lisp:nil :type
    (common-lisp:or deployment-stages common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-edge-deployment-plan-request
                    'make-create-edge-deployment-plan-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-edge-deployment-plan-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-edge-deployment-plan-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-deployment-plan-name))
      (common-lisp:list
       (common-lisp:cons "EdgeDeploymentPlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-configs))
      (common-lisp:list
       (common-lisp:cons "ModelConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-fleet-name))
      (common-lisp:list
       (common-lisp:cons "DeviceFleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stages))
      (common-lisp:list
       (common-lisp:cons "Stages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-edge-deployment-plan-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-edge-deployment-plan-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-edge-deployment-plan-response-"))
   (edge-deployment-plan-arn
    (common-lisp:error ":edge-deployment-plan-arn is required") :type
    (common-lisp:or edge-deployment-plan-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-edge-deployment-plan-response
                    'make-create-edge-deployment-plan-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-edge-deployment-plan-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-edge-deployment-plan-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-deployment-plan-arn))
      (common-lisp:list
       (common-lisp:cons "EdgeDeploymentPlanArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-edge-deployment-plan-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-edge-deployment-stage-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-edge-deployment-stage-request-"))
   (edge-deployment-plan-name
    (common-lisp:error ":edge-deployment-plan-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (stages (common-lisp:error ":stages is required") :type
    (common-lisp:or deployment-stages common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-edge-deployment-stage-request
                    'make-create-edge-deployment-stage-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-edge-deployment-stage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-edge-deployment-stage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-deployment-plan-name))
      (common-lisp:list
       (common-lisp:cons "EdgeDeploymentPlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stages))
      (common-lisp:list
       (common-lisp:cons "Stages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-edge-deployment-stage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-edge-packaging-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-edge-packaging-job-request-"))
   (edge-packaging-job-name
    (common-lisp:error ":edge-packaging-job-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (compilation-job-name
    (common-lisp:error ":compilation-job-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (model-name (common-lisp:error ":model-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (model-version (common-lisp:error ":model-version is required") :type
    (common-lisp:or edge-version common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (output-config (common-lisp:error ":output-config is required") :type
    (common-lisp:or edge-output-config common-lisp:null))
   (resource-key common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-edge-packaging-job-request
                    'make-create-edge-packaging-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-edge-packaging-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-edge-packaging-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-packaging-job-name))
      (common-lisp:list
       (common-lisp:cons "EdgePackagingJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compilation-job-name))
      (common-lisp:list
       (common-lisp:cons "CompilationJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-version))
      (common-lisp:list
       (common-lisp:cons "ModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-key))
      (common-lisp:list
       (common-lisp:cons "ResourceKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-edge-packaging-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-endpoint-config-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-endpoint-config-input-"))
   (endpoint-config-name
    (common-lisp:error ":endpoint-config-name is required") :type
    (common-lisp:or endpoint-config-name common-lisp:null))
   (production-variants (common-lisp:error ":production-variants is required")
    :type (common-lisp:or production-variant-list common-lisp:null))
   (data-capture-config common-lisp:nil :type
    (common-lisp:or data-capture-config common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (async-inference-config common-lisp:nil :type
    (common-lisp:or async-inference-config common-lisp:null))
   (explainer-config common-lisp:nil :type
    (common-lisp:or explainer-config common-lisp:null))
   (shadow-production-variants common-lisp:nil :type
    (common-lisp:or production-variant-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-endpoint-config-input
                    'make-create-endpoint-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-config-name))
      (common-lisp:list
       (common-lisp:cons "EndpointConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'production-variants))
      (common-lisp:list
       (common-lisp:cons "ProductionVariants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-capture-config))
      (common-lisp:list
       (common-lisp:cons "DataCaptureConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'async-inference-config))
      (common-lisp:list
       (common-lisp:cons "AsyncInferenceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explainer-config))
      (common-lisp:list
       (common-lisp:cons "ExplainerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shadow-production-variants))
      (common-lisp:list
       (common-lisp:cons "ShadowProductionVariants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-endpoint-config-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-endpoint-config-output-"))
   (endpoint-config-arn (common-lisp:error ":endpoint-config-arn is required")
    :type (common-lisp:or endpoint-config-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-endpoint-config-output
                    'make-create-endpoint-config-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-config-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-config-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-config-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-config-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-endpoint-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-endpoint-input-"))
   (endpoint-name (common-lisp:error ":endpoint-name is required") :type
    (common-lisp:or endpoint-name common-lisp:null))
   (endpoint-config-name
    (common-lisp:error ":endpoint-config-name is required") :type
    (common-lisp:or endpoint-config-name common-lisp:null))
   (deployment-config common-lisp:nil :type
    (common-lisp:or deployment-config common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-endpoint-input 'make-create-endpoint-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-config-name))
      (common-lisp:list
       (common-lisp:cons "EndpointConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-config))
      (common-lisp:list
       (common-lisp:cons "DeploymentConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-endpoint-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-endpoint-output-"))
   (endpoint-arn (common-lisp:error ":endpoint-arn is required") :type
    (common-lisp:or endpoint-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-endpoint-output 'make-create-endpoint-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-endpoint-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-experiment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-experiment-request-"))
   (experiment-name (common-lisp:error ":experiment-name is required") :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or experiment-description common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-experiment-request
                    'make-create-experiment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-name))
      (common-lisp:list
       (common-lisp:cons "ExperimentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-experiment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-experiment-response-"))
   (experiment-arn common-lisp:nil :type
    (common-lisp:or experiment-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-experiment-response
                    'make-create-experiment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-arn))
      (common-lisp:list
       (common-lisp:cons "ExperimentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-experiment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-feature-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-feature-group-request-"))
   (feature-group-name (common-lisp:error ":feature-group-name is required")
    :type (common-lisp:or feature-group-name common-lisp:null))
   (record-identifier-feature-name
    (common-lisp:error ":record-identifier-feature-name is required") :type
    (common-lisp:or feature-name common-lisp:null))
   (event-time-feature-name
    (common-lisp:error ":event-time-feature-name is required") :type
    (common-lisp:or feature-name common-lisp:null))
   (feature-definitions (common-lisp:error ":feature-definitions is required")
    :type (common-lisp:or feature-definitions common-lisp:null))
   (online-store-config common-lisp:nil :type
    (common-lisp:or online-store-config common-lisp:null))
   (offline-store-config common-lisp:nil :type
    (common-lisp:or offline-store-config common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-feature-group-request
                    'make-create-feature-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-feature-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-feature-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-group-name))
      (common-lisp:list
       (common-lisp:cons "FeatureGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'record-identifier-feature-name))
      (common-lisp:list
       (common-lisp:cons "RecordIdentifierFeatureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-time-feature-name))
      (common-lisp:list
       (common-lisp:cons "EventTimeFeatureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-definitions))
      (common-lisp:list
       (common-lisp:cons "FeatureDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'online-store-config))
      (common-lisp:list
       (common-lisp:cons "OnlineStoreConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offline-store-config))
      (common-lisp:list
       (common-lisp:cons "OfflineStoreConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-feature-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-feature-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-feature-group-response-"))
   (feature-group-arn (common-lisp:error ":feature-group-arn is required")
    :type (common-lisp:or feature-group-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-feature-group-response
                    'make-create-feature-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-feature-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-feature-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-group-arn))
      (common-lisp:list
       (common-lisp:cons "FeatureGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-feature-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-flow-definition-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-flow-definition-request-"))
   (flow-definition-name
    (common-lisp:error ":flow-definition-name is required") :type
    (common-lisp:or flow-definition-name common-lisp:null))
   (human-loop-request-source common-lisp:nil :type
    (common-lisp:or human-loop-request-source common-lisp:null))
   (human-loop-activation-config common-lisp:nil :type
    (common-lisp:or human-loop-activation-config common-lisp:null))
   (human-loop-config (common-lisp:error ":human-loop-config is required")
    :type (common-lisp:or human-loop-config common-lisp:null))
   (output-config (common-lisp:error ":output-config is required") :type
    (common-lisp:or flow-definition-output-config common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-flow-definition-request
                    'make-create-flow-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-flow-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-flow-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flow-definition-name))
      (common-lisp:list
       (common-lisp:cons "FlowDefinitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'human-loop-request-source))
      (common-lisp:list
       (common-lisp:cons "HumanLoopRequestSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'human-loop-activation-config))
      (common-lisp:list
       (common-lisp:cons "HumanLoopActivationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'human-loop-config))
      (common-lisp:list
       (common-lisp:cons "HumanLoopConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-flow-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-flow-definition-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-flow-definition-response-"))
   (flow-definition-arn (common-lisp:error ":flow-definition-arn is required")
    :type (common-lisp:or flow-definition-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-flow-definition-response
                    'make-create-flow-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-flow-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-flow-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-definition-arn))
      (common-lisp:list
       (common-lisp:cons "FlowDefinitionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-flow-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-hub-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-hub-request-"))
   (hub-name (common-lisp:error ":hub-name is required") :type
    (common-lisp:or hub-name common-lisp:null))
   (hub-description (common-lisp:error ":hub-description is required") :type
    (common-lisp:or hub-description common-lisp:null))
   (hub-display-name common-lisp:nil :type
    (common-lisp:or hub-display-name common-lisp:null))
   (hub-search-keywords common-lisp:nil :type
    (common-lisp:or hub-search-keyword-list common-lisp:null))
   (s3storage-config common-lisp:nil :type
    (common-lisp:or hub-s3storage-config common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-hub-request 'make-create-hub-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-hub-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-hub-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-name))
      (common-lisp:list
       (common-lisp:cons "HubName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-description))
      (common-lisp:list
       (common-lisp:cons "HubDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-display-name))
      (common-lisp:list
       (common-lisp:cons "HubDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-search-keywords))
      (common-lisp:list
       (common-lisp:cons "HubSearchKeywords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3storage-config))
      (common-lisp:list
       (common-lisp:cons "S3StorageConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-hub-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-hub-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-hub-response-"))
   (hub-arn (common-lisp:error ":hub-arn is required") :type
    (common-lisp:or hub-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-hub-response 'make-create-hub-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-hub-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-hub-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-arn))
      (common-lisp:list
       (common-lisp:cons "HubArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-hub-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-human-task-ui-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-human-task-ui-request-"))
   (human-task-ui-name (common-lisp:error ":human-task-ui-name is required")
    :type (common-lisp:or human-task-ui-name common-lisp:null))
   (ui-template (common-lisp:error ":ui-template is required") :type
    (common-lisp:or ui-template common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-human-task-ui-request
                    'make-create-human-task-ui-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-human-task-ui-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-human-task-ui-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'human-task-ui-name))
      (common-lisp:list
       (common-lisp:cons "HumanTaskUiName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ui-template))
      (common-lisp:list
       (common-lisp:cons "UiTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-human-task-ui-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-human-task-ui-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-human-task-ui-response-"))
   (human-task-ui-arn (common-lisp:error ":human-task-ui-arn is required")
    :type (common-lisp:or human-task-ui-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-human-task-ui-response
                    'make-create-human-task-ui-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-human-task-ui-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-human-task-ui-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'human-task-ui-arn))
      (common-lisp:list
       (common-lisp:cons "HumanTaskUiArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-human-task-ui-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-hyper-parameter-tuning-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-hyper-parameter-tuning-job-request-"))
   (hyper-parameter-tuning-job-name
    (common-lisp:error ":hyper-parameter-tuning-job-name is required") :type
    (common-lisp:or hyper-parameter-tuning-job-name common-lisp:null))
   (hyper-parameter-tuning-job-config
    (common-lisp:error ":hyper-parameter-tuning-job-config is required") :type
    (common-lisp:or hyper-parameter-tuning-job-config common-lisp:null))
   (training-job-definition common-lisp:nil :type
    (common-lisp:or hyper-parameter-training-job-definition common-lisp:null))
   (training-job-definitions common-lisp:nil :type
    (common-lisp:or hyper-parameter-training-job-definitions common-lisp:null))
   (warm-start-config common-lisp:nil :type
    (common-lisp:or hyper-parameter-tuning-job-warm-start-config
                    common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-hyper-parameter-tuning-job-request
                    'make-create-hyper-parameter-tuning-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-hyper-parameter-tuning-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-hyper-parameter-tuning-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hyper-parameter-tuning-job-name))
      (common-lisp:list
       (common-lisp:cons "HyperParameterTuningJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hyper-parameter-tuning-job-config))
      (common-lisp:list
       (common-lisp:cons "HyperParameterTuningJobConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-job-definition))
      (common-lisp:list
       (common-lisp:cons "TrainingJobDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-job-definitions))
      (common-lisp:list
       (common-lisp:cons "TrainingJobDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warm-start-config))
      (common-lisp:list
       (common-lisp:cons "WarmStartConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-hyper-parameter-tuning-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-hyper-parameter-tuning-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-hyper-parameter-tuning-job-response-"))
   (hyper-parameter-tuning-job-arn
    (common-lisp:error ":hyper-parameter-tuning-job-arn is required") :type
    (common-lisp:or hyper-parameter-tuning-job-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-hyper-parameter-tuning-job-response
                    'make-create-hyper-parameter-tuning-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-hyper-parameter-tuning-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-hyper-parameter-tuning-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hyper-parameter-tuning-job-arn))
      (common-lisp:list
       (common-lisp:cons "HyperParameterTuningJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-hyper-parameter-tuning-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-image-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-image-request-"))
   (description common-lisp:nil :type
    (common-lisp:or image-description common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or image-display-name common-lisp:null))
   (image-name (common-lisp:error ":image-name is required") :type
    (common-lisp:or image-name common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-image-request 'make-create-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-name))
      (common-lisp:list
       (common-lisp:cons "ImageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-image-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-image-response-"))
   (image-arn common-lisp:nil :type
    (common-lisp:or image-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-image-response 'make-create-image-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-arn))
      (common-lisp:list
       (common-lisp:cons "ImageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-image-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-image-version-request-"))
   (base-image (common-lisp:error ":base-image is required") :type
    (common-lisp:or image-base-image common-lisp:null))
   (client-token (common-lisp:error ":client-token is required") :type
    (common-lisp:or client-token common-lisp:null))
   (image-name (common-lisp:error ":image-name is required") :type
    (common-lisp:or image-name common-lisp:null))
   (aliases common-lisp:nil :type
    (common-lisp:or sage-maker-image-version-aliases common-lisp:null))
   (vendor-guidance common-lisp:nil :type
    (common-lisp:or vendor-guidance common-lisp:null))
   (job-type common-lisp:nil :type (common-lisp:or job-type common-lisp:null))
   (mlframework common-lisp:nil :type
    (common-lisp:or mlframework common-lisp:null))
   (programming-lang common-lisp:nil :type
    (common-lisp:or programming-lang common-lisp:null))
   (processor common-lisp:nil :type
    (common-lisp:or processor common-lisp:null))
   (horovod common-lisp:nil :type (common-lisp:or horovod common-lisp:null))
   (release-notes common-lisp:nil :type
    (common-lisp:or release-notes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-image-version-request
                    'make-create-image-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-image-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-image-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-image))
      (common-lisp:list
       (common-lisp:cons "BaseImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-name))
      (common-lisp:list
       (common-lisp:cons "ImageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aliases))
      (common-lisp:list
       (common-lisp:cons "Aliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-guidance))
      (common-lisp:list
       (common-lisp:cons "VendorGuidance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlframework))
      (common-lisp:list
       (common-lisp:cons "MLFramework"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'programming-lang))
      (common-lisp:list
       (common-lisp:cons "ProgrammingLang"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processor))
      (common-lisp:list
       (common-lisp:cons "Processor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'horovod))
      (common-lisp:list
       (common-lisp:cons "Horovod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-notes))
      (common-lisp:list
       (common-lisp:cons "ReleaseNotes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-image-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-image-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-image-version-response-"))
   (image-version-arn common-lisp:nil :type
    (common-lisp:or image-version-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-image-version-response
                    'make-create-image-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-image-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-image-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-version-arn))
      (common-lisp:list
       (common-lisp:cons "ImageVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-image-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-inference-experiment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-inference-experiment-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or inference-experiment-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or inference-experiment-type common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or inference-experiment-schedule common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or inference-experiment-description common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (endpoint-name (common-lisp:error ":endpoint-name is required") :type
    (common-lisp:or endpoint-name common-lisp:null))
   (model-variants (common-lisp:error ":model-variants is required") :type
    (common-lisp:or model-variant-config-list common-lisp:null))
   (data-storage-config common-lisp:nil :type
    (common-lisp:or inference-experiment-data-storage-config common-lisp:null))
   (shadow-mode-config (common-lisp:error ":shadow-mode-config is required")
    :type (common-lisp:or shadow-mode-config common-lisp:null))
   (kms-key common-lisp:nil :type (common-lisp:or kms-key-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-inference-experiment-request
                    'make-create-inference-experiment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-inference-experiment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-inference-experiment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-variants))
      (common-lisp:list
       (common-lisp:cons "ModelVariants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-storage-config))
      (common-lisp:list
       (common-lisp:cons "DataStorageConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-mode-config))
      (common-lisp:list
       (common-lisp:cons "ShadowModeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key))
      (common-lisp:list
       (common-lisp:cons "KmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-inference-experiment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-inference-experiment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-inference-experiment-response-"))
   (inference-experiment-arn
    (common-lisp:error ":inference-experiment-arn is required") :type
    (common-lisp:or inference-experiment-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-inference-experiment-response
                    'make-create-inference-experiment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-inference-experiment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-inference-experiment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-experiment-arn))
      (common-lisp:list
       (common-lisp:cons "InferenceExperimentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-inference-experiment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-inference-recommendations-job-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-inference-recommendations-job-request-"))
   (job-name (common-lisp:error ":job-name is required") :type
    (common-lisp:or recommendation-job-name common-lisp:null))
   (job-type (common-lisp:error ":job-type is required") :type
    (common-lisp:or recommendation-job-type common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (input-config (common-lisp:error ":input-config is required") :type
    (common-lisp:or recommendation-job-input-config common-lisp:null))
   (job-description common-lisp:nil :type
    (common-lisp:or recommendation-job-description common-lisp:null))
   (stopping-conditions common-lisp:nil :type
    (common-lisp:or recommendation-job-stopping-conditions common-lisp:null))
   (output-config common-lisp:nil :type
    (common-lisp:or recommendation-job-output-config common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-inference-recommendations-job-request
                    'make-create-inference-recommendations-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-inference-recommendations-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-inference-recommendations-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-config))
      (common-lisp:list
       (common-lisp:cons "InputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-description))
      (common-lisp:list
       (common-lisp:cons "JobDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-conditions))
      (common-lisp:list
       (common-lisp:cons "StoppingConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-inference-recommendations-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-inference-recommendations-job-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-inference-recommendations-job-response-"))
   (job-arn (common-lisp:error ":job-arn is required") :type
    (common-lisp:or recommendation-job-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-inference-recommendations-job-response
                    'make-create-inference-recommendations-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-inference-recommendations-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-inference-recommendations-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "JobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-inference-recommendations-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-labeling-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-labeling-job-request-"))
   (labeling-job-name (common-lisp:error ":labeling-job-name is required")
    :type (common-lisp:or labeling-job-name common-lisp:null))
   (label-attribute-name
    (common-lisp:error ":label-attribute-name is required") :type
    (common-lisp:or label-attribute-name common-lisp:null))
   (input-config (common-lisp:error ":input-config is required") :type
    (common-lisp:or labeling-job-input-config common-lisp:null))
   (output-config (common-lisp:error ":output-config is required") :type
    (common-lisp:or labeling-job-output-config common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (label-category-config-s3uri common-lisp:nil :type
    (common-lisp:or s3uri common-lisp:null))
   (stopping-conditions common-lisp:nil :type
    (common-lisp:or labeling-job-stopping-conditions common-lisp:null))
   (labeling-job-algorithms-config common-lisp:nil :type
    (common-lisp:or labeling-job-algorithms-config common-lisp:null))
   (human-task-config (common-lisp:error ":human-task-config is required")
    :type (common-lisp:or human-task-config common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-labeling-job-request
                    'make-create-labeling-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-labeling-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-labeling-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labeling-job-name))
      (common-lisp:list
       (common-lisp:cons "LabelingJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'label-attribute-name))
      (common-lisp:list
       (common-lisp:cons "LabelAttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-config))
      (common-lisp:list
       (common-lisp:cons "InputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'label-category-config-s3uri))
      (common-lisp:list
       (common-lisp:cons "LabelCategoryConfigS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-conditions))
      (common-lisp:list
       (common-lisp:cons "StoppingConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'labeling-job-algorithms-config))
      (common-lisp:list
       (common-lisp:cons "LabelingJobAlgorithmsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'human-task-config))
      (common-lisp:list
       (common-lisp:cons "HumanTaskConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-labeling-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-labeling-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-labeling-job-response-"))
   (labeling-job-arn (common-lisp:error ":labeling-job-arn is required") :type
    (common-lisp:or labeling-job-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-labeling-job-response
                    'make-create-labeling-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-labeling-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-labeling-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labeling-job-arn))
      (common-lisp:list
       (common-lisp:cons "LabelingJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-labeling-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-model-bias-job-definition-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-model-bias-job-definition-request-"))
   (job-definition-name (common-lisp:error ":job-definition-name is required")
    :type (common-lisp:or monitoring-job-definition-name common-lisp:null))
   (model-bias-baseline-config common-lisp:nil :type
    (common-lisp:or model-bias-baseline-config common-lisp:null))
   (model-bias-app-specification
    (common-lisp:error ":model-bias-app-specification is required") :type
    (common-lisp:or model-bias-app-specification common-lisp:null))
   (model-bias-job-input
    (common-lisp:error ":model-bias-job-input is required") :type
    (common-lisp:or model-bias-job-input common-lisp:null))
   (model-bias-job-output-config
    (common-lisp:error ":model-bias-job-output-config is required") :type
    (common-lisp:or monitoring-output-config common-lisp:null))
   (job-resources (common-lisp:error ":job-resources is required") :type
    (common-lisp:or monitoring-resources common-lisp:null))
   (network-config common-lisp:nil :type
    (common-lisp:or monitoring-network-config common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (stopping-condition common-lisp:nil :type
    (common-lisp:or monitoring-stopping-condition common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-model-bias-job-definition-request
                    'make-create-model-bias-job-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-model-bias-job-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-model-bias-job-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-definition-name))
      (common-lisp:list
       (common-lisp:cons "JobDefinitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-bias-baseline-config))
      (common-lisp:list
       (common-lisp:cons "ModelBiasBaselineConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-bias-app-specification))
      (common-lisp:list
       (common-lisp:cons "ModelBiasAppSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-bias-job-input))
      (common-lisp:list
       (common-lisp:cons "ModelBiasJobInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-bias-job-output-config))
      (common-lisp:list
       (common-lisp:cons "ModelBiasJobOutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-resources))
      (common-lisp:list
       (common-lisp:cons "JobResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-config))
      (common-lisp:list
       (common-lisp:cons "NetworkConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-condition))
      (common-lisp:list
       (common-lisp:cons "StoppingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-model-bias-job-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-model-bias-job-definition-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-model-bias-job-definition-response-"))
   (job-definition-arn (common-lisp:error ":job-definition-arn is required")
    :type (common-lisp:or monitoring-job-definition-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-model-bias-job-definition-response
                    'make-create-model-bias-job-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-model-bias-job-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-model-bias-job-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-definition-arn))
      (common-lisp:list
       (common-lisp:cons "JobDefinitionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-model-bias-job-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-model-card-export-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-model-card-export-job-request-"))
   (model-card-name (common-lisp:error ":model-card-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (model-card-version common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (model-card-export-job-name
    (common-lisp:error ":model-card-export-job-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (output-config (common-lisp:error ":output-config is required") :type
    (common-lisp:or model-card-export-output-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-model-card-export-job-request
                    'make-create-model-card-export-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-model-card-export-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-model-card-export-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-name))
      (common-lisp:list
       (common-lisp:cons "ModelCardName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-version))
      (common-lisp:list
       (common-lisp:cons "ModelCardVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-card-export-job-name))
      (common-lisp:list
       (common-lisp:cons "ModelCardExportJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-model-card-export-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-model-card-export-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-model-card-export-job-response-"))
   (model-card-export-job-arn
    (common-lisp:error ":model-card-export-job-arn is required") :type
    (common-lisp:or model-card-export-job-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-model-card-export-job-response
                    'make-create-model-card-export-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-model-card-export-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-model-card-export-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-card-export-job-arn))
      (common-lisp:list
       (common-lisp:cons "ModelCardExportJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-model-card-export-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-model-card-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-model-card-request-"))
   (model-card-name (common-lisp:error ":model-card-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (security-config common-lisp:nil :type
    (common-lisp:or model-card-security-config common-lisp:null))
   (content (common-lisp:error ":content is required") :type
    (common-lisp:or model-card-content common-lisp:null))
   (model-card-status (common-lisp:error ":model-card-status is required")
    :type (common-lisp:or model-card-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-model-card-request
                    'make-create-model-card-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-model-card-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-model-card-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-name))
      (common-lisp:list
       (common-lisp:cons "ModelCardName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-config))
      (common-lisp:list
       (common-lisp:cons "SecurityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-status))
      (common-lisp:list
       (common-lisp:cons "ModelCardStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-model-card-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-model-card-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-model-card-response-"))
   (model-card-arn (common-lisp:error ":model-card-arn is required") :type
    (common-lisp:or model-card-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-model-card-response
                    'make-create-model-card-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-model-card-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-model-card-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-arn))
      (common-lisp:list
       (common-lisp:cons "ModelCardArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-model-card-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-model-explainability-job-definition-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-model-explainability-job-definition-request-"))
   (job-definition-name (common-lisp:error ":job-definition-name is required")
    :type (common-lisp:or monitoring-job-definition-name common-lisp:null))
   (model-explainability-baseline-config common-lisp:nil :type
    (common-lisp:or model-explainability-baseline-config common-lisp:null))
   (model-explainability-app-specification
    (common-lisp:error ":model-explainability-app-specification is required")
    :type
    (common-lisp:or model-explainability-app-specification common-lisp:null))
   (model-explainability-job-input
    (common-lisp:error ":model-explainability-job-input is required") :type
    (common-lisp:or model-explainability-job-input common-lisp:null))
   (model-explainability-job-output-config
    (common-lisp:error ":model-explainability-job-output-config is required")
    :type (common-lisp:or monitoring-output-config common-lisp:null))
   (job-resources (common-lisp:error ":job-resources is required") :type
    (common-lisp:or monitoring-resources common-lisp:null))
   (network-config common-lisp:nil :type
    (common-lisp:or monitoring-network-config common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (stopping-condition common-lisp:nil :type
    (common-lisp:or monitoring-stopping-condition common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-model-explainability-job-definition-request
                    'make-create-model-explainability-job-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-model-explainability-job-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-model-explainability-job-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-definition-name))
      (common-lisp:list
       (common-lisp:cons "JobDefinitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-explainability-baseline-config))
      (common-lisp:list
       (common-lisp:cons "ModelExplainabilityBaselineConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-explainability-app-specification))
      (common-lisp:list
       (common-lisp:cons "ModelExplainabilityAppSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-explainability-job-input))
      (common-lisp:list
       (common-lisp:cons "ModelExplainabilityJobInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-explainability-job-output-config))
      (common-lisp:list
       (common-lisp:cons "ModelExplainabilityJobOutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-resources))
      (common-lisp:list
       (common-lisp:cons "JobResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-config))
      (common-lisp:list
       (common-lisp:cons "NetworkConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-condition))
      (common-lisp:list
       (common-lisp:cons "StoppingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-model-explainability-job-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-model-explainability-job-definition-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-model-explainability-job-definition-response-"))
   (job-definition-arn (common-lisp:error ":job-definition-arn is required")
    :type (common-lisp:or monitoring-job-definition-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-model-explainability-job-definition-response
                    'make-create-model-explainability-job-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-model-explainability-job-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-model-explainability-job-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-definition-arn))
      (common-lisp:list
       (common-lisp:cons "JobDefinitionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-model-explainability-job-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-model-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-model-input-"))
   (model-name (common-lisp:error ":model-name is required") :type
    (common-lisp:or model-name common-lisp:null))
   (primary-container common-lisp:nil :type
    (common-lisp:or container-definition common-lisp:null))
   (containers common-lisp:nil :type
    (common-lisp:or container-definition-list common-lisp:null))
   (inference-execution-config common-lisp:nil :type
    (common-lisp:or inference-execution-config common-lisp:null))
   (execution-role-arn (common-lisp:error ":execution-role-arn is required")
    :type (common-lisp:or role-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (vpc-config common-lisp:nil :type
    (common-lisp:or vpc-config common-lisp:null))
   (enable-network-isolation common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-model-input 'make-create-model-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-model-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-model-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-container))
      (common-lisp:list
       (common-lisp:cons "PrimaryContainer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'containers))
      (common-lisp:list
       (common-lisp:cons "Containers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-execution-config))
      (common-lisp:list
       (common-lisp:cons "InferenceExecutionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-network-isolation))
      (common-lisp:list
       (common-lisp:cons "EnableNetworkIsolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-model-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-model-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-model-output-"))
   (model-arn (common-lisp:error ":model-arn is required") :type
    (common-lisp:or model-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-model-output 'make-create-model-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-model-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-model-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-arn))
      (common-lisp:list
       (common-lisp:cons "ModelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-model-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-model-package-group-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-model-package-group-input-"))
   (model-package-group-name
    (common-lisp:error ":model-package-group-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (model-package-group-description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-model-package-group-input
                    'make-create-model-package-group-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-model-package-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-model-package-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-name))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-description))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-model-package-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-model-package-group-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-model-package-group-output-"))
   (model-package-group-arn
    (common-lisp:error ":model-package-group-arn is required") :type
    (common-lisp:or model-package-group-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-model-package-group-output
                    'make-create-model-package-group-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-model-package-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-model-package-group-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-arn))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-model-package-group-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-model-package-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-model-package-input-"))
   (model-package-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (model-package-group-name common-lisp:nil :type
    (common-lisp:or arn-or-name common-lisp:null))
   (model-package-description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (inference-specification common-lisp:nil :type
    (common-lisp:or inference-specification common-lisp:null))
   (validation-specification common-lisp:nil :type
    (common-lisp:or model-package-validation-specification common-lisp:null))
   (source-algorithm-specification common-lisp:nil :type
    (common-lisp:or source-algorithm-specification common-lisp:null))
   (certify-for-marketplace common-lisp:nil :type
    (common-lisp:or certify-for-marketplace common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (model-approval-status common-lisp:nil :type
    (common-lisp:or model-approval-status common-lisp:null))
   (metadata-properties common-lisp:nil :type
    (common-lisp:or metadata-properties common-lisp:null))
   (model-metrics common-lisp:nil :type
    (common-lisp:or model-metrics common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (customer-metadata-properties common-lisp:nil :type
    (common-lisp:or customer-metadata-map common-lisp:null))
   (drift-check-baselines common-lisp:nil :type
    (common-lisp:or drift-check-baselines common-lisp:null))
   (domain common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (task common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (sample-payload-url common-lisp:nil :type
    (common-lisp:or s3uri common-lisp:null))
   (additional-inference-specifications common-lisp:nil :type
    (common-lisp:or additional-inference-specifications common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-model-package-input
                    'make-create-model-package-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-model-package-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-model-package-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-package-name))
      (common-lisp:list
       (common-lisp:cons "ModelPackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-name))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-description))
      (common-lisp:list
       (common-lisp:cons "ModelPackageDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-specification))
      (common-lisp:list
       (common-lisp:cons "InferenceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'validation-specification))
      (common-lisp:list
       (common-lisp:cons "ValidationSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-algorithm-specification))
      (common-lisp:list
       (common-lisp:cons "SourceAlgorithmSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certify-for-marketplace))
      (common-lisp:list
       (common-lisp:cons "CertifyForMarketplace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-approval-status))
      (common-lisp:list
       (common-lisp:cons "ModelApprovalStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-properties))
      (common-lisp:list
       (common-lisp:cons "MetadataProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-metrics))
      (common-lisp:list
       (common-lisp:cons "ModelMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "ClientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-metadata-properties))
      (common-lisp:list
       (common-lisp:cons "CustomerMetadataProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'drift-check-baselines))
      (common-lisp:list
       (common-lisp:cons "DriftCheckBaselines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task))
      (common-lisp:list
       (common-lisp:cons "Task"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-payload-url))
      (common-lisp:list
       (common-lisp:cons "SamplePayloadUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-inference-specifications))
      (common-lisp:list
       (common-lisp:cons "AdditionalInferenceSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-model-package-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-model-package-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-model-package-output-"))
   (model-package-arn (common-lisp:error ":model-package-arn is required")
    :type (common-lisp:or model-package-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-model-package-output
                    'make-create-model-package-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-model-package-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-model-package-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-package-arn))
      (common-lisp:list
       (common-lisp:cons "ModelPackageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-model-package-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-model-quality-job-definition-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-model-quality-job-definition-request-"))
   (job-definition-name (common-lisp:error ":job-definition-name is required")
    :type (common-lisp:or monitoring-job-definition-name common-lisp:null))
   (model-quality-baseline-config common-lisp:nil :type
    (common-lisp:or model-quality-baseline-config common-lisp:null))
   (model-quality-app-specification
    (common-lisp:error ":model-quality-app-specification is required") :type
    (common-lisp:or model-quality-app-specification common-lisp:null))
   (model-quality-job-input
    (common-lisp:error ":model-quality-job-input is required") :type
    (common-lisp:or model-quality-job-input common-lisp:null))
   (model-quality-job-output-config
    (common-lisp:error ":model-quality-job-output-config is required") :type
    (common-lisp:or monitoring-output-config common-lisp:null))
   (job-resources (common-lisp:error ":job-resources is required") :type
    (common-lisp:or monitoring-resources common-lisp:null))
   (network-config common-lisp:nil :type
    (common-lisp:or monitoring-network-config common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (stopping-condition common-lisp:nil :type
    (common-lisp:or monitoring-stopping-condition common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-model-quality-job-definition-request
                    'make-create-model-quality-job-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-model-quality-job-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-model-quality-job-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-definition-name))
      (common-lisp:list
       (common-lisp:cons "JobDefinitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-quality-baseline-config))
      (common-lisp:list
       (common-lisp:cons "ModelQualityBaselineConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-quality-app-specification))
      (common-lisp:list
       (common-lisp:cons "ModelQualityAppSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-quality-job-input))
      (common-lisp:list
       (common-lisp:cons "ModelQualityJobInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-quality-job-output-config))
      (common-lisp:list
       (common-lisp:cons "ModelQualityJobOutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-resources))
      (common-lisp:list
       (common-lisp:cons "JobResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-config))
      (common-lisp:list
       (common-lisp:cons "NetworkConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-condition))
      (common-lisp:list
       (common-lisp:cons "StoppingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-model-quality-job-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-model-quality-job-definition-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-model-quality-job-definition-response-"))
   (job-definition-arn (common-lisp:error ":job-definition-arn is required")
    :type (common-lisp:or monitoring-job-definition-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-model-quality-job-definition-response
                    'make-create-model-quality-job-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-model-quality-job-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-model-quality-job-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-definition-arn))
      (common-lisp:list
       (common-lisp:cons "JobDefinitionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-model-quality-job-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-monitoring-schedule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-monitoring-schedule-request-"))
   (monitoring-schedule-name
    (common-lisp:error ":monitoring-schedule-name is required") :type
    (common-lisp:or monitoring-schedule-name common-lisp:null))
   (monitoring-schedule-config
    (common-lisp:error ":monitoring-schedule-config is required") :type
    (common-lisp:or monitoring-schedule-config common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-monitoring-schedule-request
                    'make-create-monitoring-schedule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-monitoring-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-monitoring-schedule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-name))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-config))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-monitoring-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-monitoring-schedule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-monitoring-schedule-response-"))
   (monitoring-schedule-arn
    (common-lisp:error ":monitoring-schedule-arn is required") :type
    (common-lisp:or monitoring-schedule-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-monitoring-schedule-response
                    'make-create-monitoring-schedule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-monitoring-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-monitoring-schedule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-monitoring-schedule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-notebook-instance-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-notebook-instance-input-"))
   (notebook-instance-name
    (common-lisp:error ":notebook-instance-name is required") :type
    (common-lisp:or notebook-instance-name common-lisp:null))
   (instance-type (common-lisp:error ":instance-type is required") :type
    (common-lisp:or instance-type common-lisp:null))
   (subnet-id common-lisp:nil :type
    (common-lisp:or subnet-id common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or security-group-ids common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (lifecycle-config-name common-lisp:nil :type
    (common-lisp:or notebook-instance-lifecycle-config-name common-lisp:null))
   (direct-internet-access common-lisp:nil :type
    (common-lisp:or direct-internet-access common-lisp:null))
   (volume-size-in-gb common-lisp:nil :type
    (common-lisp:or notebook-instance-volume-size-in-gb common-lisp:null))
   (accelerator-types common-lisp:nil :type
    (common-lisp:or notebook-instance-accelerator-types common-lisp:null))
   (default-code-repository common-lisp:nil :type
    (common-lisp:or code-repository-name-or-url common-lisp:null))
   (additional-code-repositories common-lisp:nil :type
    (common-lisp:or additional-code-repository-names-or-urls common-lisp:null))
   (root-access common-lisp:nil :type
    (common-lisp:or root-access common-lisp:null))
   (platform-identifier common-lisp:nil :type
    (common-lisp:or platform-identifier common-lisp:null))
   (instance-metadata-service-configuration common-lisp:nil :type
    (common-lisp:or instance-metadata-service-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-notebook-instance-input
                    'make-create-notebook-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-notebook-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-notebook-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-name))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-config-name))
      (common-lisp:list
       (common-lisp:cons "LifecycleConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-internet-access))
      (common-lisp:list
       (common-lisp:cons "DirectInternetAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "VolumeSizeInGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-types))
      (common-lisp:list
       (common-lisp:cons "AcceleratorTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-code-repository))
      (common-lisp:list
       (common-lisp:cons "DefaultCodeRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-code-repositories))
      (common-lisp:list
       (common-lisp:cons "AdditionalCodeRepositories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-access))
      (common-lisp:list
       (common-lisp:cons "RootAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-identifier))
      (common-lisp:list
       (common-lisp:cons "PlatformIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-metadata-service-configuration))
      (common-lisp:list
       (common-lisp:cons "InstanceMetadataServiceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-notebook-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-notebook-instance-lifecycle-config-input (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-notebook-instance-lifecycle-config-input-"))
   (notebook-instance-lifecycle-config-name
    (common-lisp:error ":notebook-instance-lifecycle-config-name is required")
    :type
    (common-lisp:or notebook-instance-lifecycle-config-name common-lisp:null))
   (on-create common-lisp:nil :type
    (common-lisp:or notebook-instance-lifecycle-config-list common-lisp:null))
   (on-start common-lisp:nil :type
    (common-lisp:or notebook-instance-lifecycle-config-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-notebook-instance-lifecycle-config-input
                    'make-create-notebook-instance-lifecycle-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-notebook-instance-lifecycle-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-notebook-instance-lifecycle-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-lifecycle-config-name))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceLifecycleConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-create))
      (common-lisp:list
       (common-lisp:cons "OnCreate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-start))
      (common-lisp:list
       (common-lisp:cons "OnStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-notebook-instance-lifecycle-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-notebook-instance-lifecycle-config-output
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-notebook-instance-lifecycle-config-output-"))
   (notebook-instance-lifecycle-config-arn common-lisp:nil :type
    (common-lisp:or notebook-instance-lifecycle-config-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-notebook-instance-lifecycle-config-output
                    'make-create-notebook-instance-lifecycle-config-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-notebook-instance-lifecycle-config-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-notebook-instance-lifecycle-config-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-lifecycle-config-arn))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceLifecycleConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-notebook-instance-lifecycle-config-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-notebook-instance-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-notebook-instance-output-"))
   (notebook-instance-arn common-lisp:nil :type
    (common-lisp:or notebook-instance-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-notebook-instance-output
                    'make-create-notebook-instance-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-notebook-instance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-notebook-instance-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-arn))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-notebook-instance-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-pipeline-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-pipeline-request-"))
   (pipeline-name (common-lisp:error ":pipeline-name is required") :type
    (common-lisp:or pipeline-name common-lisp:null))
   (pipeline-display-name common-lisp:nil :type
    (common-lisp:or pipeline-name common-lisp:null))
   (pipeline-definition common-lisp:nil :type
    (common-lisp:or pipeline-definition common-lisp:null))
   (pipeline-definition-s3location common-lisp:nil :type
    (common-lisp:or pipeline-definition-s3location common-lisp:null))
   (pipeline-description common-lisp:nil :type
    (common-lisp:or pipeline-description common-lisp:null))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or idempotency-token common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (parallelism-configuration common-lisp:nil :type
    (common-lisp:or parallelism-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-pipeline-request 'make-create-pipeline-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "PipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-display-name))
      (common-lisp:list
       (common-lisp:cons "PipelineDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-definition))
      (common-lisp:list
       (common-lisp:cons "PipelineDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-definition-s3location))
      (common-lisp:list
       (common-lisp:cons "PipelineDefinitionS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-description))
      (common-lisp:list
       (common-lisp:cons "PipelineDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallelism-configuration))
      (common-lisp:list
       (common-lisp:cons "ParallelismConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-pipeline-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-pipeline-response-"))
   (pipeline-arn common-lisp:nil :type
    (common-lisp:or pipeline-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-pipeline-response 'make-create-pipeline-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "PipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-presigned-domain-url-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-presigned-domain-url-request-"))
   (domain-id (common-lisp:error ":domain-id is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (user-profile-name (common-lisp:error ":user-profile-name is required")
    :type (common-lisp:or user-profile-name common-lisp:null))
   (session-expiration-duration-in-seconds common-lisp:nil :type
    (common-lisp:or session-expiration-duration-in-seconds common-lisp:null))
   (expires-in-seconds common-lisp:nil :type
    (common-lisp:or expires-in-seconds common-lisp:null))
   (space-name common-lisp:nil :type
    (common-lisp:or space-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-presigned-domain-url-request
                    'make-create-presigned-domain-url-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-presigned-domain-url-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-presigned-domain-url-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-profile-name))
      (common-lisp:list
       (common-lisp:cons "UserProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-expiration-duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "SessionExpirationDurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expires-in-seconds))
      (common-lisp:list
       (common-lisp:cons "ExpiresInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "SpaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-presigned-domain-url-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-presigned-domain-url-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-presigned-domain-url-response-"))
   (authorized-url common-lisp:nil :type
    (common-lisp:or presigned-domain-url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-presigned-domain-url-response
                    'make-create-presigned-domain-url-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-presigned-domain-url-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-presigned-domain-url-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorized-url))
      (common-lisp:list
       (common-lisp:cons "AuthorizedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-presigned-domain-url-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-presigned-notebook-instance-url-input (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-presigned-notebook-instance-url-input-"))
   (notebook-instance-name
    (common-lisp:error ":notebook-instance-name is required") :type
    (common-lisp:or notebook-instance-name common-lisp:null))
   (session-expiration-duration-in-seconds common-lisp:nil :type
    (common-lisp:or session-expiration-duration-in-seconds common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-presigned-notebook-instance-url-input
                    'make-create-presigned-notebook-instance-url-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-presigned-notebook-instance-url-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-presigned-notebook-instance-url-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-name))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-expiration-duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "SessionExpirationDurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-presigned-notebook-instance-url-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-presigned-notebook-instance-url-output (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-create-presigned-notebook-instance-url-output-"))
   (authorized-url common-lisp:nil :type
    (common-lisp:or notebook-instance-url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-presigned-notebook-instance-url-output
                    'make-create-presigned-notebook-instance-url-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-presigned-notebook-instance-url-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-presigned-notebook-instance-url-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'authorized-url))
      (common-lisp:list
       (common-lisp:cons "AuthorizedUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-presigned-notebook-instance-url-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-processing-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-processing-job-request-"))
   (processing-inputs common-lisp:nil :type
    (common-lisp:or processing-inputs common-lisp:null))
   (processing-output-config common-lisp:nil :type
    (common-lisp:or processing-output-config common-lisp:null))
   (processing-job-name (common-lisp:error ":processing-job-name is required")
    :type (common-lisp:or processing-job-name common-lisp:null))
   (processing-resources
    (common-lisp:error ":processing-resources is required") :type
    (common-lisp:or processing-resources common-lisp:null))
   (stopping-condition common-lisp:nil :type
    (common-lisp:or processing-stopping-condition common-lisp:null))
   (app-specification (common-lisp:error ":app-specification is required")
    :type (common-lisp:or app-specification common-lisp:null))
   (environment common-lisp:nil :type
    (common-lisp:or processing-environment-map common-lisp:null))
   (network-config common-lisp:nil :type
    (common-lisp:or network-config common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (experiment-config common-lisp:nil :type
    (common-lisp:or experiment-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-processing-job-request
                    'make-create-processing-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-processing-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-processing-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-inputs))
      (common-lisp:list
       (common-lisp:cons "ProcessingInputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'processing-output-config))
      (common-lisp:list
       (common-lisp:cons "ProcessingOutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-job-name))
      (common-lisp:list
       (common-lisp:cons "ProcessingJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'processing-resources))
      (common-lisp:list
       (common-lisp:cons "ProcessingResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-condition))
      (common-lisp:list
       (common-lisp:cons "StoppingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-specification))
      (common-lisp:list
       (common-lisp:cons "AppSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-config))
      (common-lisp:list
       (common-lisp:cons "NetworkConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-config))
      (common-lisp:list
       (common-lisp:cons "ExperimentConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-processing-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-processing-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-processing-job-response-"))
   (processing-job-arn (common-lisp:error ":processing-job-arn is required")
    :type (common-lisp:or processing-job-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-processing-job-response
                    'make-create-processing-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-processing-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-processing-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-job-arn))
      (common-lisp:list
       (common-lisp:cons "ProcessingJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-processing-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-project-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-project-input-"))
   (project-name (common-lisp:error ":project-name is required") :type
    (common-lisp:or project-entity-name common-lisp:null))
   (project-description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (service-catalog-provisioning-details
    (common-lisp:error ":service-catalog-provisioning-details is required")
    :type
    (common-lisp:or service-catalog-provisioning-details common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-project-input 'make-create-project-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-project-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-project-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "ProjectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-description))
      (common-lisp:list
       (common-lisp:cons "ProjectDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-catalog-provisioning-details))
      (common-lisp:list
       (common-lisp:cons "ServiceCatalogProvisioningDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-project-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-project-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-project-output-"))
   (project-arn (common-lisp:error ":project-arn is required") :type
    (common-lisp:or project-arn common-lisp:null))
   (project-id (common-lisp:error ":project-id is required") :type
    (common-lisp:or project-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-project-output 'make-create-project-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "ProjectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "ProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-space-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-space-request-"))
   (domain-id (common-lisp:error ":domain-id is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (space-name (common-lisp:error ":space-name is required") :type
    (common-lisp:or space-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (space-settings common-lisp:nil :type
    (common-lisp:or space-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-space-request 'make-create-space-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-space-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-space-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "SpaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-settings))
      (common-lisp:list
       (common-lisp:cons "SpaceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-space-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-space-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-space-response-"))
   (space-arn common-lisp:nil :type
    (common-lisp:or space-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-space-response 'make-create-space-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-space-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-space-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-arn))
      (common-lisp:list
       (common-lisp:cons "SpaceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-space-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-studio-lifecycle-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-studio-lifecycle-config-request-"))
   (studio-lifecycle-config-name
    (common-lisp:error ":studio-lifecycle-config-name is required") :type
    (common-lisp:or studio-lifecycle-config-name common-lisp:null))
   (studio-lifecycle-config-content
    (common-lisp:error ":studio-lifecycle-config-content is required") :type
    (common-lisp:or studio-lifecycle-config-content common-lisp:null))
   (studio-lifecycle-config-app-type
    (common-lisp:error ":studio-lifecycle-config-app-type is required") :type
    (common-lisp:or studio-lifecycle-config-app-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-studio-lifecycle-config-request
                    'make-create-studio-lifecycle-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-lifecycle-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-lifecycle-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-lifecycle-config-name))
      (common-lisp:list
       (common-lisp:cons "StudioLifecycleConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-lifecycle-config-content))
      (common-lisp:list
       (common-lisp:cons "StudioLifecycleConfigContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-lifecycle-config-app-type))
      (common-lisp:list
       (common-lisp:cons "StudioLifecycleConfigAppType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-lifecycle-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-studio-lifecycle-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-studio-lifecycle-config-response-"))
   (studio-lifecycle-config-arn common-lisp:nil :type
    (common-lisp:or studio-lifecycle-config-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-studio-lifecycle-config-response
                    'make-create-studio-lifecycle-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-lifecycle-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-lifecycle-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-lifecycle-config-arn))
      (common-lisp:list
       (common-lisp:cons "StudioLifecycleConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-studio-lifecycle-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-training-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-training-job-request-"))
   (training-job-name (common-lisp:error ":training-job-name is required")
    :type (common-lisp:or training-job-name common-lisp:null))
   (hyper-parameters common-lisp:nil :type
    (common-lisp:or hyper-parameters common-lisp:null))
   (algorithm-specification
    (common-lisp:error ":algorithm-specification is required") :type
    (common-lisp:or algorithm-specification common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (input-data-config common-lisp:nil :type
    (common-lisp:or input-data-config common-lisp:null))
   (output-data-config (common-lisp:error ":output-data-config is required")
    :type (common-lisp:or output-data-config common-lisp:null))
   (resource-config (common-lisp:error ":resource-config is required") :type
    (common-lisp:or resource-config common-lisp:null))
   (vpc-config common-lisp:nil :type
    (common-lisp:or vpc-config common-lisp:null))
   (stopping-condition (common-lisp:error ":stopping-condition is required")
    :type (common-lisp:or stopping-condition common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (enable-network-isolation common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (enable-inter-container-traffic-encryption common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (enable-managed-spot-training common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (checkpoint-config common-lisp:nil :type
    (common-lisp:or checkpoint-config common-lisp:null))
   (debug-hook-config common-lisp:nil :type
    (common-lisp:or debug-hook-config common-lisp:null))
   (debug-rule-configurations common-lisp:nil :type
    (common-lisp:or debug-rule-configurations common-lisp:null))
   (tensor-board-output-config common-lisp:nil :type
    (common-lisp:or tensor-board-output-config common-lisp:null))
   (experiment-config common-lisp:nil :type
    (common-lisp:or experiment-config common-lisp:null))
   (profiler-config common-lisp:nil :type
    (common-lisp:or profiler-config common-lisp:null))
   (profiler-rule-configurations common-lisp:nil :type
    (common-lisp:or profiler-rule-configurations common-lisp:null))
   (environment common-lisp:nil :type
    (common-lisp:or training-environment-map common-lisp:null))
   (retry-strategy common-lisp:nil :type
    (common-lisp:or retry-strategy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-training-job-request
                    'make-create-training-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-training-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-training-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-job-name))
      (common-lisp:list
       (common-lisp:cons "TrainingJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hyper-parameters))
      (common-lisp:list
       (common-lisp:cons "HyperParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'algorithm-specification))
      (common-lisp:list
       (common-lisp:cons "AlgorithmSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "OutputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-condition))
      (common-lisp:list
       (common-lisp:cons "StoppingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-network-isolation))
      (common-lisp:list
       (common-lisp:cons "EnableNetworkIsolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-inter-container-traffic-encryption))
      (common-lisp:list
       (common-lisp:cons "EnableInterContainerTrafficEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-managed-spot-training))
      (common-lisp:list
       (common-lisp:cons "EnableManagedSpotTraining"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checkpoint-config))
      (common-lisp:list
       (common-lisp:cons "CheckpointConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'debug-hook-config))
      (common-lisp:list
       (common-lisp:cons "DebugHookConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'debug-rule-configurations))
      (common-lisp:list
       (common-lisp:cons "DebugRuleConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tensor-board-output-config))
      (common-lisp:list
       (common-lisp:cons "TensorBoardOutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-config))
      (common-lisp:list
       (common-lisp:cons "ExperimentConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profiler-config))
      (common-lisp:list
       (common-lisp:cons "ProfilerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'profiler-rule-configurations))
      (common-lisp:list
       (common-lisp:cons "ProfilerRuleConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retry-strategy))
      (common-lisp:list
       (common-lisp:cons "RetryStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-training-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-training-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-training-job-response-"))
   (training-job-arn (common-lisp:error ":training-job-arn is required") :type
    (common-lisp:or training-job-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-training-job-response
                    'make-create-training-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-training-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-training-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-job-arn))
      (common-lisp:list
       (common-lisp:cons "TrainingJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-training-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-transform-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-transform-job-request-"))
   (transform-job-name (common-lisp:error ":transform-job-name is required")
    :type (common-lisp:or transform-job-name common-lisp:null))
   (model-name (common-lisp:error ":model-name is required") :type
    (common-lisp:or model-name common-lisp:null))
   (max-concurrent-transforms common-lisp:nil :type
    (common-lisp:or max-concurrent-transforms common-lisp:null))
   (model-client-config common-lisp:nil :type
    (common-lisp:or model-client-config common-lisp:null))
   (max-payload-in-mb common-lisp:nil :type
    (common-lisp:or max-payload-in-mb common-lisp:null))
   (batch-strategy common-lisp:nil :type
    (common-lisp:or batch-strategy common-lisp:null))
   (environment common-lisp:nil :type
    (common-lisp:or transform-environment-map common-lisp:null))
   (transform-input (common-lisp:error ":transform-input is required") :type
    (common-lisp:or transform-input common-lisp:null))
   (transform-output (common-lisp:error ":transform-output is required") :type
    (common-lisp:or transform-output common-lisp:null))
   (data-capture-config common-lisp:nil :type
    (common-lisp:or batch-data-capture-config common-lisp:null))
   (transform-resources (common-lisp:error ":transform-resources is required")
    :type (common-lisp:or transform-resources common-lisp:null))
   (data-processing common-lisp:nil :type
    (common-lisp:or data-processing common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (experiment-config common-lisp:nil :type
    (common-lisp:or experiment-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-transform-job-request
                    'make-create-transform-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-transform-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-transform-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-job-name))
      (common-lisp:list
       (common-lisp:cons "TransformJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-concurrent-transforms))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrentTransforms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-client-config))
      (common-lisp:list
       (common-lisp:cons "ModelClientConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-payload-in-mb))
      (common-lisp:list
       (common-lisp:cons "MaxPayloadInMB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-strategy))
      (common-lisp:list
       (common-lisp:cons "BatchStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-input))
      (common-lisp:list
       (common-lisp:cons "TransformInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-output))
      (common-lisp:list
       (common-lisp:cons "TransformOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-capture-config))
      (common-lisp:list
       (common-lisp:cons "DataCaptureConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-resources))
      (common-lisp:list
       (common-lisp:cons "TransformResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-processing))
      (common-lisp:list
       (common-lisp:cons "DataProcessing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-config))
      (common-lisp:list
       (common-lisp:cons "ExperimentConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-transform-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-transform-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-transform-job-response-"))
   (transform-job-arn (common-lisp:error ":transform-job-arn is required")
    :type (common-lisp:or transform-job-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-transform-job-response
                    'make-create-transform-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-transform-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-transform-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-job-arn))
      (common-lisp:list
       (common-lisp:cons "TransformJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-transform-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-trial-component-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-trial-component-request-"))
   (trial-component-name
    (common-lisp:error ":trial-component-name is required") :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or trial-component-status common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or trial-component-parameters common-lisp:null))
   (input-artifacts common-lisp:nil :type
    (common-lisp:or trial-component-artifacts common-lisp:null))
   (output-artifacts common-lisp:nil :type
    (common-lisp:or trial-component-artifacts common-lisp:null))
   (metadata-properties common-lisp:nil :type
    (common-lisp:or metadata-properties common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-trial-component-request
                    'make-create-trial-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-trial-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-trial-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trial-component-name))
      (common-lisp:list
       (common-lisp:cons "TrialComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-artifacts))
      (common-lisp:list
       (common-lisp:cons "InputArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-artifacts))
      (common-lisp:list
       (common-lisp:cons "OutputArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-properties))
      (common-lisp:list
       (common-lisp:cons "MetadataProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-trial-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-trial-component-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-trial-component-response-"))
   (trial-component-arn common-lisp:nil :type
    (common-lisp:or trial-component-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-trial-component-response
                    'make-create-trial-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-trial-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-trial-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-component-arn))
      (common-lisp:list
       (common-lisp:cons "TrialComponentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-trial-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-trial-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-trial-request-"))
   (trial-name (common-lisp:error ":trial-name is required") :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (experiment-name (common-lisp:error ":experiment-name is required") :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (metadata-properties common-lisp:nil :type
    (common-lisp:or metadata-properties common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-trial-request 'make-create-trial-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-trial-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-trial-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-name))
      (common-lisp:list
       (common-lisp:cons "TrialName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-name))
      (common-lisp:list
       (common-lisp:cons "ExperimentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-properties))
      (common-lisp:list
       (common-lisp:cons "MetadataProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-trial-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-trial-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-trial-response-"))
   (trial-arn common-lisp:nil :type
    (common-lisp:or trial-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-trial-response 'make-create-trial-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-trial-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-trial-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-arn))
      (common-lisp:list
       (common-lisp:cons "TrialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-trial-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-user-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-user-profile-request-"))
   (domain-id (common-lisp:error ":domain-id is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (user-profile-name (common-lisp:error ":user-profile-name is required")
    :type (common-lisp:or user-profile-name common-lisp:null))
   (single-sign-on-user-identifier common-lisp:nil :type
    (common-lisp:or single-sign-on-user-identifier common-lisp:null))
   (single-sign-on-user-value common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (user-settings common-lisp:nil :type
    (common-lisp:or user-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-user-profile-request
                    'make-create-user-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-profile-name))
      (common-lisp:list
       (common-lisp:cons "UserProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'single-sign-on-user-identifier))
      (common-lisp:list
       (common-lisp:cons "SingleSignOnUserIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'single-sign-on-user-value))
      (common-lisp:list
       (common-lisp:cons "SingleSignOnUserValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-settings))
      (common-lisp:list
       (common-lisp:cons "UserSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-user-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-user-profile-response-"))
   (user-profile-arn common-lisp:nil :type
    (common-lisp:or user-profile-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-user-profile-response
                    'make-create-user-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-profile-arn))
      (common-lisp:list
       (common-lisp:cons "UserProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-user-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-workforce-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-workforce-request-"))
   (cognito-config common-lisp:nil :type
    (common-lisp:or cognito-config common-lisp:null))
   (oidc-config common-lisp:nil :type
    (common-lisp:or oidc-config common-lisp:null))
   (source-ip-config common-lisp:nil :type
    (common-lisp:or source-ip-config common-lisp:null))
   (workforce-name (common-lisp:error ":workforce-name is required") :type
    (common-lisp:or workforce-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (workforce-vpc-config common-lisp:nil :type
    (common-lisp:or workforce-vpc-config-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-workforce-request 'make-create-workforce-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workforce-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workforce-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cognito-config))
      (common-lisp:list
       (common-lisp:cons "CognitoConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oidc-config))
      (common-lisp:list
       (common-lisp:cons "OidcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ip-config))
      (common-lisp:list
       (common-lisp:cons "SourceIpConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workforce-name))
      (common-lisp:list
       (common-lisp:cons "WorkforceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workforce-vpc-config))
      (common-lisp:list
       (common-lisp:cons "WorkforceVpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workforce-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-workforce-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-workforce-response-"))
   (workforce-arn (common-lisp:error ":workforce-arn is required") :type
    (common-lisp:or workforce-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-workforce-response
                    'make-create-workforce-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workforce-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workforce-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workforce-arn))
      (common-lisp:list
       (common-lisp:cons "WorkforceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workforce-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-workteam-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-workteam-request-"))
   (workteam-name (common-lisp:error ":workteam-name is required") :type
    (common-lisp:or workteam-name common-lisp:null))
   (workforce-name common-lisp:nil :type
    (common-lisp:or workforce-name common-lisp:null))
   (member-definitions (common-lisp:error ":member-definitions is required")
    :type (common-lisp:or member-definitions common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or string200 common-lisp:null))
   (notification-configuration common-lisp:nil :type
    (common-lisp:or notification-configuration common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-workteam-request 'make-create-workteam-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workteam-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workteam-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workteam-name))
      (common-lisp:list
       (common-lisp:cons "WorkteamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workforce-name))
      (common-lisp:list
       (common-lisp:cons "WorkforceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-definitions))
      (common-lisp:list
       (common-lisp:cons "MemberDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-configuration))
      (common-lisp:list
       (common-lisp:cons "NotificationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workteam-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-workteam-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-workteam-response-"))
   (workteam-arn common-lisp:nil :type
    (common-lisp:or workteam-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-workteam-response 'make-create-workteam-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-workteam-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-workteam-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workteam-arn))
      (common-lisp:list
       (common-lisp:cons "WorkteamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-workteam-response))
   common-lisp:nil))
(common-lisp:deftype creation-time () 'common-lisp:string)
(common-lisp:deftype csv-content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype csv-content-types ()
   '(trivial-types:proper-list csv-content-type))
 (common-lisp:defun |make-csv-content-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list csv-content-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-image (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-image-"))
   (image-name (common-lisp:error ":image-name is required") :type
    (common-lisp:or image-name common-lisp:null))
   (image-version-number common-lisp:nil :type
    (common-lisp:or image-version-number common-lisp:null))
   (app-image-config-name
    (common-lisp:error ":app-image-config-name is required") :type
    (common-lisp:or app-image-config-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'custom-image 'make-custom-image))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-image))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-image))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-name))
      (common-lisp:list
       (common-lisp:cons "ImageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-version-number))
      (common-lisp:list
       (common-lisp:cons "ImageVersionNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-image-config-name))
      (common-lisp:list
       (common-lisp:cons "AppImageConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-image))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype custom-images ()
   '(trivial-types:proper-list custom-image))
 (common-lisp:defun |make-custom-images|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-image))
   aws-sdk/generator/shape::members))
(common-lisp:deftype customer-metadata-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype customer-metadata-key-list ()
   '(trivial-types:proper-list customer-metadata-key))
 (common-lisp:defun |make-customer-metadata-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list customer-metadata-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype customer-metadata-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-customer-metadata-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype customer-metadata-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-capture-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-capture-config-"))
   (enable-capture common-lisp:nil :type
    (common-lisp:or enable-capture common-lisp:null))
   (initial-sampling-percentage
    (common-lisp:error ":initial-sampling-percentage is required") :type
    (common-lisp:or sampling-percentage common-lisp:null))
   (destination-s3uri (common-lisp:error ":destination-s3uri is required")
    :type (common-lisp:or destination-s3uri common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (capture-options (common-lisp:error ":capture-options is required") :type
    (common-lisp:or capture-option-list common-lisp:null))
   (capture-content-type-header common-lisp:nil :type
    (common-lisp:or capture-content-type-header common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-capture-config 'make-data-capture-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-capture-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-capture-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-capture))
      (common-lisp:list
       (common-lisp:cons "EnableCapture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-sampling-percentage))
      (common-lisp:list
       (common-lisp:cons "InitialSamplingPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-s3uri))
      (common-lisp:list
       (common-lisp:cons "DestinationS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capture-options))
      (common-lisp:list
       (common-lisp:cons "CaptureOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capture-content-type-header))
      (common-lisp:list
       (common-lisp:cons "CaptureContentTypeHeader"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-capture-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-capture-config-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-capture-config-summary-"))
   (enable-capture (common-lisp:error ":enable-capture is required") :type
    (common-lisp:or enable-capture common-lisp:null))
   (capture-status (common-lisp:error ":capture-status is required") :type
    (common-lisp:or capture-status common-lisp:null))
   (current-sampling-percentage
    (common-lisp:error ":current-sampling-percentage is required") :type
    (common-lisp:or sampling-percentage common-lisp:null))
   (destination-s3uri (common-lisp:error ":destination-s3uri is required")
    :type (common-lisp:or destination-s3uri common-lisp:null))
   (kms-key-id (common-lisp:error ":kms-key-id is required") :type
    (common-lisp:or kms-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-capture-config-summary
                    'make-data-capture-config-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-capture-config-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-capture-config-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-capture))
      (common-lisp:list
       (common-lisp:cons "EnableCapture"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capture-status))
      (common-lisp:list
       (common-lisp:cons "CaptureStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-sampling-percentage))
      (common-lisp:list
       (common-lisp:cons "CurrentSamplingPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-s3uri))
      (common-lisp:list
       (common-lisp:cons "DestinationS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-capture-config-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-catalog-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-catalog-config-"))
   (table-name (common-lisp:error ":table-name is required") :type
    (common-lisp:or table-name common-lisp:null))
   (catalog (common-lisp:error ":catalog is required") :type
    (common-lisp:or catalog common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or database common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-catalog-config 'make-data-catalog-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-catalog-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-catalog-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-name))
      (common-lisp:list
       (common-lisp:cons "TableName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog))
      (common-lisp:list
       (common-lisp:cons "Catalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-catalog-config))
   common-lisp:nil))
(common-lisp:deftype data-distribution-type () 'common-lisp:string)
(common-lisp:deftype data-exploration-notebook-location () 'common-lisp:string)
(common-lisp:deftype data-input-config () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-processing (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-processing-"))
   (input-filter common-lisp:nil :type
    (common-lisp:or json-path common-lisp:null))
   (output-filter common-lisp:nil :type
    (common-lisp:or json-path common-lisp:null))
   (join-source common-lisp:nil :type
    (common-lisp:or join-source common-lisp:null)))
 (common-lisp:export (common-lisp:list 'data-processing 'make-data-processing))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-processing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-processing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-filter))
      (common-lisp:list
       (common-lisp:cons "InputFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-filter))
      (common-lisp:list
       (common-lisp:cons "OutputFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'join-source))
      (common-lisp:list
       (common-lisp:cons "JoinSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-processing))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-quality-app-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-quality-app-specification-"))
   (image-uri (common-lisp:error ":image-uri is required") :type
    (common-lisp:or image-uri common-lisp:null))
   (container-entrypoint common-lisp:nil :type
    (common-lisp:or container-entrypoint common-lisp:null))
   (container-arguments common-lisp:nil :type
    (common-lisp:or monitoring-container-arguments common-lisp:null))
   (record-preprocessor-source-uri common-lisp:nil :type
    (common-lisp:or s3uri common-lisp:null))
   (post-analytics-processor-source-uri common-lisp:nil :type
    (common-lisp:or s3uri common-lisp:null))
   (environment common-lisp:nil :type
    (common-lisp:or monitoring-environment-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-quality-app-specification
                    'make-data-quality-app-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-app-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-app-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-uri))
      (common-lisp:list
       (common-lisp:cons "ImageUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-entrypoint))
      (common-lisp:list
       (common-lisp:cons "ContainerEntrypoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-arguments))
      (common-lisp:list
       (common-lisp:cons "ContainerArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'record-preprocessor-source-uri))
      (common-lisp:list
       (common-lisp:cons "RecordPreprocessorSourceUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-analytics-processor-source-uri))
      (common-lisp:list
       (common-lisp:cons "PostAnalyticsProcessorSourceUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-app-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-quality-baseline-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-quality-baseline-config-"))
   (baselining-job-name common-lisp:nil :type
    (common-lisp:or processing-job-name common-lisp:null))
   (constraints-resource common-lisp:nil :type
    (common-lisp:or monitoring-constraints-resource common-lisp:null))
   (statistics-resource common-lisp:nil :type
    (common-lisp:or monitoring-statistics-resource common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-quality-baseline-config
                    'make-data-quality-baseline-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-baseline-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-baseline-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baselining-job-name))
      (common-lisp:list
       (common-lisp:cons "BaseliningJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'constraints-resource))
      (common-lisp:list
       (common-lisp:cons "ConstraintsResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics-resource))
      (common-lisp:list
       (common-lisp:cons "StatisticsResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-baseline-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-quality-job-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-quality-job-input-"))
   (endpoint-input common-lisp:nil :type
    (common-lisp:or endpoint-input common-lisp:null))
   (batch-transform-input common-lisp:nil :type
    (common-lisp:or batch-transform-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-quality-job-input 'make-data-quality-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-input))
      (common-lisp:list
       (common-lisp:cons "EndpointInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-transform-input))
      (common-lisp:list
       (common-lisp:cons "BatchTransformInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-quality-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-source-"))
   (s3data-source common-lisp:nil :type
    (common-lisp:or s3data-source common-lisp:null))
   (file-system-data-source common-lisp:nil :type
    (common-lisp:or file-system-data-source common-lisp:null)))
 (common-lisp:export (common-lisp:list 'data-source 'make-data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3data-source))
      (common-lisp:list
       (common-lisp:cons "S3DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-system-data-source))
      (common-lisp:list
       (common-lisp:cons "FileSystemDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-source))
   common-lisp:nil))
(common-lisp:deftype database () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (dataset-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-dataset-definition-"))
   (athena-dataset-definition common-lisp:nil :type
    (common-lisp:or athena-dataset-definition common-lisp:null))
   (redshift-dataset-definition common-lisp:nil :type
    (common-lisp:or redshift-dataset-definition common-lisp:null))
   (local-path common-lisp:nil :type
    (common-lisp:or processing-local-path common-lisp:null))
   (data-distribution-type common-lisp:nil :type
    (common-lisp:or data-distribution-type common-lisp:null))
   (input-mode common-lisp:nil :type
    (common-lisp:or input-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dataset-definition 'make-dataset-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dataset-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dataset-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'athena-dataset-definition))
      (common-lisp:list
       (common-lisp:cons "AthenaDatasetDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'redshift-dataset-definition))
      (common-lisp:list
       (common-lisp:cons "RedshiftDatasetDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-path))
      (common-lisp:list
       (common-lisp:cons "LocalPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-distribution-type))
      (common-lisp:list
       (common-lisp:cons "DataDistributionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-mode))
      (common-lisp:list
       (common-lisp:cons "InputMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dataset-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (debug-hook-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-debug-hook-config-"))
   (local-path common-lisp:nil :type
    (common-lisp:or directory-path common-lisp:null))
   (s3output-path (common-lisp:error ":s3output-path is required") :type
    (common-lisp:or s3uri common-lisp:null))
   (hook-parameters common-lisp:nil :type
    (common-lisp:or hook-parameters common-lisp:null))
   (collection-configurations common-lisp:nil :type
    (common-lisp:or collection-configurations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'debug-hook-config 'make-debug-hook-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input debug-hook-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input debug-hook-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-path))
      (common-lisp:list
       (common-lisp:cons "LocalPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3output-path))
      (common-lisp:list
       (common-lisp:cons "S3OutputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hook-parameters))
      (common-lisp:list
       (common-lisp:cons "HookParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'collection-configurations))
      (common-lisp:list
       (common-lisp:cons "CollectionConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input debug-hook-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (debug-rule-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-debug-rule-configuration-"))
   (rule-configuration-name
    (common-lisp:error ":rule-configuration-name is required") :type
    (common-lisp:or rule-configuration-name common-lisp:null))
   (local-path common-lisp:nil :type
    (common-lisp:or directory-path common-lisp:null))
   (s3output-path common-lisp:nil :type
    (common-lisp:or s3uri common-lisp:null))
   (rule-evaluator-image
    (common-lisp:error ":rule-evaluator-image is required") :type
    (common-lisp:or algorithm-image common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or processing-instance-type common-lisp:null))
   (volume-size-in-gb common-lisp:nil :type
    (common-lisp:or optional-volume-size-in-gb common-lisp:null))
   (rule-parameters common-lisp:nil :type
    (common-lisp:or rule-parameters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'debug-rule-configuration 'make-debug-rule-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          debug-rule-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          debug-rule-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rule-configuration-name))
      (common-lisp:list
       (common-lisp:cons "RuleConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-path))
      (common-lisp:list
       (common-lisp:cons "LocalPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3output-path))
      (common-lisp:list
       (common-lisp:cons "S3OutputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rule-evaluator-image))
      (common-lisp:list
       (common-lisp:cons "RuleEvaluatorImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "VolumeSizeInGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-parameters))
      (common-lisp:list
       (common-lisp:cons "RuleParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          debug-rule-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype debug-rule-configurations ()
   '(trivial-types:proper-list debug-rule-configuration))
 (common-lisp:defun |make-debug-rule-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            debug-rule-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (debug-rule-evaluation-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-debug-rule-evaluation-status-"))
   (rule-configuration-name common-lisp:nil :type
    (common-lisp:or rule-configuration-name common-lisp:null))
   (rule-evaluation-job-arn common-lisp:nil :type
    (common-lisp:or processing-job-arn common-lisp:null))
   (rule-evaluation-status common-lisp:nil :type
    (common-lisp:or rule-evaluation-status common-lisp:null))
   (status-details common-lisp:nil :type
    (common-lisp:or status-details common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'debug-rule-evaluation-status
                    'make-debug-rule-evaluation-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          debug-rule-evaluation-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          debug-rule-evaluation-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rule-configuration-name))
      (common-lisp:list
       (common-lisp:cons "RuleConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rule-evaluation-job-arn))
      (common-lisp:list
       (common-lisp:cons "RuleEvaluationJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rule-evaluation-status))
      (common-lisp:list
       (common-lisp:cons "RuleEvaluationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-details))
      (common-lisp:list
       (common-lisp:cons "StatusDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          debug-rule-evaluation-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype debug-rule-evaluation-statuses ()
   '(trivial-types:proper-list debug-rule-evaluation-status))
 (common-lisp:defun |make-debug-rule-evaluation-statuses|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            debug-rule-evaluation-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype default-gid () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (default-space-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-default-space-settings-"))
   (execution-role common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (security-groups common-lisp:nil :type
    (common-lisp:or security-group-ids common-lisp:null))
   (jupyter-server-app-settings common-lisp:nil :type
    (common-lisp:or jupyter-server-app-settings common-lisp:null))
   (kernel-gateway-app-settings common-lisp:nil :type
    (common-lisp:or kernel-gateway-app-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'default-space-settings 'make-default-space-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          default-space-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          default-space-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role))
      (common-lisp:list
       (common-lisp:cons "ExecutionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'jupyter-server-app-settings))
      (common-lisp:list
       (common-lisp:cons "JupyterServerAppSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kernel-gateway-app-settings))
      (common-lisp:list
       (common-lisp:cons "KernelGatewayAppSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          default-space-settings))
   common-lisp:nil))
(common-lisp:deftype default-uid () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-action-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-action-request-"))
   (action-name (common-lisp:error ":action-name is required") :type
    (common-lisp:or experiment-entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-action-request 'make-delete-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "ActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-action-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-action-response-"))
   (action-arn common-lisp:nil :type
    (common-lisp:or action-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-action-response 'make-delete-action-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-action-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-arn))
      (common-lisp:list
       (common-lisp:cons "ActionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-algorithm-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-algorithm-input-"))
   (algorithm-name (common-lisp:error ":algorithm-name is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-algorithm-input 'make-delete-algorithm-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-algorithm-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-algorithm-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm-name))
      (common-lisp:list
       (common-lisp:cons "AlgorithmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-algorithm-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-app-image-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-app-image-config-request-"))
   (app-image-config-name
    (common-lisp:error ":app-image-config-name is required") :type
    (common-lisp:or app-image-config-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-app-image-config-request
                    'make-delete-app-image-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-image-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-image-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-image-config-name))
      (common-lisp:list
       (common-lisp:cons "AppImageConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-image-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-app-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-app-request-"))
   (domain-id (common-lisp:error ":domain-id is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (user-profile-name common-lisp:nil :type
    (common-lisp:or user-profile-name common-lisp:null))
   (app-type (common-lisp:error ":app-type is required") :type
    (common-lisp:or app-type common-lisp:null))
   (app-name (common-lisp:error ":app-name is required") :type
    (common-lisp:or app-name common-lisp:null))
   (space-name common-lisp:nil :type
    (common-lisp:or space-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-app-request 'make-delete-app-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-app-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-app-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-profile-name))
      (common-lisp:list
       (common-lisp:cons "UserProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-type))
      (common-lisp:list
       (common-lisp:cons "AppType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-name))
      (common-lisp:list
       (common-lisp:cons "AppName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "SpaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-app-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-artifact-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-artifact-request-"))
   (artifact-arn common-lisp:nil :type
    (common-lisp:or artifact-arn common-lisp:null))
   (source common-lisp:nil :type
    (common-lisp:or artifact-source common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-artifact-request 'make-delete-artifact-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-artifact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-artifact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-arn))
      (common-lisp:list
       (common-lisp:cons "ArtifactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-artifact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-artifact-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-artifact-response-"))
   (artifact-arn common-lisp:nil :type
    (common-lisp:or artifact-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-artifact-response 'make-delete-artifact-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-artifact-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-artifact-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-arn))
      (common-lisp:list
       (common-lisp:cons "ArtifactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-artifact-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-association-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-association-request-"))
   (source-arn (common-lisp:error ":source-arn is required") :type
    (common-lisp:or association-entity-arn common-lisp:null))
   (destination-arn (common-lisp:error ":destination-arn is required") :type
    (common-lisp:or association-entity-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-association-request
                    'make-delete-association-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-association-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-association-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-arn))
      (common-lisp:list
       (common-lisp:cons "DestinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-association-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-association-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-association-response-"))
   (source-arn common-lisp:nil :type
    (common-lisp:or association-entity-arn common-lisp:null))
   (destination-arn common-lisp:nil :type
    (common-lisp:or association-entity-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-association-response
                    'make-delete-association-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-association-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-association-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-arn))
      (common-lisp:list
       (common-lisp:cons "DestinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-association-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-code-repository-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-code-repository-input-"))
   (code-repository-name
    (common-lisp:error ":code-repository-name is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-code-repository-input
                    'make-delete-code-repository-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-code-repository-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-code-repository-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-repository-name))
      (common-lisp:list
       (common-lisp:cons "CodeRepositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-code-repository-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-context-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-context-request-"))
   (context-name (common-lisp:error ":context-name is required") :type
    (common-lisp:or experiment-entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-context-request 'make-delete-context-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-context-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-context-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-name))
      (common-lisp:list
       (common-lisp:cons "ContextName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-context-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-context-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-context-response-"))
   (context-arn common-lisp:nil :type
    (common-lisp:or context-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-context-response 'make-delete-context-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-context-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-context-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-arn))
      (common-lisp:list
       (common-lisp:cons "ContextArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-context-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-data-quality-job-definition-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-data-quality-job-definition-request-"))
   (job-definition-name (common-lisp:error ":job-definition-name is required")
    :type (common-lisp:or monitoring-job-definition-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-data-quality-job-definition-request
                    'make-delete-data-quality-job-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-quality-job-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-quality-job-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-definition-name))
      (common-lisp:list
       (common-lisp:cons "JobDefinitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-data-quality-job-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-device-fleet-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-device-fleet-request-"))
   (device-fleet-name (common-lisp:error ":device-fleet-name is required")
    :type (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-device-fleet-request
                    'make-delete-device-fleet-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-fleet-name))
      (common-lisp:list
       (common-lisp:cons "DeviceFleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-domain-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-domain-request-"))
   (domain-id (common-lisp:error ":domain-id is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (retention-policy common-lisp:nil :type
    (common-lisp:or retention-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-domain-request 'make-delete-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-policy))
      (common-lisp:list
       (common-lisp:cons "RetentionPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-edge-deployment-plan-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-edge-deployment-plan-request-"))
   (edge-deployment-plan-name
    (common-lisp:error ":edge-deployment-plan-name is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-edge-deployment-plan-request
                    'make-delete-edge-deployment-plan-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-edge-deployment-plan-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-edge-deployment-plan-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-deployment-plan-name))
      (common-lisp:list
       (common-lisp:cons "EdgeDeploymentPlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-edge-deployment-plan-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-edge-deployment-stage-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-edge-deployment-stage-request-"))
   (edge-deployment-plan-name
    (common-lisp:error ":edge-deployment-plan-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (stage-name (common-lisp:error ":stage-name is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-edge-deployment-stage-request
                    'make-delete-edge-deployment-stage-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-edge-deployment-stage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-edge-deployment-stage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-deployment-plan-name))
      (common-lisp:list
       (common-lisp:cons "EdgeDeploymentPlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-name))
      (common-lisp:list
       (common-lisp:cons "StageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-edge-deployment-stage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-endpoint-config-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-endpoint-config-input-"))
   (endpoint-config-name
    (common-lisp:error ":endpoint-config-name is required") :type
    (common-lisp:or endpoint-config-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-endpoint-config-input
                    'make-delete-endpoint-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-config-name))
      (common-lisp:list
       (common-lisp:cons "EndpointConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-endpoint-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-endpoint-input-"))
   (endpoint-name (common-lisp:error ":endpoint-name is required") :type
    (common-lisp:or endpoint-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-endpoint-input 'make-delete-endpoint-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-endpoint-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-experiment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-experiment-request-"))
   (experiment-name (common-lisp:error ":experiment-name is required") :type
    (common-lisp:or experiment-entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-experiment-request
                    'make-delete-experiment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-experiment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-experiment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-name))
      (common-lisp:list
       (common-lisp:cons "ExperimentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-experiment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-experiment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-experiment-response-"))
   (experiment-arn common-lisp:nil :type
    (common-lisp:or experiment-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-experiment-response
                    'make-delete-experiment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-experiment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-experiment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-arn))
      (common-lisp:list
       (common-lisp:cons "ExperimentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-experiment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-feature-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-feature-group-request-"))
   (feature-group-name (common-lisp:error ":feature-group-name is required")
    :type (common-lisp:or feature-group-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-feature-group-request
                    'make-delete-feature-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-feature-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-feature-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-group-name))
      (common-lisp:list
       (common-lisp:cons "FeatureGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-feature-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-flow-definition-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-flow-definition-request-"))
   (flow-definition-name
    (common-lisp:error ":flow-definition-name is required") :type
    (common-lisp:or flow-definition-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-flow-definition-request
                    'make-delete-flow-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-flow-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-flow-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flow-definition-name))
      (common-lisp:list
       (common-lisp:cons "FlowDefinitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-flow-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-flow-definition-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-flow-definition-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-flow-definition-response
                    'make-delete-flow-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-flow-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-flow-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-flow-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-hub-content-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-hub-content-request-"))
   (hub-name (common-lisp:error ":hub-name is required") :type
    (common-lisp:or hub-name common-lisp:null))
   (hub-content-type (common-lisp:error ":hub-content-type is required") :type
    (common-lisp:or hub-content-type common-lisp:null))
   (hub-content-name (common-lisp:error ":hub-content-name is required") :type
    (common-lisp:or hub-content-name common-lisp:null))
   (hub-content-version (common-lisp:error ":hub-content-version is required")
    :type (common-lisp:or hub-content-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-hub-content-request
                    'make-delete-hub-content-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-hub-content-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-hub-content-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-name))
      (common-lisp:list
       (common-lisp:cons "HubName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-content-type))
      (common-lisp:list
       (common-lisp:cons "HubContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-content-name))
      (common-lisp:list
       (common-lisp:cons "HubContentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-content-version))
      (common-lisp:list
       (common-lisp:cons "HubContentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-hub-content-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-hub-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-hub-request-"))
   (hub-name (common-lisp:error ":hub-name is required") :type
    (common-lisp:or hub-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-hub-request 'make-delete-hub-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-hub-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-hub-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-name))
      (common-lisp:list
       (common-lisp:cons "HubName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-hub-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-human-task-ui-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-human-task-ui-request-"))
   (human-task-ui-name (common-lisp:error ":human-task-ui-name is required")
    :type (common-lisp:or human-task-ui-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-human-task-ui-request
                    'make-delete-human-task-ui-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-human-task-ui-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-human-task-ui-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'human-task-ui-name))
      (common-lisp:list
       (common-lisp:cons "HumanTaskUiName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-human-task-ui-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-human-task-ui-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-human-task-ui-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-human-task-ui-response
                    'make-delete-human-task-ui-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-human-task-ui-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-human-task-ui-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-human-task-ui-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-image-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-image-request-"))
   (image-name (common-lisp:error ":image-name is required") :type
    (common-lisp:or image-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-image-request 'make-delete-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-name))
      (common-lisp:list
       (common-lisp:cons "ImageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-image-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-image-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-image-response 'make-delete-image-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-image-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-image-version-request-"))
   (image-name (common-lisp:error ":image-name is required") :type
    (common-lisp:or image-name common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or image-version-number common-lisp:null))
   (alias common-lisp:nil :type
    (common-lisp:or sage-maker-image-version-alias common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-image-version-request
                    'make-delete-image-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-name))
      (common-lisp:list
       (common-lisp:cons "ImageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-image-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-image-version-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-image-version-response
                    'make-delete-image-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-image-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-inference-experiment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-inference-experiment-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or inference-experiment-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-inference-experiment-request
                    'make-delete-inference-experiment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-inference-experiment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-inference-experiment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-inference-experiment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-inference-experiment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-inference-experiment-response-"))
   (inference-experiment-arn
    (common-lisp:error ":inference-experiment-arn is required") :type
    (common-lisp:or inference-experiment-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-inference-experiment-response
                    'make-delete-inference-experiment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-inference-experiment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-inference-experiment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-experiment-arn))
      (common-lisp:list
       (common-lisp:cons "InferenceExperimentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-inference-experiment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-model-bias-job-definition-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-model-bias-job-definition-request-"))
   (job-definition-name (common-lisp:error ":job-definition-name is required")
    :type (common-lisp:or monitoring-job-definition-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-model-bias-job-definition-request
                    'make-delete-model-bias-job-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-bias-job-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-bias-job-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-definition-name))
      (common-lisp:list
       (common-lisp:cons "JobDefinitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-bias-job-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-model-card-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-model-card-request-"))
   (model-card-name (common-lisp:error ":model-card-name is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-model-card-request
                    'make-delete-model-card-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-card-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-card-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-name))
      (common-lisp:list
       (common-lisp:cons "ModelCardName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-card-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-model-explainability-job-definition-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-model-explainability-job-definition-request-"))
   (job-definition-name (common-lisp:error ":job-definition-name is required")
    :type (common-lisp:or monitoring-job-definition-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-model-explainability-job-definition-request
                    'make-delete-model-explainability-job-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-explainability-job-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-explainability-job-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-definition-name))
      (common-lisp:list
       (common-lisp:cons "JobDefinitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-explainability-job-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-model-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-model-input-"))
   (model-name (common-lisp:error ":model-name is required") :type
    (common-lisp:or model-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-model-input 'make-delete-model-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-model-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-model-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-model-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-model-package-group-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-model-package-group-input-"))
   (model-package-group-name
    (common-lisp:error ":model-package-group-name is required") :type
    (common-lisp:or arn-or-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-model-package-group-input
                    'make-delete-model-package-group-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-package-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-package-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-name))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-package-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-model-package-group-policy-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-model-package-group-policy-input-"))
   (model-package-group-name
    (common-lisp:error ":model-package-group-name is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-model-package-group-policy-input
                    'make-delete-model-package-group-policy-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-package-group-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-package-group-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-name))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-package-group-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-model-package-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-model-package-input-"))
   (model-package-name (common-lisp:error ":model-package-name is required")
    :type (common-lisp:or versioned-arn-or-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-model-package-input
                    'make-delete-model-package-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-package-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-package-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-package-name))
      (common-lisp:list
       (common-lisp:cons "ModelPackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-package-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-model-quality-job-definition-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-model-quality-job-definition-request-"))
   (job-definition-name (common-lisp:error ":job-definition-name is required")
    :type (common-lisp:or monitoring-job-definition-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-model-quality-job-definition-request
                    'make-delete-model-quality-job-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-quality-job-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-quality-job-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-definition-name))
      (common-lisp:list
       (common-lisp:cons "JobDefinitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-model-quality-job-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-monitoring-schedule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-monitoring-schedule-request-"))
   (monitoring-schedule-name
    (common-lisp:error ":monitoring-schedule-name is required") :type
    (common-lisp:or monitoring-schedule-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-monitoring-schedule-request
                    'make-delete-monitoring-schedule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-monitoring-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-monitoring-schedule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-name))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-monitoring-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-notebook-instance-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-notebook-instance-input-"))
   (notebook-instance-name
    (common-lisp:error ":notebook-instance-name is required") :type
    (common-lisp:or notebook-instance-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-notebook-instance-input
                    'make-delete-notebook-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-notebook-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-notebook-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-name))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-notebook-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-notebook-instance-lifecycle-config-input (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-delete-notebook-instance-lifecycle-config-input-"))
   (notebook-instance-lifecycle-config-name
    (common-lisp:error ":notebook-instance-lifecycle-config-name is required")
    :type
    (common-lisp:or notebook-instance-lifecycle-config-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-notebook-instance-lifecycle-config-input
                    'make-delete-notebook-instance-lifecycle-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-notebook-instance-lifecycle-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-notebook-instance-lifecycle-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-lifecycle-config-name))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceLifecycleConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-notebook-instance-lifecycle-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-pipeline-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-pipeline-request-"))
   (pipeline-name (common-lisp:error ":pipeline-name is required") :type
    (common-lisp:or pipeline-name common-lisp:null))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or idempotency-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-pipeline-request 'make-delete-pipeline-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-pipeline-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "PipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-pipeline-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-pipeline-response-"))
   (pipeline-arn common-lisp:nil :type
    (common-lisp:or pipeline-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-pipeline-response 'make-delete-pipeline-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "PipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-project-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-project-input-"))
   (project-name (common-lisp:error ":project-name is required") :type
    (common-lisp:or project-entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-project-input 'make-delete-project-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-project-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-project-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "ProjectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-project-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-space-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-space-request-"))
   (domain-id (common-lisp:error ":domain-id is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (space-name (common-lisp:error ":space-name is required") :type
    (common-lisp:or space-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-space-request 'make-delete-space-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-space-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-space-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "SpaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-space-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-studio-lifecycle-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-studio-lifecycle-config-request-"))
   (studio-lifecycle-config-name
    (common-lisp:error ":studio-lifecycle-config-name is required") :type
    (common-lisp:or studio-lifecycle-config-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-studio-lifecycle-config-request
                    'make-delete-studio-lifecycle-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-lifecycle-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-lifecycle-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-lifecycle-config-name))
      (common-lisp:list
       (common-lisp:cons "StudioLifecycleConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-studio-lifecycle-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-tags-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-tags-input-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-tags-input 'make-delete-tags-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-tags-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-tags-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-tags-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-tags-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-tags-output-")))
 (common-lisp:export
  (common-lisp:list 'delete-tags-output 'make-delete-tags-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-tags-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-trial-component-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-trial-component-request-"))
   (trial-component-name
    (common-lisp:error ":trial-component-name is required") :type
    (common-lisp:or experiment-entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-trial-component-request
                    'make-delete-trial-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-trial-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-trial-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trial-component-name))
      (common-lisp:list
       (common-lisp:cons "TrialComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-trial-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-trial-component-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-trial-component-response-"))
   (trial-component-arn common-lisp:nil :type
    (common-lisp:or trial-component-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-trial-component-response
                    'make-delete-trial-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-trial-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-trial-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-component-arn))
      (common-lisp:list
       (common-lisp:cons "TrialComponentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-trial-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-trial-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-trial-request-"))
   (trial-name (common-lisp:error ":trial-name is required") :type
    (common-lisp:or experiment-entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-trial-request 'make-delete-trial-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-trial-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-trial-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-name))
      (common-lisp:list
       (common-lisp:cons "TrialName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-trial-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-trial-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-trial-response-"))
   (trial-arn common-lisp:nil :type
    (common-lisp:or trial-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-trial-response 'make-delete-trial-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-trial-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-trial-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-arn))
      (common-lisp:list
       (common-lisp:cons "TrialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-trial-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-user-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-user-profile-request-"))
   (domain-id (common-lisp:error ":domain-id is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (user-profile-name (common-lisp:error ":user-profile-name is required")
    :type (common-lisp:or user-profile-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-user-profile-request
                    'make-delete-user-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-profile-name))
      (common-lisp:list
       (common-lisp:cons "UserProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-workforce-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-workforce-request-"))
   (workforce-name (common-lisp:error ":workforce-name is required") :type
    (common-lisp:or workforce-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-workforce-request 'make-delete-workforce-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workforce-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workforce-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workforce-name))
      (common-lisp:list
       (common-lisp:cons "WorkforceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workforce-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-workforce-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-workforce-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-workforce-response
                    'make-delete-workforce-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workforce-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workforce-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workforce-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-workteam-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-workteam-request-"))
   (workteam-name (common-lisp:error ":workteam-name is required") :type
    (common-lisp:or workteam-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-workteam-request 'make-delete-workteam-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workteam-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workteam-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workteam-name))
      (common-lisp:list
       (common-lisp:cons "WorkteamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workteam-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-workteam-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-workteam-response-"))
   (success (common-lisp:error ":success is required") :type
    (common-lisp:or success common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-workteam-response 'make-delete-workteam-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-workteam-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-workteam-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success))
      (common-lisp:list
       (common-lisp:cons "Success"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-workteam-response))
   common-lisp:nil))
(common-lisp:deftype dependency-copy-path () 'common-lisp:string)
(common-lisp:deftype dependency-origin-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (deployed-image (:copier common-lisp:nil)
      (:conc-name "struct-shape-deployed-image-"))
   (specified-image common-lisp:nil :type
    (common-lisp:or container-image common-lisp:null))
   (resolved-image common-lisp:nil :type
    (common-lisp:or container-image common-lisp:null))
   (resolution-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'deployed-image 'make-deployed-image))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployed-image))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployed-image))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'specified-image))
      (common-lisp:list
       (common-lisp:cons "SpecifiedImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolved-image))
      (common-lisp:list
       (common-lisp:cons "ResolvedImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution-time))
      (common-lisp:list
       (common-lisp:cons "ResolutionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployed-image))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype deployed-images ()
   '(trivial-types:proper-list deployed-image))
 (common-lisp:defun |make-deployed-images|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployed-image))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (deployment-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-deployment-config-"))
   (blue-green-update-policy
    (common-lisp:error ":blue-green-update-policy is required") :type
    (common-lisp:or blue-green-update-policy common-lisp:null))
   (auto-rollback-configuration common-lisp:nil :type
    (common-lisp:or auto-rollback-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deployment-config 'make-deployment-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'blue-green-update-policy))
      (common-lisp:list
       (common-lisp:cons "BlueGreenUpdatePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-rollback-configuration))
      (common-lisp:list
       (common-lisp:cons "AutoRollbackConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deployment-stage (:copier common-lisp:nil)
      (:conc-name "struct-shape-deployment-stage-"))
   (stage-name (common-lisp:error ":stage-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (device-selection-config
    (common-lisp:error ":device-selection-config is required") :type
    (common-lisp:or device-selection-config common-lisp:null))
   (deployment-config common-lisp:nil :type
    (common-lisp:or edge-deployment-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deployment-stage 'make-deployment-stage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input deployment-stage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input deployment-stage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-name))
      (common-lisp:list
       (common-lisp:cons "StageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-selection-config))
      (common-lisp:list
       (common-lisp:cons "DeviceSelectionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-config))
      (common-lisp:list
       (common-lisp:cons "DeploymentConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input deployment-stage))
   common-lisp:nil))
(common-lisp:deftype deployment-stage-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype deployment-stage-status-summaries ()
   '(trivial-types:proper-list deployment-stage-status-summary))
 (common-lisp:defun |make-deployment-stage-status-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            deployment-stage-status-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (deployment-stage-status-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-deployment-stage-status-summary-"))
   (stage-name (common-lisp:error ":stage-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (device-selection-config
    (common-lisp:error ":device-selection-config is required") :type
    (common-lisp:or device-selection-config common-lisp:null))
   (deployment-config (common-lisp:error ":deployment-config is required")
    :type (common-lisp:or edge-deployment-config common-lisp:null))
   (deployment-status (common-lisp:error ":deployment-status is required")
    :type (common-lisp:or edge-deployment-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deployment-stage-status-summary
                    'make-deployment-stage-status-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deployment-stage-status-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deployment-stage-status-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-name))
      (common-lisp:list
       (common-lisp:cons "StageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-selection-config))
      (common-lisp:list
       (common-lisp:cons "DeviceSelectionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-config))
      (common-lisp:list
       (common-lisp:cons "DeploymentConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-status))
      (common-lisp:list
       (common-lisp:cons "DeploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deployment-stage-status-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype deployment-stages ()
   '(trivial-types:proper-list deployment-stage))
 (common-lisp:defun |make-deployment-stages|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list deployment-stage))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (deregister-devices-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-deregister-devices-request-"))
   (device-fleet-name (common-lisp:error ":device-fleet-name is required")
    :type (common-lisp:or entity-name common-lisp:null))
   (device-names (common-lisp:error ":device-names is required") :type
    (common-lisp:or device-names common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deregister-devices-request
                    'make-deregister-devices-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-devices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-devices-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-fleet-name))
      (common-lisp:list
       (common-lisp:cons "DeviceFleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-names))
      (common-lisp:list
       (common-lisp:cons "DeviceNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-devices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-action-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-action-request-"))
   (action-name (common-lisp:error ":action-name is required") :type
    (common-lisp:or experiment-entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-action-request 'make-describe-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "ActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-action-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-action-response-"))
   (action-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name-or-arn common-lisp:null))
   (action-arn common-lisp:nil :type
    (common-lisp:or action-arn common-lisp:null))
   (source common-lisp:nil :type
    (common-lisp:or action-source common-lisp:null))
   (action-type common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or experiment-description common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or action-status common-lisp:null))
   (properties common-lisp:nil :type
    (common-lisp:or lineage-entity-parameters common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (metadata-properties common-lisp:nil :type
    (common-lisp:or metadata-properties common-lisp:null))
   (lineage-group-arn common-lisp:nil :type
    (common-lisp:or lineage-group-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-action-response 'make-describe-action-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-action-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "ActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-arn))
      (common-lisp:list
       (common-lisp:cons "ActionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "ActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-properties))
      (common-lisp:list
       (common-lisp:cons "MetadataProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lineage-group-arn))
      (common-lisp:list
       (common-lisp:cons "LineageGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-algorithm-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-algorithm-input-"))
   (algorithm-name (common-lisp:error ":algorithm-name is required") :type
    (common-lisp:or arn-or-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-algorithm-input 'make-describe-algorithm-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-algorithm-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-algorithm-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm-name))
      (common-lisp:list
       (common-lisp:cons "AlgorithmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-algorithm-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-algorithm-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-algorithm-output-"))
   (algorithm-name (common-lisp:error ":algorithm-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (algorithm-arn (common-lisp:error ":algorithm-arn is required") :type
    (common-lisp:or algorithm-arn common-lisp:null))
   (algorithm-description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or creation-time common-lisp:null))
   (training-specification
    (common-lisp:error ":training-specification is required") :type
    (common-lisp:or training-specification common-lisp:null))
   (inference-specification common-lisp:nil :type
    (common-lisp:or inference-specification common-lisp:null))
   (validation-specification common-lisp:nil :type
    (common-lisp:or algorithm-validation-specification common-lisp:null))
   (algorithm-status (common-lisp:error ":algorithm-status is required") :type
    (common-lisp:or algorithm-status common-lisp:null))
   (algorithm-status-details
    (common-lisp:error ":algorithm-status-details is required") :type
    (common-lisp:or algorithm-status-details common-lisp:null))
   (product-id common-lisp:nil :type
    (common-lisp:or product-id common-lisp:null))
   (certify-for-marketplace common-lisp:nil :type
    (common-lisp:or certify-for-marketplace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-algorithm-output
                    'make-describe-algorithm-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-algorithm-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-algorithm-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm-name))
      (common-lisp:list
       (common-lisp:cons "AlgorithmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm-arn))
      (common-lisp:list
       (common-lisp:cons "AlgorithmArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'algorithm-description))
      (common-lisp:list
       (common-lisp:cons "AlgorithmDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-specification))
      (common-lisp:list
       (common-lisp:cons "TrainingSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-specification))
      (common-lisp:list
       (common-lisp:cons "InferenceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'validation-specification))
      (common-lisp:list
       (common-lisp:cons "ValidationSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm-status))
      (common-lisp:list
       (common-lisp:cons "AlgorithmStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'algorithm-status-details))
      (common-lisp:list
       (common-lisp:cons "AlgorithmStatusDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certify-for-marketplace))
      (common-lisp:list
       (common-lisp:cons "CertifyForMarketplace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-algorithm-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-app-image-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-app-image-config-request-"))
   (app-image-config-name
    (common-lisp:error ":app-image-config-name is required") :type
    (common-lisp:or app-image-config-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-app-image-config-request
                    'make-describe-app-image-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-image-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-image-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-image-config-name))
      (common-lisp:list
       (common-lisp:cons "AppImageConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-image-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-app-image-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-app-image-config-response-"))
   (app-image-config-arn common-lisp:nil :type
    (common-lisp:or app-image-config-arn common-lisp:null))
   (app-image-config-name common-lisp:nil :type
    (common-lisp:or app-image-config-name common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (kernel-gateway-image-config common-lisp:nil :type
    (common-lisp:or kernel-gateway-image-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-app-image-config-response
                    'make-describe-app-image-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-image-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-image-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-image-config-arn))
      (common-lisp:list
       (common-lisp:cons "AppImageConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-image-config-name))
      (common-lisp:list
       (common-lisp:cons "AppImageConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kernel-gateway-image-config))
      (common-lisp:list
       (common-lisp:cons "KernelGatewayImageConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-image-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-app-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-app-request-"))
   (domain-id (common-lisp:error ":domain-id is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (user-profile-name common-lisp:nil :type
    (common-lisp:or user-profile-name common-lisp:null))
   (app-type (common-lisp:error ":app-type is required") :type
    (common-lisp:or app-type common-lisp:null))
   (app-name (common-lisp:error ":app-name is required") :type
    (common-lisp:or app-name common-lisp:null))
   (space-name common-lisp:nil :type
    (common-lisp:or space-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-app-request 'make-describe-app-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-app-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-app-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-profile-name))
      (common-lisp:list
       (common-lisp:cons "UserProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-type))
      (common-lisp:list
       (common-lisp:cons "AppType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-name))
      (common-lisp:list
       (common-lisp:cons "AppName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "SpaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-app-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-app-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-app-response-"))
   (app-arn common-lisp:nil :type (common-lisp:or app-arn common-lisp:null))
   (app-type common-lisp:nil :type (common-lisp:or app-type common-lisp:null))
   (app-name common-lisp:nil :type (common-lisp:or app-name common-lisp:null))
   (domain-id common-lisp:nil :type
    (common-lisp:or domain-id common-lisp:null))
   (user-profile-name common-lisp:nil :type
    (common-lisp:or user-profile-name common-lisp:null))
   (status common-lisp:nil :type (common-lisp:or app-status common-lisp:null))
   (last-health-check-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-user-activity-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (resource-spec common-lisp:nil :type
    (common-lisp:or resource-spec common-lisp:null))
   (space-name common-lisp:nil :type
    (common-lisp:or space-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-app-response 'make-describe-app-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-arn))
      (common-lisp:list
       (common-lisp:cons "AppArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-type))
      (common-lisp:list
       (common-lisp:cons "AppType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-name))
      (common-lisp:list
       (common-lisp:cons "AppName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-profile-name))
      (common-lisp:list
       (common-lisp:cons "UserProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-health-check-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastHealthCheckTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-user-activity-timestamp))
      (common-lisp:list
       (common-lisp:cons "LastUserActivityTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-spec))
      (common-lisp:list
       (common-lisp:cons "ResourceSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "SpaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-app-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-artifact-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-artifact-request-"))
   (artifact-arn (common-lisp:error ":artifact-arn is required") :type
    (common-lisp:or artifact-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-artifact-request
                    'make-describe-artifact-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-artifact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-artifact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-arn))
      (common-lisp:list
       (common-lisp:cons "ArtifactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-artifact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-artifact-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-artifact-response-"))
   (artifact-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name-or-arn common-lisp:null))
   (artifact-arn common-lisp:nil :type
    (common-lisp:or artifact-arn common-lisp:null))
   (source common-lisp:nil :type
    (common-lisp:or artifact-source common-lisp:null))
   (artifact-type common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (properties common-lisp:nil :type
    (common-lisp:or lineage-entity-parameters common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (metadata-properties common-lisp:nil :type
    (common-lisp:or metadata-properties common-lisp:null))
   (lineage-group-arn common-lisp:nil :type
    (common-lisp:or lineage-group-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-artifact-response
                    'make-describe-artifact-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-artifact-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-artifact-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-name))
      (common-lisp:list
       (common-lisp:cons "ArtifactName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-arn))
      (common-lisp:list
       (common-lisp:cons "ArtifactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-type))
      (common-lisp:list
       (common-lisp:cons "ArtifactType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-properties))
      (common-lisp:list
       (common-lisp:cons "MetadataProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lineage-group-arn))
      (common-lisp:list
       (common-lisp:cons "LineageGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-artifact-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-auto-mljob-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-auto-mljob-request-"))
   (auto-mljob-name (common-lisp:error ":auto-mljob-name is required") :type
    (common-lisp:or auto-mljob-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-auto-mljob-request
                    'make-describe-auto-mljob-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-mljob-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-mljob-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mljob-name))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-mljob-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-auto-mljob-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-auto-mljob-response-"))
   (auto-mljob-name (common-lisp:error ":auto-mljob-name is required") :type
    (common-lisp:or auto-mljob-name common-lisp:null))
   (auto-mljob-arn (common-lisp:error ":auto-mljob-arn is required") :type
    (common-lisp:or auto-mljob-arn common-lisp:null))
   (input-data-config (common-lisp:error ":input-data-config is required")
    :type (common-lisp:or auto-mlinput-data-config common-lisp:null))
   (output-data-config (common-lisp:error ":output-data-config is required")
    :type (common-lisp:or auto-mloutput-data-config common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (auto-mljob-objective common-lisp:nil :type
    (common-lisp:or auto-mljob-objective common-lisp:null))
   (problem-type common-lisp:nil :type
    (common-lisp:or problem-type common-lisp:null))
   (auto-mljob-config common-lisp:nil :type
    (common-lisp:or auto-mljob-config common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or auto-mlfailure-reason common-lisp:null))
   (partial-failure-reasons common-lisp:nil :type
    (common-lisp:or auto-mlpartial-failure-reasons common-lisp:null))
   (best-candidate common-lisp:nil :type
    (common-lisp:or auto-mlcandidate common-lisp:null))
   (auto-mljob-status (common-lisp:error ":auto-mljob-status is required")
    :type (common-lisp:or auto-mljob-status common-lisp:null))
   (auto-mljob-secondary-status
    (common-lisp:error ":auto-mljob-secondary-status is required") :type
    (common-lisp:or auto-mljob-secondary-status common-lisp:null))
   (generate-candidate-definitions-only common-lisp:nil :type
    (common-lisp:or generate-candidate-definitions-only common-lisp:null))
   (auto-mljob-artifacts common-lisp:nil :type
    (common-lisp:or auto-mljob-artifacts common-lisp:null))
   (resolved-attributes common-lisp:nil :type
    (common-lisp:or resolved-attributes common-lisp:null))
   (model-deploy-config common-lisp:nil :type
    (common-lisp:or model-deploy-config common-lisp:null))
   (model-deploy-result common-lisp:nil :type
    (common-lisp:or model-deploy-result common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-auto-mljob-response
                    'make-describe-auto-mljob-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-mljob-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-mljob-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mljob-name))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mljob-arn))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "OutputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-mljob-objective))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobObjective"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'problem-type))
      (common-lisp:list
       (common-lisp:cons "ProblemType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mljob-config))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partial-failure-reasons))
      (common-lisp:list
       (common-lisp:cons "PartialFailureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'best-candidate))
      (common-lisp:list
       (common-lisp:cons "BestCandidate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mljob-status))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-mljob-secondary-status))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobSecondaryStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generate-candidate-definitions-only))
      (common-lisp:list
       (common-lisp:cons "GenerateCandidateDefinitionsOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-mljob-artifacts))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolved-attributes))
      (common-lisp:list
       (common-lisp:cons "ResolvedAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-deploy-config))
      (common-lisp:list
       (common-lisp:cons "ModelDeployConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-deploy-result))
      (common-lisp:list
       (common-lisp:cons "ModelDeployResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-mljob-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-auto-mljob-v2request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-auto-mljob-v2request-"))
   (auto-mljob-name (common-lisp:error ":auto-mljob-name is required") :type
    (common-lisp:or auto-mljob-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-auto-mljob-v2request
                    'make-describe-auto-mljob-v2request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-mljob-v2request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-mljob-v2request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mljob-name))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-mljob-v2request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-auto-mljob-v2response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-auto-mljob-v2response-"))
   (auto-mljob-name (common-lisp:error ":auto-mljob-name is required") :type
    (common-lisp:or auto-mljob-name common-lisp:null))
   (auto-mljob-arn (common-lisp:error ":auto-mljob-arn is required") :type
    (common-lisp:or auto-mljob-arn common-lisp:null))
   (auto-mljob-input-data-config
    (common-lisp:error ":auto-mljob-input-data-config is required") :type
    (common-lisp:or auto-mljob-input-data-config common-lisp:null))
   (output-data-config (common-lisp:error ":output-data-config is required")
    :type (common-lisp:or auto-mloutput-data-config common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (auto-mljob-objective common-lisp:nil :type
    (common-lisp:or auto-mljob-objective common-lisp:null))
   (auto-mlproblem-type-config common-lisp:nil :type
    (common-lisp:or auto-mlproblem-type-config common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or auto-mlfailure-reason common-lisp:null))
   (partial-failure-reasons common-lisp:nil :type
    (common-lisp:or auto-mlpartial-failure-reasons common-lisp:null))
   (best-candidate common-lisp:nil :type
    (common-lisp:or auto-mlcandidate common-lisp:null))
   (auto-mljob-status (common-lisp:error ":auto-mljob-status is required")
    :type (common-lisp:or auto-mljob-status common-lisp:null))
   (auto-mljob-secondary-status
    (common-lisp:error ":auto-mljob-secondary-status is required") :type
    (common-lisp:or auto-mljob-secondary-status common-lisp:null))
   (model-deploy-config common-lisp:nil :type
    (common-lisp:or model-deploy-config common-lisp:null))
   (model-deploy-result common-lisp:nil :type
    (common-lisp:or model-deploy-result common-lisp:null))
   (data-split-config common-lisp:nil :type
    (common-lisp:or auto-mldata-split-config common-lisp:null))
   (security-config common-lisp:nil :type
    (common-lisp:or auto-mlsecurity-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-auto-mljob-v2response
                    'make-describe-auto-mljob-v2response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-mljob-v2response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-mljob-v2response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mljob-name))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mljob-arn))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-mljob-input-data-config))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobInputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "OutputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-mljob-objective))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobObjective"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-mlproblem-type-config))
      (common-lisp:list
       (common-lisp:cons "AutoMLProblemTypeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'partial-failure-reasons))
      (common-lisp:list
       (common-lisp:cons "PartialFailureReasons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'best-candidate))
      (common-lisp:list
       (common-lisp:cons "BestCandidate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mljob-status))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-mljob-secondary-status))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobSecondaryStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-deploy-config))
      (common-lisp:list
       (common-lisp:cons "ModelDeployConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-deploy-result))
      (common-lisp:list
       (common-lisp:cons "ModelDeployResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-split-config))
      (common-lisp:list
       (common-lisp:cons "DataSplitConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-config))
      (common-lisp:list
       (common-lisp:cons "SecurityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-mljob-v2response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-code-repository-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-code-repository-input-"))
   (code-repository-name
    (common-lisp:error ":code-repository-name is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-code-repository-input
                    'make-describe-code-repository-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-code-repository-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-code-repository-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-repository-name))
      (common-lisp:list
       (common-lisp:cons "CodeRepositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-code-repository-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-code-repository-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-code-repository-output-"))
   (code-repository-name
    (common-lisp:error ":code-repository-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (code-repository-arn (common-lisp:error ":code-repository-arn is required")
    :type (common-lisp:or code-repository-arn common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or creation-time common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or last-modified-time common-lisp:null))
   (git-config common-lisp:nil :type
    (common-lisp:or git-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-code-repository-output
                    'make-describe-code-repository-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-code-repository-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-code-repository-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-repository-name))
      (common-lisp:list
       (common-lisp:cons "CodeRepositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-repository-arn))
      (common-lisp:list
       (common-lisp:cons "CodeRepositoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'git-config))
      (common-lisp:list
       (common-lisp:cons "GitConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-code-repository-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-compilation-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-compilation-job-request-"))
   (compilation-job-name
    (common-lisp:error ":compilation-job-name is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-compilation-job-request
                    'make-describe-compilation-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-compilation-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-compilation-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compilation-job-name))
      (common-lisp:list
       (common-lisp:cons "CompilationJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-compilation-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-compilation-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-compilation-job-response-"))
   (compilation-job-name
    (common-lisp:error ":compilation-job-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (compilation-job-arn (common-lisp:error ":compilation-job-arn is required")
    :type (common-lisp:or compilation-job-arn common-lisp:null))
   (compilation-job-status
    (common-lisp:error ":compilation-job-status is required") :type
    (common-lisp:or compilation-job-status common-lisp:null))
   (compilation-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (compilation-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (stopping-condition (common-lisp:error ":stopping-condition is required")
    :type (common-lisp:or stopping-condition common-lisp:null))
   (inference-image common-lisp:nil :type
    (common-lisp:or inference-image common-lisp:null))
   (model-package-version-arn common-lisp:nil :type
    (common-lisp:or model-package-arn common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or creation-time common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or last-modified-time common-lisp:null))
   (failure-reason (common-lisp:error ":failure-reason is required") :type
    (common-lisp:or failure-reason common-lisp:null))
   (model-artifacts (common-lisp:error ":model-artifacts is required") :type
    (common-lisp:or model-artifacts common-lisp:null))
   (model-digests common-lisp:nil :type
    (common-lisp:or model-digests common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (input-config (common-lisp:error ":input-config is required") :type
    (common-lisp:or input-config common-lisp:null))
   (output-config (common-lisp:error ":output-config is required") :type
    (common-lisp:or output-config common-lisp:null))
   (vpc-config common-lisp:nil :type
    (common-lisp:or neo-vpc-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-compilation-job-response
                    'make-describe-compilation-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-compilation-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-compilation-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compilation-job-name))
      (common-lisp:list
       (common-lisp:cons "CompilationJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compilation-job-arn))
      (common-lisp:list
       (common-lisp:cons "CompilationJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compilation-job-status))
      (common-lisp:list
       (common-lisp:cons "CompilationJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compilation-start-time))
      (common-lisp:list
       (common-lisp:cons "CompilationStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compilation-end-time))
      (common-lisp:list
       (common-lisp:cons "CompilationEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-condition))
      (common-lisp:list
       (common-lisp:cons "StoppingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inference-image))
      (common-lisp:list
       (common-lisp:cons "InferenceImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-version-arn))
      (common-lisp:list
       (common-lisp:cons "ModelPackageVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-artifacts))
      (common-lisp:list
       (common-lisp:cons "ModelArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-digests))
      (common-lisp:list
       (common-lisp:cons "ModelDigests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-config))
      (common-lisp:list
       (common-lisp:cons "InputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-compilation-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-context-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-context-request-"))
   (context-name (common-lisp:error ":context-name is required") :type
    (common-lisp:or experiment-entity-name-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-context-request 'make-describe-context-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-context-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-context-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-name))
      (common-lisp:list
       (common-lisp:cons "ContextName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-context-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-context-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-context-response-"))
   (context-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (context-arn common-lisp:nil :type
    (common-lisp:or context-arn common-lisp:null))
   (source common-lisp:nil :type
    (common-lisp:or context-source common-lisp:null))
   (context-type common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or experiment-description common-lisp:null))
   (properties common-lisp:nil :type
    (common-lisp:or lineage-entity-parameters common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (lineage-group-arn common-lisp:nil :type
    (common-lisp:or lineage-group-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-context-response
                    'make-describe-context-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-context-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-context-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-name))
      (common-lisp:list
       (common-lisp:cons "ContextName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-arn))
      (common-lisp:list
       (common-lisp:cons "ContextArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-type))
      (common-lisp:list
       (common-lisp:cons "ContextType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lineage-group-arn))
      (common-lisp:list
       (common-lisp:cons "LineageGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-context-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-data-quality-job-definition-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-data-quality-job-definition-request-"))
   (job-definition-name (common-lisp:error ":job-definition-name is required")
    :type (common-lisp:or monitoring-job-definition-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-data-quality-job-definition-request
                    'make-describe-data-quality-job-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-quality-job-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-quality-job-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-definition-name))
      (common-lisp:list
       (common-lisp:cons "JobDefinitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-quality-job-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-data-quality-job-definition-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-data-quality-job-definition-response-"))
   (job-definition-arn (common-lisp:error ":job-definition-arn is required")
    :type (common-lisp:or monitoring-job-definition-arn common-lisp:null))
   (job-definition-name (common-lisp:error ":job-definition-name is required")
    :type (common-lisp:or monitoring-job-definition-name common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (data-quality-baseline-config common-lisp:nil :type
    (common-lisp:or data-quality-baseline-config common-lisp:null))
   (data-quality-app-specification
    (common-lisp:error ":data-quality-app-specification is required") :type
    (common-lisp:or data-quality-app-specification common-lisp:null))
   (data-quality-job-input
    (common-lisp:error ":data-quality-job-input is required") :type
    (common-lisp:or data-quality-job-input common-lisp:null))
   (data-quality-job-output-config
    (common-lisp:error ":data-quality-job-output-config is required") :type
    (common-lisp:or monitoring-output-config common-lisp:null))
   (job-resources (common-lisp:error ":job-resources is required") :type
    (common-lisp:or monitoring-resources common-lisp:null))
   (network-config common-lisp:nil :type
    (common-lisp:or monitoring-network-config common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (stopping-condition common-lisp:nil :type
    (common-lisp:or monitoring-stopping-condition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-data-quality-job-definition-response
                    'make-describe-data-quality-job-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-quality-job-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-quality-job-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-definition-arn))
      (common-lisp:list
       (common-lisp:cons "JobDefinitionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-definition-name))
      (common-lisp:list
       (common-lisp:cons "JobDefinitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-quality-baseline-config))
      (common-lisp:list
       (common-lisp:cons "DataQualityBaselineConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-quality-app-specification))
      (common-lisp:list
       (common-lisp:cons "DataQualityAppSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-quality-job-input))
      (common-lisp:list
       (common-lisp:cons "DataQualityJobInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-quality-job-output-config))
      (common-lisp:list
       (common-lisp:cons "DataQualityJobOutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-resources))
      (common-lisp:list
       (common-lisp:cons "JobResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-config))
      (common-lisp:list
       (common-lisp:cons "NetworkConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-condition))
      (common-lisp:list
       (common-lisp:cons "StoppingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-data-quality-job-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-device-fleet-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-device-fleet-request-"))
   (device-fleet-name (common-lisp:error ":device-fleet-name is required")
    :type (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-device-fleet-request
                    'make-describe-device-fleet-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-fleet-name))
      (common-lisp:list
       (common-lisp:cons "DeviceFleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-device-fleet-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-device-fleet-response-"))
   (device-fleet-name (common-lisp:error ":device-fleet-name is required")
    :type (common-lisp:or entity-name common-lisp:null))
   (device-fleet-arn (common-lisp:error ":device-fleet-arn is required") :type
    (common-lisp:or device-fleet-arn common-lisp:null))
   (output-config (common-lisp:error ":output-config is required") :type
    (common-lisp:or edge-output-config common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or device-fleet-description common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (iot-role-alias common-lisp:nil :type
    (common-lisp:or iot-role-alias common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-device-fleet-response
                    'make-describe-device-fleet-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-fleet-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-fleet-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-fleet-name))
      (common-lisp:list
       (common-lisp:cons "DeviceFleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-fleet-arn))
      (common-lisp:list
       (common-lisp:cons "DeviceFleetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iot-role-alias))
      (common-lisp:list
       (common-lisp:cons "IotRoleAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-fleet-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-device-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-device-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (device-name (common-lisp:error ":device-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (device-fleet-name (common-lisp:error ":device-fleet-name is required")
    :type (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-device-request 'make-describe-device-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-fleet-name))
      (common-lisp:list
       (common-lisp:cons "DeviceFleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-device-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-device-response-"))
   (device-arn common-lisp:nil :type
    (common-lisp:or device-arn common-lisp:null))
   (device-name (common-lisp:error ":device-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or device-description common-lisp:null))
   (device-fleet-name (common-lisp:error ":device-fleet-name is required")
    :type (common-lisp:or entity-name common-lisp:null))
   (iot-thing-name common-lisp:nil :type
    (common-lisp:or thing-name common-lisp:null))
   (registration-time (common-lisp:error ":registration-time is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (latest-heartbeat common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (models common-lisp:nil :type (common-lisp:or edge-models common-lisp:null))
   (max-models common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (agent-version common-lisp:nil :type
    (common-lisp:or edge-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-device-response 'make-describe-device-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "DeviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-fleet-name))
      (common-lisp:list
       (common-lisp:cons "DeviceFleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iot-thing-name))
      (common-lisp:list
       (common-lisp:cons "IotThingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-time))
      (common-lisp:list
       (common-lisp:cons "RegistrationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-heartbeat))
      (common-lisp:list
       (common-lisp:cons "LatestHeartbeat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'models))
      (common-lisp:list
       (common-lisp:cons "Models"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-models))
      (common-lisp:list
       (common-lisp:cons "MaxModels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-version))
      (common-lisp:list
       (common-lisp:cons "AgentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-domain-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-domain-request-"))
   (domain-id (common-lisp:error ":domain-id is required") :type
    (common-lisp:or domain-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-domain-request 'make-describe-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-domain-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-domain-response-"))
   (domain-arn common-lisp:nil :type
    (common-lisp:or domain-arn common-lisp:null))
   (domain-id common-lisp:nil :type
    (common-lisp:or domain-id common-lisp:null))
   (domain-name common-lisp:nil :type
    (common-lisp:or domain-name common-lisp:null))
   (home-efs-file-system-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (single-sign-on-managed-application-instance-id common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or domain-status common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or last-modified-time common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (auth-mode common-lisp:nil :type
    (common-lisp:or auth-mode common-lisp:null))
   (default-user-settings common-lisp:nil :type
    (common-lisp:or user-settings common-lisp:null))
   (app-network-access-type common-lisp:nil :type
    (common-lisp:or app-network-access-type common-lisp:null))
   (home-efs-file-system-kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (subnet-ids common-lisp:nil :type (common-lisp:or subnets common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or string1024 common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or vpc-id common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (domain-settings common-lisp:nil :type
    (common-lisp:or domain-settings common-lisp:null))
   (app-security-group-management common-lisp:nil :type
    (common-lisp:or app-security-group-management common-lisp:null))
   (security-group-id-for-domain-boundary common-lisp:nil :type
    (common-lisp:or security-group-id common-lisp:null))
   (default-space-settings common-lisp:nil :type
    (common-lisp:or default-space-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-domain-response 'make-describe-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-arn))
      (common-lisp:list
       (common-lisp:cons "DomainArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'home-efs-file-system-id))
      (common-lisp:list
       (common-lisp:cons "HomeEfsFileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'single-sign-on-managed-application-instance-id))
      (common-lisp:list
       (common-lisp:cons "SingleSignOnManagedApplicationInstanceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-mode))
      (common-lisp:list
       (common-lisp:cons "AuthMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-user-settings))
      (common-lisp:list
       (common-lisp:cons "DefaultUserSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-network-access-type))
      (common-lisp:list
       (common-lisp:cons "AppNetworkAccessType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'home-efs-file-system-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "HomeEfsFileSystemKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-ids))
      (common-lisp:list
       (common-lisp:cons "SubnetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-settings))
      (common-lisp:list
       (common-lisp:cons "DomainSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-security-group-management))
      (common-lisp:list
       (common-lisp:cons "AppSecurityGroupManagement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'security-group-id-for-domain-boundary))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIdForDomainBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-space-settings))
      (common-lisp:list
       (common-lisp:cons "DefaultSpaceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-edge-deployment-plan-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-edge-deployment-plan-request-"))
   (edge-deployment-plan-name
    (common-lisp:error ":edge-deployment-plan-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or deployment-stage-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-edge-deployment-plan-request
                    'make-describe-edge-deployment-plan-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-edge-deployment-plan-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-edge-deployment-plan-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-deployment-plan-name))
      (common-lisp:list
       (common-lisp:cons "EdgeDeploymentPlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-edge-deployment-plan-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-edge-deployment-plan-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-edge-deployment-plan-response-"))
   (edge-deployment-plan-arn
    (common-lisp:error ":edge-deployment-plan-arn is required") :type
    (common-lisp:or edge-deployment-plan-arn common-lisp:null))
   (edge-deployment-plan-name
    (common-lisp:error ":edge-deployment-plan-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (model-configs (common-lisp:error ":model-configs is required") :type
    (common-lisp:or edge-deployment-model-configs common-lisp:null))
   (device-fleet-name (common-lisp:error ":device-fleet-name is required")
    :type (common-lisp:or entity-name common-lisp:null))
   (edge-deployment-success common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (edge-deployment-pending common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (edge-deployment-failed common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (stages (common-lisp:error ":stages is required") :type
    (common-lisp:or deployment-stage-status-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-edge-deployment-plan-response
                    'make-describe-edge-deployment-plan-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-edge-deployment-plan-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-edge-deployment-plan-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-deployment-plan-arn))
      (common-lisp:list
       (common-lisp:cons "EdgeDeploymentPlanArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-deployment-plan-name))
      (common-lisp:list
       (common-lisp:cons "EdgeDeploymentPlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-configs))
      (common-lisp:list
       (common-lisp:cons "ModelConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-fleet-name))
      (common-lisp:list
       (common-lisp:cons "DeviceFleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-deployment-success))
      (common-lisp:list
       (common-lisp:cons "EdgeDeploymentSuccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-deployment-pending))
      (common-lisp:list
       (common-lisp:cons "EdgeDeploymentPending"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-deployment-failed))
      (common-lisp:list
       (common-lisp:cons "EdgeDeploymentFailed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stages))
      (common-lisp:list
       (common-lisp:cons "Stages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-edge-deployment-plan-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-edge-packaging-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-edge-packaging-job-request-"))
   (edge-packaging-job-name
    (common-lisp:error ":edge-packaging-job-name is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-edge-packaging-job-request
                    'make-describe-edge-packaging-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-edge-packaging-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-edge-packaging-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-packaging-job-name))
      (common-lisp:list
       (common-lisp:cons "EdgePackagingJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-edge-packaging-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-edge-packaging-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-edge-packaging-job-response-"))
   (edge-packaging-job-arn
    (common-lisp:error ":edge-packaging-job-arn is required") :type
    (common-lisp:or edge-packaging-job-arn common-lisp:null))
   (edge-packaging-job-name
    (common-lisp:error ":edge-packaging-job-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (compilation-job-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (model-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (model-version common-lisp:nil :type
    (common-lisp:or edge-version common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (output-config common-lisp:nil :type
    (common-lisp:or edge-output-config common-lisp:null))
   (resource-key common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (edge-packaging-job-status
    (common-lisp:error ":edge-packaging-job-status is required") :type
    (common-lisp:or edge-packaging-job-status common-lisp:null))
   (edge-packaging-job-status-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (model-artifact common-lisp:nil :type
    (common-lisp:or s3uri common-lisp:null))
   (model-signature common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (preset-deployment-output common-lisp:nil :type
    (common-lisp:or edge-preset-deployment-output common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-edge-packaging-job-response
                    'make-describe-edge-packaging-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-edge-packaging-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-edge-packaging-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-packaging-job-arn))
      (common-lisp:list
       (common-lisp:cons "EdgePackagingJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-packaging-job-name))
      (common-lisp:list
       (common-lisp:cons "EdgePackagingJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compilation-job-name))
      (common-lisp:list
       (common-lisp:cons "CompilationJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-version))
      (common-lisp:list
       (common-lisp:cons "ModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-key))
      (common-lisp:list
       (common-lisp:cons "ResourceKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-packaging-job-status))
      (common-lisp:list
       (common-lisp:cons "EdgePackagingJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-packaging-job-status-message))
      (common-lisp:list
       (common-lisp:cons "EdgePackagingJobStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-artifact))
      (common-lisp:list
       (common-lisp:cons "ModelArtifact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-signature))
      (common-lisp:list
       (common-lisp:cons "ModelSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preset-deployment-output))
      (common-lisp:list
       (common-lisp:cons "PresetDeploymentOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-edge-packaging-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-endpoint-config-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-endpoint-config-input-"))
   (endpoint-config-name
    (common-lisp:error ":endpoint-config-name is required") :type
    (common-lisp:or endpoint-config-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-endpoint-config-input
                    'make-describe-endpoint-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-config-name))
      (common-lisp:list
       (common-lisp:cons "EndpointConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-endpoint-config-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-endpoint-config-output-"))
   (endpoint-config-name
    (common-lisp:error ":endpoint-config-name is required") :type
    (common-lisp:or endpoint-config-name common-lisp:null))
   (endpoint-config-arn (common-lisp:error ":endpoint-config-arn is required")
    :type (common-lisp:or endpoint-config-arn common-lisp:null))
   (production-variants (common-lisp:error ":production-variants is required")
    :type (common-lisp:or production-variant-list common-lisp:null))
   (data-capture-config common-lisp:nil :type
    (common-lisp:or data-capture-config common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (async-inference-config common-lisp:nil :type
    (common-lisp:or async-inference-config common-lisp:null))
   (explainer-config common-lisp:nil :type
    (common-lisp:or explainer-config common-lisp:null))
   (shadow-production-variants common-lisp:nil :type
    (common-lisp:or production-variant-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-endpoint-config-output
                    'make-describe-endpoint-config-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-config-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-config-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-config-name))
      (common-lisp:list
       (common-lisp:cons "EndpointConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-config-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'production-variants))
      (common-lisp:list
       (common-lisp:cons "ProductionVariants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-capture-config))
      (common-lisp:list
       (common-lisp:cons "DataCaptureConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'async-inference-config))
      (common-lisp:list
       (common-lisp:cons "AsyncInferenceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explainer-config))
      (common-lisp:list
       (common-lisp:cons "ExplainerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shadow-production-variants))
      (common-lisp:list
       (common-lisp:cons "ShadowProductionVariants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-config-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-endpoint-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-endpoint-input-"))
   (endpoint-name (common-lisp:error ":endpoint-name is required") :type
    (common-lisp:or endpoint-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-endpoint-input 'make-describe-endpoint-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-endpoint-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-endpoint-output-"))
   (endpoint-name (common-lisp:error ":endpoint-name is required") :type
    (common-lisp:or endpoint-name common-lisp:null))
   (endpoint-arn (common-lisp:error ":endpoint-arn is required") :type
    (common-lisp:or endpoint-arn common-lisp:null))
   (endpoint-config-name
    (common-lisp:error ":endpoint-config-name is required") :type
    (common-lisp:or endpoint-config-name common-lisp:null))
   (production-variants common-lisp:nil :type
    (common-lisp:or production-variant-summary-list common-lisp:null))
   (data-capture-config common-lisp:nil :type
    (common-lisp:or data-capture-config-summary common-lisp:null))
   (endpoint-status (common-lisp:error ":endpoint-status is required") :type
    (common-lisp:or endpoint-status common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (last-deployment-config common-lisp:nil :type
    (common-lisp:or deployment-config common-lisp:null))
   (async-inference-config common-lisp:nil :type
    (common-lisp:or async-inference-config common-lisp:null))
   (pending-deployment-summary common-lisp:nil :type
    (common-lisp:or pending-deployment-summary common-lisp:null))
   (explainer-config common-lisp:nil :type
    (common-lisp:or explainer-config common-lisp:null))
   (shadow-production-variants common-lisp:nil :type
    (common-lisp:or production-variant-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-endpoint-output 'make-describe-endpoint-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-config-name))
      (common-lisp:list
       (common-lisp:cons "EndpointConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'production-variants))
      (common-lisp:list
       (common-lisp:cons "ProductionVariants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-capture-config))
      (common-lisp:list
       (common-lisp:cons "DataCaptureConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-status))
      (common-lisp:list
       (common-lisp:cons "EndpointStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-deployment-config))
      (common-lisp:list
       (common-lisp:cons "LastDeploymentConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'async-inference-config))
      (common-lisp:list
       (common-lisp:cons "AsyncInferenceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-deployment-summary))
      (common-lisp:list
       (common-lisp:cons "PendingDeploymentSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explainer-config))
      (common-lisp:list
       (common-lisp:cons "ExplainerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shadow-production-variants))
      (common-lisp:list
       (common-lisp:cons "ShadowProductionVariants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-endpoint-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-experiment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-experiment-request-"))
   (experiment-name (common-lisp:error ":experiment-name is required") :type
    (common-lisp:or experiment-entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-experiment-request
                    'make-describe-experiment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-experiment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-experiment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-name))
      (common-lisp:list
       (common-lisp:cons "ExperimentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-experiment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-experiment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-experiment-response-"))
   (experiment-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (experiment-arn common-lisp:nil :type
    (common-lisp:or experiment-arn common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (source common-lisp:nil :type
    (common-lisp:or experiment-source common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or experiment-description common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-experiment-response
                    'make-describe-experiment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-experiment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-experiment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-name))
      (common-lisp:list
       (common-lisp:cons "ExperimentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-arn))
      (common-lisp:list
       (common-lisp:cons "ExperimentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-experiment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-feature-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-feature-group-request-"))
   (feature-group-name (common-lisp:error ":feature-group-name is required")
    :type (common-lisp:or feature-group-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-feature-group-request
                    'make-describe-feature-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-feature-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-feature-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-group-name))
      (common-lisp:list
       (common-lisp:cons "FeatureGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-feature-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-feature-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-feature-group-response-"))
   (feature-group-arn (common-lisp:error ":feature-group-arn is required")
    :type (common-lisp:or feature-group-arn common-lisp:null))
   (feature-group-name (common-lisp:error ":feature-group-name is required")
    :type (common-lisp:or feature-group-name common-lisp:null))
   (record-identifier-feature-name
    (common-lisp:error ":record-identifier-feature-name is required") :type
    (common-lisp:or feature-name common-lisp:null))
   (event-time-feature-name
    (common-lisp:error ":event-time-feature-name is required") :type
    (common-lisp:or feature-name common-lisp:null))
   (feature-definitions (common-lisp:error ":feature-definitions is required")
    :type (common-lisp:or feature-definitions common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or creation-time common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or last-modified-time common-lisp:null))
   (online-store-config common-lisp:nil :type
    (common-lisp:or online-store-config common-lisp:null))
   (offline-store-config common-lisp:nil :type
    (common-lisp:or offline-store-config common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (feature-group-status common-lisp:nil :type
    (common-lisp:or feature-group-status common-lisp:null))
   (offline-store-status common-lisp:nil :type
    (common-lisp:or offline-store-status common-lisp:null))
   (last-update-status common-lisp:nil :type
    (common-lisp:or last-update-status common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (next-token (common-lisp:error ":next-token is required") :type
    (common-lisp:or next-token common-lisp:null))
   (online-store-total-size-bytes common-lisp:nil :type
    (common-lisp:or online-store-total-size-bytes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-feature-group-response
                    'make-describe-feature-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-feature-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-feature-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-group-arn))
      (common-lisp:list
       (common-lisp:cons "FeatureGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-group-name))
      (common-lisp:list
       (common-lisp:cons "FeatureGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'record-identifier-feature-name))
      (common-lisp:list
       (common-lisp:cons "RecordIdentifierFeatureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-time-feature-name))
      (common-lisp:list
       (common-lisp:cons "EventTimeFeatureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-definitions))
      (common-lisp:list
       (common-lisp:cons "FeatureDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'online-store-config))
      (common-lisp:list
       (common-lisp:cons "OnlineStoreConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offline-store-config))
      (common-lisp:list
       (common-lisp:cons "OfflineStoreConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'feature-group-status))
      (common-lisp:list
       (common-lisp:cons "FeatureGroupStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offline-store-status))
      (common-lisp:list
       (common-lisp:cons "OfflineStoreStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-status))
      (common-lisp:list
       (common-lisp:cons "LastUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'online-store-total-size-bytes))
      (common-lisp:list
       (common-lisp:cons "OnlineStoreTotalSizeBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-feature-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-feature-metadata-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-feature-metadata-request-"))
   (feature-group-name (common-lisp:error ":feature-group-name is required")
    :type (common-lisp:or feature-group-name common-lisp:null))
   (feature-name (common-lisp:error ":feature-name is required") :type
    (common-lisp:or feature-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-feature-metadata-request
                    'make-describe-feature-metadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-feature-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-feature-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-group-name))
      (common-lisp:list
       (common-lisp:cons "FeatureGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-name))
      (common-lisp:list
       (common-lisp:cons "FeatureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-feature-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-feature-metadata-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-feature-metadata-response-"))
   (feature-group-arn (common-lisp:error ":feature-group-arn is required")
    :type (common-lisp:or feature-group-arn common-lisp:null))
   (feature-group-name (common-lisp:error ":feature-group-name is required")
    :type (common-lisp:or feature-group-name common-lisp:null))
   (feature-name (common-lisp:error ":feature-name is required") :type
    (common-lisp:or feature-name common-lisp:null))
   (feature-type (common-lisp:error ":feature-type is required") :type
    (common-lisp:or feature-type common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or creation-time common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or last-modified-time common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or feature-description common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or feature-parameters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-feature-metadata-response
                    'make-describe-feature-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-feature-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-feature-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-group-arn))
      (common-lisp:list
       (common-lisp:cons "FeatureGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-group-name))
      (common-lisp:list
       (common-lisp:cons "FeatureGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-name))
      (common-lisp:list
       (common-lisp:cons "FeatureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-type))
      (common-lisp:list
       (common-lisp:cons "FeatureType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-feature-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-flow-definition-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-flow-definition-request-"))
   (flow-definition-name
    (common-lisp:error ":flow-definition-name is required") :type
    (common-lisp:or flow-definition-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-flow-definition-request
                    'make-describe-flow-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flow-definition-name))
      (common-lisp:list
       (common-lisp:cons "FlowDefinitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-flow-definition-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-flow-definition-response-"))
   (flow-definition-arn (common-lisp:error ":flow-definition-arn is required")
    :type (common-lisp:or flow-definition-arn common-lisp:null))
   (flow-definition-name
    (common-lisp:error ":flow-definition-name is required") :type
    (common-lisp:or flow-definition-name common-lisp:null))
   (flow-definition-status
    (common-lisp:error ":flow-definition-status is required") :type
    (common-lisp:or flow-definition-status common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (human-loop-request-source common-lisp:nil :type
    (common-lisp:or human-loop-request-source common-lisp:null))
   (human-loop-activation-config common-lisp:nil :type
    (common-lisp:or human-loop-activation-config common-lisp:null))
   (human-loop-config (common-lisp:error ":human-loop-config is required")
    :type (common-lisp:or human-loop-config common-lisp:null))
   (output-config (common-lisp:error ":output-config is required") :type
    (common-lisp:or flow-definition-output-config common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-flow-definition-response
                    'make-describe-flow-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-definition-arn))
      (common-lisp:list
       (common-lisp:cons "FlowDefinitionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flow-definition-name))
      (common-lisp:list
       (common-lisp:cons "FlowDefinitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flow-definition-status))
      (common-lisp:list
       (common-lisp:cons "FlowDefinitionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'human-loop-request-source))
      (common-lisp:list
       (common-lisp:cons "HumanLoopRequestSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'human-loop-activation-config))
      (common-lisp:list
       (common-lisp:cons "HumanLoopActivationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'human-loop-config))
      (common-lisp:list
       (common-lisp:cons "HumanLoopConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-flow-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-hub-content-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-hub-content-request-"))
   (hub-name (common-lisp:error ":hub-name is required") :type
    (common-lisp:or hub-name common-lisp:null))
   (hub-content-type (common-lisp:error ":hub-content-type is required") :type
    (common-lisp:or hub-content-type common-lisp:null))
   (hub-content-name (common-lisp:error ":hub-content-name is required") :type
    (common-lisp:or hub-content-name common-lisp:null))
   (hub-content-version common-lisp:nil :type
    (common-lisp:or hub-content-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-hub-content-request
                    'make-describe-hub-content-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-hub-content-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-hub-content-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-name))
      (common-lisp:list
       (common-lisp:cons "HubName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-content-type))
      (common-lisp:list
       (common-lisp:cons "HubContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-content-name))
      (common-lisp:list
       (common-lisp:cons "HubContentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-content-version))
      (common-lisp:list
       (common-lisp:cons "HubContentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-hub-content-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-hub-content-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-hub-content-response-"))
   (hub-content-name (common-lisp:error ":hub-content-name is required") :type
    (common-lisp:or hub-content-name common-lisp:null))
   (hub-content-arn (common-lisp:error ":hub-content-arn is required") :type
    (common-lisp:or hub-content-arn common-lisp:null))
   (hub-content-version (common-lisp:error ":hub-content-version is required")
    :type (common-lisp:or hub-content-version common-lisp:null))
   (hub-content-type (common-lisp:error ":hub-content-type is required") :type
    (common-lisp:or hub-content-type common-lisp:null))
   (document-schema-version
    (common-lisp:error ":document-schema-version is required") :type
    (common-lisp:or document-schema-version common-lisp:null))
   (hub-name (common-lisp:error ":hub-name is required") :type
    (common-lisp:or hub-name common-lisp:null))
   (hub-arn (common-lisp:error ":hub-arn is required") :type
    (common-lisp:or hub-arn common-lisp:null))
   (hub-content-display-name common-lisp:nil :type
    (common-lisp:or hub-content-display-name common-lisp:null))
   (hub-content-description common-lisp:nil :type
    (common-lisp:or hub-content-description common-lisp:null))
   (hub-content-markdown common-lisp:nil :type
    (common-lisp:or hub-content-markdown common-lisp:null))
   (hub-content-document
    (common-lisp:error ":hub-content-document is required") :type
    (common-lisp:or hub-content-document common-lisp:null))
   (hub-content-search-keywords common-lisp:nil :type
    (common-lisp:or hub-content-search-keyword-list common-lisp:null))
   (hub-content-dependencies common-lisp:nil :type
    (common-lisp:or hub-content-dependency-list common-lisp:null))
   (hub-content-status (common-lisp:error ":hub-content-status is required")
    :type (common-lisp:or hub-content-status common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-hub-content-response
                    'make-describe-hub-content-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-hub-content-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-hub-content-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-content-name))
      (common-lisp:list
       (common-lisp:cons "HubContentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-content-arn))
      (common-lisp:list
       (common-lisp:cons "HubContentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-content-version))
      (common-lisp:list
       (common-lisp:cons "HubContentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-content-type))
      (common-lisp:list
       (common-lisp:cons "HubContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-schema-version))
      (common-lisp:list
       (common-lisp:cons "DocumentSchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-name))
      (common-lisp:list
       (common-lisp:cons "HubName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-arn))
      (common-lisp:list
       (common-lisp:cons "HubArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hub-content-display-name))
      (common-lisp:list
       (common-lisp:cons "HubContentDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hub-content-description))
      (common-lisp:list
       (common-lisp:cons "HubContentDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hub-content-markdown))
      (common-lisp:list
       (common-lisp:cons "HubContentMarkdown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hub-content-document))
      (common-lisp:list
       (common-lisp:cons "HubContentDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hub-content-search-keywords))
      (common-lisp:list
       (common-lisp:cons "HubContentSearchKeywords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hub-content-dependencies))
      (common-lisp:list
       (common-lisp:cons "HubContentDependencies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-content-status))
      (common-lisp:list
       (common-lisp:cons "HubContentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-hub-content-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-hub-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-hub-request-"))
   (hub-name (common-lisp:error ":hub-name is required") :type
    (common-lisp:or hub-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-hub-request 'make-describe-hub-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-hub-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-hub-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-name))
      (common-lisp:list
       (common-lisp:cons "HubName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-hub-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-hub-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-hub-response-"))
   (hub-name (common-lisp:error ":hub-name is required") :type
    (common-lisp:or hub-name common-lisp:null))
   (hub-arn (common-lisp:error ":hub-arn is required") :type
    (common-lisp:or hub-arn common-lisp:null))
   (hub-display-name common-lisp:nil :type
    (common-lisp:or hub-display-name common-lisp:null))
   (hub-description common-lisp:nil :type
    (common-lisp:or hub-description common-lisp:null))
   (hub-search-keywords common-lisp:nil :type
    (common-lisp:or hub-search-keyword-list common-lisp:null))
   (s3storage-config common-lisp:nil :type
    (common-lisp:or hub-s3storage-config common-lisp:null))
   (hub-status (common-lisp:error ":hub-status is required") :type
    (common-lisp:or hub-status common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-hub-response 'make-describe-hub-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-hub-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-hub-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-name))
      (common-lisp:list
       (common-lisp:cons "HubName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-arn))
      (common-lisp:list
       (common-lisp:cons "HubArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-display-name))
      (common-lisp:list
       (common-lisp:cons "HubDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-description))
      (common-lisp:list
       (common-lisp:cons "HubDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-search-keywords))
      (common-lisp:list
       (common-lisp:cons "HubSearchKeywords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3storage-config))
      (common-lisp:list
       (common-lisp:cons "S3StorageConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-status))
      (common-lisp:list
       (common-lisp:cons "HubStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-hub-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-human-task-ui-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-human-task-ui-request-"))
   (human-task-ui-name (common-lisp:error ":human-task-ui-name is required")
    :type (common-lisp:or human-task-ui-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-human-task-ui-request
                    'make-describe-human-task-ui-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-human-task-ui-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-human-task-ui-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'human-task-ui-name))
      (common-lisp:list
       (common-lisp:cons "HumanTaskUiName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-human-task-ui-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-human-task-ui-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-human-task-ui-response-"))
   (human-task-ui-arn (common-lisp:error ":human-task-ui-arn is required")
    :type (common-lisp:or human-task-ui-arn common-lisp:null))
   (human-task-ui-name (common-lisp:error ":human-task-ui-name is required")
    :type (common-lisp:or human-task-ui-name common-lisp:null))
   (human-task-ui-status common-lisp:nil :type
    (common-lisp:or human-task-ui-status common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (ui-template (common-lisp:error ":ui-template is required") :type
    (common-lisp:or ui-template-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-human-task-ui-response
                    'make-describe-human-task-ui-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-human-task-ui-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-human-task-ui-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'human-task-ui-arn))
      (common-lisp:list
       (common-lisp:cons "HumanTaskUiArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'human-task-ui-name))
      (common-lisp:list
       (common-lisp:cons "HumanTaskUiName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'human-task-ui-status))
      (common-lisp:list
       (common-lisp:cons "HumanTaskUiStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ui-template))
      (common-lisp:list
       (common-lisp:cons "UiTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-human-task-ui-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-hyper-parameter-tuning-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-hyper-parameter-tuning-job-request-"))
   (hyper-parameter-tuning-job-name
    (common-lisp:error ":hyper-parameter-tuning-job-name is required") :type
    (common-lisp:or hyper-parameter-tuning-job-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-hyper-parameter-tuning-job-request
                    'make-describe-hyper-parameter-tuning-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-hyper-parameter-tuning-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-hyper-parameter-tuning-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hyper-parameter-tuning-job-name))
      (common-lisp:list
       (common-lisp:cons "HyperParameterTuningJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-hyper-parameter-tuning-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-hyper-parameter-tuning-job-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-hyper-parameter-tuning-job-response-"))
   (hyper-parameter-tuning-job-name
    (common-lisp:error ":hyper-parameter-tuning-job-name is required") :type
    (common-lisp:or hyper-parameter-tuning-job-name common-lisp:null))
   (hyper-parameter-tuning-job-arn
    (common-lisp:error ":hyper-parameter-tuning-job-arn is required") :type
    (common-lisp:or hyper-parameter-tuning-job-arn common-lisp:null))
   (hyper-parameter-tuning-job-config
    (common-lisp:error ":hyper-parameter-tuning-job-config is required") :type
    (common-lisp:or hyper-parameter-tuning-job-config common-lisp:null))
   (training-job-definition common-lisp:nil :type
    (common-lisp:or hyper-parameter-training-job-definition common-lisp:null))
   (training-job-definitions common-lisp:nil :type
    (common-lisp:or hyper-parameter-training-job-definitions common-lisp:null))
   (hyper-parameter-tuning-job-status
    (common-lisp:error ":hyper-parameter-tuning-job-status is required") :type
    (common-lisp:or hyper-parameter-tuning-job-status common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (hyper-parameter-tuning-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (training-job-status-counters
    (common-lisp:error ":training-job-status-counters is required") :type
    (common-lisp:or training-job-status-counters common-lisp:null))
   (objective-status-counters
    (common-lisp:error ":objective-status-counters is required") :type
    (common-lisp:or objective-status-counters common-lisp:null))
   (best-training-job common-lisp:nil :type
    (common-lisp:or hyper-parameter-training-job-summary common-lisp:null))
   (overall-best-training-job common-lisp:nil :type
    (common-lisp:or hyper-parameter-training-job-summary common-lisp:null))
   (warm-start-config common-lisp:nil :type
    (common-lisp:or hyper-parameter-tuning-job-warm-start-config
                    common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (tuning-job-completion-details common-lisp:nil :type
    (common-lisp:or hyper-parameter-tuning-job-completion-details
                    common-lisp:null))
   (consumed-resources common-lisp:nil :type
    (common-lisp:or hyper-parameter-tuning-job-consumed-resources
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-hyper-parameter-tuning-job-response
                    'make-describe-hyper-parameter-tuning-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-hyper-parameter-tuning-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-hyper-parameter-tuning-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hyper-parameter-tuning-job-name))
      (common-lisp:list
       (common-lisp:cons "HyperParameterTuningJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hyper-parameter-tuning-job-arn))
      (common-lisp:list
       (common-lisp:cons "HyperParameterTuningJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hyper-parameter-tuning-job-config))
      (common-lisp:list
       (common-lisp:cons "HyperParameterTuningJobConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-job-definition))
      (common-lisp:list
       (common-lisp:cons "TrainingJobDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-job-definitions))
      (common-lisp:list
       (common-lisp:cons "TrainingJobDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hyper-parameter-tuning-job-status))
      (common-lisp:list
       (common-lisp:cons "HyperParameterTuningJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hyper-parameter-tuning-end-time))
      (common-lisp:list
       (common-lisp:cons "HyperParameterTuningEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-job-status-counters))
      (common-lisp:list
       (common-lisp:cons "TrainingJobStatusCounters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'objective-status-counters))
      (common-lisp:list
       (common-lisp:cons "ObjectiveStatusCounters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'best-training-job))
      (common-lisp:list
       (common-lisp:cons "BestTrainingJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'overall-best-training-job))
      (common-lisp:list
       (common-lisp:cons "OverallBestTrainingJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warm-start-config))
      (common-lisp:list
       (common-lisp:cons "WarmStartConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tuning-job-completion-details))
      (common-lisp:list
       (common-lisp:cons "TuningJobCompletionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumed-resources))
      (common-lisp:list
       (common-lisp:cons "ConsumedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-hyper-parameter-tuning-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-image-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-image-request-"))
   (image-name (common-lisp:error ":image-name is required") :type
    (common-lisp:or image-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-image-request 'make-describe-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-name))
      (common-lisp:list
       (common-lisp:cons "ImageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-image-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-image-response-"))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or image-description common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or image-display-name common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (image-arn common-lisp:nil :type
    (common-lisp:or image-arn common-lisp:null))
   (image-name common-lisp:nil :type
    (common-lisp:or image-name common-lisp:null))
   (image-status common-lisp:nil :type
    (common-lisp:or image-status common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-image-response 'make-describe-image-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-arn))
      (common-lisp:list
       (common-lisp:cons "ImageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-name))
      (common-lisp:list
       (common-lisp:cons "ImageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-status))
      (common-lisp:list
       (common-lisp:cons "ImageStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-image-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-image-version-request-"))
   (image-name (common-lisp:error ":image-name is required") :type
    (common-lisp:or image-name common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or image-version-number common-lisp:null))
   (alias common-lisp:nil :type
    (common-lisp:or sage-maker-image-version-alias common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-image-version-request
                    'make-describe-image-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-name))
      (common-lisp:list
       (common-lisp:cons "ImageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-image-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-image-version-response-"))
   (base-image common-lisp:nil :type
    (common-lisp:or image-base-image common-lisp:null))
   (container-image common-lisp:nil :type
    (common-lisp:or image-container-image common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (image-arn common-lisp:nil :type
    (common-lisp:or image-arn common-lisp:null))
   (image-version-arn common-lisp:nil :type
    (common-lisp:or image-version-arn common-lisp:null))
   (image-version-status common-lisp:nil :type
    (common-lisp:or image-version-status common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or image-version-number common-lisp:null))
   (vendor-guidance common-lisp:nil :type
    (common-lisp:or vendor-guidance common-lisp:null))
   (job-type common-lisp:nil :type (common-lisp:or job-type common-lisp:null))
   (mlframework common-lisp:nil :type
    (common-lisp:or mlframework common-lisp:null))
   (programming-lang common-lisp:nil :type
    (common-lisp:or programming-lang common-lisp:null))
   (processor common-lisp:nil :type
    (common-lisp:or processor common-lisp:null))
   (horovod common-lisp:nil :type (common-lisp:or horovod common-lisp:null))
   (release-notes common-lisp:nil :type
    (common-lisp:or release-notes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-image-version-response
                    'make-describe-image-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-image))
      (common-lisp:list
       (common-lisp:cons "BaseImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-image))
      (common-lisp:list
       (common-lisp:cons "ContainerImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-arn))
      (common-lisp:list
       (common-lisp:cons "ImageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-version-arn))
      (common-lisp:list
       (common-lisp:cons "ImageVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-version-status))
      (common-lisp:list
       (common-lisp:cons "ImageVersionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-guidance))
      (common-lisp:list
       (common-lisp:cons "VendorGuidance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlframework))
      (common-lisp:list
       (common-lisp:cons "MLFramework"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'programming-lang))
      (common-lisp:list
       (common-lisp:cons "ProgrammingLang"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processor))
      (common-lisp:list
       (common-lisp:cons "Processor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'horovod))
      (common-lisp:list
       (common-lisp:cons "Horovod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-notes))
      (common-lisp:list
       (common-lisp:cons "ReleaseNotes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-image-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-inference-experiment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-inference-experiment-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or inference-experiment-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-inference-experiment-request
                    'make-describe-inference-experiment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-inference-experiment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-inference-experiment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-inference-experiment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-inference-experiment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-inference-experiment-response-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or inference-experiment-arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or inference-experiment-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or inference-experiment-type common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or inference-experiment-schedule common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or inference-experiment-status common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or inference-experiment-status-reason common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or inference-experiment-description common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (completion-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (endpoint-metadata (common-lisp:error ":endpoint-metadata is required")
    :type (common-lisp:or endpoint-metadata common-lisp:null))
   (model-variants (common-lisp:error ":model-variants is required") :type
    (common-lisp:or model-variant-config-summary-list common-lisp:null))
   (data-storage-config common-lisp:nil :type
    (common-lisp:or inference-experiment-data-storage-config common-lisp:null))
   (shadow-mode-config common-lisp:nil :type
    (common-lisp:or shadow-mode-config common-lisp:null))
   (kms-key common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-inference-experiment-response
                    'make-describe-inference-experiment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-inference-experiment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-inference-experiment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "CompletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-metadata))
      (common-lisp:list
       (common-lisp:cons "EndpointMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-variants))
      (common-lisp:list
       (common-lisp:cons "ModelVariants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-storage-config))
      (common-lisp:list
       (common-lisp:cons "DataStorageConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-mode-config))
      (common-lisp:list
       (common-lisp:cons "ShadowModeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key))
      (common-lisp:list
       (common-lisp:cons "KmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-inference-experiment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-inference-recommendations-job-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-inference-recommendations-job-request-"))
   (job-name (common-lisp:error ":job-name is required") :type
    (common-lisp:or recommendation-job-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-inference-recommendations-job-request
                    'make-describe-inference-recommendations-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-inference-recommendations-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-inference-recommendations-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-inference-recommendations-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-inference-recommendations-job-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-inference-recommendations-job-response-"))
   (job-name (common-lisp:error ":job-name is required") :type
    (common-lisp:or recommendation-job-name common-lisp:null))
   (job-description common-lisp:nil :type
    (common-lisp:or recommendation-job-description common-lisp:null))
   (job-type (common-lisp:error ":job-type is required") :type
    (common-lisp:or recommendation-job-type common-lisp:null))
   (job-arn (common-lisp:error ":job-arn is required") :type
    (common-lisp:or recommendation-job-arn common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or recommendation-job-status common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or creation-time common-lisp:null))
   (completion-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or last-modified-time common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (input-config (common-lisp:error ":input-config is required") :type
    (common-lisp:or recommendation-job-input-config common-lisp:null))
   (stopping-conditions common-lisp:nil :type
    (common-lisp:or recommendation-job-stopping-conditions common-lisp:null))
   (inference-recommendations common-lisp:nil :type
    (common-lisp:or inference-recommendations common-lisp:null))
   (endpoint-performances common-lisp:nil :type
    (common-lisp:or endpoint-performances common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-inference-recommendations-job-response
                    'make-describe-inference-recommendations-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-inference-recommendations-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-inference-recommendations-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-description))
      (common-lisp:list
       (common-lisp:cons "JobDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "JobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "CompletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-config))
      (common-lisp:list
       (common-lisp:cons "InputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-conditions))
      (common-lisp:list
       (common-lisp:cons "StoppingConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-recommendations))
      (common-lisp:list
       (common-lisp:cons "InferenceRecommendations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-performances))
      (common-lisp:list
       (common-lisp:cons "EndpointPerformances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-inference-recommendations-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-labeling-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-labeling-job-request-"))
   (labeling-job-name (common-lisp:error ":labeling-job-name is required")
    :type (common-lisp:or labeling-job-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-labeling-job-request
                    'make-describe-labeling-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-labeling-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-labeling-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labeling-job-name))
      (common-lisp:list
       (common-lisp:cons "LabelingJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-labeling-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-labeling-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-labeling-job-response-"))
   (labeling-job-status (common-lisp:error ":labeling-job-status is required")
    :type (common-lisp:or labeling-job-status common-lisp:null))
   (label-counters (common-lisp:error ":label-counters is required") :type
    (common-lisp:or label-counters common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (job-reference-code (common-lisp:error ":job-reference-code is required")
    :type (common-lisp:or job-reference-code common-lisp:null))
   (labeling-job-name (common-lisp:error ":labeling-job-name is required")
    :type (common-lisp:or labeling-job-name common-lisp:null))
   (labeling-job-arn (common-lisp:error ":labeling-job-arn is required") :type
    (common-lisp:or labeling-job-arn common-lisp:null))
   (label-attribute-name common-lisp:nil :type
    (common-lisp:or label-attribute-name common-lisp:null))
   (input-config (common-lisp:error ":input-config is required") :type
    (common-lisp:or labeling-job-input-config common-lisp:null))
   (output-config (common-lisp:error ":output-config is required") :type
    (common-lisp:or labeling-job-output-config common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (label-category-config-s3uri common-lisp:nil :type
    (common-lisp:or s3uri common-lisp:null))
   (stopping-conditions common-lisp:nil :type
    (common-lisp:or labeling-job-stopping-conditions common-lisp:null))
   (labeling-job-algorithms-config common-lisp:nil :type
    (common-lisp:or labeling-job-algorithms-config common-lisp:null))
   (human-task-config (common-lisp:error ":human-task-config is required")
    :type (common-lisp:or human-task-config common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (labeling-job-output common-lisp:nil :type
    (common-lisp:or labeling-job-output common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-labeling-job-response
                    'make-describe-labeling-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-labeling-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-labeling-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labeling-job-status))
      (common-lisp:list
       (common-lisp:cons "LabelingJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-counters))
      (common-lisp:list
       (common-lisp:cons "LabelCounters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-reference-code))
      (common-lisp:list
       (common-lisp:cons "JobReferenceCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labeling-job-name))
      (common-lisp:list
       (common-lisp:cons "LabelingJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labeling-job-arn))
      (common-lisp:list
       (common-lisp:cons "LabelingJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'label-attribute-name))
      (common-lisp:list
       (common-lisp:cons "LabelAttributeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-config))
      (common-lisp:list
       (common-lisp:cons "InputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'label-category-config-s3uri))
      (common-lisp:list
       (common-lisp:cons "LabelCategoryConfigS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-conditions))
      (common-lisp:list
       (common-lisp:cons "StoppingConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'labeling-job-algorithms-config))
      (common-lisp:list
       (common-lisp:cons "LabelingJobAlgorithmsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'human-task-config))
      (common-lisp:list
       (common-lisp:cons "HumanTaskConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labeling-job-output))
      (common-lisp:list
       (common-lisp:cons "LabelingJobOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-labeling-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-lineage-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-lineage-group-request-"))
   (lineage-group-name (common-lisp:error ":lineage-group-name is required")
    :type (common-lisp:or experiment-entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-lineage-group-request
                    'make-describe-lineage-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-lineage-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-lineage-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lineage-group-name))
      (common-lisp:list
       (common-lisp:cons "LineageGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-lineage-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-lineage-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-lineage-group-response-"))
   (lineage-group-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (lineage-group-arn common-lisp:nil :type
    (common-lisp:or lineage-group-arn common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or experiment-description common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-lineage-group-response
                    'make-describe-lineage-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-lineage-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-lineage-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lineage-group-name))
      (common-lisp:list
       (common-lisp:cons "LineageGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lineage-group-arn))
      (common-lisp:list
       (common-lisp:cons "LineageGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-lineage-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-model-bias-job-definition-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-model-bias-job-definition-request-"))
   (job-definition-name (common-lisp:error ":job-definition-name is required")
    :type (common-lisp:or monitoring-job-definition-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-model-bias-job-definition-request
                    'make-describe-model-bias-job-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-bias-job-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-bias-job-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-definition-name))
      (common-lisp:list
       (common-lisp:cons "JobDefinitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-bias-job-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-model-bias-job-definition-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-model-bias-job-definition-response-"))
   (job-definition-arn (common-lisp:error ":job-definition-arn is required")
    :type (common-lisp:or monitoring-job-definition-arn common-lisp:null))
   (job-definition-name (common-lisp:error ":job-definition-name is required")
    :type (common-lisp:or monitoring-job-definition-name common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (model-bias-baseline-config common-lisp:nil :type
    (common-lisp:or model-bias-baseline-config common-lisp:null))
   (model-bias-app-specification
    (common-lisp:error ":model-bias-app-specification is required") :type
    (common-lisp:or model-bias-app-specification common-lisp:null))
   (model-bias-job-input
    (common-lisp:error ":model-bias-job-input is required") :type
    (common-lisp:or model-bias-job-input common-lisp:null))
   (model-bias-job-output-config
    (common-lisp:error ":model-bias-job-output-config is required") :type
    (common-lisp:or monitoring-output-config common-lisp:null))
   (job-resources (common-lisp:error ":job-resources is required") :type
    (common-lisp:or monitoring-resources common-lisp:null))
   (network-config common-lisp:nil :type
    (common-lisp:or monitoring-network-config common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (stopping-condition common-lisp:nil :type
    (common-lisp:or monitoring-stopping-condition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-model-bias-job-definition-response
                    'make-describe-model-bias-job-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-bias-job-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-bias-job-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-definition-arn))
      (common-lisp:list
       (common-lisp:cons "JobDefinitionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-definition-name))
      (common-lisp:list
       (common-lisp:cons "JobDefinitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-bias-baseline-config))
      (common-lisp:list
       (common-lisp:cons "ModelBiasBaselineConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-bias-app-specification))
      (common-lisp:list
       (common-lisp:cons "ModelBiasAppSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-bias-job-input))
      (common-lisp:list
       (common-lisp:cons "ModelBiasJobInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-bias-job-output-config))
      (common-lisp:list
       (common-lisp:cons "ModelBiasJobOutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-resources))
      (common-lisp:list
       (common-lisp:cons "JobResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-config))
      (common-lisp:list
       (common-lisp:cons "NetworkConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-condition))
      (common-lisp:list
       (common-lisp:cons "StoppingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-bias-job-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-model-card-export-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-model-card-export-job-request-"))
   (model-card-export-job-arn
    (common-lisp:error ":model-card-export-job-arn is required") :type
    (common-lisp:or model-card-export-job-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-model-card-export-job-request
                    'make-describe-model-card-export-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-card-export-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-card-export-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-card-export-job-arn))
      (common-lisp:list
       (common-lisp:cons "ModelCardExportJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-card-export-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-model-card-export-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-model-card-export-job-response-"))
   (model-card-export-job-name
    (common-lisp:error ":model-card-export-job-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (model-card-export-job-arn
    (common-lisp:error ":model-card-export-job-arn is required") :type
    (common-lisp:or model-card-export-job-arn common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or model-card-export-job-status common-lisp:null))
   (model-card-name (common-lisp:error ":model-card-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (model-card-version (common-lisp:error ":model-card-version is required")
    :type (common-lisp:or integer common-lisp:null))
   (output-config (common-lisp:error ":output-config is required") :type
    (common-lisp:or model-card-export-output-config common-lisp:null))
   (created-at (common-lisp:error ":created-at is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-at (common-lisp:error ":last-modified-at is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (export-artifacts common-lisp:nil :type
    (common-lisp:or model-card-export-artifacts common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-model-card-export-job-response
                    'make-describe-model-card-export-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-card-export-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-card-export-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-card-export-job-name))
      (common-lisp:list
       (common-lisp:cons "ModelCardExportJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-card-export-job-arn))
      (common-lisp:list
       (common-lisp:cons "ModelCardExportJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-name))
      (common-lisp:list
       (common-lisp:cons "ModelCardName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-version))
      (common-lisp:list
       (common-lisp:cons "ModelCardVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "LastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-artifacts))
      (common-lisp:list
       (common-lisp:cons "ExportArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-card-export-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-model-card-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-model-card-request-"))
   (model-card-name (common-lisp:error ":model-card-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (model-card-version common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-model-card-request
                    'make-describe-model-card-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-card-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-card-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-name))
      (common-lisp:list
       (common-lisp:cons "ModelCardName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-version))
      (common-lisp:list
       (common-lisp:cons "ModelCardVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-card-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-model-card-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-model-card-response-"))
   (model-card-arn (common-lisp:error ":model-card-arn is required") :type
    (common-lisp:or model-card-arn common-lisp:null))
   (model-card-name (common-lisp:error ":model-card-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (model-card-version (common-lisp:error ":model-card-version is required")
    :type (common-lisp:or integer common-lisp:null))
   (content (common-lisp:error ":content is required") :type
    (common-lisp:or model-card-content common-lisp:null))
   (model-card-status (common-lisp:error ":model-card-status is required")
    :type (common-lisp:or model-card-status common-lisp:null))
   (security-config common-lisp:nil :type
    (common-lisp:or model-card-security-config common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by (common-lisp:error ":created-by is required") :type
    (common-lisp:or user-context common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (model-card-processing-status common-lisp:nil :type
    (common-lisp:or model-card-processing-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-model-card-response
                    'make-describe-model-card-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-card-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-card-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-arn))
      (common-lisp:list
       (common-lisp:cons "ModelCardArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-name))
      (common-lisp:list
       (common-lisp:cons "ModelCardName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-version))
      (common-lisp:list
       (common-lisp:cons "ModelCardVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-status))
      (common-lisp:list
       (common-lisp:cons "ModelCardStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-config))
      (common-lisp:list
       (common-lisp:cons "SecurityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-card-processing-status))
      (common-lisp:list
       (common-lisp:cons "ModelCardProcessingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-card-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-model-explainability-job-definition-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-model-explainability-job-definition-request-"))
   (job-definition-name (common-lisp:error ":job-definition-name is required")
    :type (common-lisp:or monitoring-job-definition-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-model-explainability-job-definition-request
                    'make-describe-model-explainability-job-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-explainability-job-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-explainability-job-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-definition-name))
      (common-lisp:list
       (common-lisp:cons "JobDefinitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-explainability-job-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-model-explainability-job-definition-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-model-explainability-job-definition-response-"))
   (job-definition-arn (common-lisp:error ":job-definition-arn is required")
    :type (common-lisp:or monitoring-job-definition-arn common-lisp:null))
   (job-definition-name (common-lisp:error ":job-definition-name is required")
    :type (common-lisp:or monitoring-job-definition-name common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (model-explainability-baseline-config common-lisp:nil :type
    (common-lisp:or model-explainability-baseline-config common-lisp:null))
   (model-explainability-app-specification
    (common-lisp:error ":model-explainability-app-specification is required")
    :type
    (common-lisp:or model-explainability-app-specification common-lisp:null))
   (model-explainability-job-input
    (common-lisp:error ":model-explainability-job-input is required") :type
    (common-lisp:or model-explainability-job-input common-lisp:null))
   (model-explainability-job-output-config
    (common-lisp:error ":model-explainability-job-output-config is required")
    :type (common-lisp:or monitoring-output-config common-lisp:null))
   (job-resources (common-lisp:error ":job-resources is required") :type
    (common-lisp:or monitoring-resources common-lisp:null))
   (network-config common-lisp:nil :type
    (common-lisp:or monitoring-network-config common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (stopping-condition common-lisp:nil :type
    (common-lisp:or monitoring-stopping-condition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-model-explainability-job-definition-response
                    'make-describe-model-explainability-job-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-explainability-job-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-explainability-job-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-definition-arn))
      (common-lisp:list
       (common-lisp:cons "JobDefinitionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-definition-name))
      (common-lisp:list
       (common-lisp:cons "JobDefinitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-explainability-baseline-config))
      (common-lisp:list
       (common-lisp:cons "ModelExplainabilityBaselineConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-explainability-app-specification))
      (common-lisp:list
       (common-lisp:cons "ModelExplainabilityAppSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-explainability-job-input))
      (common-lisp:list
       (common-lisp:cons "ModelExplainabilityJobInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-explainability-job-output-config))
      (common-lisp:list
       (common-lisp:cons "ModelExplainabilityJobOutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-resources))
      (common-lisp:list
       (common-lisp:cons "JobResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-config))
      (common-lisp:list
       (common-lisp:cons "NetworkConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-condition))
      (common-lisp:list
       (common-lisp:cons "StoppingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-explainability-job-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-model-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-model-input-"))
   (model-name (common-lisp:error ":model-name is required") :type
    (common-lisp:or model-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-model-input 'make-describe-model-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input describe-model-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input describe-model-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input describe-model-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-model-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-model-output-"))
   (model-name (common-lisp:error ":model-name is required") :type
    (common-lisp:or model-name common-lisp:null))
   (primary-container common-lisp:nil :type
    (common-lisp:or container-definition common-lisp:null))
   (containers common-lisp:nil :type
    (common-lisp:or container-definition-list common-lisp:null))
   (inference-execution-config common-lisp:nil :type
    (common-lisp:or inference-execution-config common-lisp:null))
   (execution-role-arn (common-lisp:error ":execution-role-arn is required")
    :type (common-lisp:or role-arn common-lisp:null))
   (vpc-config common-lisp:nil :type
    (common-lisp:or vpc-config common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (model-arn (common-lisp:error ":model-arn is required") :type
    (common-lisp:or model-arn common-lisp:null))
   (enable-network-isolation common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-model-output 'make-describe-model-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-container))
      (common-lisp:list
       (common-lisp:cons "PrimaryContainer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'containers))
      (common-lisp:list
       (common-lisp:cons "Containers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-execution-config))
      (common-lisp:list
       (common-lisp:cons "InferenceExecutionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-arn))
      (common-lisp:list
       (common-lisp:cons "ModelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-network-isolation))
      (common-lisp:list
       (common-lisp:cons "EnableNetworkIsolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-model-package-group-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-model-package-group-input-"))
   (model-package-group-name
    (common-lisp:error ":model-package-group-name is required") :type
    (common-lisp:or arn-or-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-model-package-group-input
                    'make-describe-model-package-group-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-package-group-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-package-group-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-name))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-package-group-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-model-package-group-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-model-package-group-output-"))
   (model-package-group-name
    (common-lisp:error ":model-package-group-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (model-package-group-arn
    (common-lisp:error ":model-package-group-arn is required") :type
    (common-lisp:or model-package-group-arn common-lisp:null))
   (model-package-group-description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or creation-time common-lisp:null))
   (created-by (common-lisp:error ":created-by is required") :type
    (common-lisp:or user-context common-lisp:null))
   (model-package-group-status
    (common-lisp:error ":model-package-group-status is required") :type
    (common-lisp:or model-package-group-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-model-package-group-output
                    'make-describe-model-package-group-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-package-group-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-package-group-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-name))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-arn))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-description))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-status))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-package-group-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-model-package-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-model-package-input-"))
   (model-package-name (common-lisp:error ":model-package-name is required")
    :type (common-lisp:or versioned-arn-or-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-model-package-input
                    'make-describe-model-package-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-package-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-package-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-package-name))
      (common-lisp:list
       (common-lisp:cons "ModelPackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-package-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-model-package-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-model-package-output-"))
   (model-package-name (common-lisp:error ":model-package-name is required")
    :type (common-lisp:or entity-name common-lisp:null))
   (model-package-group-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (model-package-version common-lisp:nil :type
    (common-lisp:or model-package-version common-lisp:null))
   (model-package-arn (common-lisp:error ":model-package-arn is required")
    :type (common-lisp:or model-package-arn common-lisp:null))
   (model-package-description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or creation-time common-lisp:null))
   (inference-specification common-lisp:nil :type
    (common-lisp:or inference-specification common-lisp:null))
   (source-algorithm-specification common-lisp:nil :type
    (common-lisp:or source-algorithm-specification common-lisp:null))
   (validation-specification common-lisp:nil :type
    (common-lisp:or model-package-validation-specification common-lisp:null))
   (model-package-status
    (common-lisp:error ":model-package-status is required") :type
    (common-lisp:or model-package-status common-lisp:null))
   (model-package-status-details
    (common-lisp:error ":model-package-status-details is required") :type
    (common-lisp:or model-package-status-details common-lisp:null))
   (certify-for-marketplace common-lisp:nil :type
    (common-lisp:or certify-for-marketplace common-lisp:null))
   (model-approval-status common-lisp:nil :type
    (common-lisp:or model-approval-status common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (metadata-properties common-lisp:nil :type
    (common-lisp:or metadata-properties common-lisp:null))
   (model-metrics common-lisp:nil :type
    (common-lisp:or model-metrics common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (approval-description common-lisp:nil :type
    (common-lisp:or approval-description common-lisp:null))
   (customer-metadata-properties common-lisp:nil :type
    (common-lisp:or customer-metadata-map common-lisp:null))
   (drift-check-baselines common-lisp:nil :type
    (common-lisp:or drift-check-baselines common-lisp:null))
   (domain common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (task common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (sample-payload-url common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (additional-inference-specifications common-lisp:nil :type
    (common-lisp:or additional-inference-specifications common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-model-package-output
                    'make-describe-model-package-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-package-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-package-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-package-name))
      (common-lisp:list
       (common-lisp:cons "ModelPackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-name))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-version))
      (common-lisp:list
       (common-lisp:cons "ModelPackageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-package-arn))
      (common-lisp:list
       (common-lisp:cons "ModelPackageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-description))
      (common-lisp:list
       (common-lisp:cons "ModelPackageDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-specification))
      (common-lisp:list
       (common-lisp:cons "InferenceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-algorithm-specification))
      (common-lisp:list
       (common-lisp:cons "SourceAlgorithmSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'validation-specification))
      (common-lisp:list
       (common-lisp:cons "ValidationSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-status))
      (common-lisp:list
       (common-lisp:cons "ModelPackageStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-status-details))
      (common-lisp:list
       (common-lisp:cons "ModelPackageStatusDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certify-for-marketplace))
      (common-lisp:list
       (common-lisp:cons "CertifyForMarketplace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-approval-status))
      (common-lisp:list
       (common-lisp:cons "ModelApprovalStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-properties))
      (common-lisp:list
       (common-lisp:cons "MetadataProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-metrics))
      (common-lisp:list
       (common-lisp:cons "ModelMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approval-description))
      (common-lisp:list
       (common-lisp:cons "ApprovalDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-metadata-properties))
      (common-lisp:list
       (common-lisp:cons "CustomerMetadataProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'drift-check-baselines))
      (common-lisp:list
       (common-lisp:cons "DriftCheckBaselines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task))
      (common-lisp:list
       (common-lisp:cons "Task"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-payload-url))
      (common-lisp:list
       (common-lisp:cons "SamplePayloadUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-inference-specifications))
      (common-lisp:list
       (common-lisp:cons "AdditionalInferenceSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-package-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-model-quality-job-definition-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-model-quality-job-definition-request-"))
   (job-definition-name (common-lisp:error ":job-definition-name is required")
    :type (common-lisp:or monitoring-job-definition-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-model-quality-job-definition-request
                    'make-describe-model-quality-job-definition-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-quality-job-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-quality-job-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-definition-name))
      (common-lisp:list
       (common-lisp:cons "JobDefinitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-quality-job-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-model-quality-job-definition-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-model-quality-job-definition-response-"))
   (job-definition-arn (common-lisp:error ":job-definition-arn is required")
    :type (common-lisp:or monitoring-job-definition-arn common-lisp:null))
   (job-definition-name (common-lisp:error ":job-definition-name is required")
    :type (common-lisp:or monitoring-job-definition-name common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (model-quality-baseline-config common-lisp:nil :type
    (common-lisp:or model-quality-baseline-config common-lisp:null))
   (model-quality-app-specification
    (common-lisp:error ":model-quality-app-specification is required") :type
    (common-lisp:or model-quality-app-specification common-lisp:null))
   (model-quality-job-input
    (common-lisp:error ":model-quality-job-input is required") :type
    (common-lisp:or model-quality-job-input common-lisp:null))
   (model-quality-job-output-config
    (common-lisp:error ":model-quality-job-output-config is required") :type
    (common-lisp:or monitoring-output-config common-lisp:null))
   (job-resources (common-lisp:error ":job-resources is required") :type
    (common-lisp:or monitoring-resources common-lisp:null))
   (network-config common-lisp:nil :type
    (common-lisp:or monitoring-network-config common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (stopping-condition common-lisp:nil :type
    (common-lisp:or monitoring-stopping-condition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-model-quality-job-definition-response
                    'make-describe-model-quality-job-definition-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-quality-job-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-quality-job-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-definition-arn))
      (common-lisp:list
       (common-lisp:cons "JobDefinitionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-definition-name))
      (common-lisp:list
       (common-lisp:cons "JobDefinitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-quality-baseline-config))
      (common-lisp:list
       (common-lisp:cons "ModelQualityBaselineConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-quality-app-specification))
      (common-lisp:list
       (common-lisp:cons "ModelQualityAppSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-quality-job-input))
      (common-lisp:list
       (common-lisp:cons "ModelQualityJobInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-quality-job-output-config))
      (common-lisp:list
       (common-lisp:cons "ModelQualityJobOutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-resources))
      (common-lisp:list
       (common-lisp:cons "JobResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-config))
      (common-lisp:list
       (common-lisp:cons "NetworkConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-condition))
      (common-lisp:list
       (common-lisp:cons "StoppingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-model-quality-job-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-monitoring-schedule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-monitoring-schedule-request-"))
   (monitoring-schedule-name
    (common-lisp:error ":monitoring-schedule-name is required") :type
    (common-lisp:or monitoring-schedule-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-monitoring-schedule-request
                    'make-describe-monitoring-schedule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-monitoring-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-monitoring-schedule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-name))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-monitoring-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-monitoring-schedule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-monitoring-schedule-response-"))
   (monitoring-schedule-arn
    (common-lisp:error ":monitoring-schedule-arn is required") :type
    (common-lisp:or monitoring-schedule-arn common-lisp:null))
   (monitoring-schedule-name
    (common-lisp:error ":monitoring-schedule-name is required") :type
    (common-lisp:or monitoring-schedule-name common-lisp:null))
   (monitoring-schedule-status
    (common-lisp:error ":monitoring-schedule-status is required") :type
    (common-lisp:or schedule-status common-lisp:null))
   (monitoring-type common-lisp:nil :type
    (common-lisp:or monitoring-type common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (monitoring-schedule-config
    (common-lisp:error ":monitoring-schedule-config is required") :type
    (common-lisp:or monitoring-schedule-config common-lisp:null))
   (endpoint-name common-lisp:nil :type
    (common-lisp:or endpoint-name common-lisp:null))
   (last-monitoring-execution-summary common-lisp:nil :type
    (common-lisp:or monitoring-execution-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-monitoring-schedule-response
                    'make-describe-monitoring-schedule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-monitoring-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-monitoring-schedule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-name))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-status))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-type))
      (common-lisp:list
       (common-lisp:cons "MonitoringType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-config))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-monitoring-execution-summary))
      (common-lisp:list
       (common-lisp:cons "LastMonitoringExecutionSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-monitoring-schedule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-notebook-instance-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-notebook-instance-input-"))
   (notebook-instance-name
    (common-lisp:error ":notebook-instance-name is required") :type
    (common-lisp:or notebook-instance-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-notebook-instance-input
                    'make-describe-notebook-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-notebook-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-notebook-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-name))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-notebook-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-notebook-instance-lifecycle-config-input
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-notebook-instance-lifecycle-config-input-"))
   (notebook-instance-lifecycle-config-name
    (common-lisp:error ":notebook-instance-lifecycle-config-name is required")
    :type
    (common-lisp:or notebook-instance-lifecycle-config-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-notebook-instance-lifecycle-config-input
                    'make-describe-notebook-instance-lifecycle-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-notebook-instance-lifecycle-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-notebook-instance-lifecycle-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-lifecycle-config-name))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceLifecycleConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-notebook-instance-lifecycle-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-notebook-instance-lifecycle-config-output
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-notebook-instance-lifecycle-config-output-"))
   (notebook-instance-lifecycle-config-arn common-lisp:nil :type
    (common-lisp:or notebook-instance-lifecycle-config-arn common-lisp:null))
   (notebook-instance-lifecycle-config-name common-lisp:nil :type
    (common-lisp:or notebook-instance-lifecycle-config-name common-lisp:null))
   (on-create common-lisp:nil :type
    (common-lisp:or notebook-instance-lifecycle-config-list common-lisp:null))
   (on-start common-lisp:nil :type
    (common-lisp:or notebook-instance-lifecycle-config-list common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or last-modified-time common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-notebook-instance-lifecycle-config-output
                    'make-describe-notebook-instance-lifecycle-config-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-notebook-instance-lifecycle-config-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-notebook-instance-lifecycle-config-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-lifecycle-config-arn))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceLifecycleConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-lifecycle-config-name))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceLifecycleConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-create))
      (common-lisp:list
       (common-lisp:cons "OnCreate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-start))
      (common-lisp:list
       (common-lisp:cons "OnStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-notebook-instance-lifecycle-config-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-notebook-instance-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-notebook-instance-output-"))
   (notebook-instance-arn common-lisp:nil :type
    (common-lisp:or notebook-instance-arn common-lisp:null))
   (notebook-instance-name common-lisp:nil :type
    (common-lisp:or notebook-instance-name common-lisp:null))
   (notebook-instance-status common-lisp:nil :type
    (common-lisp:or notebook-instance-status common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (url common-lisp:nil :type
    (common-lisp:or notebook-instance-url common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or instance-type common-lisp:null))
   (subnet-id common-lisp:nil :type
    (common-lisp:or subnet-id common-lisp:null))
   (security-groups common-lisp:nil :type
    (common-lisp:or security-group-ids common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (network-interface-id common-lisp:nil :type
    (common-lisp:or network-interface-id common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or last-modified-time common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (notebook-instance-lifecycle-config-name common-lisp:nil :type
    (common-lisp:or notebook-instance-lifecycle-config-name common-lisp:null))
   (direct-internet-access common-lisp:nil :type
    (common-lisp:or direct-internet-access common-lisp:null))
   (volume-size-in-gb common-lisp:nil :type
    (common-lisp:or notebook-instance-volume-size-in-gb common-lisp:null))
   (accelerator-types common-lisp:nil :type
    (common-lisp:or notebook-instance-accelerator-types common-lisp:null))
   (default-code-repository common-lisp:nil :type
    (common-lisp:or code-repository-name-or-url common-lisp:null))
   (additional-code-repositories common-lisp:nil :type
    (common-lisp:or additional-code-repository-names-or-urls common-lisp:null))
   (root-access common-lisp:nil :type
    (common-lisp:or root-access common-lisp:null))
   (platform-identifier common-lisp:nil :type
    (common-lisp:or platform-identifier common-lisp:null))
   (instance-metadata-service-configuration common-lisp:nil :type
    (common-lisp:or instance-metadata-service-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-notebook-instance-output
                    'make-describe-notebook-instance-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-notebook-instance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-notebook-instance-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-arn))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-name))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-status))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "SubnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "NetworkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-lifecycle-config-name))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceLifecycleConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'direct-internet-access))
      (common-lisp:list
       (common-lisp:cons "DirectInternetAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "VolumeSizeInGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-types))
      (common-lisp:list
       (common-lisp:cons "AcceleratorTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-code-repository))
      (common-lisp:list
       (common-lisp:cons "DefaultCodeRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-code-repositories))
      (common-lisp:list
       (common-lisp:cons "AdditionalCodeRepositories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-access))
      (common-lisp:list
       (common-lisp:cons "RootAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'platform-identifier))
      (common-lisp:list
       (common-lisp:cons "PlatformIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-metadata-service-configuration))
      (common-lisp:list
       (common-lisp:cons "InstanceMetadataServiceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-notebook-instance-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-pipeline-definition-for-execution-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-pipeline-definition-for-execution-request-"))
   (pipeline-execution-arn
    (common-lisp:error ":pipeline-execution-arn is required") :type
    (common-lisp:or pipeline-execution-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-pipeline-definition-for-execution-request
                    'make-describe-pipeline-definition-for-execution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipeline-definition-for-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipeline-definition-for-execution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-arn))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipeline-definition-for-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-pipeline-definition-for-execution-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-pipeline-definition-for-execution-response-"))
   (pipeline-definition common-lisp:nil :type
    (common-lisp:or pipeline-definition common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-pipeline-definition-for-execution-response
                    'make-describe-pipeline-definition-for-execution-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipeline-definition-for-execution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipeline-definition-for-execution-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-definition))
      (common-lisp:list
       (common-lisp:cons "PipelineDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipeline-definition-for-execution-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-pipeline-execution-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-pipeline-execution-request-"))
   (pipeline-execution-arn
    (common-lisp:error ":pipeline-execution-arn is required") :type
    (common-lisp:or pipeline-execution-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-pipeline-execution-request
                    'make-describe-pipeline-execution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipeline-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipeline-execution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-arn))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipeline-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-pipeline-execution-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-pipeline-execution-response-"))
   (pipeline-arn common-lisp:nil :type
    (common-lisp:or pipeline-arn common-lisp:null))
   (pipeline-execution-arn common-lisp:nil :type
    (common-lisp:or pipeline-execution-arn common-lisp:null))
   (pipeline-execution-display-name common-lisp:nil :type
    (common-lisp:or pipeline-execution-name common-lisp:null))
   (pipeline-execution-status common-lisp:nil :type
    (common-lisp:or pipeline-execution-status common-lisp:null))
   (pipeline-execution-description common-lisp:nil :type
    (common-lisp:or pipeline-execution-description common-lisp:null))
   (pipeline-experiment-config common-lisp:nil :type
    (common-lisp:or pipeline-experiment-config common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or pipeline-execution-failure-reason common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (parallelism-configuration common-lisp:nil :type
    (common-lisp:or parallelism-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-pipeline-execution-response
                    'make-describe-pipeline-execution-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipeline-execution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipeline-execution-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "PipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-arn))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-display-name))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-status))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-description))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-experiment-config))
      (common-lisp:list
       (common-lisp:cons "PipelineExperimentConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallelism-configuration))
      (common-lisp:list
       (common-lisp:cons "ParallelismConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipeline-execution-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-pipeline-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-pipeline-request-"))
   (pipeline-name (common-lisp:error ":pipeline-name is required") :type
    (common-lisp:or pipeline-name-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-pipeline-request
                    'make-describe-pipeline-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipeline-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "PipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-pipeline-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-pipeline-response-"))
   (pipeline-arn common-lisp:nil :type
    (common-lisp:or pipeline-arn common-lisp:null))
   (pipeline-name common-lisp:nil :type
    (common-lisp:or pipeline-name common-lisp:null))
   (pipeline-display-name common-lisp:nil :type
    (common-lisp:or pipeline-name common-lisp:null))
   (pipeline-definition common-lisp:nil :type
    (common-lisp:or pipeline-definition common-lisp:null))
   (pipeline-description common-lisp:nil :type
    (common-lisp:or pipeline-description common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (pipeline-status common-lisp:nil :type
    (common-lisp:or pipeline-status common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-run-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (parallelism-configuration common-lisp:nil :type
    (common-lisp:or parallelism-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-pipeline-response
                    'make-describe-pipeline-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "PipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "PipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-display-name))
      (common-lisp:list
       (common-lisp:cons "PipelineDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-definition))
      (common-lisp:list
       (common-lisp:cons "PipelineDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-description))
      (common-lisp:list
       (common-lisp:cons "PipelineDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-status))
      (common-lisp:list
       (common-lisp:cons "PipelineStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-time))
      (common-lisp:list
       (common-lisp:cons "LastRunTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallelism-configuration))
      (common-lisp:list
       (common-lisp:cons "ParallelismConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-processing-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-processing-job-request-"))
   (processing-job-name (common-lisp:error ":processing-job-name is required")
    :type (common-lisp:or processing-job-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-processing-job-request
                    'make-describe-processing-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-processing-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-processing-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-job-name))
      (common-lisp:list
       (common-lisp:cons "ProcessingJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-processing-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-processing-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-processing-job-response-"))
   (processing-inputs common-lisp:nil :type
    (common-lisp:or processing-inputs common-lisp:null))
   (processing-output-config common-lisp:nil :type
    (common-lisp:or processing-output-config common-lisp:null))
   (processing-job-name (common-lisp:error ":processing-job-name is required")
    :type (common-lisp:or processing-job-name common-lisp:null))
   (processing-resources
    (common-lisp:error ":processing-resources is required") :type
    (common-lisp:or processing-resources common-lisp:null))
   (stopping-condition common-lisp:nil :type
    (common-lisp:or processing-stopping-condition common-lisp:null))
   (app-specification (common-lisp:error ":app-specification is required")
    :type (common-lisp:or app-specification common-lisp:null))
   (environment common-lisp:nil :type
    (common-lisp:or processing-environment-map common-lisp:null))
   (network-config common-lisp:nil :type
    (common-lisp:or network-config common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (experiment-config common-lisp:nil :type
    (common-lisp:or experiment-config common-lisp:null))
   (processing-job-arn (common-lisp:error ":processing-job-arn is required")
    :type (common-lisp:or processing-job-arn common-lisp:null))
   (processing-job-status
    (common-lisp:error ":processing-job-status is required") :type
    (common-lisp:or processing-job-status common-lisp:null))
   (exit-message common-lisp:nil :type
    (common-lisp:or exit-message common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (processing-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (processing-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (monitoring-schedule-arn common-lisp:nil :type
    (common-lisp:or monitoring-schedule-arn common-lisp:null))
   (auto-mljob-arn common-lisp:nil :type
    (common-lisp:or auto-mljob-arn common-lisp:null))
   (training-job-arn common-lisp:nil :type
    (common-lisp:or training-job-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-processing-job-response
                    'make-describe-processing-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-processing-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-processing-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-inputs))
      (common-lisp:list
       (common-lisp:cons "ProcessingInputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'processing-output-config))
      (common-lisp:list
       (common-lisp:cons "ProcessingOutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-job-name))
      (common-lisp:list
       (common-lisp:cons "ProcessingJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'processing-resources))
      (common-lisp:list
       (common-lisp:cons "ProcessingResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-condition))
      (common-lisp:list
       (common-lisp:cons "StoppingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-specification))
      (common-lisp:list
       (common-lisp:cons "AppSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-config))
      (common-lisp:list
       (common-lisp:cons "NetworkConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-config))
      (common-lisp:list
       (common-lisp:cons "ExperimentConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-job-arn))
      (common-lisp:list
       (common-lisp:cons "ProcessingJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'processing-job-status))
      (common-lisp:list
       (common-lisp:cons "ProcessingJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exit-message))
      (common-lisp:list
       (common-lisp:cons "ExitMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-end-time))
      (common-lisp:list
       (common-lisp:cons "ProcessingEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'processing-start-time))
      (common-lisp:list
       (common-lisp:cons "ProcessingStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mljob-arn))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-job-arn))
      (common-lisp:list
       (common-lisp:cons "TrainingJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-processing-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-project-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-project-input-"))
   (project-name (common-lisp:error ":project-name is required") :type
    (common-lisp:or project-entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-project-input 'make-describe-project-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "ProjectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-project-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-project-output-"))
   (project-arn (common-lisp:error ":project-arn is required") :type
    (common-lisp:or project-arn common-lisp:null))
   (project-name (common-lisp:error ":project-name is required") :type
    (common-lisp:or project-entity-name common-lisp:null))
   (project-id (common-lisp:error ":project-id is required") :type
    (common-lisp:or project-id common-lisp:null))
   (project-description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (service-catalog-provisioning-details
    (common-lisp:error ":service-catalog-provisioning-details is required")
    :type
    (common-lisp:or service-catalog-provisioning-details common-lisp:null))
   (service-catalog-provisioned-product-details common-lisp:nil :type
    (common-lisp:or service-catalog-provisioned-product-details
                    common-lisp:null))
   (project-status (common-lisp:error ":project-status is required") :type
    (common-lisp:or project-status common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-project-output 'make-describe-project-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "ProjectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "ProjectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "ProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-description))
      (common-lisp:list
       (common-lisp:cons "ProjectDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-catalog-provisioning-details))
      (common-lisp:list
       (common-lisp:cons "ServiceCatalogProvisioningDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-catalog-provisioned-product-details))
      (common-lisp:list
       (common-lisp:cons "ServiceCatalogProvisionedProductDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-status))
      (common-lisp:list
       (common-lisp:cons "ProjectStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-space-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-space-request-"))
   (domain-id (common-lisp:error ":domain-id is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (space-name (common-lisp:error ":space-name is required") :type
    (common-lisp:or space-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-space-request 'make-describe-space-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-space-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-space-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "SpaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-space-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-space-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-space-response-"))
   (domain-id common-lisp:nil :type
    (common-lisp:or domain-id common-lisp:null))
   (space-arn common-lisp:nil :type
    (common-lisp:or space-arn common-lisp:null))
   (space-name common-lisp:nil :type
    (common-lisp:or space-name common-lisp:null))
   (home-efs-file-system-uid common-lisp:nil :type
    (common-lisp:or efs-uid common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or space-status common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or last-modified-time common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (space-settings common-lisp:nil :type
    (common-lisp:or space-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-space-response 'make-describe-space-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-space-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-space-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-arn))
      (common-lisp:list
       (common-lisp:cons "SpaceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "SpaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'home-efs-file-system-uid))
      (common-lisp:list
       (common-lisp:cons "HomeEfsFileSystemUid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-settings))
      (common-lisp:list
       (common-lisp:cons "SpaceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-space-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-studio-lifecycle-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-studio-lifecycle-config-request-"))
   (studio-lifecycle-config-name
    (common-lisp:error ":studio-lifecycle-config-name is required") :type
    (common-lisp:or studio-lifecycle-config-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-studio-lifecycle-config-request
                    'make-describe-studio-lifecycle-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-studio-lifecycle-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-studio-lifecycle-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-lifecycle-config-name))
      (common-lisp:list
       (common-lisp:cons "StudioLifecycleConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-studio-lifecycle-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-studio-lifecycle-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-studio-lifecycle-config-response-"))
   (studio-lifecycle-config-arn common-lisp:nil :type
    (common-lisp:or studio-lifecycle-config-arn common-lisp:null))
   (studio-lifecycle-config-name common-lisp:nil :type
    (common-lisp:or studio-lifecycle-config-name common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (studio-lifecycle-config-content common-lisp:nil :type
    (common-lisp:or studio-lifecycle-config-content common-lisp:null))
   (studio-lifecycle-config-app-type common-lisp:nil :type
    (common-lisp:or studio-lifecycle-config-app-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-studio-lifecycle-config-response
                    'make-describe-studio-lifecycle-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-studio-lifecycle-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-studio-lifecycle-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-lifecycle-config-arn))
      (common-lisp:list
       (common-lisp:cons "StudioLifecycleConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-lifecycle-config-name))
      (common-lisp:list
       (common-lisp:cons "StudioLifecycleConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-lifecycle-config-content))
      (common-lisp:list
       (common-lisp:cons "StudioLifecycleConfigContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-lifecycle-config-app-type))
      (common-lisp:list
       (common-lisp:cons "StudioLifecycleConfigAppType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-studio-lifecycle-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-subscribed-workteam-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-subscribed-workteam-request-"))
   (workteam-arn (common-lisp:error ":workteam-arn is required") :type
    (common-lisp:or workteam-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-subscribed-workteam-request
                    'make-describe-subscribed-workteam-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-subscribed-workteam-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-subscribed-workteam-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workteam-arn))
      (common-lisp:list
       (common-lisp:cons "WorkteamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-subscribed-workteam-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-subscribed-workteam-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-subscribed-workteam-response-"))
   (subscribed-workteam (common-lisp:error ":subscribed-workteam is required")
    :type (common-lisp:or subscribed-workteam common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-subscribed-workteam-response
                    'make-describe-subscribed-workteam-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-subscribed-workteam-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-subscribed-workteam-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribed-workteam))
      (common-lisp:list
       (common-lisp:cons "SubscribedWorkteam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-subscribed-workteam-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-training-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-training-job-request-"))
   (training-job-name (common-lisp:error ":training-job-name is required")
    :type (common-lisp:or training-job-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-training-job-request
                    'make-describe-training-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-training-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-training-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-job-name))
      (common-lisp:list
       (common-lisp:cons "TrainingJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-training-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-training-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-training-job-response-"))
   (training-job-name (common-lisp:error ":training-job-name is required")
    :type (common-lisp:or training-job-name common-lisp:null))
   (training-job-arn (common-lisp:error ":training-job-arn is required") :type
    (common-lisp:or training-job-arn common-lisp:null))
   (tuning-job-arn common-lisp:nil :type
    (common-lisp:or hyper-parameter-tuning-job-arn common-lisp:null))
   (labeling-job-arn common-lisp:nil :type
    (common-lisp:or labeling-job-arn common-lisp:null))
   (auto-mljob-arn common-lisp:nil :type
    (common-lisp:or auto-mljob-arn common-lisp:null))
   (model-artifacts (common-lisp:error ":model-artifacts is required") :type
    (common-lisp:or model-artifacts common-lisp:null))
   (training-job-status (common-lisp:error ":training-job-status is required")
    :type (common-lisp:or training-job-status common-lisp:null))
   (secondary-status (common-lisp:error ":secondary-status is required") :type
    (common-lisp:or secondary-status common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (hyper-parameters common-lisp:nil :type
    (common-lisp:or hyper-parameters common-lisp:null))
   (algorithm-specification
    (common-lisp:error ":algorithm-specification is required") :type
    (common-lisp:or algorithm-specification common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (input-data-config common-lisp:nil :type
    (common-lisp:or input-data-config common-lisp:null))
   (output-data-config common-lisp:nil :type
    (common-lisp:or output-data-config common-lisp:null))
   (resource-config (common-lisp:error ":resource-config is required") :type
    (common-lisp:or resource-config common-lisp:null))
   (vpc-config common-lisp:nil :type
    (common-lisp:or vpc-config common-lisp:null))
   (stopping-condition (common-lisp:error ":stopping-condition is required")
    :type (common-lisp:or stopping-condition common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (training-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (training-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (secondary-status-transitions common-lisp:nil :type
    (common-lisp:or secondary-status-transitions common-lisp:null))
   (final-metric-data-list common-lisp:nil :type
    (common-lisp:or final-metric-data-list common-lisp:null))
   (enable-network-isolation common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (enable-inter-container-traffic-encryption common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (enable-managed-spot-training common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (checkpoint-config common-lisp:nil :type
    (common-lisp:or checkpoint-config common-lisp:null))
   (training-time-in-seconds common-lisp:nil :type
    (common-lisp:or training-time-in-seconds common-lisp:null))
   (billable-time-in-seconds common-lisp:nil :type
    (common-lisp:or billable-time-in-seconds common-lisp:null))
   (debug-hook-config common-lisp:nil :type
    (common-lisp:or debug-hook-config common-lisp:null))
   (experiment-config common-lisp:nil :type
    (common-lisp:or experiment-config common-lisp:null))
   (debug-rule-configurations common-lisp:nil :type
    (common-lisp:or debug-rule-configurations common-lisp:null))
   (tensor-board-output-config common-lisp:nil :type
    (common-lisp:or tensor-board-output-config common-lisp:null))
   (debug-rule-evaluation-statuses common-lisp:nil :type
    (common-lisp:or debug-rule-evaluation-statuses common-lisp:null))
   (profiler-config common-lisp:nil :type
    (common-lisp:or profiler-config common-lisp:null))
   (profiler-rule-configurations common-lisp:nil :type
    (common-lisp:or profiler-rule-configurations common-lisp:null))
   (profiler-rule-evaluation-statuses common-lisp:nil :type
    (common-lisp:or profiler-rule-evaluation-statuses common-lisp:null))
   (profiling-status common-lisp:nil :type
    (common-lisp:or profiling-status common-lisp:null))
   (retry-strategy common-lisp:nil :type
    (common-lisp:or retry-strategy common-lisp:null))
   (environment common-lisp:nil :type
    (common-lisp:or training-environment-map common-lisp:null))
   (warm-pool-status common-lisp:nil :type
    (common-lisp:or warm-pool-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-training-job-response
                    'make-describe-training-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-training-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-training-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-job-name))
      (common-lisp:list
       (common-lisp:cons "TrainingJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-job-arn))
      (common-lisp:list
       (common-lisp:cons "TrainingJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tuning-job-arn))
      (common-lisp:list
       (common-lisp:cons "TuningJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labeling-job-arn))
      (common-lisp:list
       (common-lisp:cons "LabelingJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mljob-arn))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-artifacts))
      (common-lisp:list
       (common-lisp:cons "ModelArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-job-status))
      (common-lisp:list
       (common-lisp:cons "TrainingJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secondary-status))
      (common-lisp:list
       (common-lisp:cons "SecondaryStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hyper-parameters))
      (common-lisp:list
       (common-lisp:cons "HyperParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'algorithm-specification))
      (common-lisp:list
       (common-lisp:cons "AlgorithmSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "OutputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-condition))
      (common-lisp:list
       (common-lisp:cons "StoppingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-start-time))
      (common-lisp:list
       (common-lisp:cons "TrainingStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-end-time))
      (common-lisp:list
       (common-lisp:cons "TrainingEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-status-transitions))
      (common-lisp:list
       (common-lisp:cons "SecondaryStatusTransitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'final-metric-data-list))
      (common-lisp:list
       (common-lisp:cons "FinalMetricDataList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-network-isolation))
      (common-lisp:list
       (common-lisp:cons "EnableNetworkIsolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-inter-container-traffic-encryption))
      (common-lisp:list
       (common-lisp:cons "EnableInterContainerTrafficEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-managed-spot-training))
      (common-lisp:list
       (common-lisp:cons "EnableManagedSpotTraining"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checkpoint-config))
      (common-lisp:list
       (common-lisp:cons "CheckpointConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-time-in-seconds))
      (common-lisp:list
       (common-lisp:cons "TrainingTimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'billable-time-in-seconds))
      (common-lisp:list
       (common-lisp:cons "BillableTimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'debug-hook-config))
      (common-lisp:list
       (common-lisp:cons "DebugHookConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-config))
      (common-lisp:list
       (common-lisp:cons "ExperimentConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'debug-rule-configurations))
      (common-lisp:list
       (common-lisp:cons "DebugRuleConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tensor-board-output-config))
      (common-lisp:list
       (common-lisp:cons "TensorBoardOutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'debug-rule-evaluation-statuses))
      (common-lisp:list
       (common-lisp:cons "DebugRuleEvaluationStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profiler-config))
      (common-lisp:list
       (common-lisp:cons "ProfilerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'profiler-rule-configurations))
      (common-lisp:list
       (common-lisp:cons "ProfilerRuleConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'profiler-rule-evaluation-statuses))
      (common-lisp:list
       (common-lisp:cons "ProfilerRuleEvaluationStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profiling-status))
      (common-lisp:list
       (common-lisp:cons "ProfilingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retry-strategy))
      (common-lisp:list
       (common-lisp:cons "RetryStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warm-pool-status))
      (common-lisp:list
       (common-lisp:cons "WarmPoolStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-training-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-transform-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-transform-job-request-"))
   (transform-job-name (common-lisp:error ":transform-job-name is required")
    :type (common-lisp:or transform-job-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-transform-job-request
                    'make-describe-transform-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-transform-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-transform-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-job-name))
      (common-lisp:list
       (common-lisp:cons "TransformJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-transform-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-transform-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-transform-job-response-"))
   (transform-job-name (common-lisp:error ":transform-job-name is required")
    :type (common-lisp:or transform-job-name common-lisp:null))
   (transform-job-arn (common-lisp:error ":transform-job-arn is required")
    :type (common-lisp:or transform-job-arn common-lisp:null))
   (transform-job-status
    (common-lisp:error ":transform-job-status is required") :type
    (common-lisp:or transform-job-status common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (model-name (common-lisp:error ":model-name is required") :type
    (common-lisp:or model-name common-lisp:null))
   (max-concurrent-transforms common-lisp:nil :type
    (common-lisp:or max-concurrent-transforms common-lisp:null))
   (model-client-config common-lisp:nil :type
    (common-lisp:or model-client-config common-lisp:null))
   (max-payload-in-mb common-lisp:nil :type
    (common-lisp:or max-payload-in-mb common-lisp:null))
   (batch-strategy common-lisp:nil :type
    (common-lisp:or batch-strategy common-lisp:null))
   (environment common-lisp:nil :type
    (common-lisp:or transform-environment-map common-lisp:null))
   (transform-input (common-lisp:error ":transform-input is required") :type
    (common-lisp:or transform-input common-lisp:null))
   (transform-output common-lisp:nil :type
    (common-lisp:or transform-output common-lisp:null))
   (data-capture-config common-lisp:nil :type
    (common-lisp:or batch-data-capture-config common-lisp:null))
   (transform-resources (common-lisp:error ":transform-resources is required")
    :type (common-lisp:or transform-resources common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (transform-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (transform-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (labeling-job-arn common-lisp:nil :type
    (common-lisp:or labeling-job-arn common-lisp:null))
   (auto-mljob-arn common-lisp:nil :type
    (common-lisp:or auto-mljob-arn common-lisp:null))
   (data-processing common-lisp:nil :type
    (common-lisp:or data-processing common-lisp:null))
   (experiment-config common-lisp:nil :type
    (common-lisp:or experiment-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-transform-job-response
                    'make-describe-transform-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-transform-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-transform-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-job-name))
      (common-lisp:list
       (common-lisp:cons "TransformJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-job-arn))
      (common-lisp:list
       (common-lisp:cons "TransformJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transform-job-status))
      (common-lisp:list
       (common-lisp:cons "TransformJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-concurrent-transforms))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrentTransforms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-client-config))
      (common-lisp:list
       (common-lisp:cons "ModelClientConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-payload-in-mb))
      (common-lisp:list
       (common-lisp:cons "MaxPayloadInMB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-strategy))
      (common-lisp:list
       (common-lisp:cons "BatchStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-input))
      (common-lisp:list
       (common-lisp:cons "TransformInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-output))
      (common-lisp:list
       (common-lisp:cons "TransformOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-capture-config))
      (common-lisp:list
       (common-lisp:cons "DataCaptureConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-resources))
      (common-lisp:list
       (common-lisp:cons "TransformResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transform-start-time))
      (common-lisp:list
       (common-lisp:cons "TransformStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-end-time))
      (common-lisp:list
       (common-lisp:cons "TransformEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labeling-job-arn))
      (common-lisp:list
       (common-lisp:cons "LabelingJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mljob-arn))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-processing))
      (common-lisp:list
       (common-lisp:cons "DataProcessing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-config))
      (common-lisp:list
       (common-lisp:cons "ExperimentConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-transform-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-trial-component-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-trial-component-request-"))
   (trial-component-name
    (common-lisp:error ":trial-component-name is required") :type
    (common-lisp:or experiment-entity-name-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-trial-component-request
                    'make-describe-trial-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-trial-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-trial-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trial-component-name))
      (common-lisp:list
       (common-lisp:cons "TrialComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-trial-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-trial-component-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-trial-component-response-"))
   (trial-component-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (trial-component-arn common-lisp:nil :type
    (common-lisp:or trial-component-arn common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (source common-lisp:nil :type
    (common-lisp:or trial-component-source common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or trial-component-status common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or trial-component-parameters common-lisp:null))
   (input-artifacts common-lisp:nil :type
    (common-lisp:or trial-component-artifacts common-lisp:null))
   (output-artifacts common-lisp:nil :type
    (common-lisp:or trial-component-artifacts common-lisp:null))
   (metadata-properties common-lisp:nil :type
    (common-lisp:or metadata-properties common-lisp:null))
   (metrics common-lisp:nil :type
    (common-lisp:or trial-component-metric-summaries common-lisp:null))
   (lineage-group-arn common-lisp:nil :type
    (common-lisp:or lineage-group-arn common-lisp:null))
   (sources common-lisp:nil :type
    (common-lisp:or trial-component-sources common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-trial-component-response
                    'make-describe-trial-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-trial-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-trial-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trial-component-name))
      (common-lisp:list
       (common-lisp:cons "TrialComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-component-arn))
      (common-lisp:list
       (common-lisp:cons "TrialComponentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-artifacts))
      (common-lisp:list
       (common-lisp:cons "InputArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-artifacts))
      (common-lisp:list
       (common-lisp:cons "OutputArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-properties))
      (common-lisp:list
       (common-lisp:cons "MetadataProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lineage-group-arn))
      (common-lisp:list
       (common-lisp:cons "LineageGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sources))
      (common-lisp:list
       (common-lisp:cons "Sources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-trial-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-trial-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-trial-request-"))
   (trial-name (common-lisp:error ":trial-name is required") :type
    (common-lisp:or experiment-entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-trial-request 'make-describe-trial-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-trial-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-trial-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-name))
      (common-lisp:list
       (common-lisp:cons "TrialName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-trial-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-trial-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-trial-response-"))
   (trial-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (trial-arn common-lisp:nil :type
    (common-lisp:or trial-arn common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (experiment-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (source common-lisp:nil :type
    (common-lisp:or trial-source common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (metadata-properties common-lisp:nil :type
    (common-lisp:or metadata-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-trial-response 'make-describe-trial-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-trial-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-trial-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-name))
      (common-lisp:list
       (common-lisp:cons "TrialName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-arn))
      (common-lisp:list
       (common-lisp:cons "TrialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-name))
      (common-lisp:list
       (common-lisp:cons "ExperimentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-properties))
      (common-lisp:list
       (common-lisp:cons "MetadataProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-trial-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-user-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-user-profile-request-"))
   (domain-id (common-lisp:error ":domain-id is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (user-profile-name (common-lisp:error ":user-profile-name is required")
    :type (common-lisp:or user-profile-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-user-profile-request
                    'make-describe-user-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-profile-name))
      (common-lisp:list
       (common-lisp:cons "UserProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-user-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-user-profile-response-"))
   (domain-id common-lisp:nil :type
    (common-lisp:or domain-id common-lisp:null))
   (user-profile-arn common-lisp:nil :type
    (common-lisp:or user-profile-arn common-lisp:null))
   (user-profile-name common-lisp:nil :type
    (common-lisp:or user-profile-name common-lisp:null))
   (home-efs-file-system-uid common-lisp:nil :type
    (common-lisp:or efs-uid common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or user-profile-status common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or last-modified-time common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (single-sign-on-user-identifier common-lisp:nil :type
    (common-lisp:or single-sign-on-user-identifier common-lisp:null))
   (single-sign-on-user-value common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (user-settings common-lisp:nil :type
    (common-lisp:or user-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-user-profile-response
                    'make-describe-user-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-profile-arn))
      (common-lisp:list
       (common-lisp:cons "UserProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-profile-name))
      (common-lisp:list
       (common-lisp:cons "UserProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'home-efs-file-system-uid))
      (common-lisp:list
       (common-lisp:cons "HomeEfsFileSystemUid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'single-sign-on-user-identifier))
      (common-lisp:list
       (common-lisp:cons "SingleSignOnUserIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'single-sign-on-user-value))
      (common-lisp:list
       (common-lisp:cons "SingleSignOnUserValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-settings))
      (common-lisp:list
       (common-lisp:cons "UserSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-user-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-workforce-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-workforce-request-"))
   (workforce-name (common-lisp:error ":workforce-name is required") :type
    (common-lisp:or workforce-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-workforce-request
                    'make-describe-workforce-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workforce-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workforce-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workforce-name))
      (common-lisp:list
       (common-lisp:cons "WorkforceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workforce-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-workforce-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-workforce-response-"))
   (workforce (common-lisp:error ":workforce is required") :type
    (common-lisp:or workforce common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-workforce-response
                    'make-describe-workforce-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workforce-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workforce-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workforce))
      (common-lisp:list
       (common-lisp:cons "Workforce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workforce-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-workteam-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-workteam-request-"))
   (workteam-name (common-lisp:error ":workteam-name is required") :type
    (common-lisp:or workteam-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-workteam-request
                    'make-describe-workteam-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workteam-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workteam-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workteam-name))
      (common-lisp:list
       (common-lisp:cons "WorkteamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workteam-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-workteam-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-workteam-response-"))
   (workteam (common-lisp:error ":workteam is required") :type
    (common-lisp:or workteam common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-workteam-response
                    'make-describe-workteam-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-workteam-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-workteam-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workteam))
      (common-lisp:list
       (common-lisp:cons "Workteam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-workteam-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (desired-weight-and-capacity (:copier common-lisp:nil)
      (:conc-name "struct-shape-desired-weight-and-capacity-"))
   (variant-name (common-lisp:error ":variant-name is required") :type
    (common-lisp:or variant-name common-lisp:null))
   (desired-weight common-lisp:nil :type
    (common-lisp:or variant-weight common-lisp:null))
   (desired-instance-count common-lisp:nil :type
    (common-lisp:or task-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'desired-weight-and-capacity
                    'make-desired-weight-and-capacity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          desired-weight-and-capacity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          desired-weight-and-capacity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variant-name))
      (common-lisp:list
       (common-lisp:cons "VariantName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-weight))
      (common-lisp:list
       (common-lisp:cons "DesiredWeight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'desired-instance-count))
      (common-lisp:list
       (common-lisp:cons "DesiredInstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          desired-weight-and-capacity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype desired-weight-and-capacity-list ()
   '(trivial-types:proper-list desired-weight-and-capacity))
 (common-lisp:defun |make-desired-weight-and-capacity-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            desired-weight-and-capacity))
   aws-sdk/generator/shape::members))
(common-lisp:deftype destination-s3uri () 'common-lisp:string)
(common-lisp:deftype detailed-algorithm-status () 'common-lisp:string)
(common-lisp:deftype detailed-model-package-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (device (:copier common-lisp:nil) (:conc-name "struct-shape-device-"))
   (device-name (common-lisp:error ":device-name is required") :type
    (common-lisp:or device-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or device-description common-lisp:null))
   (iot-thing-name common-lisp:nil :type
    (common-lisp:or thing-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'device 'make-device))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iot-thing-name))
      (common-lisp:list
       (common-lisp:cons "IotThingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device))
   common-lisp:nil))
(common-lisp:deftype device-arn () 'common-lisp:string)
(common-lisp:deftype device-deployment-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype device-deployment-summaries ()
   '(trivial-types:proper-list device-deployment-summary))
 (common-lisp:defun |make-device-deployment-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            device-deployment-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (device-deployment-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-device-deployment-summary-"))
   (edge-deployment-plan-arn
    (common-lisp:error ":edge-deployment-plan-arn is required") :type
    (common-lisp:or edge-deployment-plan-arn common-lisp:null))
   (edge-deployment-plan-name
    (common-lisp:error ":edge-deployment-plan-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (stage-name (common-lisp:error ":stage-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (deployed-stage-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (device-fleet-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (device-name (common-lisp:error ":device-name is required") :type
    (common-lisp:or device-name common-lisp:null))
   (device-arn (common-lisp:error ":device-arn is required") :type
    (common-lisp:or device-arn common-lisp:null))
   (device-deployment-status common-lisp:nil :type
    (common-lisp:or device-deployment-status common-lisp:null))
   (device-deployment-status-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or device-description common-lisp:null))
   (deployment-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'device-deployment-summary
                    'make-device-deployment-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          device-deployment-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          device-deployment-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-deployment-plan-arn))
      (common-lisp:list
       (common-lisp:cons "EdgeDeploymentPlanArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-deployment-plan-name))
      (common-lisp:list
       (common-lisp:cons "EdgeDeploymentPlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-name))
      (common-lisp:list
       (common-lisp:cons "StageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployed-stage-name))
      (common-lisp:list
       (common-lisp:cons "DeployedStageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-fleet-name))
      (common-lisp:list
       (common-lisp:cons "DeviceFleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "DeviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-deployment-status))
      (common-lisp:list
       (common-lisp:cons "DeviceDeploymentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-deployment-status-message))
      (common-lisp:list
       (common-lisp:cons "DeviceDeploymentStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'deployment-start-time))
      (common-lisp:list
       (common-lisp:cons "DeploymentStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          device-deployment-summary))
   common-lisp:nil))
(common-lisp:deftype device-description () 'common-lisp:string)
(common-lisp:deftype device-fleet-arn () 'common-lisp:string)
(common-lisp:deftype device-fleet-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype device-fleet-summaries ()
   '(trivial-types:proper-list device-fleet-summary))
 (common-lisp:defun |make-device-fleet-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-fleet-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (device-fleet-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-device-fleet-summary-"))
   (device-fleet-arn (common-lisp:error ":device-fleet-arn is required") :type
    (common-lisp:or device-fleet-arn common-lisp:null))
   (device-fleet-name (common-lisp:error ":device-fleet-name is required")
    :type (common-lisp:or entity-name common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'device-fleet-summary 'make-device-fleet-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device-fleet-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device-fleet-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-fleet-arn))
      (common-lisp:list
       (common-lisp:cons "DeviceFleetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-fleet-name))
      (common-lisp:list
       (common-lisp:cons "DeviceFleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device-fleet-summary))
   common-lisp:nil))
(common-lisp:deftype device-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype device-names () '(trivial-types:proper-list device-name))
 (common-lisp:defun |make-device-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (device-selection-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-device-selection-config-"))
   (device-subset-type (common-lisp:error ":device-subset-type is required")
    :type (common-lisp:or device-subset-type common-lisp:null))
   (percentage common-lisp:nil :type
    (common-lisp:or percentage common-lisp:null))
   (device-names common-lisp:nil :type
    (common-lisp:or device-names common-lisp:null))
   (device-name-contains common-lisp:nil :type
    (common-lisp:or device-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'device-selection-config 'make-device-selection-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          device-selection-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          device-selection-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-subset-type))
      (common-lisp:list
       (common-lisp:cons "DeviceSubsetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percentage))
      (common-lisp:list
       (common-lisp:cons "Percentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-names))
      (common-lisp:list
       (common-lisp:cons "DeviceNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-name-contains))
      (common-lisp:list
       (common-lisp:cons "DeviceNameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          device-selection-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (device-stats (:copier common-lisp:nil)
      (:conc-name "struct-shape-device-stats-"))
   (connected-device-count
    (common-lisp:error ":connected-device-count is required") :type
    (common-lisp:or long common-lisp:null))
   (registered-device-count
    (common-lisp:error ":registered-device-count is required") :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export (common-lisp:list 'device-stats 'make-device-stats))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device-stats))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device-stats))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connected-device-count))
      (common-lisp:list
       (common-lisp:cons "ConnectedDeviceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'registered-device-count))
      (common-lisp:list
       (common-lisp:cons "RegisteredDeviceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device-stats))
   common-lisp:nil))
(common-lisp:deftype device-subset-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype device-summaries ()
   '(trivial-types:proper-list device-summary))
 (common-lisp:defun |make-device-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (device-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-device-summary-"))
   (device-name (common-lisp:error ":device-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (device-arn (common-lisp:error ":device-arn is required") :type
    (common-lisp:or device-arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or device-description common-lisp:null))
   (device-fleet-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (iot-thing-name common-lisp:nil :type
    (common-lisp:or thing-name common-lisp:null))
   (registration-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (latest-heartbeat common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (models common-lisp:nil :type
    (common-lisp:or edge-model-summaries common-lisp:null))
   (agent-version common-lisp:nil :type
    (common-lisp:or edge-version common-lisp:null)))
 (common-lisp:export (common-lisp:list 'device-summary 'make-device-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-arn))
      (common-lisp:list
       (common-lisp:cons "DeviceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-fleet-name))
      (common-lisp:list
       (common-lisp:cons "DeviceFleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iot-thing-name))
      (common-lisp:list
       (common-lisp:cons "IotThingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-time))
      (common-lisp:list
       (common-lisp:cons "RegistrationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-heartbeat))
      (common-lisp:list
       (common-lisp:cons "LatestHeartbeat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'models))
      (common-lisp:list
       (common-lisp:cons "Models"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-version))
      (common-lisp:list
       (common-lisp:cons "AgentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype devices () '(trivial-types:proper-list device))
 (common-lisp:defun |make-devices|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device))
   aws-sdk/generator/shape::members))
(common-lisp:deftype direct-internet-access () 'common-lisp:string)
(common-lisp:deftype direction () 'common-lisp:string)
(common-lisp:deftype directory-path () 'common-lisp:string)
(common-lisp:deftype disable-profiler () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (disable-sagemaker-servicecatalog-portfolio-input
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disable-sagemaker-servicecatalog-portfolio-input-")))
 (common-lisp:export
  (common-lisp:list 'disable-sagemaker-servicecatalog-portfolio-input
                    'make-disable-sagemaker-servicecatalog-portfolio-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-sagemaker-servicecatalog-portfolio-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-sagemaker-servicecatalog-portfolio-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-sagemaker-servicecatalog-portfolio-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-sagemaker-servicecatalog-portfolio-output
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disable-sagemaker-servicecatalog-portfolio-output-")))
 (common-lisp:export
  (common-lisp:list 'disable-sagemaker-servicecatalog-portfolio-output
                    'make-disable-sagemaker-servicecatalog-portfolio-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disable-sagemaker-servicecatalog-portfolio-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disable-sagemaker-servicecatalog-portfolio-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disable-sagemaker-servicecatalog-portfolio-output))
   common-lisp:nil))
(common-lisp:deftype disassociate-additional-code-repositories ()
  'common-lisp:boolean)
(common-lisp:deftype disassociate-default-code-repository ()
  'common-lisp:boolean)
(common-lisp:deftype disassociate-notebook-instance-accelerator-types ()
  'common-lisp:boolean)
(common-lisp:deftype disassociate-notebook-instance-lifecycle-config ()
  'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-trial-component-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-trial-component-request-"))
   (trial-component-name
    (common-lisp:error ":trial-component-name is required") :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (trial-name (common-lisp:error ":trial-name is required") :type
    (common-lisp:or experiment-entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-trial-component-request
                    'make-disassociate-trial-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-trial-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-trial-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trial-component-name))
      (common-lisp:list
       (common-lisp:cons "TrialComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-name))
      (common-lisp:list
       (common-lisp:cons "TrialName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-trial-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-trial-component-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-trial-component-response-"))
   (trial-component-arn common-lisp:nil :type
    (common-lisp:or trial-component-arn common-lisp:null))
   (trial-arn common-lisp:nil :type
    (common-lisp:or trial-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-trial-component-response
                    'make-disassociate-trial-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-trial-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-trial-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-component-arn))
      (common-lisp:list
       (common-lisp:cons "TrialComponentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-arn))
      (common-lisp:list
       (common-lisp:cons "TrialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-trial-component-response))
   common-lisp:nil))
(common-lisp:deftype document-schema-version () 'common-lisp:string)
(common-lisp:deftype dollars () 'common-lisp:integer)
(common-lisp:deftype domain-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (domain-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-domain-details-"))
   (domain-arn common-lisp:nil :type
    (common-lisp:or domain-arn common-lisp:null))
   (domain-id common-lisp:nil :type
    (common-lisp:or domain-id common-lisp:null))
   (domain-name common-lisp:nil :type
    (common-lisp:or domain-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or domain-status common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or last-modified-time common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or string1024 common-lisp:null)))
 (common-lisp:export (common-lisp:list 'domain-details 'make-domain-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-arn))
      (common-lisp:list
       (common-lisp:cons "DomainArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-details))
   common-lisp:nil))
(common-lisp:deftype domain-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype domain-list ()
   '(trivial-types:proper-list domain-details))
 (common-lisp:defun |make-domain-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list domain-details))
   aws-sdk/generator/shape::members))
(common-lisp:deftype domain-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype domain-security-group-ids ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun |make-domain-security-group-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (domain-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-domain-settings-"))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or domain-security-group-ids common-lisp:null))
   (rstudio-server-pro-domain-settings common-lisp:nil :type
    (common-lisp:or rstudio-server-pro-domain-settings common-lisp:null))
   (execution-role-identity-config common-lisp:nil :type
    (common-lisp:or execution-role-identity-config common-lisp:null)))
 (common-lisp:export (common-lisp:list 'domain-settings 'make-domain-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input domain-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input domain-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rstudio-server-pro-domain-settings))
      (common-lisp:list
       (common-lisp:cons "RStudioServerProDomainSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-role-identity-config))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleIdentityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input domain-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (domain-settings-for-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-domain-settings-for-update-"))
   (rstudio-server-pro-domain-settings-for-update common-lisp:nil :type
    (common-lisp:or rstudio-server-pro-domain-settings-for-update
                    common-lisp:null))
   (execution-role-identity-config common-lisp:nil :type
    (common-lisp:or execution-role-identity-config common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or domain-security-group-ids common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'domain-settings-for-update
                    'make-domain-settings-for-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          domain-settings-for-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          domain-settings-for-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rstudio-server-pro-domain-settings-for-update))
      (common-lisp:list
       (common-lisp:cons "RStudioServerProDomainSettingsForUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'execution-role-identity-config))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleIdentityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          domain-settings-for-update))
   common-lisp:nil))
(common-lisp:deftype domain-status () 'common-lisp:string)
(common-lisp:deftype double-parameter-value () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (drift-check-baselines (:copier common-lisp:nil)
      (:conc-name "struct-shape-drift-check-baselines-"))
   (bias common-lisp:nil :type
    (common-lisp:or drift-check-bias common-lisp:null))
   (explainability common-lisp:nil :type
    (common-lisp:or drift-check-explainability common-lisp:null))
   (model-quality common-lisp:nil :type
    (common-lisp:or drift-check-model-quality common-lisp:null))
   (model-data-quality common-lisp:nil :type
    (common-lisp:or drift-check-model-data-quality common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'drift-check-baselines 'make-drift-check-baselines))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          drift-check-baselines))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          drift-check-baselines))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bias))
      (common-lisp:list
       (common-lisp:cons "Bias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explainability))
      (common-lisp:list
       (common-lisp:cons "Explainability"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-quality))
      (common-lisp:list
       (common-lisp:cons "ModelQuality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-data-quality))
      (common-lisp:list
       (common-lisp:cons "ModelDataQuality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          drift-check-baselines))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (drift-check-bias (:copier common-lisp:nil)
      (:conc-name "struct-shape-drift-check-bias-"))
   (config-file common-lisp:nil :type
    (common-lisp:or file-source common-lisp:null))
   (pre-training-constraints common-lisp:nil :type
    (common-lisp:or metrics-source common-lisp:null))
   (post-training-constraints common-lisp:nil :type
    (common-lisp:or metrics-source common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'drift-check-bias 'make-drift-check-bias))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input drift-check-bias))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input drift-check-bias))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-file))
      (common-lisp:list
       (common-lisp:cons "ConfigFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pre-training-constraints))
      (common-lisp:list
       (common-lisp:cons "PreTrainingConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-training-constraints))
      (common-lisp:list
       (common-lisp:cons "PostTrainingConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input drift-check-bias))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (drift-check-explainability (:copier common-lisp:nil)
      (:conc-name "struct-shape-drift-check-explainability-"))
   (constraints common-lisp:nil :type
    (common-lisp:or metrics-source common-lisp:null))
   (config-file common-lisp:nil :type
    (common-lisp:or file-source common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'drift-check-explainability
                    'make-drift-check-explainability))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          drift-check-explainability))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          drift-check-explainability))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constraints))
      (common-lisp:list
       (common-lisp:cons "Constraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-file))
      (common-lisp:list
       (common-lisp:cons "ConfigFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          drift-check-explainability))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (drift-check-model-data-quality (:copier common-lisp:nil)
      (:conc-name "struct-shape-drift-check-model-data-quality-"))
   (statistics common-lisp:nil :type
    (common-lisp:or metrics-source common-lisp:null))
   (constraints common-lisp:nil :type
    (common-lisp:or metrics-source common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'drift-check-model-data-quality
                    'make-drift-check-model-data-quality))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          drift-check-model-data-quality))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          drift-check-model-data-quality))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "Statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constraints))
      (common-lisp:list
       (common-lisp:cons "Constraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          drift-check-model-data-quality))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (drift-check-model-quality (:copier common-lisp:nil)
      (:conc-name "struct-shape-drift-check-model-quality-"))
   (statistics common-lisp:nil :type
    (common-lisp:or metrics-source common-lisp:null))
   (constraints common-lisp:nil :type
    (common-lisp:or metrics-source common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'drift-check-model-quality
                    'make-drift-check-model-quality))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          drift-check-model-quality))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          drift-check-model-quality))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "Statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constraints))
      (common-lisp:list
       (common-lisp:cons "Constraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          drift-check-model-quality))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (emrstep-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-emrstep-metadata-"))
   (cluster-id common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (step-id common-lisp:nil :type (common-lisp:or string256 common-lisp:null))
   (step-name common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (log-file-path common-lisp:nil :type
    (common-lisp:or string1024 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'emrstep-metadata 'make-emrstep-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input emrstep-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input emrstep-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-id))
      (common-lisp:list
       (common-lisp:cons "StepId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-name))
      (common-lisp:list
       (common-lisp:cons "StepName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-file-path))
      (common-lisp:list
       (common-lisp:cons "LogFilePath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input emrstep-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (edge (:copier common-lisp:nil) (:conc-name "struct-shape-edge-"))
   (source-arn common-lisp:nil :type
    (common-lisp:or association-entity-arn common-lisp:null))
   (destination-arn common-lisp:nil :type
    (common-lisp:or association-entity-arn common-lisp:null))
   (association-type common-lisp:nil :type
    (common-lisp:or association-edge-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'edge 'make-edge))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input edge))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input edge))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-arn))
      (common-lisp:list
       (common-lisp:cons "DestinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-type))
      (common-lisp:list
       (common-lisp:cons "AssociationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input edge))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (edge-deployment-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-edge-deployment-config-"))
   (failure-handling-policy
    (common-lisp:error ":failure-handling-policy is required") :type
    (common-lisp:or failure-handling-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'edge-deployment-config 'make-edge-deployment-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          edge-deployment-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          edge-deployment-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failure-handling-policy))
      (common-lisp:list
       (common-lisp:cons "FailureHandlingPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          edge-deployment-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (edge-deployment-model-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-edge-deployment-model-config-"))
   (model-handle (common-lisp:error ":model-handle is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (edge-packaging-job-name
    (common-lisp:error ":edge-packaging-job-name is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'edge-deployment-model-config
                    'make-edge-deployment-model-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          edge-deployment-model-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          edge-deployment-model-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-handle))
      (common-lisp:list
       (common-lisp:cons "ModelHandle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-packaging-job-name))
      (common-lisp:list
       (common-lisp:cons "EdgePackagingJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          edge-deployment-model-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype edge-deployment-model-configs ()
   '(trivial-types:proper-list edge-deployment-model-config))
 (common-lisp:defun |make-edge-deployment-model-configs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            edge-deployment-model-config))
   aws-sdk/generator/shape::members))
(common-lisp:deftype edge-deployment-plan-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype edge-deployment-plan-summaries ()
   '(trivial-types:proper-list edge-deployment-plan-summary))
 (common-lisp:defun |make-edge-deployment-plan-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            edge-deployment-plan-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (edge-deployment-plan-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-edge-deployment-plan-summary-"))
   (edge-deployment-plan-arn
    (common-lisp:error ":edge-deployment-plan-arn is required") :type
    (common-lisp:or edge-deployment-plan-arn common-lisp:null))
   (edge-deployment-plan-name
    (common-lisp:error ":edge-deployment-plan-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (device-fleet-name (common-lisp:error ":device-fleet-name is required")
    :type (common-lisp:or entity-name common-lisp:null))
   (edge-deployment-success
    (common-lisp:error ":edge-deployment-success is required") :type
    (common-lisp:or integer common-lisp:null))
   (edge-deployment-pending
    (common-lisp:error ":edge-deployment-pending is required") :type
    (common-lisp:or integer common-lisp:null))
   (edge-deployment-failed
    (common-lisp:error ":edge-deployment-failed is required") :type
    (common-lisp:or integer common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'edge-deployment-plan-summary
                    'make-edge-deployment-plan-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          edge-deployment-plan-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          edge-deployment-plan-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-deployment-plan-arn))
      (common-lisp:list
       (common-lisp:cons "EdgeDeploymentPlanArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-deployment-plan-name))
      (common-lisp:list
       (common-lisp:cons "EdgeDeploymentPlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-fleet-name))
      (common-lisp:list
       (common-lisp:cons "DeviceFleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-deployment-success))
      (common-lisp:list
       (common-lisp:cons "EdgeDeploymentSuccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-deployment-pending))
      (common-lisp:list
       (common-lisp:cons "EdgeDeploymentPending"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-deployment-failed))
      (common-lisp:list
       (common-lisp:cons "EdgeDeploymentFailed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          edge-deployment-plan-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (edge-deployment-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-edge-deployment-status-"))
   (stage-status (common-lisp:error ":stage-status is required") :type
    (common-lisp:or stage-status common-lisp:null))
   (edge-deployment-success-in-stage
    (common-lisp:error ":edge-deployment-success-in-stage is required") :type
    (common-lisp:or integer common-lisp:null))
   (edge-deployment-pending-in-stage
    (common-lisp:error ":edge-deployment-pending-in-stage is required") :type
    (common-lisp:or integer common-lisp:null))
   (edge-deployment-failed-in-stage
    (common-lisp:error ":edge-deployment-failed-in-stage is required") :type
    (common-lisp:or integer common-lisp:null))
   (edge-deployment-status-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (edge-deployment-stage-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'edge-deployment-status 'make-edge-deployment-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          edge-deployment-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          edge-deployment-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-status))
      (common-lisp:list
       (common-lisp:cons "StageStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-deployment-success-in-stage))
      (common-lisp:list
       (common-lisp:cons "EdgeDeploymentSuccessInStage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-deployment-pending-in-stage))
      (common-lisp:list
       (common-lisp:cons "EdgeDeploymentPendingInStage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-deployment-failed-in-stage))
      (common-lisp:list
       (common-lisp:cons "EdgeDeploymentFailedInStage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-deployment-status-message))
      (common-lisp:list
       (common-lisp:cons "EdgeDeploymentStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-deployment-stage-start-time))
      (common-lisp:list
       (common-lisp:cons "EdgeDeploymentStageStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          edge-deployment-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (edge-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-edge-model-"))
   (model-name (common-lisp:error ":model-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (model-version (common-lisp:error ":model-version is required") :type
    (common-lisp:or edge-version common-lisp:null))
   (latest-sample-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (latest-inference common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'edge-model 'make-edge-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input edge-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input edge-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-version))
      (common-lisp:list
       (common-lisp:cons "ModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-sample-time))
      (common-lisp:list
       (common-lisp:cons "LatestSampleTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-inference))
      (common-lisp:list
       (common-lisp:cons "LatestInference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input edge-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (edge-model-stat (:copier common-lisp:nil)
      (:conc-name "struct-shape-edge-model-stat-"))
   (model-name (common-lisp:error ":model-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (model-version (common-lisp:error ":model-version is required") :type
    (common-lisp:or edge-version common-lisp:null))
   (offline-device-count
    (common-lisp:error ":offline-device-count is required") :type
    (common-lisp:or long common-lisp:null))
   (connected-device-count
    (common-lisp:error ":connected-device-count is required") :type
    (common-lisp:or long common-lisp:null))
   (active-device-count (common-lisp:error ":active-device-count is required")
    :type (common-lisp:or long common-lisp:null))
   (sampling-device-count
    (common-lisp:error ":sampling-device-count is required") :type
    (common-lisp:or long common-lisp:null)))
 (common-lisp:export (common-lisp:list 'edge-model-stat 'make-edge-model-stat))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input edge-model-stat))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input edge-model-stat))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-version))
      (common-lisp:list
       (common-lisp:cons "ModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offline-device-count))
      (common-lisp:list
       (common-lisp:cons "OfflineDeviceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connected-device-count))
      (common-lisp:list
       (common-lisp:cons "ConnectedDeviceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-device-count))
      (common-lisp:list
       (common-lisp:cons "ActiveDeviceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sampling-device-count))
      (common-lisp:list
       (common-lisp:cons "SamplingDeviceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input edge-model-stat))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype edge-model-stats ()
   '(trivial-types:proper-list edge-model-stat))
 (common-lisp:defun |make-edge-model-stats|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list edge-model-stat))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype edge-model-summaries ()
   '(trivial-types:proper-list edge-model-summary))
 (common-lisp:defun |make-edge-model-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list edge-model-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (edge-model-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-edge-model-summary-"))
   (model-name (common-lisp:error ":model-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (model-version (common-lisp:error ":model-version is required") :type
    (common-lisp:or edge-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'edge-model-summary 'make-edge-model-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input edge-model-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input edge-model-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-version))
      (common-lisp:list
       (common-lisp:cons "ModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input edge-model-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype edge-models () '(trivial-types:proper-list edge-model))
 (common-lisp:defun |make-edge-models|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list edge-model))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (edge-output-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-edge-output-config-"))
   (s3output-location (common-lisp:error ":s3output-location is required")
    :type (common-lisp:or s3uri common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (preset-deployment-type common-lisp:nil :type
    (common-lisp:or edge-preset-deployment-type common-lisp:null))
   (preset-deployment-config common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'edge-output-config 'make-edge-output-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input edge-output-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input edge-output-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3output-location))
      (common-lisp:list
       (common-lisp:cons "S3OutputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preset-deployment-type))
      (common-lisp:list
       (common-lisp:cons "PresetDeploymentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'preset-deployment-config))
      (common-lisp:list
       (common-lisp:cons "PresetDeploymentConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input edge-output-config))
   common-lisp:nil))
(common-lisp:deftype edge-packaging-job-arn () 'common-lisp:string)
(common-lisp:deftype edge-packaging-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype edge-packaging-job-summaries ()
   '(trivial-types:proper-list edge-packaging-job-summary))
 (common-lisp:defun |make-edge-packaging-job-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            edge-packaging-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (edge-packaging-job-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-edge-packaging-job-summary-"))
   (edge-packaging-job-arn
    (common-lisp:error ":edge-packaging-job-arn is required") :type
    (common-lisp:or edge-packaging-job-arn common-lisp:null))
   (edge-packaging-job-name
    (common-lisp:error ":edge-packaging-job-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (edge-packaging-job-status
    (common-lisp:error ":edge-packaging-job-status is required") :type
    (common-lisp:or edge-packaging-job-status common-lisp:null))
   (compilation-job-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (model-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (model-version common-lisp:nil :type
    (common-lisp:or edge-version common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'edge-packaging-job-summary
                    'make-edge-packaging-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          edge-packaging-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          edge-packaging-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-packaging-job-arn))
      (common-lisp:list
       (common-lisp:cons "EdgePackagingJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-packaging-job-name))
      (common-lisp:list
       (common-lisp:cons "EdgePackagingJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-packaging-job-status))
      (common-lisp:list
       (common-lisp:cons "EdgePackagingJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compilation-job-name))
      (common-lisp:list
       (common-lisp:cons "CompilationJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-version))
      (common-lisp:list
       (common-lisp:cons "ModelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          edge-packaging-job-summary))
   common-lisp:nil))
(common-lisp:deftype edge-preset-deployment-artifact () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (edge-preset-deployment-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-edge-preset-deployment-output-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or edge-preset-deployment-type common-lisp:null))
   (artifact common-lisp:nil :type
    (common-lisp:or edge-preset-deployment-artifact common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or edge-preset-deployment-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'edge-preset-deployment-output
                    'make-edge-preset-deployment-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          edge-preset-deployment-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          edge-preset-deployment-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact))
      (common-lisp:list
       (common-lisp:cons "Artifact"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          edge-preset-deployment-output))
   common-lisp:nil))
(common-lisp:deftype edge-preset-deployment-status () 'common-lisp:string)
(common-lisp:deftype edge-preset-deployment-type () 'common-lisp:string)
(common-lisp:deftype edge-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype edges () '(trivial-types:proper-list edge))
 (common-lisp:defun |make-edges|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list edge))
   aws-sdk/generator/shape::members))
(common-lisp:deftype efs-uid () 'common-lisp:string)
(common-lisp:deftype enable-capture () 'common-lisp:boolean)
(common-lisp:deftype enable-iot-role-alias () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (enable-sagemaker-servicecatalog-portfolio-input (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-enable-sagemaker-servicecatalog-portfolio-input-")))
 (common-lisp:export
  (common-lisp:list 'enable-sagemaker-servicecatalog-portfolio-input
                    'make-enable-sagemaker-servicecatalog-portfolio-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-sagemaker-servicecatalog-portfolio-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-sagemaker-servicecatalog-portfolio-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-sagemaker-servicecatalog-portfolio-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-sagemaker-servicecatalog-portfolio-output
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-enable-sagemaker-servicecatalog-portfolio-output-")))
 (common-lisp:export
  (common-lisp:list 'enable-sagemaker-servicecatalog-portfolio-output
                    'make-enable-sagemaker-servicecatalog-portfolio-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-sagemaker-servicecatalog-portfolio-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-sagemaker-servicecatalog-portfolio-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-sagemaker-servicecatalog-portfolio-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint (:copier common-lisp:nil) (:conc-name "struct-shape-endpoint-"))
   (endpoint-name (common-lisp:error ":endpoint-name is required") :type
    (common-lisp:or endpoint-name common-lisp:null))
   (endpoint-arn (common-lisp:error ":endpoint-arn is required") :type
    (common-lisp:or endpoint-arn common-lisp:null))
   (endpoint-config-name
    (common-lisp:error ":endpoint-config-name is required") :type
    (common-lisp:or endpoint-config-name common-lisp:null))
   (production-variants common-lisp:nil :type
    (common-lisp:or production-variant-summary-list common-lisp:null))
   (data-capture-config common-lisp:nil :type
    (common-lisp:or data-capture-config-summary common-lisp:null))
   (endpoint-status (common-lisp:error ":endpoint-status is required") :type
    (common-lisp:or endpoint-status common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (monitoring-schedules common-lisp:nil :type
    (common-lisp:or monitoring-schedule-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (shadow-production-variants common-lisp:nil :type
    (common-lisp:or production-variant-summary-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'endpoint 'make-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-config-name))
      (common-lisp:list
       (common-lisp:cons "EndpointConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'production-variants))
      (common-lisp:list
       (common-lisp:cons "ProductionVariants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-capture-config))
      (common-lisp:list
       (common-lisp:cons "DataCaptureConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-status))
      (common-lisp:list
       (common-lisp:cons "EndpointStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedules))
      (common-lisp:list
       (common-lisp:cons "MonitoringSchedules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shadow-production-variants))
      (common-lisp:list
       (common-lisp:cons "ShadowProductionVariants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint))
   common-lisp:nil))
(common-lisp:deftype endpoint-arn () 'common-lisp:string)
(common-lisp:deftype endpoint-config-arn () 'common-lisp:string)
(common-lisp:deftype endpoint-config-name () 'common-lisp:string)
(common-lisp:deftype endpoint-config-name-contains () 'common-lisp:string)
(common-lisp:deftype endpoint-config-sort-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint-config-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-endpoint-config-summary-"))
   (endpoint-config-name
    (common-lisp:error ":endpoint-config-name is required") :type
    (common-lisp:or endpoint-config-name common-lisp:null))
   (endpoint-config-arn (common-lisp:error ":endpoint-config-arn is required")
    :type (common-lisp:or endpoint-config-arn common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'endpoint-config-summary 'make-endpoint-config-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-config-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-config-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-config-name))
      (common-lisp:list
       (common-lisp:cons "EndpointConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-config-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-config-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype endpoint-config-summary-list ()
   '(trivial-types:proper-list endpoint-config-summary))
 (common-lisp:defun |make-endpoint-config-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list endpoint-config-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-endpoint-info-"))
   (endpoint-name (common-lisp:error ":endpoint-name is required") :type
    (common-lisp:or endpoint-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'endpoint-info 'make-endpoint-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-endpoint-input-"))
   (endpoint-name (common-lisp:error ":endpoint-name is required") :type
    (common-lisp:or endpoint-name common-lisp:null))
   (local-path (common-lisp:error ":local-path is required") :type
    (common-lisp:or processing-local-path common-lisp:null))
   (s3input-mode common-lisp:nil :type
    (common-lisp:or processing-s3input-mode common-lisp:null))
   (s3data-distribution-type common-lisp:nil :type
    (common-lisp:or processing-s3data-distribution-type common-lisp:null))
   (features-attribute common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (inference-attribute common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (probability-attribute common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (probability-threshold-attribute common-lisp:nil :type
    (common-lisp:or probability-threshold-attribute common-lisp:null))
   (start-time-offset common-lisp:nil :type
    (common-lisp:or monitoring-time-offset-string common-lisp:null))
   (end-time-offset common-lisp:nil :type
    (common-lisp:or monitoring-time-offset-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'endpoint-input 'make-endpoint-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-path))
      (common-lisp:list
       (common-lisp:cons "LocalPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3input-mode))
      (common-lisp:list
       (common-lisp:cons "S3InputMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3data-distribution-type))
      (common-lisp:list
       (common-lisp:cons "S3DataDistributionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'features-attribute))
      (common-lisp:list
       (common-lisp:cons "FeaturesAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inference-attribute))
      (common-lisp:list
       (common-lisp:cons "InferenceAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'probability-attribute))
      (common-lisp:list
       (common-lisp:cons "ProbabilityAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'probability-threshold-attribute))
      (common-lisp:list
       (common-lisp:cons "ProbabilityThresholdAttribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time-offset))
      (common-lisp:list
       (common-lisp:cons "StartTimeOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time-offset))
      (common-lisp:list
       (common-lisp:cons "EndTimeOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint-input-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-endpoint-input-configuration-"))
   (instance-type (common-lisp:error ":instance-type is required") :type
    (common-lisp:or production-variant-instance-type common-lisp:null))
   (inference-specification-name common-lisp:nil :type
    (common-lisp:or inference-specification-name common-lisp:null))
   (environment-parameter-ranges common-lisp:nil :type
    (common-lisp:or environment-parameter-ranges common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'endpoint-input-configuration
                    'make-endpoint-input-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-input-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-input-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-specification-name))
      (common-lisp:list
       (common-lisp:cons "InferenceSpecificationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-parameter-ranges))
      (common-lisp:list
       (common-lisp:cons "EnvironmentParameterRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-input-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype endpoint-input-configurations ()
   '(trivial-types:proper-list endpoint-input-configuration))
 (common-lisp:defun |make-endpoint-input-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            endpoint-input-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-endpoint-metadata-"))
   (endpoint-name (common-lisp:error ":endpoint-name is required") :type
    (common-lisp:or endpoint-name common-lisp:null))
   (endpoint-config-name common-lisp:nil :type
    (common-lisp:or endpoint-config-name common-lisp:null))
   (endpoint-status common-lisp:nil :type
    (common-lisp:or endpoint-status common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'endpoint-metadata 'make-endpoint-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-config-name))
      (common-lisp:list
       (common-lisp:cons "EndpointConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-status))
      (common-lisp:list
       (common-lisp:cons "EndpointStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint-metadata))
   common-lisp:nil))
(common-lisp:deftype endpoint-name () 'common-lisp:string)
(common-lisp:deftype endpoint-name-contains () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint-output-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-endpoint-output-configuration-"))
   (endpoint-name (common-lisp:error ":endpoint-name is required") :type
    (common-lisp:or string common-lisp:null))
   (variant-name (common-lisp:error ":variant-name is required") :type
    (common-lisp:or string common-lisp:null))
   (instance-type (common-lisp:error ":instance-type is required") :type
    (common-lisp:or production-variant-instance-type common-lisp:null))
   (initial-instance-count
    (common-lisp:error ":initial-instance-count is required") :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'endpoint-output-configuration
                    'make-endpoint-output-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-output-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-output-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variant-name))
      (common-lisp:list
       (common-lisp:cons "VariantName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-instance-count))
      (common-lisp:list
       (common-lisp:cons "InitialInstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          endpoint-output-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint-performance (:copier common-lisp:nil)
      (:conc-name "struct-shape-endpoint-performance-"))
   (metrics (common-lisp:error ":metrics is required") :type
    (common-lisp:or inference-metrics common-lisp:null))
   (endpoint-info (common-lisp:error ":endpoint-info is required") :type
    (common-lisp:or endpoint-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'endpoint-performance 'make-endpoint-performance))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint-performance))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint-performance))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-info))
      (common-lisp:list
       (common-lisp:cons "EndpointInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint-performance))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype endpoint-performances ()
   '(trivial-types:proper-list endpoint-performance))
 (common-lisp:defun |make-endpoint-performances|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list endpoint-performance))
   aws-sdk/generator/shape::members))
(common-lisp:deftype endpoint-sort-key () 'common-lisp:string)
(common-lisp:deftype endpoint-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (endpoint-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-endpoint-summary-"))
   (endpoint-name (common-lisp:error ":endpoint-name is required") :type
    (common-lisp:or endpoint-name common-lisp:null))
   (endpoint-arn (common-lisp:error ":endpoint-arn is required") :type
    (common-lisp:or endpoint-arn common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (endpoint-status (common-lisp:error ":endpoint-status is required") :type
    (common-lisp:or endpoint-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'endpoint-summary 'make-endpoint-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input endpoint-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input endpoint-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-status))
      (common-lisp:list
       (common-lisp:cons "EndpointStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input endpoint-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype endpoint-summary-list ()
   '(trivial-types:proper-list endpoint-summary))
 (common-lisp:defun |make-endpoint-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list endpoint-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype endpoints () '(trivial-types:proper-list endpoint-info))
 (common-lisp:defun |make-endpoints|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list endpoint-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype entity-description () 'common-lisp:string)
(common-lisp:deftype entity-name () 'common-lisp:string)
(common-lisp:deftype environment-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype environment-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-environment-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (environment-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-parameter-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or string common-lisp:null))
   (value-type (common-lisp:error ":value-type is required") :type
    (common-lisp:or string common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-parameter 'make-environment-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-type))
      (common-lisp:list
       (common-lisp:cons "ValueType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (environment-parameter-ranges (:copier common-lisp:nil)
      (:conc-name "struct-shape-environment-parameter-ranges-"))
   (categorical-parameter-ranges common-lisp:nil :type
    (common-lisp:or categorical-parameters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'environment-parameter-ranges
                    'make-environment-parameter-ranges))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          environment-parameter-ranges))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          environment-parameter-ranges))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'categorical-parameter-ranges))
      (common-lisp:list
       (common-lisp:cons "CategoricalParameterRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          environment-parameter-ranges))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype environment-parameters ()
   '(trivial-types:proper-list environment-parameter))
 (common-lisp:defun |make-environment-parameters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list environment-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype environment-value () 'common-lisp:string)
(common-lisp:deftype execution-role-identity-config () 'common-lisp:string)
(common-lisp:deftype execution-status () 'common-lisp:string)
(common-lisp:deftype exit-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (experiment (:copier common-lisp:nil)
      (:conc-name "struct-shape-experiment-"))
   (experiment-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (experiment-arn common-lisp:nil :type
    (common-lisp:or experiment-arn common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (source common-lisp:nil :type
    (common-lisp:or experiment-source common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or experiment-description common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'experiment 'make-experiment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input experiment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input experiment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-name))
      (common-lisp:list
       (common-lisp:cons "ExperimentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-arn))
      (common-lisp:list
       (common-lisp:cons "ExperimentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input experiment))
   common-lisp:nil))
(common-lisp:deftype experiment-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (experiment-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-experiment-config-"))
   (experiment-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (trial-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (trial-component-display-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (run-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experiment-config 'make-experiment-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input experiment-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input experiment-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-name))
      (common-lisp:list
       (common-lisp:cons "ExperimentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-name))
      (common-lisp:list
       (common-lisp:cons "TrialName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trial-component-display-name))
      (common-lisp:list
       (common-lisp:cons "TrialComponentDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-name))
      (common-lisp:list
       (common-lisp:cons "RunName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input experiment-config))
   common-lisp:nil))
(common-lisp:deftype experiment-description () 'common-lisp:string)
(common-lisp:deftype experiment-entity-name () 'common-lisp:string)
(common-lisp:deftype experiment-entity-name-or-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (experiment-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-experiment-source-"))
   (source-arn (common-lisp:error ":source-arn is required") :type
    (common-lisp:or experiment-source-arn common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or source-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experiment-source 'make-experiment-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input experiment-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input experiment-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input experiment-source))
   common-lisp:nil))
(common-lisp:deftype experiment-source-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype experiment-summaries ()
   '(trivial-types:proper-list experiment-summary))
 (common-lisp:defun |make-experiment-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list experiment-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (experiment-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-experiment-summary-"))
   (experiment-arn common-lisp:nil :type
    (common-lisp:or experiment-arn common-lisp:null))
   (experiment-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (experiment-source common-lisp:nil :type
    (common-lisp:or experiment-source common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'experiment-summary 'make-experiment-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input experiment-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input experiment-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-arn))
      (common-lisp:list
       (common-lisp:cons "ExperimentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-name))
      (common-lisp:list
       (common-lisp:cons "ExperimentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-source))
      (common-lisp:list
       (common-lisp:cons "ExperimentSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input experiment-summary))
   common-lisp:nil))
(common-lisp:deftype expires-in-seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (explainability (:copier common-lisp:nil)
      (:conc-name "struct-shape-explainability-"))
   (report common-lisp:nil :type
    (common-lisp:or metrics-source common-lisp:null)))
 (common-lisp:export (common-lisp:list 'explainability 'make-explainability))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input explainability))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input explainability))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report))
      (common-lisp:list
       (common-lisp:cons "Report"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input explainability))
   common-lisp:nil))
(common-lisp:deftype explainability-location () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (explainer-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-explainer-config-"))
   (clarify-explainer-config common-lisp:nil :type
    (common-lisp:or clarify-explainer-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'explainer-config 'make-explainer-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input explainer-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input explainer-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'clarify-explainer-config))
      (common-lisp:list
       (common-lisp:cons "ClarifyExplainerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input explainer-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (fail-step-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-fail-step-metadata-"))
   (error-message common-lisp:nil :type
    (common-lisp:or string3072 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'fail-step-metadata 'make-fail-step-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fail-step-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fail-step-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fail-step-metadata))
   common-lisp:nil))
(common-lisp:deftype failure-handling-policy () 'common-lisp:string)
(common-lisp:deftype failure-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype feature-additions ()
   '(trivial-types:proper-list feature-definition))
 (common-lisp:defun |make-feature-additions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list feature-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (feature-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-feature-definition-"))
   (feature-name common-lisp:nil :type
    (common-lisp:or feature-name common-lisp:null))
   (feature-type common-lisp:nil :type
    (common-lisp:or feature-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'feature-definition 'make-feature-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input feature-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input feature-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-name))
      (common-lisp:list
       (common-lisp:cons "FeatureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-type))
      (common-lisp:list
       (common-lisp:cons "FeatureType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input feature-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype feature-definitions ()
   '(trivial-types:proper-list feature-definition))
 (common-lisp:defun |make-feature-definitions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list feature-definition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype feature-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (feature-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-feature-group-"))
   (feature-group-arn common-lisp:nil :type
    (common-lisp:or feature-group-arn common-lisp:null))
   (feature-group-name common-lisp:nil :type
    (common-lisp:or feature-group-name common-lisp:null))
   (record-identifier-feature-name common-lisp:nil :type
    (common-lisp:or feature-name common-lisp:null))
   (event-time-feature-name common-lisp:nil :type
    (common-lisp:or feature-name common-lisp:null))
   (feature-definitions common-lisp:nil :type
    (common-lisp:or feature-definitions common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or last-modified-time common-lisp:null))
   (online-store-config common-lisp:nil :type
    (common-lisp:or online-store-config common-lisp:null))
   (offline-store-config common-lisp:nil :type
    (common-lisp:or offline-store-config common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (feature-group-status common-lisp:nil :type
    (common-lisp:or feature-group-status common-lisp:null))
   (offline-store-status common-lisp:nil :type
    (common-lisp:or offline-store-status common-lisp:null))
   (last-update-status common-lisp:nil :type
    (common-lisp:or last-update-status common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'feature-group 'make-feature-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input feature-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input feature-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-group-arn))
      (common-lisp:list
       (common-lisp:cons "FeatureGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-group-name))
      (common-lisp:list
       (common-lisp:cons "FeatureGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'record-identifier-feature-name))
      (common-lisp:list
       (common-lisp:cons "RecordIdentifierFeatureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-time-feature-name))
      (common-lisp:list
       (common-lisp:cons "EventTimeFeatureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-definitions))
      (common-lisp:list
       (common-lisp:cons "FeatureDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'online-store-config))
      (common-lisp:list
       (common-lisp:cons "OnlineStoreConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offline-store-config))
      (common-lisp:list
       (common-lisp:cons "OfflineStoreConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'feature-group-status))
      (common-lisp:list
       (common-lisp:cons "FeatureGroupStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offline-store-status))
      (common-lisp:list
       (common-lisp:cons "OfflineStoreStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-status))
      (common-lisp:list
       (common-lisp:cons "LastUpdateStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input feature-group))
   common-lisp:nil))
(common-lisp:deftype feature-group-arn () 'common-lisp:string)
(common-lisp:deftype feature-group-max-results () 'common-lisp:integer)
(common-lisp:deftype feature-group-name () 'common-lisp:string)
(common-lisp:deftype feature-group-name-contains () 'common-lisp:string)
(common-lisp:deftype feature-group-sort-by () 'common-lisp:string)
(common-lisp:deftype feature-group-sort-order () 'common-lisp:string)
(common-lisp:deftype feature-group-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype feature-group-summaries ()
   '(trivial-types:proper-list feature-group-summary))
 (common-lisp:defun |make-feature-group-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list feature-group-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (feature-group-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-feature-group-summary-"))
   (feature-group-name (common-lisp:error ":feature-group-name is required")
    :type (common-lisp:or feature-group-name common-lisp:null))
   (feature-group-arn (common-lisp:error ":feature-group-arn is required")
    :type (common-lisp:or feature-group-arn common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (feature-group-status common-lisp:nil :type
    (common-lisp:or feature-group-status common-lisp:null))
   (offline-store-status common-lisp:nil :type
    (common-lisp:or offline-store-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'feature-group-summary 'make-feature-group-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          feature-group-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          feature-group-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-group-name))
      (common-lisp:list
       (common-lisp:cons "FeatureGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-group-arn))
      (common-lisp:list
       (common-lisp:cons "FeatureGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'feature-group-status))
      (common-lisp:list
       (common-lisp:cons "FeatureGroupStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offline-store-status))
      (common-lisp:list
       (common-lisp:cons "OfflineStoreStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          feature-group-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (feature-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-feature-metadata-"))
   (feature-group-arn common-lisp:nil :type
    (common-lisp:or feature-group-arn common-lisp:null))
   (feature-group-name common-lisp:nil :type
    (common-lisp:or feature-group-name common-lisp:null))
   (feature-name common-lisp:nil :type
    (common-lisp:or feature-name common-lisp:null))
   (feature-type common-lisp:nil :type
    (common-lisp:or feature-type common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or last-modified-time common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or feature-description common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or feature-parameters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'feature-metadata 'make-feature-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input feature-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input feature-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-group-arn))
      (common-lisp:list
       (common-lisp:cons "FeatureGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-group-name))
      (common-lisp:list
       (common-lisp:cons "FeatureGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-name))
      (common-lisp:list
       (common-lisp:cons "FeatureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-type))
      (common-lisp:list
       (common-lisp:cons "FeatureType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input feature-metadata))
   common-lisp:nil))
(common-lisp:deftype feature-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (feature-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-feature-parameter-"))
   (key common-lisp:nil :type
    (common-lisp:or feature-parameter-key common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or feature-parameter-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'feature-parameter 'make-feature-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input feature-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input feature-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input feature-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype feature-parameter-additions ()
   '(trivial-types:proper-list feature-parameter))
 (common-lisp:defun |make-feature-parameter-additions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list feature-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype feature-parameter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype feature-parameter-removals ()
   '(trivial-types:proper-list feature-parameter-key))
 (common-lisp:defun |make-feature-parameter-removals|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list feature-parameter-key))
   aws-sdk/generator/shape::members))
(common-lisp:deftype feature-parameter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype feature-parameters ()
   '(trivial-types:proper-list feature-parameter))
 (common-lisp:defun |make-feature-parameters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list feature-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype feature-status () 'common-lisp:string)
(common-lisp:deftype feature-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (file-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-file-source-"))
   (content-type common-lisp:nil :type
    (common-lisp:or content-type common-lisp:null))
   (content-digest common-lisp:nil :type
    (common-lisp:or content-digest common-lisp:null))
   (s3uri (common-lisp:error ":s3uri is required") :type
    (common-lisp:or s3uri common-lisp:null)))
 (common-lisp:export (common-lisp:list 'file-source 'make-file-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input file-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input file-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-digest))
      (common-lisp:list
       (common-lisp:cons "ContentDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input file-source))
   common-lisp:nil))
(common-lisp:deftype file-system-access-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (file-system-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-file-system-config-"))
   (mount-path common-lisp:nil :type
    (common-lisp:or mount-path common-lisp:null))
   (default-uid common-lisp:nil :type
    (common-lisp:or default-uid common-lisp:null))
   (default-gid common-lisp:nil :type
    (common-lisp:or default-gid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'file-system-config 'make-file-system-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input file-system-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input file-system-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mount-path))
      (common-lisp:list
       (common-lisp:cons "MountPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-uid))
      (common-lisp:list
       (common-lisp:cons "DefaultUid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-gid))
      (common-lisp:list
       (common-lisp:cons "DefaultGid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input file-system-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (file-system-data-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-file-system-data-source-"))
   (file-system-id (common-lisp:error ":file-system-id is required") :type
    (common-lisp:or file-system-id common-lisp:null))
   (file-system-access-mode
    (common-lisp:error ":file-system-access-mode is required") :type
    (common-lisp:or file-system-access-mode common-lisp:null))
   (file-system-type (common-lisp:error ":file-system-type is required") :type
    (common-lisp:or file-system-type common-lisp:null))
   (directory-path (common-lisp:error ":directory-path is required") :type
    (common-lisp:or directory-path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'file-system-data-source 'make-file-system-data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          file-system-data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          file-system-data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-id))
      (common-lisp:list
       (common-lisp:cons "FileSystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'file-system-access-mode))
      (common-lisp:list
       (common-lisp:cons "FileSystemAccessMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-type))
      (common-lisp:list
       (common-lisp:cons "FileSystemType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'directory-path))
      (common-lisp:list
       (common-lisp:cons "DirectoryPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          file-system-data-source))
   common-lisp:nil))
(common-lisp:deftype file-system-id () 'common-lisp:string)
(common-lisp:deftype file-system-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (filter (:copier common-lisp:nil) (:conc-name "struct-shape-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or resource-property-name common-lisp:null))
   (operator common-lisp:nil :type (common-lisp:or operator common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or filter-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "Operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (final-auto-mljob-objective-metric (:copier common-lisp:nil)
      (:conc-name "struct-shape-final-auto-mljob-objective-metric-"))
   (type common-lisp:nil :type
    (common-lisp:or auto-mljob-objective-type common-lisp:null))
   (metric-name (common-lisp:error ":metric-name is required") :type
    (common-lisp:or auto-mlmetric-enum common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or metric-value common-lisp:null))
   (standard-metric-name common-lisp:nil :type
    (common-lisp:or auto-mlmetric-enum common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'final-auto-mljob-objective-metric
                    'make-final-auto-mljob-objective-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          final-auto-mljob-objective-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          final-auto-mljob-objective-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standard-metric-name))
      (common-lisp:list
       (common-lisp:cons "StandardMetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          final-auto-mljob-objective-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (final-hyper-parameter-tuning-job-objective-metric
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-final-hyper-parameter-tuning-job-objective-metric-"))
   (type common-lisp:nil :type
    (common-lisp:or hyper-parameter-tuning-job-objective-type
                    common-lisp:null))
   (metric-name (common-lisp:error ":metric-name is required") :type
    (common-lisp:or metric-name common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or metric-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'final-hyper-parameter-tuning-job-objective-metric
                    'make-final-hyper-parameter-tuning-job-objective-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          final-hyper-parameter-tuning-job-objective-metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          final-hyper-parameter-tuning-job-objective-metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          final-hyper-parameter-tuning-job-objective-metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype final-metric-data-list ()
   '(trivial-types:proper-list metric-data))
 (common-lisp:defun |make-final-metric-data-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype float () 'common-lisp:single-float)
(common-lisp:deftype flow-definition-arn () 'common-lisp:string)
(common-lisp:deftype flow-definition-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (flow-definition-output-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-flow-definition-output-config-"))
   (s3output-path (common-lisp:error ":s3output-path is required") :type
    (common-lisp:or s3uri common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'flow-definition-output-config
                    'make-flow-definition-output-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          flow-definition-output-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          flow-definition-output-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3output-path))
      (common-lisp:list
       (common-lisp:cons "S3OutputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          flow-definition-output-config))
   common-lisp:nil))
(common-lisp:deftype flow-definition-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype flow-definition-summaries ()
   '(trivial-types:proper-list flow-definition-summary))
 (common-lisp:defun |make-flow-definition-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list flow-definition-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (flow-definition-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-flow-definition-summary-"))
   (flow-definition-name
    (common-lisp:error ":flow-definition-name is required") :type
    (common-lisp:or flow-definition-name common-lisp:null))
   (flow-definition-arn (common-lisp:error ":flow-definition-arn is required")
    :type (common-lisp:or flow-definition-arn common-lisp:null))
   (flow-definition-status
    (common-lisp:error ":flow-definition-status is required") :type
    (common-lisp:or flow-definition-status common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'flow-definition-summary 'make-flow-definition-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          flow-definition-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          flow-definition-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flow-definition-name))
      (common-lisp:list
       (common-lisp:cons "FlowDefinitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'flow-definition-arn))
      (common-lisp:list
       (common-lisp:cons "FlowDefinitionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flow-definition-status))
      (common-lisp:list
       (common-lisp:cons "FlowDefinitionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          flow-definition-summary))
   common-lisp:nil))
(common-lisp:deftype flow-definition-task-availability-lifetime-in-seconds ()
  'common-lisp:integer)
(common-lisp:deftype flow-definition-task-count () 'common-lisp:integer)
(common-lisp:deftype flow-definition-task-description () 'common-lisp:string)
(common-lisp:deftype flow-definition-task-keyword () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype flow-definition-task-keywords ()
   '(trivial-types:proper-list flow-definition-task-keyword))
 (common-lisp:defun |make-flow-definition-task-keywords|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            flow-definition-task-keyword))
   aws-sdk/generator/shape::members))
(common-lisp:deftype flow-definition-task-time-limit-in-seconds ()
  'common-lisp:integer)
(common-lisp:deftype flow-definition-task-title () 'common-lisp:string)
(common-lisp:deftype framework () 'common-lisp:string)
(common-lisp:deftype framework-version () 'common-lisp:string)
(common-lisp:deftype generate-candidate-definitions-only ()
  'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (get-device-fleet-report-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-device-fleet-report-request-"))
   (device-fleet-name (common-lisp:error ":device-fleet-name is required")
    :type (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-device-fleet-report-request
                    'make-get-device-fleet-report-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-device-fleet-report-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-device-fleet-report-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-fleet-name))
      (common-lisp:list
       (common-lisp:cons "DeviceFleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-device-fleet-report-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-device-fleet-report-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-device-fleet-report-response-"))
   (device-fleet-arn (common-lisp:error ":device-fleet-arn is required") :type
    (common-lisp:or device-fleet-arn common-lisp:null))
   (device-fleet-name (common-lisp:error ":device-fleet-name is required")
    :type (common-lisp:or entity-name common-lisp:null))
   (output-config common-lisp:nil :type
    (common-lisp:or edge-output-config common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or device-fleet-description common-lisp:null))
   (report-generated common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (device-stats common-lisp:nil :type
    (common-lisp:or device-stats common-lisp:null))
   (agent-versions common-lisp:nil :type
    (common-lisp:or agent-versions common-lisp:null))
   (model-stats common-lisp:nil :type
    (common-lisp:or edge-model-stats common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-device-fleet-report-response
                    'make-get-device-fleet-report-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-device-fleet-report-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-device-fleet-report-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-fleet-arn))
      (common-lisp:list
       (common-lisp:cons "DeviceFleetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-fleet-name))
      (common-lisp:list
       (common-lisp:cons "DeviceFleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-generated))
      (common-lisp:list
       (common-lisp:cons "ReportGenerated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-stats))
      (common-lisp:list
       (common-lisp:cons "DeviceStats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-versions))
      (common-lisp:list
       (common-lisp:cons "AgentVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-stats))
      (common-lisp:list
       (common-lisp:cons "ModelStats"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-device-fleet-report-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-lineage-group-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-lineage-group-policy-request-"))
   (lineage-group-name (common-lisp:error ":lineage-group-name is required")
    :type (common-lisp:or lineage-group-name-or-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-lineage-group-policy-request
                    'make-get-lineage-group-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lineage-group-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lineage-group-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lineage-group-name))
      (common-lisp:list
       (common-lisp:cons "LineageGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lineage-group-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-lineage-group-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-lineage-group-policy-response-"))
   (lineage-group-arn common-lisp:nil :type
    (common-lisp:or lineage-group-arn common-lisp:null))
   (resource-policy common-lisp:nil :type
    (common-lisp:or resource-policy-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-lineage-group-policy-response
                    'make-get-lineage-group-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-lineage-group-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-lineage-group-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lineage-group-arn))
      (common-lisp:list
       (common-lisp:cons "LineageGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-policy))
      (common-lisp:list
       (common-lisp:cons "ResourcePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-lineage-group-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-model-package-group-policy-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-model-package-group-policy-input-"))
   (model-package-group-name
    (common-lisp:error ":model-package-group-name is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-model-package-group-policy-input
                    'make-get-model-package-group-policy-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-model-package-group-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-model-package-group-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-name))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-model-package-group-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-model-package-group-policy-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-model-package-group-policy-output-"))
   (resource-policy (common-lisp:error ":resource-policy is required") :type
    (common-lisp:or policy-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-model-package-group-policy-output
                    'make-get-model-package-group-policy-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-model-package-group-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-model-package-group-policy-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-policy))
      (common-lisp:list
       (common-lisp:cons "ResourcePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-model-package-group-policy-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sagemaker-servicecatalog-portfolio-status-input
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-sagemaker-servicecatalog-portfolio-status-input-")))
 (common-lisp:export
  (common-lisp:list 'get-sagemaker-servicecatalog-portfolio-status-input
                    'make-get-sagemaker-servicecatalog-portfolio-status-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sagemaker-servicecatalog-portfolio-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sagemaker-servicecatalog-portfolio-status-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sagemaker-servicecatalog-portfolio-status-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sagemaker-servicecatalog-portfolio-status-output
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-sagemaker-servicecatalog-portfolio-status-output-"))
   (status common-lisp:nil :type
    (common-lisp:or sagemaker-servicecatalog-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sagemaker-servicecatalog-portfolio-status-output
                    'make-get-sagemaker-servicecatalog-portfolio-status-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sagemaker-servicecatalog-portfolio-status-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sagemaker-servicecatalog-portfolio-status-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sagemaker-servicecatalog-portfolio-status-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-search-suggestions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-search-suggestions-request-"))
   (resource (common-lisp:error ":resource is required") :type
    (common-lisp:or resource-type common-lisp:null))
   (suggestion-query common-lisp:nil :type
    (common-lisp:or suggestion-query common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-search-suggestions-request
                    'make-get-search-suggestions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-search-suggestions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-search-suggestions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'suggestion-query))
      (common-lisp:list
       (common-lisp:cons "SuggestionQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-search-suggestions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-search-suggestions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-search-suggestions-response-"))
   (property-name-suggestions common-lisp:nil :type
    (common-lisp:or property-name-suggestion-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-search-suggestions-response
                    'make-get-search-suggestions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-search-suggestions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-search-suggestions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'property-name-suggestions))
      (common-lisp:list
       (common-lisp:cons "PropertyNameSuggestions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-search-suggestions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (git-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-git-config-"))
   (repository-url (common-lisp:error ":repository-url is required") :type
    (common-lisp:or git-config-url common-lisp:null))
   (branch common-lisp:nil :type (common-lisp:or branch common-lisp:null))
   (secret-arn common-lisp:nil :type
    (common-lisp:or secret-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'git-config 'make-git-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input git-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input git-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-url))
      (common-lisp:list
       (common-lisp:cons "RepositoryUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'branch))
      (common-lisp:list
       (common-lisp:cons "Branch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input git-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (git-config-for-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-git-config-for-update-"))
   (secret-arn common-lisp:nil :type
    (common-lisp:or secret-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'git-config-for-update 'make-git-config-for-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          git-config-for-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          git-config-for-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-arn))
      (common-lisp:list
       (common-lisp:cons "SecretArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          git-config-for-update))
   common-lisp:nil))
(common-lisp:deftype git-config-url () 'common-lisp:string)
(common-lisp:deftype group () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype groups () '(trivial-types:proper-list group))
 (common-lisp:defun |make-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype hook-parameters () 'common-lisp:hash-table)
 (common-lisp:defun |make-hook-parameters|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype horovod () 'common-lisp:boolean)
(common-lisp:deftype hub-arn () 'common-lisp:string)
(common-lisp:deftype hub-content-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (hub-content-dependency (:copier common-lisp:nil)
      (:conc-name "struct-shape-hub-content-dependency-"))
   (dependency-origin-path common-lisp:nil :type
    (common-lisp:or dependency-origin-path common-lisp:null))
   (dependency-copy-path common-lisp:nil :type
    (common-lisp:or dependency-copy-path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hub-content-dependency 'make-hub-content-dependency))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hub-content-dependency))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hub-content-dependency))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dependency-origin-path))
      (common-lisp:list
       (common-lisp:cons "DependencyOriginPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dependency-copy-path))
      (common-lisp:list
       (common-lisp:cons "DependencyCopyPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hub-content-dependency))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype hub-content-dependency-list ()
   '(trivial-types:proper-list hub-content-dependency))
 (common-lisp:defun |make-hub-content-dependency-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hub-content-dependency))
   aws-sdk/generator/shape::members))
(common-lisp:deftype hub-content-description () 'common-lisp:string)
(common-lisp:deftype hub-content-display-name () 'common-lisp:string)
(common-lisp:deftype hub-content-document () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (hub-content-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-hub-content-info-"))
   (hub-content-name (common-lisp:error ":hub-content-name is required") :type
    (common-lisp:or hub-content-name common-lisp:null))
   (hub-content-arn (common-lisp:error ":hub-content-arn is required") :type
    (common-lisp:or hub-content-arn common-lisp:null))
   (hub-content-version (common-lisp:error ":hub-content-version is required")
    :type (common-lisp:or hub-content-version common-lisp:null))
   (hub-content-type (common-lisp:error ":hub-content-type is required") :type
    (common-lisp:or hub-content-type common-lisp:null))
   (document-schema-version
    (common-lisp:error ":document-schema-version is required") :type
    (common-lisp:or document-schema-version common-lisp:null))
   (hub-content-display-name common-lisp:nil :type
    (common-lisp:or hub-content-display-name common-lisp:null))
   (hub-content-description common-lisp:nil :type
    (common-lisp:or hub-content-description common-lisp:null))
   (hub-content-search-keywords common-lisp:nil :type
    (common-lisp:or hub-content-search-keyword-list common-lisp:null))
   (hub-content-status (common-lisp:error ":hub-content-status is required")
    :type (common-lisp:or hub-content-status common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hub-content-info 'make-hub-content-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hub-content-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hub-content-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-content-name))
      (common-lisp:list
       (common-lisp:cons "HubContentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-content-arn))
      (common-lisp:list
       (common-lisp:cons "HubContentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-content-version))
      (common-lisp:list
       (common-lisp:cons "HubContentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-content-type))
      (common-lisp:list
       (common-lisp:cons "HubContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-schema-version))
      (common-lisp:list
       (common-lisp:cons "DocumentSchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hub-content-display-name))
      (common-lisp:list
       (common-lisp:cons "HubContentDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hub-content-description))
      (common-lisp:list
       (common-lisp:cons "HubContentDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hub-content-search-keywords))
      (common-lisp:list
       (common-lisp:cons "HubContentSearchKeywords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-content-status))
      (common-lisp:list
       (common-lisp:cons "HubContentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hub-content-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype hub-content-info-list ()
   '(trivial-types:proper-list hub-content-info))
 (common-lisp:defun |make-hub-content-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hub-content-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype hub-content-markdown () 'common-lisp:string)
(common-lisp:deftype hub-content-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype hub-content-search-keyword-list ()
   '(trivial-types:proper-list hub-search-keyword))
 (common-lisp:defun |make-hub-content-search-keyword-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hub-search-keyword))
   aws-sdk/generator/shape::members))
(common-lisp:deftype hub-content-sort-by () 'common-lisp:string)
(common-lisp:deftype hub-content-status () 'common-lisp:string)
(common-lisp:deftype hub-content-type () 'common-lisp:string)
(common-lisp:deftype hub-content-version () 'common-lisp:string)
(common-lisp:deftype hub-description () 'common-lisp:string)
(common-lisp:deftype hub-display-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (hub-info (:copier common-lisp:nil) (:conc-name "struct-shape-hub-info-"))
   (hub-name (common-lisp:error ":hub-name is required") :type
    (common-lisp:or hub-name common-lisp:null))
   (hub-arn (common-lisp:error ":hub-arn is required") :type
    (common-lisp:or hub-arn common-lisp:null))
   (hub-display-name common-lisp:nil :type
    (common-lisp:or hub-display-name common-lisp:null))
   (hub-description common-lisp:nil :type
    (common-lisp:or hub-description common-lisp:null))
   (hub-search-keywords common-lisp:nil :type
    (common-lisp:or hub-search-keyword-list common-lisp:null))
   (hub-status (common-lisp:error ":hub-status is required") :type
    (common-lisp:or hub-status common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'hub-info 'make-hub-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hub-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hub-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-name))
      (common-lisp:list
       (common-lisp:cons "HubName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-arn))
      (common-lisp:list
       (common-lisp:cons "HubArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-display-name))
      (common-lisp:list
       (common-lisp:cons "HubDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-description))
      (common-lisp:list
       (common-lisp:cons "HubDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-search-keywords))
      (common-lisp:list
       (common-lisp:cons "HubSearchKeywords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-status))
      (common-lisp:list
       (common-lisp:cons "HubStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hub-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype hub-info-list () '(trivial-types:proper-list hub-info))
 (common-lisp:defun |make-hub-info-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hub-info))
   aws-sdk/generator/shape::members))
(common-lisp:deftype hub-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (hub-s3storage-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-hub-s3storage-config-"))
   (s3output-path common-lisp:nil :type
    (common-lisp:or s3output-path common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hub-s3storage-config 'make-hub-s3storage-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input hub-s3storage-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input hub-s3storage-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3output-path))
      (common-lisp:list
       (common-lisp:cons "S3OutputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input hub-s3storage-config))
   common-lisp:nil))
(common-lisp:deftype hub-search-keyword () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype hub-search-keyword-list ()
   '(trivial-types:proper-list hub-search-keyword))
 (common-lisp:defun |make-hub-search-keyword-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hub-search-keyword))
   aws-sdk/generator/shape::members))
(common-lisp:deftype hub-sort-by () 'common-lisp:string)
(common-lisp:deftype hub-status () 'common-lisp:string)
(common-lisp:deftype human-loop-activation-conditions () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (human-loop-activation-conditions-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-human-loop-activation-conditions-config-"))
   (human-loop-activation-conditions
    (common-lisp:error ":human-loop-activation-conditions is required") :type
    (common-lisp:or human-loop-activation-conditions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'human-loop-activation-conditions-config
                    'make-human-loop-activation-conditions-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          human-loop-activation-conditions-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          human-loop-activation-conditions-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'human-loop-activation-conditions))
      (common-lisp:list
       (common-lisp:cons "HumanLoopActivationConditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          human-loop-activation-conditions-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (human-loop-activation-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-human-loop-activation-config-"))
   (human-loop-activation-conditions-config
    (common-lisp:error ":human-loop-activation-conditions-config is required")
    :type
    (common-lisp:or human-loop-activation-conditions-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'human-loop-activation-config
                    'make-human-loop-activation-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          human-loop-activation-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          human-loop-activation-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'human-loop-activation-conditions-config))
      (common-lisp:list
       (common-lisp:cons "HumanLoopActivationConditionsConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          human-loop-activation-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (human-loop-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-human-loop-config-"))
   (workteam-arn (common-lisp:error ":workteam-arn is required") :type
    (common-lisp:or workteam-arn common-lisp:null))
   (human-task-ui-arn (common-lisp:error ":human-task-ui-arn is required")
    :type (common-lisp:or human-task-ui-arn common-lisp:null))
   (task-title (common-lisp:error ":task-title is required") :type
    (common-lisp:or flow-definition-task-title common-lisp:null))
   (task-description (common-lisp:error ":task-description is required") :type
    (common-lisp:or flow-definition-task-description common-lisp:null))
   (task-count (common-lisp:error ":task-count is required") :type
    (common-lisp:or flow-definition-task-count common-lisp:null))
   (task-availability-lifetime-in-seconds common-lisp:nil :type
    (common-lisp:or flow-definition-task-availability-lifetime-in-seconds
                    common-lisp:null))
   (task-time-limit-in-seconds common-lisp:nil :type
    (common-lisp:or flow-definition-task-time-limit-in-seconds
                    common-lisp:null))
   (task-keywords common-lisp:nil :type
    (common-lisp:or flow-definition-task-keywords common-lisp:null))
   (public-workforce-task-price common-lisp:nil :type
    (common-lisp:or public-workforce-task-price common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'human-loop-config 'make-human-loop-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input human-loop-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input human-loop-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workteam-arn))
      (common-lisp:list
       (common-lisp:cons "WorkteamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'human-task-ui-arn))
      (common-lisp:list
       (common-lisp:cons "HumanTaskUiArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-title))
      (common-lisp:list
       (common-lisp:cons "TaskTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-description))
      (common-lisp:list
       (common-lisp:cons "TaskDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-count))
      (common-lisp:list
       (common-lisp:cons "TaskCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'task-availability-lifetime-in-seconds))
      (common-lisp:list
       (common-lisp:cons "TaskAvailabilityLifetimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'task-time-limit-in-seconds))
      (common-lisp:list
       (common-lisp:cons "TaskTimeLimitInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-keywords))
      (common-lisp:list
       (common-lisp:cons "TaskKeywords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-workforce-task-price))
      (common-lisp:list
       (common-lisp:cons "PublicWorkforceTaskPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input human-loop-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (human-loop-request-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-human-loop-request-source-"))
   (aws-managed-human-loop-request-source
    (common-lisp:error ":aws-managed-human-loop-request-source is required")
    :type
    (common-lisp:or aws-managed-human-loop-request-source common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'human-loop-request-source
                    'make-human-loop-request-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          human-loop-request-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          human-loop-request-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'aws-managed-human-loop-request-source))
      (common-lisp:list
       (common-lisp:cons "AwsManagedHumanLoopRequestSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          human-loop-request-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (human-task-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-human-task-config-"))
   (workteam-arn (common-lisp:error ":workteam-arn is required") :type
    (common-lisp:or workteam-arn common-lisp:null))
   (ui-config (common-lisp:error ":ui-config is required") :type
    (common-lisp:or ui-config common-lisp:null))
   (pre-human-task-lambda-arn
    (common-lisp:error ":pre-human-task-lambda-arn is required") :type
    (common-lisp:or lambda-function-arn common-lisp:null))
   (task-keywords common-lisp:nil :type
    (common-lisp:or task-keywords common-lisp:null))
   (task-title (common-lisp:error ":task-title is required") :type
    (common-lisp:or task-title common-lisp:null))
   (task-description (common-lisp:error ":task-description is required") :type
    (common-lisp:or task-description common-lisp:null))
   (number-of-human-workers-per-data-object
    (common-lisp:error ":number-of-human-workers-per-data-object is required")
    :type
    (common-lisp:or number-of-human-workers-per-data-object common-lisp:null))
   (task-time-limit-in-seconds
    (common-lisp:error ":task-time-limit-in-seconds is required") :type
    (common-lisp:or task-time-limit-in-seconds common-lisp:null))
   (task-availability-lifetime-in-seconds common-lisp:nil :type
    (common-lisp:or task-availability-lifetime-in-seconds common-lisp:null))
   (max-concurrent-task-count common-lisp:nil :type
    (common-lisp:or max-concurrent-task-count common-lisp:null))
   (annotation-consolidation-config
    (common-lisp:error ":annotation-consolidation-config is required") :type
    (common-lisp:or annotation-consolidation-config common-lisp:null))
   (public-workforce-task-price common-lisp:nil :type
    (common-lisp:or public-workforce-task-price common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'human-task-config 'make-human-task-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input human-task-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input human-task-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workteam-arn))
      (common-lisp:list
       (common-lisp:cons "WorkteamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ui-config))
      (common-lisp:list
       (common-lisp:cons "UiConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pre-human-task-lambda-arn))
      (common-lisp:list
       (common-lisp:cons "PreHumanTaskLambdaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-keywords))
      (common-lisp:list
       (common-lisp:cons "TaskKeywords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-title))
      (common-lisp:list
       (common-lisp:cons "TaskTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-description))
      (common-lisp:list
       (common-lisp:cons "TaskDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-human-workers-per-data-object))
      (common-lisp:list
       (common-lisp:cons "NumberOfHumanWorkersPerDataObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'task-time-limit-in-seconds))
      (common-lisp:list
       (common-lisp:cons "TaskTimeLimitInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'task-availability-lifetime-in-seconds))
      (common-lisp:list
       (common-lisp:cons "TaskAvailabilityLifetimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-concurrent-task-count))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrentTaskCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'annotation-consolidation-config))
      (common-lisp:list
       (common-lisp:cons "AnnotationConsolidationConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'public-workforce-task-price))
      (common-lisp:list
       (common-lisp:cons "PublicWorkforceTaskPrice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input human-task-config))
   common-lisp:nil))
(common-lisp:deftype human-task-ui-arn () 'common-lisp:string)
(common-lisp:deftype human-task-ui-name () 'common-lisp:string)
(common-lisp:deftype human-task-ui-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype human-task-ui-summaries ()
   '(trivial-types:proper-list human-task-ui-summary))
 (common-lisp:defun |make-human-task-ui-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list human-task-ui-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (human-task-ui-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-human-task-ui-summary-"))
   (human-task-ui-name (common-lisp:error ":human-task-ui-name is required")
    :type (common-lisp:or human-task-ui-name common-lisp:null))
   (human-task-ui-arn (common-lisp:error ":human-task-ui-arn is required")
    :type (common-lisp:or human-task-ui-arn common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'human-task-ui-summary 'make-human-task-ui-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          human-task-ui-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          human-task-ui-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'human-task-ui-name))
      (common-lisp:list
       (common-lisp:cons "HumanTaskUiName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'human-task-ui-arn))
      (common-lisp:list
       (common-lisp:cons "HumanTaskUiArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          human-task-ui-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (hyper-parameter-algorithm-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-hyper-parameter-algorithm-specification-"))
   (training-image common-lisp:nil :type
    (common-lisp:or algorithm-image common-lisp:null))
   (training-input-mode (common-lisp:error ":training-input-mode is required")
    :type (common-lisp:or training-input-mode common-lisp:null))
   (algorithm-name common-lisp:nil :type
    (common-lisp:or arn-or-name common-lisp:null))
   (metric-definitions common-lisp:nil :type
    (common-lisp:or metric-definition-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hyper-parameter-algorithm-specification
                    'make-hyper-parameter-algorithm-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-algorithm-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-algorithm-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-image))
      (common-lisp:list
       (common-lisp:cons "TrainingImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-input-mode))
      (common-lisp:list
       (common-lisp:cons "TrainingInputMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm-name))
      (common-lisp:list
       (common-lisp:cons "AlgorithmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-definitions))
      (common-lisp:list
       (common-lisp:cons "MetricDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-algorithm-specification))
   common-lisp:nil))
(common-lisp:deftype hyper-parameter-key () 'common-lisp:string)
(common-lisp:deftype hyper-parameter-scaling-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (hyper-parameter-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-hyper-parameter-specification-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or parameter-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or parameter-type common-lisp:null))
   (range common-lisp:nil :type
    (common-lisp:or parameter-range common-lisp:null))
   (is-tunable common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (is-required common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (default-value common-lisp:nil :type
    (common-lisp:or hyper-parameter-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hyper-parameter-specification
                    'make-hyper-parameter-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'range))
      (common-lisp:list
       (common-lisp:cons "Range"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-tunable))
      (common-lisp:list
       (common-lisp:cons "IsTunable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-required))
      (common-lisp:list
       (common-lisp:cons "IsRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "DefaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype hyper-parameter-specifications ()
   '(trivial-types:proper-list hyper-parameter-specification))
 (common-lisp:defun |make-hyper-parameter-specifications|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            hyper-parameter-specification))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (hyper-parameter-training-job-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-hyper-parameter-training-job-definition-"))
   (definition-name common-lisp:nil :type
    (common-lisp:or hyper-parameter-training-job-definition-name
                    common-lisp:null))
   (tuning-objective common-lisp:nil :type
    (common-lisp:or hyper-parameter-tuning-job-objective common-lisp:null))
   (hyper-parameter-ranges common-lisp:nil :type
    (common-lisp:or parameter-ranges common-lisp:null))
   (static-hyper-parameters common-lisp:nil :type
    (common-lisp:or hyper-parameters common-lisp:null))
   (algorithm-specification
    (common-lisp:error ":algorithm-specification is required") :type
    (common-lisp:or hyper-parameter-algorithm-specification common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (input-data-config common-lisp:nil :type
    (common-lisp:or input-data-config common-lisp:null))
   (vpc-config common-lisp:nil :type
    (common-lisp:or vpc-config common-lisp:null))
   (output-data-config (common-lisp:error ":output-data-config is required")
    :type (common-lisp:or output-data-config common-lisp:null))
   (resource-config common-lisp:nil :type
    (common-lisp:or resource-config common-lisp:null))
   (stopping-condition (common-lisp:error ":stopping-condition is required")
    :type (common-lisp:or stopping-condition common-lisp:null))
   (enable-network-isolation common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (enable-inter-container-traffic-encryption common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (enable-managed-spot-training common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (checkpoint-config common-lisp:nil :type
    (common-lisp:or checkpoint-config common-lisp:null))
   (retry-strategy common-lisp:nil :type
    (common-lisp:or retry-strategy common-lisp:null))
   (hyper-parameter-tuning-resource-config common-lisp:nil :type
    (common-lisp:or hyper-parameter-tuning-resource-config common-lisp:null))
   (environment common-lisp:nil :type
    (common-lisp:or hyper-parameter-training-job-environment-map
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hyper-parameter-training-job-definition
                    'make-hyper-parameter-training-job-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-training-job-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-training-job-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'definition-name))
      (common-lisp:list
       (common-lisp:cons "DefinitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tuning-objective))
      (common-lisp:list
       (common-lisp:cons "TuningObjective"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hyper-parameter-ranges))
      (common-lisp:list
       (common-lisp:cons "HyperParameterRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'static-hyper-parameters))
      (common-lisp:list
       (common-lisp:cons "StaticHyperParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'algorithm-specification))
      (common-lisp:list
       (common-lisp:cons "AlgorithmSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "OutputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-condition))
      (common-lisp:list
       (common-lisp:cons "StoppingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-network-isolation))
      (common-lisp:list
       (common-lisp:cons "EnableNetworkIsolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-inter-container-traffic-encryption))
      (common-lisp:list
       (common-lisp:cons "EnableInterContainerTrafficEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-managed-spot-training))
      (common-lisp:list
       (common-lisp:cons "EnableManagedSpotTraining"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checkpoint-config))
      (common-lisp:list
       (common-lisp:cons "CheckpointConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retry-strategy))
      (common-lisp:list
       (common-lisp:cons "RetryStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hyper-parameter-tuning-resource-config))
      (common-lisp:list
       (common-lisp:cons "HyperParameterTuningResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-training-job-definition))
   common-lisp:nil))
(common-lisp:deftype hyper-parameter-training-job-definition-name ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype hyper-parameter-training-job-definitions ()
   '(trivial-types:proper-list hyper-parameter-training-job-definition))
 (common-lisp:defun |make-hyper-parameter-training-job-definitions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            hyper-parameter-training-job-definition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype hyper-parameter-training-job-environment-key ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype hyper-parameter-training-job-environment-map ()
   'common-lisp:hash-table)
 (common-lisp:defun |make-hyper-parameter-training-job-environment-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype hyper-parameter-training-job-environment-value ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype hyper-parameter-training-job-summaries ()
   '(trivial-types:proper-list hyper-parameter-training-job-summary))
 (common-lisp:defun |make-hyper-parameter-training-job-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            hyper-parameter-training-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (hyper-parameter-training-job-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-hyper-parameter-training-job-summary-"))
   (training-job-definition-name common-lisp:nil :type
    (common-lisp:or hyper-parameter-training-job-definition-name
                    common-lisp:null))
   (training-job-name (common-lisp:error ":training-job-name is required")
    :type (common-lisp:or training-job-name common-lisp:null))
   (training-job-arn (common-lisp:error ":training-job-arn is required") :type
    (common-lisp:or training-job-arn common-lisp:null))
   (tuning-job-name common-lisp:nil :type
    (common-lisp:or hyper-parameter-tuning-job-name common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (training-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (training-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (training-job-status (common-lisp:error ":training-job-status is required")
    :type (common-lisp:or training-job-status common-lisp:null))
   (tuned-hyper-parameters
    (common-lisp:error ":tuned-hyper-parameters is required") :type
    (common-lisp:or hyper-parameters common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (final-hyper-parameter-tuning-job-objective-metric common-lisp:nil :type
    (common-lisp:or final-hyper-parameter-tuning-job-objective-metric
                    common-lisp:null))
   (objective-status common-lisp:nil :type
    (common-lisp:or objective-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hyper-parameter-training-job-summary
                    'make-hyper-parameter-training-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-training-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-training-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-job-definition-name))
      (common-lisp:list
       (common-lisp:cons "TrainingJobDefinitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-job-name))
      (common-lisp:list
       (common-lisp:cons "TrainingJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-job-arn))
      (common-lisp:list
       (common-lisp:cons "TrainingJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tuning-job-name))
      (common-lisp:list
       (common-lisp:cons "TuningJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-start-time))
      (common-lisp:list
       (common-lisp:cons "TrainingStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-end-time))
      (common-lisp:list
       (common-lisp:cons "TrainingEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-job-status))
      (common-lisp:list
       (common-lisp:cons "TrainingJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tuned-hyper-parameters))
      (common-lisp:list
       (common-lisp:cons "TunedHyperParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'final-hyper-parameter-tuning-job-objective-metric))
      (common-lisp:list
       (common-lisp:cons "FinalHyperParameterTuningJobObjectiveMetric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'objective-status))
      (common-lisp:list
       (common-lisp:cons "ObjectiveStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-training-job-summary))
   common-lisp:nil))
(common-lisp:deftype hyper-parameter-tuning-allocation-strategy ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (hyper-parameter-tuning-instance-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-hyper-parameter-tuning-instance-config-"))
   (instance-type (common-lisp:error ":instance-type is required") :type
    (common-lisp:or training-instance-type common-lisp:null))
   (instance-count (common-lisp:error ":instance-count is required") :type
    (common-lisp:or training-instance-count common-lisp:null))
   (volume-size-in-gb (common-lisp:error ":volume-size-in-gb is required")
    :type (common-lisp:or volume-size-in-gb common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hyper-parameter-tuning-instance-config
                    'make-hyper-parameter-tuning-instance-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-instance-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-instance-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "VolumeSizeInGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-instance-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype hyper-parameter-tuning-instance-configs ()
   '(trivial-types:proper-list hyper-parameter-tuning-instance-config))
 (common-lisp:defun |make-hyper-parameter-tuning-instance-configs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            hyper-parameter-tuning-instance-config))
   aws-sdk/generator/shape::members))
(common-lisp:deftype hyper-parameter-tuning-job-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (hyper-parameter-tuning-job-completion-details (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-hyper-parameter-tuning-job-completion-details-"))
   (number-of-training-jobs-objective-not-improving common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (convergence-detected-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hyper-parameter-tuning-job-completion-details
                    'make-hyper-parameter-tuning-job-completion-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-job-completion-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-job-completion-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-training-jobs-objective-not-improving))
      (common-lisp:list
       (common-lisp:cons "NumberOfTrainingJobsObjectiveNotImproving"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'convergence-detected-time))
      (common-lisp:list
       (common-lisp:cons "ConvergenceDetectedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-job-completion-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (hyper-parameter-tuning-job-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-hyper-parameter-tuning-job-config-"))
   (strategy (common-lisp:error ":strategy is required") :type
    (common-lisp:or hyper-parameter-tuning-job-strategy-type common-lisp:null))
   (strategy-config common-lisp:nil :type
    (common-lisp:or hyper-parameter-tuning-job-strategy-config
                    common-lisp:null))
   (hyper-parameter-tuning-job-objective common-lisp:nil :type
    (common-lisp:or hyper-parameter-tuning-job-objective common-lisp:null))
   (resource-limits (common-lisp:error ":resource-limits is required") :type
    (common-lisp:or resource-limits common-lisp:null))
   (parameter-ranges common-lisp:nil :type
    (common-lisp:or parameter-ranges common-lisp:null))
   (training-job-early-stopping-type common-lisp:nil :type
    (common-lisp:or training-job-early-stopping-type common-lisp:null))
   (tuning-job-completion-criteria common-lisp:nil :type
    (common-lisp:or tuning-job-completion-criteria common-lisp:null))
   (random-seed common-lisp:nil :type
    (common-lisp:or random-seed common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hyper-parameter-tuning-job-config
                    'make-hyper-parameter-tuning-job-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-job-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-job-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'strategy))
      (common-lisp:list
       (common-lisp:cons "Strategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'strategy-config))
      (common-lisp:list
       (common-lisp:cons "StrategyConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hyper-parameter-tuning-job-objective))
      (common-lisp:list
       (common-lisp:cons "HyperParameterTuningJobObjective"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-limits))
      (common-lisp:list
       (common-lisp:cons "ResourceLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-ranges))
      (common-lisp:list
       (common-lisp:cons "ParameterRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-job-early-stopping-type))
      (common-lisp:list
       (common-lisp:cons "TrainingJobEarlyStoppingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tuning-job-completion-criteria))
      (common-lisp:list
       (common-lisp:cons "TuningJobCompletionCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'random-seed))
      (common-lisp:list
       (common-lisp:cons "RandomSeed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-job-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (hyper-parameter-tuning-job-consumed-resources (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-hyper-parameter-tuning-job-consumed-resources-"))
   (runtime-in-seconds common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hyper-parameter-tuning-job-consumed-resources
                    'make-hyper-parameter-tuning-job-consumed-resources))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-job-consumed-resources))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-job-consumed-resources))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-in-seconds))
      (common-lisp:list
       (common-lisp:cons "RuntimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-job-consumed-resources))
   common-lisp:nil))
(common-lisp:deftype hyper-parameter-tuning-job-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (hyper-parameter-tuning-job-objective (:copier common-lisp:nil)
      (:conc-name "struct-shape-hyper-parameter-tuning-job-objective-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or hyper-parameter-tuning-job-objective-type
                    common-lisp:null))
   (metric-name (common-lisp:error ":metric-name is required") :type
    (common-lisp:or metric-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hyper-parameter-tuning-job-objective
                    'make-hyper-parameter-tuning-job-objective))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-job-objective))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-job-objective))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-job-objective))
   common-lisp:nil))
(common-lisp:deftype hyper-parameter-tuning-job-objective-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype hyper-parameter-tuning-job-objectives ()
   '(trivial-types:proper-list hyper-parameter-tuning-job-objective))
 (common-lisp:defun |make-hyper-parameter-tuning-job-objectives|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            hyper-parameter-tuning-job-objective))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (hyper-parameter-tuning-job-search-entity (:copier common-lisp:nil)
      (:conc-name "struct-shape-hyper-parameter-tuning-job-search-entity-"))
   (hyper-parameter-tuning-job-name common-lisp:nil :type
    (common-lisp:or hyper-parameter-tuning-job-name common-lisp:null))
   (hyper-parameter-tuning-job-arn common-lisp:nil :type
    (common-lisp:or hyper-parameter-tuning-job-arn common-lisp:null))
   (hyper-parameter-tuning-job-config common-lisp:nil :type
    (common-lisp:or hyper-parameter-tuning-job-config common-lisp:null))
   (training-job-definition common-lisp:nil :type
    (common-lisp:or hyper-parameter-training-job-definition common-lisp:null))
   (training-job-definitions common-lisp:nil :type
    (common-lisp:or hyper-parameter-training-job-definitions common-lisp:null))
   (hyper-parameter-tuning-job-status common-lisp:nil :type
    (common-lisp:or hyper-parameter-tuning-job-status common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (hyper-parameter-tuning-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (training-job-status-counters common-lisp:nil :type
    (common-lisp:or training-job-status-counters common-lisp:null))
   (objective-status-counters common-lisp:nil :type
    (common-lisp:or objective-status-counters common-lisp:null))
   (best-training-job common-lisp:nil :type
    (common-lisp:or hyper-parameter-training-job-summary common-lisp:null))
   (overall-best-training-job common-lisp:nil :type
    (common-lisp:or hyper-parameter-training-job-summary common-lisp:null))
   (warm-start-config common-lisp:nil :type
    (common-lisp:or hyper-parameter-tuning-job-warm-start-config
                    common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (tuning-job-completion-details common-lisp:nil :type
    (common-lisp:or hyper-parameter-tuning-job-completion-details
                    common-lisp:null))
   (consumed-resources common-lisp:nil :type
    (common-lisp:or hyper-parameter-tuning-job-consumed-resources
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hyper-parameter-tuning-job-search-entity
                    'make-hyper-parameter-tuning-job-search-entity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-job-search-entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-job-search-entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hyper-parameter-tuning-job-name))
      (common-lisp:list
       (common-lisp:cons "HyperParameterTuningJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hyper-parameter-tuning-job-arn))
      (common-lisp:list
       (common-lisp:cons "HyperParameterTuningJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hyper-parameter-tuning-job-config))
      (common-lisp:list
       (common-lisp:cons "HyperParameterTuningJobConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-job-definition))
      (common-lisp:list
       (common-lisp:cons "TrainingJobDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-job-definitions))
      (common-lisp:list
       (common-lisp:cons "TrainingJobDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hyper-parameter-tuning-job-status))
      (common-lisp:list
       (common-lisp:cons "HyperParameterTuningJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hyper-parameter-tuning-end-time))
      (common-lisp:list
       (common-lisp:cons "HyperParameterTuningEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-job-status-counters))
      (common-lisp:list
       (common-lisp:cons "TrainingJobStatusCounters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'objective-status-counters))
      (common-lisp:list
       (common-lisp:cons "ObjectiveStatusCounters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'best-training-job))
      (common-lisp:list
       (common-lisp:cons "BestTrainingJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'overall-best-training-job))
      (common-lisp:list
       (common-lisp:cons "OverallBestTrainingJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warm-start-config))
      (common-lisp:list
       (common-lisp:cons "WarmStartConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tuning-job-completion-details))
      (common-lisp:list
       (common-lisp:cons "TuningJobCompletionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'consumed-resources))
      (common-lisp:list
       (common-lisp:cons "ConsumedResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-job-search-entity))
   common-lisp:nil))
(common-lisp:deftype hyper-parameter-tuning-job-sort-by-options ()
  'common-lisp:string)
(common-lisp:deftype hyper-parameter-tuning-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (hyper-parameter-tuning-job-strategy-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-hyper-parameter-tuning-job-strategy-config-"))
   (hyperband-strategy-config common-lisp:nil :type
    (common-lisp:or hyperband-strategy-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hyper-parameter-tuning-job-strategy-config
                    'make-hyper-parameter-tuning-job-strategy-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-job-strategy-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-job-strategy-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hyperband-strategy-config))
      (common-lisp:list
       (common-lisp:cons "HyperbandStrategyConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-job-strategy-config))
   common-lisp:nil))
(common-lisp:deftype hyper-parameter-tuning-job-strategy-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype hyper-parameter-tuning-job-summaries ()
   '(trivial-types:proper-list hyper-parameter-tuning-job-summary))
 (common-lisp:defun |make-hyper-parameter-tuning-job-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            hyper-parameter-tuning-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (hyper-parameter-tuning-job-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-hyper-parameter-tuning-job-summary-"))
   (hyper-parameter-tuning-job-name
    (common-lisp:error ":hyper-parameter-tuning-job-name is required") :type
    (common-lisp:or hyper-parameter-tuning-job-name common-lisp:null))
   (hyper-parameter-tuning-job-arn
    (common-lisp:error ":hyper-parameter-tuning-job-arn is required") :type
    (common-lisp:or hyper-parameter-tuning-job-arn common-lisp:null))
   (hyper-parameter-tuning-job-status
    (common-lisp:error ":hyper-parameter-tuning-job-status is required") :type
    (common-lisp:or hyper-parameter-tuning-job-status common-lisp:null))
   (strategy (common-lisp:error ":strategy is required") :type
    (common-lisp:or hyper-parameter-tuning-job-strategy-type common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (hyper-parameter-tuning-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (training-job-status-counters
    (common-lisp:error ":training-job-status-counters is required") :type
    (common-lisp:or training-job-status-counters common-lisp:null))
   (objective-status-counters
    (common-lisp:error ":objective-status-counters is required") :type
    (common-lisp:or objective-status-counters common-lisp:null))
   (resource-limits common-lisp:nil :type
    (common-lisp:or resource-limits common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hyper-parameter-tuning-job-summary
                    'make-hyper-parameter-tuning-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hyper-parameter-tuning-job-name))
      (common-lisp:list
       (common-lisp:cons "HyperParameterTuningJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hyper-parameter-tuning-job-arn))
      (common-lisp:list
       (common-lisp:cons "HyperParameterTuningJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hyper-parameter-tuning-job-status))
      (common-lisp:list
       (common-lisp:cons "HyperParameterTuningJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'strategy))
      (common-lisp:list
       (common-lisp:cons "Strategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hyper-parameter-tuning-end-time))
      (common-lisp:list
       (common-lisp:cons "HyperParameterTuningEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-job-status-counters))
      (common-lisp:list
       (common-lisp:cons "TrainingJobStatusCounters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'objective-status-counters))
      (common-lisp:list
       (common-lisp:cons "ObjectiveStatusCounters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-limits))
      (common-lisp:list
       (common-lisp:cons "ResourceLimits"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-job-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (hyper-parameter-tuning-job-warm-start-config (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-hyper-parameter-tuning-job-warm-start-config-"))
   (parent-hyper-parameter-tuning-jobs
    (common-lisp:error ":parent-hyper-parameter-tuning-jobs is required") :type
    (common-lisp:or parent-hyper-parameter-tuning-jobs common-lisp:null))
   (warm-start-type (common-lisp:error ":warm-start-type is required") :type
    (common-lisp:or hyper-parameter-tuning-job-warm-start-type
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hyper-parameter-tuning-job-warm-start-config
                    'make-hyper-parameter-tuning-job-warm-start-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-job-warm-start-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-job-warm-start-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parent-hyper-parameter-tuning-jobs))
      (common-lisp:list
       (common-lisp:cons "ParentHyperParameterTuningJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warm-start-type))
      (common-lisp:list
       (common-lisp:cons "WarmStartType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-job-warm-start-config))
   common-lisp:nil))
(common-lisp:deftype hyper-parameter-tuning-job-warm-start-type ()
  'common-lisp:string)
(common-lisp:deftype hyper-parameter-tuning-max-runtime-in-seconds ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (hyper-parameter-tuning-resource-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-hyper-parameter-tuning-resource-config-"))
   (instance-type common-lisp:nil :type
    (common-lisp:or training-instance-type common-lisp:null))
   (instance-count common-lisp:nil :type
    (common-lisp:or training-instance-count common-lisp:null))
   (volume-size-in-gb common-lisp:nil :type
    (common-lisp:or optional-volume-size-in-gb common-lisp:null))
   (volume-kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (allocation-strategy common-lisp:nil :type
    (common-lisp:or hyper-parameter-tuning-allocation-strategy
                    common-lisp:null))
   (instance-configs common-lisp:nil :type
    (common-lisp:or hyper-parameter-tuning-instance-configs common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hyper-parameter-tuning-resource-config
                    'make-hyper-parameter-tuning-resource-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-resource-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-resource-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "VolumeSizeInGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "VolumeKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allocation-strategy))
      (common-lisp:list
       (common-lisp:cons "AllocationStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-configs))
      (common-lisp:list
       (common-lisp:cons "InstanceConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hyper-parameter-tuning-resource-config))
   common-lisp:nil))
(common-lisp:deftype hyper-parameter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype hyper-parameters () 'common-lisp:hash-table)
 (common-lisp:defun |make-hyper-parameters|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (hyperband-strategy-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-hyperband-strategy-config-"))
   (min-resource common-lisp:nil :type
    (common-lisp:or hyperband-strategy-min-resource common-lisp:null))
   (max-resource common-lisp:nil :type
    (common-lisp:or hyperband-strategy-max-resource common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hyperband-strategy-config
                    'make-hyperband-strategy-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          hyperband-strategy-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          hyperband-strategy-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-resource))
      (common-lisp:list
       (common-lisp:cons "MinResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-resource))
      (common-lisp:list
       (common-lisp:cons "MaxResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          hyperband-strategy-config))
   common-lisp:nil))
(common-lisp:deftype hyperband-strategy-max-resource () 'common-lisp:integer)
(common-lisp:deftype hyperband-strategy-min-resource () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (iam-identity (:copier common-lisp:nil)
      (:conc-name "struct-shape-iam-identity-"))
   (arn common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (principal-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (source-identity common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'iam-identity 'make-iam-identity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input iam-identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input iam-identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'principal-id))
      (common-lisp:list
       (common-lisp:cons "PrincipalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-identity))
      (common-lisp:list
       (common-lisp:cons "SourceIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input iam-identity))
   common-lisp:nil))
(common-lisp:deftype idempotency-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (image (:copier common-lisp:nil) (:conc-name "struct-shape-image-"))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or image-description common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or image-display-name common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (image-arn (common-lisp:error ":image-arn is required") :type
    (common-lisp:or image-arn common-lisp:null))
   (image-name (common-lisp:error ":image-name is required") :type
    (common-lisp:or image-name common-lisp:null))
   (image-status (common-lisp:error ":image-status is required") :type
    (common-lisp:or image-status common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'image 'make-image))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-arn))
      (common-lisp:list
       (common-lisp:cons "ImageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-name))
      (common-lisp:list
       (common-lisp:cons "ImageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-status))
      (common-lisp:list
       (common-lisp:cons "ImageStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image))
   common-lisp:nil))
(common-lisp:deftype image-arn () 'common-lisp:string)
(common-lisp:deftype image-base-image () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (image-classification-job-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-classification-job-config-"))
   (completion-criteria common-lisp:nil :type
    (common-lisp:or auto-mljob-completion-criteria common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'image-classification-job-config
                    'make-image-classification-job-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          image-classification-job-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          image-classification-job-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-criteria))
      (common-lisp:list
       (common-lisp:cons "CompletionCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          image-classification-job-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (image-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-config-"))
   (repository-access-mode
    (common-lisp:error ":repository-access-mode is required") :type
    (common-lisp:or repository-access-mode common-lisp:null))
   (repository-auth-config common-lisp:nil :type
    (common-lisp:or repository-auth-config common-lisp:null)))
 (common-lisp:export (common-lisp:list 'image-config 'make-image-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-access-mode))
      (common-lisp:list
       (common-lisp:cons "RepositoryAccessMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-auth-config))
      (common-lisp:list
       (common-lisp:cons "RepositoryAuthConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-config))
   common-lisp:nil))
(common-lisp:deftype image-container-image () 'common-lisp:string)
(common-lisp:deftype image-delete-property () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype image-delete-property-list ()
   '(trivial-types:proper-list image-delete-property))
 (common-lisp:defun |make-image-delete-property-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-delete-property))
   aws-sdk/generator/shape::members))
(common-lisp:deftype image-description () 'common-lisp:string)
(common-lisp:deftype image-digest () 'common-lisp:string)
(common-lisp:deftype image-display-name () 'common-lisp:string)
(common-lisp:deftype image-name () 'common-lisp:string)
(common-lisp:deftype image-name-contains () 'common-lisp:string)
(common-lisp:deftype image-sort-by () 'common-lisp:string)
(common-lisp:deftype image-sort-order () 'common-lisp:string)
(common-lisp:deftype image-status () 'common-lisp:string)
(common-lisp:deftype image-uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (image-version (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-version-"))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (image-arn (common-lisp:error ":image-arn is required") :type
    (common-lisp:or image-arn common-lisp:null))
   (image-version-arn (common-lisp:error ":image-version-arn is required")
    :type (common-lisp:or image-version-arn common-lisp:null))
   (image-version-status
    (common-lisp:error ":image-version-status is required") :type
    (common-lisp:or image-version-status common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or image-version-number common-lisp:null)))
 (common-lisp:export (common-lisp:list 'image-version 'make-image-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-arn))
      (common-lisp:list
       (common-lisp:cons "ImageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-version-arn))
      (common-lisp:list
       (common-lisp:cons "ImageVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-version-status))
      (common-lisp:list
       (common-lisp:cons "ImageVersionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-version))
   common-lisp:nil))
(common-lisp:deftype image-version-arn () 'common-lisp:string)
(common-lisp:deftype image-version-number () 'common-lisp:integer)
(common-lisp:deftype image-version-sort-by () 'common-lisp:string)
(common-lisp:deftype image-version-sort-order () 'common-lisp:string)
(common-lisp:deftype image-version-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype image-versions ()
   '(trivial-types:proper-list image-version))
 (common-lisp:defun |make-image-versions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype images () '(trivial-types:proper-list image))
 (common-lisp:defun |make-images|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list image))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (import-hub-content-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-hub-content-request-"))
   (hub-content-name (common-lisp:error ":hub-content-name is required") :type
    (common-lisp:or hub-content-name common-lisp:null))
   (hub-content-version common-lisp:nil :type
    (common-lisp:or hub-content-version common-lisp:null))
   (hub-content-type (common-lisp:error ":hub-content-type is required") :type
    (common-lisp:or hub-content-type common-lisp:null))
   (document-schema-version
    (common-lisp:error ":document-schema-version is required") :type
    (common-lisp:or document-schema-version common-lisp:null))
   (hub-name (common-lisp:error ":hub-name is required") :type
    (common-lisp:or hub-name common-lisp:null))
   (hub-content-display-name common-lisp:nil :type
    (common-lisp:or hub-content-display-name common-lisp:null))
   (hub-content-description common-lisp:nil :type
    (common-lisp:or hub-content-description common-lisp:null))
   (hub-content-markdown common-lisp:nil :type
    (common-lisp:or hub-content-markdown common-lisp:null))
   (hub-content-document
    (common-lisp:error ":hub-content-document is required") :type
    (common-lisp:or hub-content-document common-lisp:null))
   (hub-content-search-keywords common-lisp:nil :type
    (common-lisp:or hub-content-search-keyword-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-hub-content-request
                    'make-import-hub-content-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-hub-content-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-hub-content-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-content-name))
      (common-lisp:list
       (common-lisp:cons "HubContentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-content-version))
      (common-lisp:list
       (common-lisp:cons "HubContentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-content-type))
      (common-lisp:list
       (common-lisp:cons "HubContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'document-schema-version))
      (common-lisp:list
       (common-lisp:cons "DocumentSchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-name))
      (common-lisp:list
       (common-lisp:cons "HubName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hub-content-display-name))
      (common-lisp:list
       (common-lisp:cons "HubContentDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hub-content-description))
      (common-lisp:list
       (common-lisp:cons "HubContentDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hub-content-markdown))
      (common-lisp:list
       (common-lisp:cons "HubContentMarkdown"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hub-content-document))
      (common-lisp:list
       (common-lisp:cons "HubContentDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hub-content-search-keywords))
      (common-lisp:list
       (common-lisp:cons "HubContentSearchKeywords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-hub-content-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (import-hub-content-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-import-hub-content-response-"))
   (hub-arn (common-lisp:error ":hub-arn is required") :type
    (common-lisp:or hub-arn common-lisp:null))
   (hub-content-arn (common-lisp:error ":hub-content-arn is required") :type
    (common-lisp:or hub-content-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-hub-content-response
                    'make-import-hub-content-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          import-hub-content-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          import-hub-content-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-arn))
      (common-lisp:list
       (common-lisp:cons "HubArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-content-arn))
      (common-lisp:list
       (common-lisp:cons "HubContentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          import-hub-content-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (inference-execution-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-inference-execution-config-"))
   (mode (common-lisp:error ":mode is required") :type
    (common-lisp:or inference-execution-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inference-execution-config
                    'make-inference-execution-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inference-execution-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inference-execution-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inference-execution-config))
   common-lisp:nil))
(common-lisp:deftype inference-execution-mode () 'common-lisp:string)
(common-lisp:deftype inference-experiment-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (inference-experiment-data-storage-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-inference-experiment-data-storage-config-"))
   (destination (common-lisp:error ":destination is required") :type
    (common-lisp:or destination-s3uri common-lisp:null))
   (kms-key common-lisp:nil :type (common-lisp:or kms-key-id common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or capture-content-type-header common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inference-experiment-data-storage-config
                    'make-inference-experiment-data-storage-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inference-experiment-data-storage-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inference-experiment-data-storage-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key))
      (common-lisp:list
       (common-lisp:cons "KmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inference-experiment-data-storage-config))
   common-lisp:nil))
(common-lisp:deftype inference-experiment-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype inference-experiment-list ()
   '(trivial-types:proper-list inference-experiment-summary))
 (common-lisp:defun |make-inference-experiment-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            inference-experiment-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype inference-experiment-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (inference-experiment-schedule (:copier common-lisp:nil)
      (:conc-name "struct-shape-inference-experiment-schedule-"))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inference-experiment-schedule
                    'make-inference-experiment-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inference-experiment-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inference-experiment-schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inference-experiment-schedule))
   common-lisp:nil))
(common-lisp:deftype inference-experiment-status () 'common-lisp:string)
(common-lisp:deftype inference-experiment-status-reason () 'common-lisp:string)
(common-lisp:deftype inference-experiment-stop-desired-state ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (inference-experiment-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-inference-experiment-summary-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or inference-experiment-name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or inference-experiment-type common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or inference-experiment-schedule common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or inference-experiment-status common-lisp:null))
   (status-reason common-lisp:nil :type
    (common-lisp:or inference-experiment-status-reason common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or inference-experiment-description common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (completion-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inference-experiment-summary
                    'make-inference-experiment-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inference-experiment-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inference-experiment-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "CompletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inference-experiment-summary))
   common-lisp:nil))
(common-lisp:deftype inference-experiment-type () 'common-lisp:string)
(common-lisp:deftype inference-image () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (inference-metrics (:copier common-lisp:nil)
      (:conc-name "struct-shape-inference-metrics-"))
   (max-invocations (common-lisp:error ":max-invocations is required") :type
    (common-lisp:or integer common-lisp:null))
   (model-latency (common-lisp:error ":model-latency is required") :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inference-metrics 'make-inference-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input inference-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input inference-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-invocations))
      (common-lisp:list
       (common-lisp:cons "MaxInvocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-latency))
      (common-lisp:list
       (common-lisp:cons "ModelLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input inference-metrics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (inference-recommendation (:copier common-lisp:nil)
      (:conc-name "struct-shape-inference-recommendation-"))
   (metrics (common-lisp:error ":metrics is required") :type
    (common-lisp:or recommendation-metrics common-lisp:null))
   (endpoint-configuration
    (common-lisp:error ":endpoint-configuration is required") :type
    (common-lisp:or endpoint-output-configuration common-lisp:null))
   (model-configuration (common-lisp:error ":model-configuration is required")
    :type (common-lisp:or model-configuration common-lisp:null))
   (recommendation-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inference-recommendation 'make-inference-recommendation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inference-recommendation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inference-recommendation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-configuration))
      (common-lisp:list
       (common-lisp:cons "EndpointConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-configuration))
      (common-lisp:list
       (common-lisp:cons "ModelConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation-id))
      (common-lisp:list
       (common-lisp:cons "RecommendationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inference-recommendation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype inference-recommendations ()
   '(trivial-types:proper-list inference-recommendation))
 (common-lisp:defun |make-inference-recommendations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            inference-recommendation))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (inference-recommendations-job (:copier common-lisp:nil)
      (:conc-name "struct-shape-inference-recommendations-job-"))
   (job-name (common-lisp:error ":job-name is required") :type
    (common-lisp:or recommendation-job-name common-lisp:null))
   (job-description (common-lisp:error ":job-description is required") :type
    (common-lisp:or recommendation-job-description common-lisp:null))
   (job-type (common-lisp:error ":job-type is required") :type
    (common-lisp:or recommendation-job-type common-lisp:null))
   (job-arn (common-lisp:error ":job-arn is required") :type
    (common-lisp:or recommendation-job-arn common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or recommendation-job-status common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or creation-time common-lisp:null))
   (completion-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or last-modified-time common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inference-recommendations-job
                    'make-inference-recommendations-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inference-recommendations-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inference-recommendations-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-description))
      (common-lisp:list
       (common-lisp:cons "JobDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-arn))
      (common-lisp:list
       (common-lisp:cons "JobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-time))
      (common-lisp:list
       (common-lisp:cons "CompletionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inference-recommendations-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (inference-recommendations-job-step (:copier common-lisp:nil)
      (:conc-name "struct-shape-inference-recommendations-job-step-"))
   (step-type (common-lisp:error ":step-type is required") :type
    (common-lisp:or recommendation-step-type common-lisp:null))
   (job-name (common-lisp:error ":job-name is required") :type
    (common-lisp:or recommendation-job-name common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or recommendation-job-status common-lisp:null))
   (inference-benchmark common-lisp:nil :type
    (common-lisp:or recommendation-job-inference-benchmark common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inference-recommendations-job-step
                    'make-inference-recommendations-job-step))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inference-recommendations-job-step))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inference-recommendations-job-step))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-type))
      (common-lisp:list
       (common-lisp:cons "StepType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'inference-benchmark))
      (common-lisp:list
       (common-lisp:cons "InferenceBenchmark"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inference-recommendations-job-step))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype inference-recommendations-job-steps ()
   '(trivial-types:proper-list inference-recommendations-job-step))
 (common-lisp:defun |make-inference-recommendations-job-steps|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            inference-recommendations-job-step))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype inference-recommendations-jobs ()
   '(trivial-types:proper-list inference-recommendations-job))
 (common-lisp:defun |make-inference-recommendations-jobs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            inference-recommendations-job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (inference-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-inference-specification-"))
   (containers (common-lisp:error ":containers is required") :type
    (common-lisp:or model-package-container-definition-list common-lisp:null))
   (supported-transform-instance-types common-lisp:nil :type
    (common-lisp:or transform-instance-types common-lisp:null))
   (supported-realtime-inference-instance-types common-lisp:nil :type
    (common-lisp:or realtime-inference-instance-types common-lisp:null))
   (supported-content-types
    (common-lisp:error ":supported-content-types is required") :type
    (common-lisp:or content-types common-lisp:null))
   (supported-response-mimetypes
    (common-lisp:error ":supported-response-mimetypes is required") :type
    (common-lisp:or response-mimetypes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inference-specification 'make-inference-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inference-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inference-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'containers))
      (common-lisp:list
       (common-lisp:cons "Containers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-transform-instance-types))
      (common-lisp:list
       (common-lisp:cons "SupportedTransformInstanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-realtime-inference-instance-types))
      (common-lisp:list
       (common-lisp:cons "SupportedRealtimeInferenceInstanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-content-types))
      (common-lisp:list
       (common-lisp:cons "SupportedContentTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-response-mimetypes))
      (common-lisp:list
       (common-lisp:cons "SupportedResponseMIMETypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inference-specification))
   common-lisp:nil))
(common-lisp:deftype inference-specification-name () 'common-lisp:string)
(common-lisp:deftype initial-number-of-users () 'common-lisp:integer)
(common-lisp:deftype initial-task-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (input-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-input-config-"))
   (s3uri (common-lisp:error ":s3uri is required") :type
    (common-lisp:or s3uri common-lisp:null))
   (data-input-config (common-lisp:error ":data-input-config is required")
    :type (common-lisp:or data-input-config common-lisp:null))
   (framework (common-lisp:error ":framework is required") :type
    (common-lisp:or framework common-lisp:null))
   (framework-version common-lisp:nil :type
    (common-lisp:or framework-version common-lisp:null)))
 (common-lisp:export (common-lisp:list 'input-config 'make-input-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input input-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input input-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-input-config))
      (common-lisp:list
       (common-lisp:cons "DataInputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework))
      (common-lisp:list
       (common-lisp:cons "Framework"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-version))
      (common-lisp:list
       (common-lisp:cons "FrameworkVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input input-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype input-data-config ()
   '(trivial-types:proper-list channel))
 (common-lisp:defun |make-input-data-config|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list channel))
   aws-sdk/generator/shape::members))
(common-lisp:deftype input-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype input-modes ()
   '(trivial-types:proper-list training-input-mode))
 (common-lisp:defun |make-input-modes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list training-input-mode))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-group-"))
   (instance-type (common-lisp:error ":instance-type is required") :type
    (common-lisp:or training-instance-type common-lisp:null))
   (instance-count (common-lisp:error ":instance-count is required") :type
    (common-lisp:or training-instance-count common-lisp:null))
   (instance-group-name (common-lisp:error ":instance-group-name is required")
    :type (common-lisp:or instance-group-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'instance-group 'make-instance-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-group-name))
      (common-lisp:list
       (common-lisp:cons "InstanceGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-group))
   common-lisp:nil))
(common-lisp:deftype instance-group-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype instance-group-names ()
   '(trivial-types:proper-list instance-group-name))
 (common-lisp:defun |make-instance-group-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-group-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype instance-groups ()
   '(trivial-types:proper-list instance-group))
 (common-lisp:defun |make-instance-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-metadata-service-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-metadata-service-configuration-"))
   (minimum-instance-metadata-service-version
    (common-lisp:error
     ":minimum-instance-metadata-service-version is required")
    :type
    (common-lisp:or minimum-instance-metadata-service-version
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-metadata-service-configuration
                    'make-instance-metadata-service-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-metadata-service-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-metadata-service-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-instance-metadata-service-version))
      (common-lisp:list
       (common-lisp:cons "MinimumInstanceMetadataServiceVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-metadata-service-configuration))
   common-lisp:nil))
(common-lisp:deftype instance-type () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (integer-parameter-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-integer-parameter-range-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or parameter-key common-lisp:null))
   (min-value (common-lisp:error ":min-value is required") :type
    (common-lisp:or parameter-value common-lisp:null))
   (max-value (common-lisp:error ":max-value is required") :type
    (common-lisp:or parameter-value common-lisp:null))
   (scaling-type common-lisp:nil :type
    (common-lisp:or hyper-parameter-scaling-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'integer-parameter-range 'make-integer-parameter-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          integer-parameter-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          integer-parameter-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-value))
      (common-lisp:list
       (common-lisp:cons "MinValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-value))
      (common-lisp:list
       (common-lisp:cons "MaxValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scaling-type))
      (common-lisp:list
       (common-lisp:cons "ScalingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          integer-parameter-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (integer-parameter-range-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-integer-parameter-range-specification-"))
   (min-value (common-lisp:error ":min-value is required") :type
    (common-lisp:or parameter-value common-lisp:null))
   (max-value (common-lisp:error ":max-value is required") :type
    (common-lisp:or parameter-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'integer-parameter-range-specification
                    'make-integer-parameter-range-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          integer-parameter-range-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          integer-parameter-range-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-value))
      (common-lisp:list
       (common-lisp:cons "MinValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-value))
      (common-lisp:list
       (common-lisp:cons "MaxValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          integer-parameter-range-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype integer-parameter-ranges ()
   '(trivial-types:proper-list integer-parameter-range))
 (common-lisp:defun |make-integer-parameter-ranges|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list integer-parameter-range))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integer-value () 'common-lisp:integer)
(common-lisp:deftype invocations-max-retries () 'common-lisp:integer)
(common-lisp:deftype invocations-timeout-in-seconds () 'common-lisp:integer)
(common-lisp:deftype iot-role-alias () 'common-lisp:string)
(common-lisp:deftype job-duration-in-seconds () 'common-lisp:integer)
(common-lisp:deftype job-reference-code () 'common-lisp:string)
(common-lisp:deftype job-reference-code-contains () 'common-lisp:string)
(common-lisp:deftype job-type () 'common-lisp:string)
(common-lisp:deftype join-source () 'common-lisp:string)
(common-lisp:deftype json-content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype json-content-types ()
   '(trivial-types:proper-list json-content-type))
 (common-lisp:defun |make-json-content-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list json-content-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype json-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (jupyter-server-app-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-jupyter-server-app-settings-"))
   (default-resource-spec common-lisp:nil :type
    (common-lisp:or resource-spec common-lisp:null))
   (lifecycle-config-arns common-lisp:nil :type
    (common-lisp:or lifecycle-config-arns common-lisp:null))
   (code-repositories common-lisp:nil :type
    (common-lisp:or code-repositories common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'jupyter-server-app-settings
                    'make-jupyter-server-app-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          jupyter-server-app-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          jupyter-server-app-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-resource-spec))
      (common-lisp:list
       (common-lisp:cons "DefaultResourceSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-config-arns))
      (common-lisp:list
       (common-lisp:cons "LifecycleConfigArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-repositories))
      (common-lisp:list
       (common-lisp:cons "CodeRepositories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          jupyter-server-app-settings))
   common-lisp:nil))
(common-lisp:deftype keep-alive-period-in-seconds () 'common-lisp:integer)
(common-lisp:deftype kernel-display-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (kernel-gateway-app-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-kernel-gateway-app-settings-"))
   (default-resource-spec common-lisp:nil :type
    (common-lisp:or resource-spec common-lisp:null))
   (custom-images common-lisp:nil :type
    (common-lisp:or custom-images common-lisp:null))
   (lifecycle-config-arns common-lisp:nil :type
    (common-lisp:or lifecycle-config-arns common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kernel-gateway-app-settings
                    'make-kernel-gateway-app-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kernel-gateway-app-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kernel-gateway-app-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-resource-spec))
      (common-lisp:list
       (common-lisp:cons "DefaultResourceSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-images))
      (common-lisp:list
       (common-lisp:cons "CustomImages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-config-arns))
      (common-lisp:list
       (common-lisp:cons "LifecycleConfigArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kernel-gateway-app-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (kernel-gateway-image-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-kernel-gateway-image-config-"))
   (kernel-specs (common-lisp:error ":kernel-specs is required") :type
    (common-lisp:or kernel-specs common-lisp:null))
   (file-system-config common-lisp:nil :type
    (common-lisp:or file-system-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kernel-gateway-image-config
                    'make-kernel-gateway-image-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kernel-gateway-image-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kernel-gateway-image-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kernel-specs))
      (common-lisp:list
       (common-lisp:cons "KernelSpecs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-system-config))
      (common-lisp:list
       (common-lisp:cons "FileSystemConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kernel-gateway-image-config))
   common-lisp:nil))
(common-lisp:deftype kernel-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (kernel-spec (:copier common-lisp:nil)
      (:conc-name "struct-shape-kernel-spec-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or kernel-name common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or kernel-display-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'kernel-spec 'make-kernel-spec))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input kernel-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input kernel-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input kernel-spec))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype kernel-specs () '(trivial-types:proper-list kernel-spec))
 (common-lisp:defun |make-kernel-specs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list kernel-spec))
   aws-sdk/generator/shape::members))
(common-lisp:deftype key () 'common-lisp:string)
(common-lisp:deftype kms-key-id () 'common-lisp:string)
(common-lisp:deftype label-attribute-name () 'common-lisp:string)
(common-lisp:deftype label-counter () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (label-counters (:copier common-lisp:nil)
      (:conc-name "struct-shape-label-counters-"))
   (total-labeled common-lisp:nil :type
    (common-lisp:or label-counter common-lisp:null))
   (human-labeled common-lisp:nil :type
    (common-lisp:or label-counter common-lisp:null))
   (machine-labeled common-lisp:nil :type
    (common-lisp:or label-counter common-lisp:null))
   (failed-non-retryable-error common-lisp:nil :type
    (common-lisp:or label-counter common-lisp:null))
   (unlabeled common-lisp:nil :type
    (common-lisp:or label-counter common-lisp:null)))
 (common-lisp:export (common-lisp:list 'label-counters 'make-label-counters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input label-counters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input label-counters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total-labeled))
      (common-lisp:list
       (common-lisp:cons "TotalLabeled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'human-labeled))
      (common-lisp:list
       (common-lisp:cons "HumanLabeled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'machine-labeled))
      (common-lisp:list
       (common-lisp:cons "MachineLabeled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failed-non-retryable-error))
      (common-lisp:list
       (common-lisp:cons "FailedNonRetryableError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unlabeled))
      (common-lisp:list
       (common-lisp:cons "Unlabeled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input label-counters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (label-counters-for-workteam (:copier common-lisp:nil)
      (:conc-name "struct-shape-label-counters-for-workteam-"))
   (human-labeled common-lisp:nil :type
    (common-lisp:or label-counter common-lisp:null))
   (pending-human common-lisp:nil :type
    (common-lisp:or label-counter common-lisp:null))
   (total common-lisp:nil :type
    (common-lisp:or label-counter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'label-counters-for-workteam
                    'make-label-counters-for-workteam))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          label-counters-for-workteam))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          label-counters-for-workteam))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'human-labeled))
      (common-lisp:list
       (common-lisp:cons "HumanLabeled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending-human))
      (common-lisp:list
       (common-lisp:cons "PendingHuman"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'total))
      (common-lisp:list
       (common-lisp:cons "Total"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          label-counters-for-workteam))
   common-lisp:nil))
(common-lisp:deftype labeling-job-algorithm-specification-arn ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (labeling-job-algorithms-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-labeling-job-algorithms-config-"))
   (labeling-job-algorithm-specification-arn
    (common-lisp:error ":labeling-job-algorithm-specification-arn is required")
    :type
    (common-lisp:or labeling-job-algorithm-specification-arn common-lisp:null))
   (initial-active-learning-model-arn common-lisp:nil :type
    (common-lisp:or model-arn common-lisp:null))
   (labeling-job-resource-config common-lisp:nil :type
    (common-lisp:or labeling-job-resource-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'labeling-job-algorithms-config
                    'make-labeling-job-algorithms-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-algorithms-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-algorithms-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'labeling-job-algorithm-specification-arn))
      (common-lisp:list
       (common-lisp:cons "LabelingJobAlgorithmSpecificationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-active-learning-model-arn))
      (common-lisp:list
       (common-lisp:cons "InitialActiveLearningModelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'labeling-job-resource-config))
      (common-lisp:list
       (common-lisp:cons "LabelingJobResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-algorithms-config))
   common-lisp:nil))
(common-lisp:deftype labeling-job-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (labeling-job-data-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-labeling-job-data-attributes-"))
   (content-classifiers common-lisp:nil :type
    (common-lisp:or content-classifiers common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'labeling-job-data-attributes
                    'make-labeling-job-data-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-data-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-data-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-classifiers))
      (common-lisp:list
       (common-lisp:cons "ContentClassifiers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-data-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (labeling-job-data-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-labeling-job-data-source-"))
   (s3data-source common-lisp:nil :type
    (common-lisp:or labeling-job-s3data-source common-lisp:null))
   (sns-data-source common-lisp:nil :type
    (common-lisp:or labeling-job-sns-data-source common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'labeling-job-data-source 'make-labeling-job-data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3data-source))
      (common-lisp:list
       (common-lisp:cons "S3DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-data-source))
      (common-lisp:list
       (common-lisp:cons "SnsDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-data-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (labeling-job-for-workteam-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-labeling-job-for-workteam-summary-"))
   (labeling-job-name common-lisp:nil :type
    (common-lisp:or labeling-job-name common-lisp:null))
   (job-reference-code (common-lisp:error ":job-reference-code is required")
    :type (common-lisp:or job-reference-code common-lisp:null))
   (work-requester-account-id
    (common-lisp:error ":work-requester-account-id is required") :type
    (common-lisp:or account-id common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (label-counters common-lisp:nil :type
    (common-lisp:or label-counters-for-workteam common-lisp:null))
   (number-of-human-workers-per-data-object common-lisp:nil :type
    (common-lisp:or number-of-human-workers-per-data-object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'labeling-job-for-workteam-summary
                    'make-labeling-job-for-workteam-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-for-workteam-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-for-workteam-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labeling-job-name))
      (common-lisp:list
       (common-lisp:cons "LabelingJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-reference-code))
      (common-lisp:list
       (common-lisp:cons "JobReferenceCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'work-requester-account-id))
      (common-lisp:list
       (common-lisp:cons "WorkRequesterAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-counters))
      (common-lisp:list
       (common-lisp:cons "LabelCounters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-human-workers-per-data-object))
      (common-lisp:list
       (common-lisp:cons "NumberOfHumanWorkersPerDataObject"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-for-workteam-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype labeling-job-for-workteam-summary-list ()
   '(trivial-types:proper-list labeling-job-for-workteam-summary))
 (common-lisp:defun |make-labeling-job-for-workteam-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            labeling-job-for-workteam-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (labeling-job-input-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-labeling-job-input-config-"))
   (data-source (common-lisp:error ":data-source is required") :type
    (common-lisp:or labeling-job-data-source common-lisp:null))
   (data-attributes common-lisp:nil :type
    (common-lisp:or labeling-job-data-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'labeling-job-input-config
                    'make-labeling-job-input-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-input-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-input-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-attributes))
      (common-lisp:list
       (common-lisp:cons "DataAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-input-config))
   common-lisp:nil))
(common-lisp:deftype labeling-job-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (labeling-job-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-labeling-job-output-"))
   (output-dataset-s3uri
    (common-lisp:error ":output-dataset-s3uri is required") :type
    (common-lisp:or s3uri common-lisp:null))
   (final-active-learning-model-arn common-lisp:nil :type
    (common-lisp:or model-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'labeling-job-output 'make-labeling-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input labeling-job-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input labeling-job-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-dataset-s3uri))
      (common-lisp:list
       (common-lisp:cons "OutputDatasetS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'final-active-learning-model-arn))
      (common-lisp:list
       (common-lisp:cons "FinalActiveLearningModelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input labeling-job-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (labeling-job-output-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-labeling-job-output-config-"))
   (s3output-path (common-lisp:error ":s3output-path is required") :type
    (common-lisp:or s3uri common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (sns-topic-arn common-lisp:nil :type
    (common-lisp:or sns-topic-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'labeling-job-output-config
                    'make-labeling-job-output-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-output-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-output-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3output-path))
      (common-lisp:list
       (common-lisp:cons "S3OutputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-output-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (labeling-job-resource-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-labeling-job-resource-config-"))
   (volume-kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (vpc-config common-lisp:nil :type
    (common-lisp:or vpc-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'labeling-job-resource-config
                    'make-labeling-job-resource-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-resource-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-resource-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "VolumeKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-resource-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (labeling-job-s3data-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-labeling-job-s3data-source-"))
   (manifest-s3uri (common-lisp:error ":manifest-s3uri is required") :type
    (common-lisp:or s3uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'labeling-job-s3data-source
                    'make-labeling-job-s3data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-s3data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-s3data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'manifest-s3uri))
      (common-lisp:list
       (common-lisp:cons "ManifestS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-s3data-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (labeling-job-sns-data-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-labeling-job-sns-data-source-"))
   (sns-topic-arn (common-lisp:error ":sns-topic-arn is required") :type
    (common-lisp:or sns-topic-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'labeling-job-sns-data-source
                    'make-labeling-job-sns-data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-sns-data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-sns-data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "SnsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-sns-data-source))
   common-lisp:nil))
(common-lisp:deftype labeling-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (labeling-job-stopping-conditions (:copier common-lisp:nil)
      (:conc-name "struct-shape-labeling-job-stopping-conditions-"))
   (max-human-labeled-object-count common-lisp:nil :type
    (common-lisp:or max-human-labeled-object-count common-lisp:null))
   (max-percentage-of-input-dataset-labeled common-lisp:nil :type
    (common-lisp:or max-percentage-of-input-dataset-labeled common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'labeling-job-stopping-conditions
                    'make-labeling-job-stopping-conditions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-stopping-conditions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-stopping-conditions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-human-labeled-object-count))
      (common-lisp:list
       (common-lisp:cons "MaxHumanLabeledObjectCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-percentage-of-input-dataset-labeled))
      (common-lisp:list
       (common-lisp:cons "MaxPercentageOfInputDatasetLabeled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          labeling-job-stopping-conditions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (labeling-job-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-labeling-job-summary-"))
   (labeling-job-name (common-lisp:error ":labeling-job-name is required")
    :type (common-lisp:or labeling-job-name common-lisp:null))
   (labeling-job-arn (common-lisp:error ":labeling-job-arn is required") :type
    (common-lisp:or labeling-job-arn common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (labeling-job-status (common-lisp:error ":labeling-job-status is required")
    :type (common-lisp:or labeling-job-status common-lisp:null))
   (label-counters (common-lisp:error ":label-counters is required") :type
    (common-lisp:or label-counters common-lisp:null))
   (workteam-arn (common-lisp:error ":workteam-arn is required") :type
    (common-lisp:or workteam-arn common-lisp:null))
   (pre-human-task-lambda-arn
    (common-lisp:error ":pre-human-task-lambda-arn is required") :type
    (common-lisp:or lambda-function-arn common-lisp:null))
   (annotation-consolidation-lambda-arn common-lisp:nil :type
    (common-lisp:or lambda-function-arn common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (labeling-job-output common-lisp:nil :type
    (common-lisp:or labeling-job-output common-lisp:null))
   (input-config common-lisp:nil :type
    (common-lisp:or labeling-job-input-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'labeling-job-summary 'make-labeling-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input labeling-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input labeling-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labeling-job-name))
      (common-lisp:list
       (common-lisp:cons "LabelingJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labeling-job-arn))
      (common-lisp:list
       (common-lisp:cons "LabelingJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labeling-job-status))
      (common-lisp:list
       (common-lisp:cons "LabelingJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'label-counters))
      (common-lisp:list
       (common-lisp:cons "LabelCounters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workteam-arn))
      (common-lisp:list
       (common-lisp:cons "WorkteamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pre-human-task-lambda-arn))
      (common-lisp:list
       (common-lisp:cons "PreHumanTaskLambdaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'annotation-consolidation-lambda-arn))
      (common-lisp:list
       (common-lisp:cons "AnnotationConsolidationLambdaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labeling-job-output))
      (common-lisp:list
       (common-lisp:cons "LabelingJobOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-config))
      (common-lisp:list
       (common-lisp:cons "InputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input labeling-job-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype labeling-job-summary-list ()
   '(trivial-types:proper-list labeling-job-summary))
 (common-lisp:defun |make-labeling-job-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list labeling-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype lambda-function-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (lambda-step-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-lambda-step-metadata-"))
   (arn common-lisp:nil :type (common-lisp:or string256 common-lisp:null))
   (output-parameters common-lisp:nil :type
    (common-lisp:or output-parameter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lambda-step-metadata 'make-lambda-step-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lambda-step-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lambda-step-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-parameters))
      (common-lisp:list
       (common-lisp:cons "OutputParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lambda-step-metadata))
   common-lisp:nil))
(common-lisp:deftype last-modified-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (last-update-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-last-update-status-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or last-update-status-value common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'last-update-status 'make-last-update-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input last-update-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input last-update-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input last-update-status))
   common-lisp:nil))
(common-lisp:deftype last-update-status-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype lifecycle-config-arns ()
   '(trivial-types:proper-list studio-lifecycle-config-arn))
 (common-lisp:defun |make-lifecycle-config-arns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            studio-lifecycle-config-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype lineage-entity-parameters () 'common-lisp:hash-table)
 (common-lisp:defun |make-lineage-entity-parameters|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype lineage-group-arn () 'common-lisp:string)
(common-lisp:deftype lineage-group-name-or-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype lineage-group-summaries ()
   '(trivial-types:proper-list lineage-group-summary))
 (common-lisp:defun |make-lineage-group-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lineage-group-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (lineage-group-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-lineage-group-summary-"))
   (lineage-group-arn common-lisp:nil :type
    (common-lisp:or lineage-group-arn common-lisp:null))
   (lineage-group-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lineage-group-summary 'make-lineage-group-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lineage-group-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lineage-group-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lineage-group-arn))
      (common-lisp:list
       (common-lisp:cons "LineageGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lineage-group-name))
      (common-lisp:list
       (common-lisp:cons "LineageGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lineage-group-summary))
   common-lisp:nil))
(common-lisp:deftype lineage-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-actions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-actions-request-"))
   (source-uri common-lisp:nil :type
    (common-lisp:or source-uri common-lisp:null))
   (action-type common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (created-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or sort-actions-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-actions-request 'make-list-actions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-actions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-actions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-uri))
      (common-lisp:list
       (common-lisp:cons "SourceUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-type))
      (common-lisp:list
       (common-lisp:cons "ActionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-after))
      (common-lisp:list
       (common-lisp:cons "CreatedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-before))
      (common-lisp:list
       (common-lisp:cons "CreatedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-actions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-actions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-actions-response-"))
   (action-summaries common-lisp:nil :type
    (common-lisp:or action-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-actions-response 'make-list-actions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-actions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-actions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-summaries))
      (common-lisp:list
       (common-lisp:cons "ActionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-actions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-algorithms-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-algorithms-input-"))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or name-contains common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or algorithm-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-algorithms-input 'make-list-algorithms-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-algorithms-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-algorithms-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-algorithms-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-algorithms-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-algorithms-output-"))
   (algorithm-summary-list
    (common-lisp:error ":algorithm-summary-list is required") :type
    (common-lisp:or algorithm-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-algorithms-output 'make-list-algorithms-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-algorithms-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-algorithms-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'algorithm-summary-list))
      (common-lisp:list
       (common-lisp:cons "AlgorithmSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-algorithms-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-aliases-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-aliases-request-"))
   (image-name (common-lisp:error ":image-name is required") :type
    (common-lisp:or image-name common-lisp:null))
   (alias common-lisp:nil :type
    (common-lisp:or sage-maker-image-version-alias common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or image-version-number common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-aliases-request 'make-list-aliases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-aliases-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-name))
      (common-lisp:list
       (common-lisp:cons "ImageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-aliases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-aliases-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-aliases-response-"))
   (sage-maker-image-version-aliases common-lisp:nil :type
    (common-lisp:or sage-maker-image-version-aliases common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-aliases-response 'make-list-aliases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-aliases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-aliases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sage-maker-image-version-aliases))
      (common-lisp:list
       (common-lisp:cons "SageMakerImageVersionAliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-aliases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-app-image-configs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-app-image-configs-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or app-image-config-name common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (modified-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (modified-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or app-image-config-sort-key common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-app-image-configs-request
                    'make-list-app-image-configs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-app-image-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-app-image-configs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'modified-time-before))
      (common-lisp:list
       (common-lisp:cons "ModifiedTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-time-after))
      (common-lisp:list
       (common-lisp:cons "ModifiedTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-app-image-configs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-app-image-configs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-app-image-configs-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (app-image-configs common-lisp:nil :type
    (common-lisp:or app-image-config-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-app-image-configs-response
                    'make-list-app-image-configs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-app-image-configs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-app-image-configs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-image-configs))
      (common-lisp:list
       (common-lisp:cons "AppImageConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-app-image-configs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-apps-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-apps-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or app-sort-key common-lisp:null))
   (domain-id-equals common-lisp:nil :type
    (common-lisp:or domain-id common-lisp:null))
   (user-profile-name-equals common-lisp:nil :type
    (common-lisp:or user-profile-name common-lisp:null))
   (space-name-equals common-lisp:nil :type
    (common-lisp:or space-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-apps-request 'make-list-apps-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-apps-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-apps-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id-equals))
      (common-lisp:list
       (common-lisp:cons "DomainIdEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-profile-name-equals))
      (common-lisp:list
       (common-lisp:cons "UserProfileNameEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name-equals))
      (common-lisp:list
       (common-lisp:cons "SpaceNameEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-apps-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-apps-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-apps-response-"))
   (apps common-lisp:nil :type (common-lisp:or app-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-apps-response 'make-list-apps-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-apps-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-apps-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'apps))
      (common-lisp:list
       (common-lisp:cons "Apps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-apps-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-artifacts-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-artifacts-request-"))
   (source-uri common-lisp:nil :type
    (common-lisp:or source-uri common-lisp:null))
   (artifact-type common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (created-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or sort-artifacts-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-artifacts-request 'make-list-artifacts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-artifacts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-artifacts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-uri))
      (common-lisp:list
       (common-lisp:cons "SourceUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-type))
      (common-lisp:list
       (common-lisp:cons "ArtifactType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-after))
      (common-lisp:list
       (common-lisp:cons "CreatedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-before))
      (common-lisp:list
       (common-lisp:cons "CreatedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-artifacts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-artifacts-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-artifacts-response-"))
   (artifact-summaries common-lisp:nil :type
    (common-lisp:or artifact-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-artifacts-response 'make-list-artifacts-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-artifacts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-artifacts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-summaries))
      (common-lisp:list
       (common-lisp:cons "ArtifactSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-artifacts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-associations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-associations-request-"))
   (source-arn common-lisp:nil :type
    (common-lisp:or association-entity-arn common-lisp:null))
   (destination-arn common-lisp:nil :type
    (common-lisp:or association-entity-arn common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (destination-type common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (association-type common-lisp:nil :type
    (common-lisp:or association-edge-type common-lisp:null))
   (created-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or sort-associations-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-associations-request
                    'make-list-associations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-associations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-associations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-arn))
      (common-lisp:list
       (common-lisp:cons "DestinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-type))
      (common-lisp:list
       (common-lisp:cons "DestinationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'association-type))
      (common-lisp:list
       (common-lisp:cons "AssociationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-after))
      (common-lisp:list
       (common-lisp:cons "CreatedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-before))
      (common-lisp:list
       (common-lisp:cons "CreatedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-associations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-associations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-associations-response-"))
   (association-summaries common-lisp:nil :type
    (common-lisp:or association-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-associations-response
                    'make-list-associations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-associations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-associations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'association-summaries))
      (common-lisp:list
       (common-lisp:cons "AssociationSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-associations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-auto-mljobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-auto-mljobs-request-"))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or auto-mlname-contains common-lisp:null))
   (status-equals common-lisp:nil :type
    (common-lisp:or auto-mljob-status common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or auto-mlsort-order common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or auto-mlsort-by common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or auto-mlmax-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-auto-mljobs-request 'make-list-auto-mljobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-auto-mljobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-auto-mljobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-after))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-before))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-equals))
      (common-lisp:list
       (common-lisp:cons "StatusEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-auto-mljobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-auto-mljobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-auto-mljobs-response-"))
   (auto-mljob-summaries
    (common-lisp:error ":auto-mljob-summaries is required") :type
    (common-lisp:or auto-mljob-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-auto-mljobs-response
                    'make-list-auto-mljobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-auto-mljobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-auto-mljobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-mljob-summaries))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-auto-mljobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-candidates-for-auto-mljob-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-candidates-for-auto-mljob-request-"))
   (auto-mljob-name (common-lisp:error ":auto-mljob-name is required") :type
    (common-lisp:or auto-mljob-name common-lisp:null))
   (status-equals common-lisp:nil :type
    (common-lisp:or candidate-status common-lisp:null))
   (candidate-name-equals common-lisp:nil :type
    (common-lisp:or candidate-name common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or auto-mlsort-order common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or candidate-sort-by common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or auto-mlmax-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-candidates-for-auto-mljob-request
                    'make-list-candidates-for-auto-mljob-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-candidates-for-auto-mljob-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-candidates-for-auto-mljob-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mljob-name))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-equals))
      (common-lisp:list
       (common-lisp:cons "StatusEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'candidate-name-equals))
      (common-lisp:list
       (common-lisp:cons "CandidateNameEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-candidates-for-auto-mljob-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-candidates-for-auto-mljob-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-candidates-for-auto-mljob-response-"))
   (candidates (common-lisp:error ":candidates is required") :type
    (common-lisp:or auto-mlcandidates common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-candidates-for-auto-mljob-response
                    'make-list-candidates-for-auto-mljob-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-candidates-for-auto-mljob-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-candidates-for-auto-mljob-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'candidates))
      (common-lisp:list
       (common-lisp:cons "Candidates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-candidates-for-auto-mljob-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-code-repositories-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-code-repositories-input-"))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (last-modified-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or code-repository-name-contains common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or code-repository-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or code-repository-sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-code-repositories-input
                    'make-list-code-repositories-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-code-repositories-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-code-repositories-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-after))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-before))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-code-repositories-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-code-repositories-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-code-repositories-output-"))
   (code-repository-summary-list
    (common-lisp:error ":code-repository-summary-list is required") :type
    (common-lisp:or code-repository-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-code-repositories-output
                    'make-list-code-repositories-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-code-repositories-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-code-repositories-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-repository-summary-list))
      (common-lisp:list
       (common-lisp:cons "CodeRepositorySummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-code-repositories-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-compilation-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-compilation-jobs-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (last-modified-time-after common-lisp:nil :type
    (common-lisp:or last-modified-time common-lisp:null))
   (last-modified-time-before common-lisp:nil :type
    (common-lisp:or last-modified-time common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or name-contains common-lisp:null))
   (status-equals common-lisp:nil :type
    (common-lisp:or compilation-job-status common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or list-compilation-jobs-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-compilation-jobs-request
                    'make-list-compilation-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-compilation-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-compilation-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-after))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-before))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-equals))
      (common-lisp:list
       (common-lisp:cons "StatusEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-compilation-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-compilation-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-compilation-jobs-response-"))
   (compilation-job-summaries
    (common-lisp:error ":compilation-job-summaries is required") :type
    (common-lisp:or compilation-job-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-compilation-jobs-response
                    'make-list-compilation-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-compilation-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-compilation-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compilation-job-summaries))
      (common-lisp:list
       (common-lisp:cons "CompilationJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-compilation-jobs-response))
   common-lisp:nil))
(common-lisp:deftype list-compilation-jobs-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-contexts-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-contexts-request-"))
   (source-uri common-lisp:nil :type
    (common-lisp:or source-uri common-lisp:null))
   (context-type common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (created-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or sort-contexts-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-contexts-request 'make-list-contexts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-contexts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-contexts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-uri))
      (common-lisp:list
       (common-lisp:cons "SourceUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-type))
      (common-lisp:list
       (common-lisp:cons "ContextType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-after))
      (common-lisp:list
       (common-lisp:cons "CreatedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-before))
      (common-lisp:list
       (common-lisp:cons "CreatedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-contexts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-contexts-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-contexts-response-"))
   (context-summaries common-lisp:nil :type
    (common-lisp:or context-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-contexts-response 'make-list-contexts-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-contexts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-contexts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-summaries))
      (common-lisp:list
       (common-lisp:cons "ContextSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-contexts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-quality-job-definitions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-quality-job-definitions-request-"))
   (endpoint-name common-lisp:nil :type
    (common-lisp:or endpoint-name common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or monitoring-job-definition-sort-key common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or name-contains common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-quality-job-definitions-request
                    'make-list-data-quality-job-definitions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-job-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-job-definitions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-job-definitions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-data-quality-job-definitions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-data-quality-job-definitions-response-"))
   (job-definition-summaries
    (common-lisp:error ":job-definition-summaries is required") :type
    (common-lisp:or monitoring-job-definition-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-data-quality-job-definitions-response
                    'make-list-data-quality-job-definitions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-job-definitions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-job-definitions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-definition-summaries))
      (common-lisp:list
       (common-lisp:cons "JobDefinitionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-data-quality-job-definitions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-device-fleets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-device-fleets-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-max-results common-lisp:null))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or name-contains common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or list-device-fleets-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-device-fleets-request
                    'make-list-device-fleets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-device-fleets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-device-fleets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-after))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-before))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-device-fleets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-device-fleets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-device-fleets-response-"))
   (device-fleet-summaries
    (common-lisp:error ":device-fleet-summaries is required") :type
    (common-lisp:or device-fleet-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-device-fleets-response
                    'make-list-device-fleets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-device-fleets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-device-fleets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-fleet-summaries))
      (common-lisp:list
       (common-lisp:cons "DeviceFleetSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-device-fleets-response))
   common-lisp:nil))
(common-lisp:deftype list-device-fleets-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-devices-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-devices-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-max-results common-lisp:null))
   (latest-heartbeat-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (model-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (device-fleet-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-devices-request 'make-list-devices-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-devices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-devices-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'latest-heartbeat-after))
      (common-lisp:list
       (common-lisp:cons "LatestHeartbeatAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-fleet-name))
      (common-lisp:list
       (common-lisp:cons "DeviceFleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-devices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-devices-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-devices-response-"))
   (device-summaries (common-lisp:error ":device-summaries is required") :type
    (common-lisp:or device-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-devices-response 'make-list-devices-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-summaries))
      (common-lisp:list
       (common-lisp:cons "DeviceSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-domains-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-domains-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-domains-request 'make-list-domains-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-domains-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-domains-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-domains-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-domains-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-domains-response-"))
   (domains common-lisp:nil :type
    (common-lisp:or domain-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-domains-response 'make-list-domains-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domains))
      (common-lisp:list
       (common-lisp:cons "Domains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-domains-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-edge-deployment-plans-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-edge-deployment-plans-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-max-results common-lisp:null))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or name-contains common-lisp:null))
   (device-fleet-name-contains common-lisp:nil :type
    (common-lisp:or name-contains common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or list-edge-deployment-plans-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-edge-deployment-plans-request
                    'make-list-edge-deployment-plans-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-edge-deployment-plans-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-edge-deployment-plans-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-after))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-before))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-fleet-name-contains))
      (common-lisp:list
       (common-lisp:cons "DeviceFleetNameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-edge-deployment-plans-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-edge-deployment-plans-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-edge-deployment-plans-response-"))
   (edge-deployment-plan-summaries
    (common-lisp:error ":edge-deployment-plan-summaries is required") :type
    (common-lisp:or edge-deployment-plan-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-edge-deployment-plans-response
                    'make-list-edge-deployment-plans-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-edge-deployment-plans-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-edge-deployment-plans-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-deployment-plan-summaries))
      (common-lisp:list
       (common-lisp:cons "EdgeDeploymentPlanSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-edge-deployment-plans-response))
   common-lisp:nil))
(common-lisp:deftype list-edge-deployment-plans-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-edge-packaging-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-edge-packaging-jobs-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-max-results common-lisp:null))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or name-contains common-lisp:null))
   (model-name-contains common-lisp:nil :type
    (common-lisp:or name-contains common-lisp:null))
   (status-equals common-lisp:nil :type
    (common-lisp:or edge-packaging-job-status common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or list-edge-packaging-jobs-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-edge-packaging-jobs-request
                    'make-list-edge-packaging-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-edge-packaging-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-edge-packaging-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-after))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-before))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name-contains))
      (common-lisp:list
       (common-lisp:cons "ModelNameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-equals))
      (common-lisp:list
       (common-lisp:cons "StatusEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-edge-packaging-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-edge-packaging-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-edge-packaging-jobs-response-"))
   (edge-packaging-job-summaries
    (common-lisp:error ":edge-packaging-job-summaries is required") :type
    (common-lisp:or edge-packaging-job-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-edge-packaging-jobs-response
                    'make-list-edge-packaging-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-edge-packaging-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-edge-packaging-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-packaging-job-summaries))
      (common-lisp:list
       (common-lisp:cons "EdgePackagingJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-edge-packaging-jobs-response))
   common-lisp:nil))
(common-lisp:deftype list-edge-packaging-jobs-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-endpoint-configs-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-endpoint-configs-input-"))
   (sort-by common-lisp:nil :type
    (common-lisp:or endpoint-config-sort-key common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or order-key common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or endpoint-config-name-contains common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-endpoint-configs-input
                    'make-list-endpoint-configs-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoint-configs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoint-configs-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoint-configs-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-endpoint-configs-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-endpoint-configs-output-"))
   (endpoint-configs (common-lisp:error ":endpoint-configs is required") :type
    (common-lisp:or endpoint-config-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-endpoint-configs-output
                    'make-list-endpoint-configs-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoint-configs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoint-configs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-configs))
      (common-lisp:list
       (common-lisp:cons "EndpointConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoint-configs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-endpoints-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-endpoints-input-"))
   (sort-by common-lisp:nil :type
    (common-lisp:or endpoint-sort-key common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or order-key common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or endpoint-name-contains common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (status-equals common-lisp:nil :type
    (common-lisp:or endpoint-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-endpoints-input 'make-list-endpoints-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-endpoints-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-endpoints-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-before))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-after))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-equals))
      (common-lisp:list
       (common-lisp:cons "StatusEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-endpoints-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-endpoints-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-endpoints-output-"))
   (endpoints (common-lisp:error ":endpoints is required") :type
    (common-lisp:or endpoint-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-endpoints-output 'make-list-endpoints-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoints-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoints-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoints))
      (common-lisp:list
       (common-lisp:cons "Endpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-endpoints-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-experiments-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-experiments-request-"))
   (created-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or sort-experiments-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-experiments-request 'make-list-experiments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-experiments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-experiments-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-after))
      (common-lisp:list
       (common-lisp:cons "CreatedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-before))
      (common-lisp:list
       (common-lisp:cons "CreatedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-experiments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-experiments-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-experiments-response-"))
   (experiment-summaries common-lisp:nil :type
    (common-lisp:or experiment-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-experiments-response
                    'make-list-experiments-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-experiments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-experiments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'experiment-summaries))
      (common-lisp:list
       (common-lisp:cons "ExperimentSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-experiments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-feature-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-feature-groups-request-"))
   (name-contains common-lisp:nil :type
    (common-lisp:or feature-group-name-contains common-lisp:null))
   (feature-group-status-equals common-lisp:nil :type
    (common-lisp:or feature-group-status common-lisp:null))
   (offline-store-status-equals common-lisp:nil :type
    (common-lisp:or offline-store-status-value common-lisp:null))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or feature-group-sort-order common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or feature-group-sort-by common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or feature-group-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-feature-groups-request
                    'make-list-feature-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-feature-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-feature-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'feature-group-status-equals))
      (common-lisp:list
       (common-lisp:cons "FeatureGroupStatusEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offline-store-status-equals))
      (common-lisp:list
       (common-lisp:cons "OfflineStoreStatusEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-feature-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-feature-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-feature-groups-response-"))
   (feature-group-summaries
    (common-lisp:error ":feature-group-summaries is required") :type
    (common-lisp:or feature-group-summaries common-lisp:null))
   (next-token (common-lisp:error ":next-token is required") :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-feature-groups-response
                    'make-list-feature-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-feature-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-feature-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'feature-group-summaries))
      (common-lisp:list
       (common-lisp:cons "FeatureGroupSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-feature-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-flow-definitions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-flow-definitions-request-"))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-flow-definitions-request
                    'make-list-flow-definitions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-flow-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-flow-definitions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-flow-definitions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-flow-definitions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-flow-definitions-response-"))
   (flow-definition-summaries
    (common-lisp:error ":flow-definition-summaries is required") :type
    (common-lisp:or flow-definition-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-flow-definitions-response
                    'make-list-flow-definitions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-flow-definitions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-flow-definitions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'flow-definition-summaries))
      (common-lisp:list
       (common-lisp:cons "FlowDefinitionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-flow-definitions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-hub-content-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-hub-content-versions-request-"))
   (hub-name (common-lisp:error ":hub-name is required") :type
    (common-lisp:or hub-name common-lisp:null))
   (hub-content-type (common-lisp:error ":hub-content-type is required") :type
    (common-lisp:or hub-content-type common-lisp:null))
   (hub-content-name (common-lisp:error ":hub-content-name is required") :type
    (common-lisp:or hub-content-name common-lisp:null))
   (min-version common-lisp:nil :type
    (common-lisp:or hub-content-version common-lisp:null))
   (max-schema-version common-lisp:nil :type
    (common-lisp:or document-schema-version common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or hub-content-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-hub-content-versions-request
                    'make-list-hub-content-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-hub-content-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-hub-content-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-name))
      (common-lisp:list
       (common-lisp:cons "HubName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-content-type))
      (common-lisp:list
       (common-lisp:cons "HubContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-content-name))
      (common-lisp:list
       (common-lisp:cons "HubContentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-version))
      (common-lisp:list
       (common-lisp:cons "MinVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-schema-version))
      (common-lisp:list
       (common-lisp:cons "MaxSchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-hub-content-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-hub-content-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-hub-content-versions-response-"))
   (hub-content-summaries
    (common-lisp:error ":hub-content-summaries is required") :type
    (common-lisp:or hub-content-info-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-hub-content-versions-response
                    'make-list-hub-content-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-hub-content-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-hub-content-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hub-content-summaries))
      (common-lisp:list
       (common-lisp:cons "HubContentSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-hub-content-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-hub-contents-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-hub-contents-request-"))
   (hub-name (common-lisp:error ":hub-name is required") :type
    (common-lisp:or hub-name common-lisp:null))
   (hub-content-type (common-lisp:error ":hub-content-type is required") :type
    (common-lisp:or hub-content-type common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or name-contains common-lisp:null))
   (max-schema-version common-lisp:nil :type
    (common-lisp:or document-schema-version common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or hub-content-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-hub-contents-request
                    'make-list-hub-contents-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-hub-contents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-hub-contents-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-name))
      (common-lisp:list
       (common-lisp:cons "HubName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-content-type))
      (common-lisp:list
       (common-lisp:cons "HubContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-schema-version))
      (common-lisp:list
       (common-lisp:cons "MaxSchemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-hub-contents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-hub-contents-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-hub-contents-response-"))
   (hub-content-summaries
    (common-lisp:error ":hub-content-summaries is required") :type
    (common-lisp:or hub-content-info-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-hub-contents-response
                    'make-list-hub-contents-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-hub-contents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-hub-contents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hub-content-summaries))
      (common-lisp:list
       (common-lisp:cons "HubContentSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-hub-contents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-hubs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-hubs-request-"))
   (name-contains common-lisp:nil :type
    (common-lisp:or name-contains common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or hub-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-hubs-request 'make-list-hubs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-hubs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-hubs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-before))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-after))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-hubs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-hubs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-hubs-response-"))
   (hub-summaries (common-lisp:error ":hub-summaries is required") :type
    (common-lisp:or hub-info-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-hubs-response 'make-list-hubs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-hubs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-hubs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-summaries))
      (common-lisp:list
       (common-lisp:cons "HubSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-hubs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-human-task-uis-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-human-task-uis-request-"))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-human-task-uis-request
                    'make-list-human-task-uis-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-human-task-uis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-human-task-uis-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-human-task-uis-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-human-task-uis-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-human-task-uis-response-"))
   (human-task-ui-summaries
    (common-lisp:error ":human-task-ui-summaries is required") :type
    (common-lisp:or human-task-ui-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-human-task-uis-response
                    'make-list-human-task-uis-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-human-task-uis-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-human-task-uis-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'human-task-ui-summaries))
      (common-lisp:list
       (common-lisp:cons "HumanTaskUiSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-human-task-uis-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-hyper-parameter-tuning-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-hyper-parameter-tuning-jobs-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or hyper-parameter-tuning-job-sort-by-options
                    common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or name-contains common-lisp:null))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (status-equals common-lisp:nil :type
    (common-lisp:or hyper-parameter-tuning-job-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-hyper-parameter-tuning-jobs-request
                    'make-list-hyper-parameter-tuning-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-hyper-parameter-tuning-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-hyper-parameter-tuning-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-after))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-before))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-equals))
      (common-lisp:list
       (common-lisp:cons "StatusEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-hyper-parameter-tuning-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-hyper-parameter-tuning-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-hyper-parameter-tuning-jobs-response-"))
   (hyper-parameter-tuning-job-summaries
    (common-lisp:error ":hyper-parameter-tuning-job-summaries is required")
    :type
    (common-lisp:or hyper-parameter-tuning-job-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-hyper-parameter-tuning-jobs-response
                    'make-list-hyper-parameter-tuning-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-hyper-parameter-tuning-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-hyper-parameter-tuning-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hyper-parameter-tuning-job-summaries))
      (common-lisp:list
       (common-lisp:cons "HyperParameterTuningJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-hyper-parameter-tuning-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-image-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-image-versions-request-"))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (image-name (common-lisp:error ":image-name is required") :type
    (common-lisp:or image-name common-lisp:null))
   (last-modified-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or image-version-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or image-version-sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-image-versions-request
                    'make-list-image-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-name))
      (common-lisp:list
       (common-lisp:cons "ImageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-after))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-before))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-image-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-image-versions-response-"))
   (image-versions common-lisp:nil :type
    (common-lisp:or image-versions common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-image-versions-response
                    'make-list-image-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-image-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-image-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-versions))
      (common-lisp:list
       (common-lisp:cons "ImageVersions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-image-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-images-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-images-request-"))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or image-name-contains common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or image-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or image-sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-images-request 'make-list-images-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-images-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-images-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-after))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-before))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-images-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-images-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-images-response-"))
   (images common-lisp:nil :type (common-lisp:or images common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-images-response 'make-list-images-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-images-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-images-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'images))
      (common-lisp:list
       (common-lisp:cons "Images"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-images-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-inference-experiments-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-inference-experiments-request-"))
   (name-contains common-lisp:nil :type
    (common-lisp:or name-contains common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or inference-experiment-type common-lisp:null))
   (status-equals common-lisp:nil :type
    (common-lisp:or inference-experiment-status common-lisp:null))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or sort-inference-experiments-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-inference-experiments-request
                    'make-list-inference-experiments-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-experiments-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-experiments-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-equals))
      (common-lisp:list
       (common-lisp:cons "StatusEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-after))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-before))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-experiments-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-inference-experiments-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-inference-experiments-response-"))
   (inference-experiments common-lisp:nil :type
    (common-lisp:or inference-experiment-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-inference-experiments-response
                    'make-list-inference-experiments-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-experiments-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-experiments-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-experiments))
      (common-lisp:list
       (common-lisp:cons "InferenceExperiments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-experiments-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-inference-recommendations-job-steps-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-inference-recommendations-job-steps-request-"))
   (job-name (common-lisp:error ":job-name is required") :type
    (common-lisp:or recommendation-job-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or recommendation-job-status common-lisp:null))
   (step-type common-lisp:nil :type
    (common-lisp:or recommendation-step-type common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-inference-recommendations-job-steps-request
                    'make-list-inference-recommendations-job-steps-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-recommendations-job-steps-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-recommendations-job-steps-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-type))
      (common-lisp:list
       (common-lisp:cons "StepType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-recommendations-job-steps-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-inference-recommendations-job-steps-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-inference-recommendations-job-steps-response-"))
   (steps common-lisp:nil :type
    (common-lisp:or inference-recommendations-job-steps common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-inference-recommendations-job-steps-response
                    'make-list-inference-recommendations-job-steps-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-recommendations-job-steps-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-recommendations-job-steps-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'steps))
      (common-lisp:list
       (common-lisp:cons "Steps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-recommendations-job-steps-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-inference-recommendations-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-inference-recommendations-jobs-request-"))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (last-modified-time-after common-lisp:nil :type
    (common-lisp:or last-modified-time common-lisp:null))
   (last-modified-time-before common-lisp:nil :type
    (common-lisp:or last-modified-time common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or name-contains common-lisp:null))
   (status-equals common-lisp:nil :type
    (common-lisp:or recommendation-job-status common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or list-inference-recommendations-jobs-sort-by
                    common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-inference-recommendations-jobs-request
                    'make-list-inference-recommendations-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-recommendations-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-recommendations-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-after))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-before))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-equals))
      (common-lisp:list
       (common-lisp:cons "StatusEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-recommendations-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-inference-recommendations-jobs-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-inference-recommendations-jobs-response-"))
   (inference-recommendations-jobs
    (common-lisp:error ":inference-recommendations-jobs is required") :type
    (common-lisp:or inference-recommendations-jobs common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-inference-recommendations-jobs-response
                    'make-list-inference-recommendations-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-recommendations-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-recommendations-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-recommendations-jobs))
      (common-lisp:list
       (common-lisp:cons "InferenceRecommendationsJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-inference-recommendations-jobs-response))
   common-lisp:nil))
(common-lisp:deftype list-inference-recommendations-jobs-sort-by ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-labeling-jobs-for-workteam-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-labeling-jobs-for-workteam-request-"))
   (workteam-arn (common-lisp:error ":workteam-arn is required") :type
    (common-lisp:or workteam-arn common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (job-reference-code-contains common-lisp:nil :type
    (common-lisp:or job-reference-code-contains common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or list-labeling-jobs-for-workteam-sort-by-options
                    common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-labeling-jobs-for-workteam-request
                    'make-list-labeling-jobs-for-workteam-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-labeling-jobs-for-workteam-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-labeling-jobs-for-workteam-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workteam-arn))
      (common-lisp:list
       (common-lisp:cons "WorkteamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-reference-code-contains))
      (common-lisp:list
       (common-lisp:cons "JobReferenceCodeContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-labeling-jobs-for-workteam-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-labeling-jobs-for-workteam-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-labeling-jobs-for-workteam-response-"))
   (labeling-job-summary-list
    (common-lisp:error ":labeling-job-summary-list is required") :type
    (common-lisp:or labeling-job-for-workteam-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-labeling-jobs-for-workteam-response
                    'make-list-labeling-jobs-for-workteam-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-labeling-jobs-for-workteam-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-labeling-jobs-for-workteam-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'labeling-job-summary-list))
      (common-lisp:list
       (common-lisp:cons "LabelingJobSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-labeling-jobs-for-workteam-response))
   common-lisp:nil))
(common-lisp:deftype list-labeling-jobs-for-workteam-sort-by-options ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-labeling-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-labeling-jobs-request-"))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or name-contains common-lisp:null))
   (sort-by common-lisp:nil :type (common-lisp:or sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (status-equals common-lisp:nil :type
    (common-lisp:or labeling-job-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-labeling-jobs-request
                    'make-list-labeling-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-labeling-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-labeling-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-after))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-before))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-equals))
      (common-lisp:list
       (common-lisp:cons "StatusEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-labeling-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-labeling-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-labeling-jobs-response-"))
   (labeling-job-summary-list common-lisp:nil :type
    (common-lisp:or labeling-job-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-labeling-jobs-response
                    'make-list-labeling-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-labeling-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-labeling-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'labeling-job-summary-list))
      (common-lisp:list
       (common-lisp:cons "LabelingJobSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-labeling-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-lineage-entity-parameter-key ()
   '(trivial-types:proper-list string-parameter-value))
 (common-lisp:defun |make-list-lineage-entity-parameter-key|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string-parameter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-lineage-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-lineage-groups-request-"))
   (created-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or sort-lineage-groups-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-lineage-groups-request
                    'make-list-lineage-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-lineage-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-lineage-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-after))
      (common-lisp:list
       (common-lisp:cons "CreatedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-before))
      (common-lisp:list
       (common-lisp:cons "CreatedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-lineage-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-lineage-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-lineage-groups-response-"))
   (lineage-group-summaries common-lisp:nil :type
    (common-lisp:or lineage-group-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-lineage-groups-response
                    'make-list-lineage-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-lineage-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-lineage-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lineage-group-summaries))
      (common-lisp:list
       (common-lisp:cons "LineageGroupSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-lineage-groups-response))
   common-lisp:nil))
(common-lisp:deftype list-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-model-bias-job-definitions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-model-bias-job-definitions-request-"))
   (endpoint-name common-lisp:nil :type
    (common-lisp:or endpoint-name common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or monitoring-job-definition-sort-key common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or name-contains common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-model-bias-job-definitions-request
                    'make-list-model-bias-job-definitions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-bias-job-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-bias-job-definitions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-bias-job-definitions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-model-bias-job-definitions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-model-bias-job-definitions-response-"))
   (job-definition-summaries
    (common-lisp:error ":job-definition-summaries is required") :type
    (common-lisp:or monitoring-job-definition-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-model-bias-job-definitions-response
                    'make-list-model-bias-job-definitions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-bias-job-definitions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-bias-job-definitions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-definition-summaries))
      (common-lisp:list
       (common-lisp:cons "JobDefinitionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-bias-job-definitions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-model-card-export-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-model-card-export-jobs-request-"))
   (model-card-name (common-lisp:error ":model-card-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (model-card-version common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (model-card-export-job-name-contains common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (status-equals common-lisp:nil :type
    (common-lisp:or model-card-export-job-status common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or model-card-export-job-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or model-card-export-job-sort-order common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-model-card-export-jobs-request
                    'make-list-model-card-export-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-card-export-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-card-export-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-name))
      (common-lisp:list
       (common-lisp:cons "ModelCardName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-version))
      (common-lisp:list
       (common-lisp:cons "ModelCardVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-card-export-job-name-contains))
      (common-lisp:list
       (common-lisp:cons "ModelCardExportJobNameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-equals))
      (common-lisp:list
       (common-lisp:cons "StatusEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-card-export-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-model-card-export-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-model-card-export-jobs-response-"))
   (model-card-export-job-summaries
    (common-lisp:error ":model-card-export-job-summaries is required") :type
    (common-lisp:or model-card-export-job-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-model-card-export-jobs-response
                    'make-list-model-card-export-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-card-export-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-card-export-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-card-export-job-summaries))
      (common-lisp:list
       (common-lisp:cons "ModelCardExportJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-card-export-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-model-card-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-model-card-versions-request-"))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (model-card-name (common-lisp:error ":model-card-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (model-card-status common-lisp:nil :type
    (common-lisp:or model-card-status common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or model-card-version-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or model-card-sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-model-card-versions-request
                    'make-list-model-card-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-card-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-card-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-name))
      (common-lisp:list
       (common-lisp:cons "ModelCardName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-status))
      (common-lisp:list
       (common-lisp:cons "ModelCardStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-card-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-model-card-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-model-card-versions-response-"))
   (model-card-version-summary-list
    (common-lisp:error ":model-card-version-summary-list is required") :type
    (common-lisp:or model-card-version-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-model-card-versions-response
                    'make-list-model-card-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-card-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-card-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-card-version-summary-list))
      (common-lisp:list
       (common-lisp:cons "ModelCardVersionSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-card-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-model-cards-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-model-cards-request-"))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (model-card-status common-lisp:nil :type
    (common-lisp:or model-card-status common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or model-card-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or model-card-sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-model-cards-request 'make-list-model-cards-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-cards-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-cards-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-status))
      (common-lisp:list
       (common-lisp:cons "ModelCardStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-cards-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-model-cards-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-model-cards-response-"))
   (model-card-summaries
    (common-lisp:error ":model-card-summaries is required") :type
    (common-lisp:or model-card-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-model-cards-response
                    'make-list-model-cards-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-cards-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-cards-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-card-summaries))
      (common-lisp:list
       (common-lisp:cons "ModelCardSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-cards-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-model-explainability-job-definitions-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-model-explainability-job-definitions-request-"))
   (endpoint-name common-lisp:nil :type
    (common-lisp:or endpoint-name common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or monitoring-job-definition-sort-key common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or name-contains common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-model-explainability-job-definitions-request
                    'make-list-model-explainability-job-definitions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-explainability-job-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-explainability-job-definitions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-explainability-job-definitions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-model-explainability-job-definitions-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-model-explainability-job-definitions-response-"))
   (job-definition-summaries
    (common-lisp:error ":job-definition-summaries is required") :type
    (common-lisp:or monitoring-job-definition-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-model-explainability-job-definitions-response
                    'make-list-model-explainability-job-definitions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-explainability-job-definitions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-explainability-job-definitions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-definition-summaries))
      (common-lisp:list
       (common-lisp:cons "JobDefinitionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-explainability-job-definitions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-model-metadata-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-model-metadata-request-"))
   (search-expression common-lisp:nil :type
    (common-lisp:or model-metadata-search-expression common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-model-metadata-request
                    'make-list-model-metadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-expression))
      (common-lisp:list
       (common-lisp:cons "SearchExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-model-metadata-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-model-metadata-response-"))
   (model-metadata-summaries
    (common-lisp:error ":model-metadata-summaries is required") :type
    (common-lisp:or model-metadata-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-model-metadata-response
                    'make-list-model-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-metadata-summaries))
      (common-lisp:list
       (common-lisp:cons "ModelMetadataSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-metadata-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-model-package-groups-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-model-package-groups-input-"))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or name-contains common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or model-package-group-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-model-package-groups-input
                    'make-list-model-package-groups-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-package-groups-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-package-groups-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-package-groups-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-model-package-groups-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-model-package-groups-output-"))
   (model-package-group-summary-list
    (common-lisp:error ":model-package-group-summary-list is required") :type
    (common-lisp:or model-package-group-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-model-package-groups-output
                    'make-list-model-package-groups-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-package-groups-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-package-groups-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-summary-list))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-package-groups-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-model-packages-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-model-packages-input-"))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or name-contains common-lisp:null))
   (model-approval-status common-lisp:nil :type
    (common-lisp:or model-approval-status common-lisp:null))
   (model-package-group-name common-lisp:nil :type
    (common-lisp:or arn-or-name common-lisp:null))
   (model-package-type common-lisp:nil :type
    (common-lisp:or model-package-type common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or model-package-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-model-packages-input
                    'make-list-model-packages-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-packages-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-packages-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-approval-status))
      (common-lisp:list
       (common-lisp:cons "ModelApprovalStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-name))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-package-type))
      (common-lisp:list
       (common-lisp:cons "ModelPackageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-packages-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-model-packages-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-model-packages-output-"))
   (model-package-summary-list
    (common-lisp:error ":model-package-summary-list is required") :type
    (common-lisp:or model-package-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-model-packages-output
                    'make-list-model-packages-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-packages-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-packages-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-summary-list))
      (common-lisp:list
       (common-lisp:cons "ModelPackageSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-packages-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-model-quality-job-definitions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-model-quality-job-definitions-request-"))
   (endpoint-name common-lisp:nil :type
    (common-lisp:or endpoint-name common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or monitoring-job-definition-sort-key common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or name-contains common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-model-quality-job-definitions-request
                    'make-list-model-quality-job-definitions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-quality-job-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-quality-job-definitions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-quality-job-definitions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-model-quality-job-definitions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-model-quality-job-definitions-response-"))
   (job-definition-summaries
    (common-lisp:error ":job-definition-summaries is required") :type
    (common-lisp:or monitoring-job-definition-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-model-quality-job-definitions-response
                    'make-list-model-quality-job-definitions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-model-quality-job-definitions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-model-quality-job-definitions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-definition-summaries))
      (common-lisp:list
       (common-lisp:cons "JobDefinitionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-model-quality-job-definitions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-models-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-models-input-"))
   (sort-by common-lisp:nil :type
    (common-lisp:or model-sort-key common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or order-key common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or model-name-contains common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-models-input 'make-list-models-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-models-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-models-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-models-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-models-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-models-output-"))
   (models (common-lisp:error ":models is required") :type
    (common-lisp:or model-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-models-output 'make-list-models-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-models-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-models-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'models))
      (common-lisp:list
       (common-lisp:cons "Models"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-models-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-monitoring-alert-history-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-monitoring-alert-history-request-"))
   (monitoring-schedule-name common-lisp:nil :type
    (common-lisp:or monitoring-schedule-name common-lisp:null))
   (monitoring-alert-name common-lisp:nil :type
    (common-lisp:or monitoring-alert-name common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or monitoring-alert-history-sort-key common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (status-equals common-lisp:nil :type
    (common-lisp:or monitoring-alert-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-monitoring-alert-history-request
                    'make-list-monitoring-alert-history-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-monitoring-alert-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-monitoring-alert-history-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-name))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-alert-name))
      (common-lisp:list
       (common-lisp:cons "MonitoringAlertName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-equals))
      (common-lisp:list
       (common-lisp:cons "StatusEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-monitoring-alert-history-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-monitoring-alert-history-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-monitoring-alert-history-response-"))
   (monitoring-alert-history common-lisp:nil :type
    (common-lisp:or monitoring-alert-history-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-monitoring-alert-history-response
                    'make-list-monitoring-alert-history-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-monitoring-alert-history-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-monitoring-alert-history-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-alert-history))
      (common-lisp:list
       (common-lisp:cons "MonitoringAlertHistory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-monitoring-alert-history-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-monitoring-alerts-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-monitoring-alerts-request-"))
   (monitoring-schedule-name
    (common-lisp:error ":monitoring-schedule-name is required") :type
    (common-lisp:or monitoring-schedule-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-monitoring-alerts-request
                    'make-list-monitoring-alerts-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-monitoring-alerts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-monitoring-alerts-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-name))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-monitoring-alerts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-monitoring-alerts-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-monitoring-alerts-response-"))
   (monitoring-alert-summaries common-lisp:nil :type
    (common-lisp:or monitoring-alert-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-monitoring-alerts-response
                    'make-list-monitoring-alerts-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-monitoring-alerts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-monitoring-alerts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-alert-summaries))
      (common-lisp:list
       (common-lisp:cons "MonitoringAlertSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-monitoring-alerts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-monitoring-executions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-monitoring-executions-request-"))
   (monitoring-schedule-name common-lisp:nil :type
    (common-lisp:or monitoring-schedule-name common-lisp:null))
   (endpoint-name common-lisp:nil :type
    (common-lisp:or endpoint-name common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or monitoring-execution-sort-key common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (scheduled-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (scheduled-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (status-equals common-lisp:nil :type
    (common-lisp:or execution-status common-lisp:null))
   (monitoring-job-definition-name common-lisp:nil :type
    (common-lisp:or monitoring-job-definition-name common-lisp:null))
   (monitoring-type-equals common-lisp:nil :type
    (common-lisp:or monitoring-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-monitoring-executions-request
                    'make-list-monitoring-executions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-monitoring-executions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-monitoring-executions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-name))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-time-before))
      (common-lisp:list
       (common-lisp:cons "ScheduledTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'scheduled-time-after))
      (common-lisp:list
       (common-lisp:cons "ScheduledTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-before))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-after))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-equals))
      (common-lisp:list
       (common-lisp:cons "StatusEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-job-definition-name))
      (common-lisp:list
       (common-lisp:cons "MonitoringJobDefinitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-type-equals))
      (common-lisp:list
       (common-lisp:cons "MonitoringTypeEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-monitoring-executions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-monitoring-executions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-monitoring-executions-response-"))
   (monitoring-execution-summaries
    (common-lisp:error ":monitoring-execution-summaries is required") :type
    (common-lisp:or monitoring-execution-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-monitoring-executions-response
                    'make-list-monitoring-executions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-monitoring-executions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-monitoring-executions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-execution-summaries))
      (common-lisp:list
       (common-lisp:cons "MonitoringExecutionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-monitoring-executions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-monitoring-schedules-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-monitoring-schedules-request-"))
   (endpoint-name common-lisp:nil :type
    (common-lisp:or endpoint-name common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or monitoring-schedule-sort-key common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or name-contains common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (status-equals common-lisp:nil :type
    (common-lisp:or schedule-status common-lisp:null))
   (monitoring-job-definition-name common-lisp:nil :type
    (common-lisp:or monitoring-job-definition-name common-lisp:null))
   (monitoring-type-equals common-lisp:nil :type
    (common-lisp:or monitoring-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-monitoring-schedules-request
                    'make-list-monitoring-schedules-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-monitoring-schedules-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-monitoring-schedules-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-before))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-after))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-equals))
      (common-lisp:list
       (common-lisp:cons "StatusEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-job-definition-name))
      (common-lisp:list
       (common-lisp:cons "MonitoringJobDefinitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-type-equals))
      (common-lisp:list
       (common-lisp:cons "MonitoringTypeEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-monitoring-schedules-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-monitoring-schedules-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-monitoring-schedules-response-"))
   (monitoring-schedule-summaries
    (common-lisp:error ":monitoring-schedule-summaries is required") :type
    (common-lisp:or monitoring-schedule-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-monitoring-schedules-response
                    'make-list-monitoring-schedules-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-monitoring-schedules-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-monitoring-schedules-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-summaries))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-monitoring-schedules-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-notebook-instance-lifecycle-configs-input (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-notebook-instance-lifecycle-configs-input-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or notebook-instance-lifecycle-config-sort-key
                    common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or notebook-instance-lifecycle-config-sort-order
                    common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or notebook-instance-lifecycle-config-name-contains
                    common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (last-modified-time-before common-lisp:nil :type
    (common-lisp:or last-modified-time common-lisp:null))
   (last-modified-time-after common-lisp:nil :type
    (common-lisp:or last-modified-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-notebook-instance-lifecycle-configs-input
                    'make-list-notebook-instance-lifecycle-configs-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-instance-lifecycle-configs-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-instance-lifecycle-configs-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-before))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-after))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-instance-lifecycle-configs-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-notebook-instance-lifecycle-configs-output (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-notebook-instance-lifecycle-configs-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (notebook-instance-lifecycle-configs common-lisp:nil :type
    (common-lisp:or notebook-instance-lifecycle-config-summary-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-notebook-instance-lifecycle-configs-output
                    'make-list-notebook-instance-lifecycle-configs-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-instance-lifecycle-configs-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-instance-lifecycle-configs-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-lifecycle-configs))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceLifecycleConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-instance-lifecycle-configs-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-notebook-instances-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-notebook-instances-input-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or notebook-instance-sort-key common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or notebook-instance-sort-order common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or notebook-instance-name-contains common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (last-modified-time-before common-lisp:nil :type
    (common-lisp:or last-modified-time common-lisp:null))
   (last-modified-time-after common-lisp:nil :type
    (common-lisp:or last-modified-time common-lisp:null))
   (status-equals common-lisp:nil :type
    (common-lisp:or notebook-instance-status common-lisp:null))
   (notebook-instance-lifecycle-config-name-contains common-lisp:nil :type
    (common-lisp:or notebook-instance-lifecycle-config-name common-lisp:null))
   (default-code-repository-contains common-lisp:nil :type
    (common-lisp:or code-repository-contains common-lisp:null))
   (additional-code-repository-equals common-lisp:nil :type
    (common-lisp:or code-repository-name-or-url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-notebook-instances-input
                    'make-list-notebook-instances-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-instances-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-instances-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-before))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-after))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-equals))
      (common-lisp:list
       (common-lisp:cons "StatusEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-lifecycle-config-name-contains))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceLifecycleConfigNameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-code-repository-contains))
      (common-lisp:list
       (common-lisp:cons "DefaultCodeRepositoryContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-code-repository-equals))
      (common-lisp:list
       (common-lisp:cons "AdditionalCodeRepositoryEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-instances-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-notebook-instances-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-notebook-instances-output-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (notebook-instances common-lisp:nil :type
    (common-lisp:or notebook-instance-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-notebook-instances-output
                    'make-list-notebook-instances-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-instances-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-instances-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notebook-instances))
      (common-lisp:list
       (common-lisp:cons "NotebookInstances"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-notebook-instances-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-pipeline-execution-steps-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-pipeline-execution-steps-request-"))
   (pipeline-execution-arn common-lisp:nil :type
    (common-lisp:or pipeline-execution-arn common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-pipeline-execution-steps-request
                    'make-list-pipeline-execution-steps-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-execution-steps-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-execution-steps-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-arn))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-execution-steps-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-pipeline-execution-steps-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-pipeline-execution-steps-response-"))
   (pipeline-execution-steps common-lisp:nil :type
    (common-lisp:or pipeline-execution-step-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-pipeline-execution-steps-response
                    'make-list-pipeline-execution-steps-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-execution-steps-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-execution-steps-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-steps))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionSteps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-execution-steps-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-pipeline-executions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-pipeline-executions-request-"))
   (pipeline-name (common-lisp:error ":pipeline-name is required") :type
    (common-lisp:or pipeline-name-or-arn common-lisp:null))
   (created-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or sort-pipeline-executions-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-pipeline-executions-request
                    'make-list-pipeline-executions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-executions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-executions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "PipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-after))
      (common-lisp:list
       (common-lisp:cons "CreatedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-before))
      (common-lisp:list
       (common-lisp:cons "CreatedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-executions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-pipeline-executions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-pipeline-executions-response-"))
   (pipeline-execution-summaries common-lisp:nil :type
    (common-lisp:or pipeline-execution-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-pipeline-executions-response
                    'make-list-pipeline-executions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-executions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-executions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-summaries))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-executions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-pipeline-parameters-for-execution-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-pipeline-parameters-for-execution-request-"))
   (pipeline-execution-arn
    (common-lisp:error ":pipeline-execution-arn is required") :type
    (common-lisp:or pipeline-execution-arn common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-pipeline-parameters-for-execution-request
                    'make-list-pipeline-parameters-for-execution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-parameters-for-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-parameters-for-execution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-arn))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-parameters-for-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-pipeline-parameters-for-execution-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-pipeline-parameters-for-execution-response-"))
   (pipeline-parameters common-lisp:nil :type
    (common-lisp:or parameter-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-pipeline-parameters-for-execution-response
                    'make-list-pipeline-parameters-for-execution-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-parameters-for-execution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-parameters-for-execution-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-parameters))
      (common-lisp:list
       (common-lisp:cons "PipelineParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pipeline-parameters-for-execution-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-pipelines-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-pipelines-request-"))
   (pipeline-name-prefix common-lisp:nil :type
    (common-lisp:or pipeline-name common-lisp:null))
   (created-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or sort-pipelines-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-pipelines-request 'make-list-pipelines-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pipelines-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pipelines-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-name-prefix))
      (common-lisp:list
       (common-lisp:cons "PipelineNamePrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-after))
      (common-lisp:list
       (common-lisp:cons "CreatedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-before))
      (common-lisp:list
       (common-lisp:cons "CreatedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pipelines-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-pipelines-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-pipelines-response-"))
   (pipeline-summaries common-lisp:nil :type
    (common-lisp:or pipeline-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-pipelines-response 'make-list-pipelines-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-pipelines-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-pipelines-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-summaries))
      (common-lisp:list
       (common-lisp:cons "PipelineSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-pipelines-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-processing-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-processing-jobs-request-"))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (status-equals common-lisp:nil :type
    (common-lisp:or processing-job-status common-lisp:null))
   (sort-by common-lisp:nil :type (common-lisp:or sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-processing-jobs-request
                    'make-list-processing-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-processing-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-processing-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-after))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-before))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-equals))
      (common-lisp:list
       (common-lisp:cons "StatusEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-processing-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-processing-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-processing-jobs-response-"))
   (processing-job-summaries
    (common-lisp:error ":processing-job-summaries is required") :type
    (common-lisp:or processing-job-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-processing-jobs-response
                    'make-list-processing-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-processing-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-processing-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'processing-job-summaries))
      (common-lisp:list
       (common-lisp:cons "ProcessingJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-processing-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-projects-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-projects-input-"))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or project-entity-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or project-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or project-sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-projects-input 'make-list-projects-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-projects-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-projects-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-projects-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-projects-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-projects-output-"))
   (project-summary-list
    (common-lisp:error ":project-summary-list is required") :type
    (common-lisp:or project-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-projects-output 'make-list-projects-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-projects-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-projects-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'project-summary-list))
      (common-lisp:list
       (common-lisp:cons "ProjectSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-projects-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-spaces-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-spaces-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or space-sort-key common-lisp:null))
   (domain-id-equals common-lisp:nil :type
    (common-lisp:or domain-id common-lisp:null))
   (space-name-contains common-lisp:nil :type
    (common-lisp:or space-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-spaces-request 'make-list-spaces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-spaces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-spaces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id-equals))
      (common-lisp:list
       (common-lisp:cons "DomainIdEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name-contains))
      (common-lisp:list
       (common-lisp:cons "SpaceNameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-spaces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-spaces-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-spaces-response-"))
   (spaces common-lisp:nil :type (common-lisp:or space-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-spaces-response 'make-list-spaces-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-spaces-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-spaces-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spaces))
      (common-lisp:list
       (common-lisp:cons "Spaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-spaces-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-stage-devices-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-stage-devices-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-max-results common-lisp:null))
   (edge-deployment-plan-name
    (common-lisp:error ":edge-deployment-plan-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (exclude-devices-deployed-in-other-stage common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (stage-name (common-lisp:error ":stage-name is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-stage-devices-request
                    'make-list-stage-devices-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stage-devices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stage-devices-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-deployment-plan-name))
      (common-lisp:list
       (common-lisp:cons "EdgeDeploymentPlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-devices-deployed-in-other-stage))
      (common-lisp:list
       (common-lisp:cons "ExcludeDevicesDeployedInOtherStage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-name))
      (common-lisp:list
       (common-lisp:cons "StageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stage-devices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-stage-devices-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-stage-devices-response-"))
   (device-deployment-summaries
    (common-lisp:error ":device-deployment-summaries is required") :type
    (common-lisp:or device-deployment-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-stage-devices-response
                    'make-list-stage-devices-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-stage-devices-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-stage-devices-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-deployment-summaries))
      (common-lisp:list
       (common-lisp:cons "DeviceDeploymentSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-stage-devices-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-studio-lifecycle-configs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-studio-lifecycle-configs-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or studio-lifecycle-config-name common-lisp:null))
   (app-type-equals common-lisp:nil :type
    (common-lisp:or studio-lifecycle-config-app-type common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (modified-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (modified-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or studio-lifecycle-config-sort-key common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-studio-lifecycle-configs-request
                    'make-list-studio-lifecycle-configs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-lifecycle-configs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-lifecycle-configs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-type-equals))
      (common-lisp:list
       (common-lisp:cons "AppTypeEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'modified-time-before))
      (common-lisp:list
       (common-lisp:cons "ModifiedTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-time-after))
      (common-lisp:list
       (common-lisp:cons "ModifiedTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-lifecycle-configs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-studio-lifecycle-configs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-studio-lifecycle-configs-response-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (studio-lifecycle-configs common-lisp:nil :type
    (common-lisp:or studio-lifecycle-configs-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-studio-lifecycle-configs-response
                    'make-list-studio-lifecycle-configs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-lifecycle-configs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-lifecycle-configs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-lifecycle-configs))
      (common-lisp:list
       (common-lisp:cons "StudioLifecycleConfigs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-studio-lifecycle-configs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-subscribed-workteams-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-subscribed-workteams-request-"))
   (name-contains common-lisp:nil :type
    (common-lisp:or workteam-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-subscribed-workteams-request
                    'make-list-subscribed-workteams-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribed-workteams-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribed-workteams-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribed-workteams-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-subscribed-workteams-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-subscribed-workteams-response-"))
   (subscribed-workteams
    (common-lisp:error ":subscribed-workteams is required") :type
    (common-lisp:or subscribed-workteams common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-subscribed-workteams-response
                    'make-list-subscribed-workteams-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribed-workteams-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribed-workteams-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'subscribed-workteams))
      (common-lisp:list
       (common-lisp:cons "SubscribedWorkteams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-subscribed-workteams-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-input-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-tags-max-results common-lisp:null)))
 (common-lisp:export (common-lisp:list 'list-tags-input 'make-list-tags-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-input))
   common-lisp:nil))
(common-lisp:deftype list-tags-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-output-"))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-output 'make-list-tags-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-tags-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-tags-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-tags-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-training-jobs-for-hyper-parameter-tuning-job-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-training-jobs-for-hyper-parameter-tuning-job-request-"))
   (hyper-parameter-tuning-job-name
    (common-lisp:error ":hyper-parameter-tuning-job-name is required") :type
    (common-lisp:or hyper-parameter-tuning-job-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (status-equals common-lisp:nil :type
    (common-lisp:or training-job-status common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or training-job-sort-by-options common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-training-jobs-for-hyper-parameter-tuning-job-request
                    'make-list-training-jobs-for-hyper-parameter-tuning-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-training-jobs-for-hyper-parameter-tuning-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-training-jobs-for-hyper-parameter-tuning-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hyper-parameter-tuning-job-name))
      (common-lisp:list
       (common-lisp:cons "HyperParameterTuningJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-equals))
      (common-lisp:list
       (common-lisp:cons "StatusEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-training-jobs-for-hyper-parameter-tuning-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-training-jobs-for-hyper-parameter-tuning-job-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-training-jobs-for-hyper-parameter-tuning-job-response-"))
   (training-job-summaries
    (common-lisp:error ":training-job-summaries is required") :type
    (common-lisp:or hyper-parameter-training-job-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-training-jobs-for-hyper-parameter-tuning-job-response
                    'make-list-training-jobs-for-hyper-parameter-tuning-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-training-jobs-for-hyper-parameter-tuning-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-training-jobs-for-hyper-parameter-tuning-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-job-summaries))
      (common-lisp:list
       (common-lisp:cons "TrainingJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-training-jobs-for-hyper-parameter-tuning-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-training-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-training-jobs-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or name-contains common-lisp:null))
   (status-equals common-lisp:nil :type
    (common-lisp:or training-job-status common-lisp:null))
   (sort-by common-lisp:nil :type (common-lisp:or sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (warm-pool-status-equals common-lisp:nil :type
    (common-lisp:or warm-pool-resource-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-training-jobs-request
                    'make-list-training-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-training-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-training-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-after))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-before))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-equals))
      (common-lisp:list
       (common-lisp:cons "StatusEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'warm-pool-status-equals))
      (common-lisp:list
       (common-lisp:cons "WarmPoolStatusEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-training-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-training-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-training-jobs-response-"))
   (training-job-summaries
    (common-lisp:error ":training-job-summaries is required") :type
    (common-lisp:or training-job-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-training-jobs-response
                    'make-list-training-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-training-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-training-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-job-summaries))
      (common-lisp:list
       (common-lisp:cons "TrainingJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-training-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-transform-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-transform-jobs-request-"))
   (creation-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or name-contains common-lisp:null))
   (status-equals common-lisp:nil :type
    (common-lisp:or transform-job-status common-lisp:null))
   (sort-by common-lisp:nil :type (common-lisp:or sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-transform-jobs-request
                    'make-list-transform-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-transform-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-transform-jobs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-after))
      (common-lisp:list
       (common-lisp:cons "CreationTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'creation-time-before))
      (common-lisp:list
       (common-lisp:cons "CreationTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-after))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-modified-time-before))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTimeBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-equals))
      (common-lisp:list
       (common-lisp:cons "StatusEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-transform-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-transform-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-transform-jobs-response-"))
   (transform-job-summaries
    (common-lisp:error ":transform-job-summaries is required") :type
    (common-lisp:or transform-job-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-transform-jobs-response
                    'make-list-transform-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-transform-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-transform-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transform-job-summaries))
      (common-lisp:list
       (common-lisp:cons "TransformJobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-transform-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype list-trial-component-key256 ()
   '(trivial-types:proper-list trial-component-key256))
 (common-lisp:defun |make-list-trial-component-key256|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trial-component-key256))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-trial-components-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-trial-components-request-"))
   (experiment-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (trial-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (source-arn common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (created-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or sort-trial-components-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-trial-components-request
                    'make-list-trial-components-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-trial-components-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-trial-components-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-name))
      (common-lisp:list
       (common-lisp:cons "ExperimentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-name))
      (common-lisp:list
       (common-lisp:cons "TrialName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-after))
      (common-lisp:list
       (common-lisp:cons "CreatedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-before))
      (common-lisp:list
       (common-lisp:cons "CreatedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-trial-components-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-trial-components-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-trial-components-response-"))
   (trial-component-summaries common-lisp:nil :type
    (common-lisp:or trial-component-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-trial-components-response
                    'make-list-trial-components-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-trial-components-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-trial-components-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trial-component-summaries))
      (common-lisp:list
       (common-lisp:cons "TrialComponentSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-trial-components-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-trials-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-trials-request-"))
   (experiment-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (trial-component-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (created-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or sort-trials-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-trials-request 'make-list-trials-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-trials-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-trials-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-name))
      (common-lisp:list
       (common-lisp:cons "ExperimentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trial-component-name))
      (common-lisp:list
       (common-lisp:cons "TrialComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-after))
      (common-lisp:list
       (common-lisp:cons "CreatedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-before))
      (common-lisp:list
       (common-lisp:cons "CreatedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-trials-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-trials-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-trials-response-"))
   (trial-summaries common-lisp:nil :type
    (common-lisp:or trial-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-trials-response 'make-list-trials-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-trials-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-trials-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-summaries))
      (common-lisp:list
       (common-lisp:cons "TrialSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-trials-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-user-profiles-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-user-profiles-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or user-profile-sort-key common-lisp:null))
   (domain-id-equals common-lisp:nil :type
    (common-lisp:or domain-id common-lisp:null))
   (user-profile-name-contains common-lisp:nil :type
    (common-lisp:or user-profile-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-user-profiles-request
                    'make-list-user-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-profiles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id-equals))
      (common-lisp:list
       (common-lisp:cons "DomainIdEquals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-profile-name-contains))
      (common-lisp:list
       (common-lisp:cons "UserProfileNameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-user-profiles-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-user-profiles-response-"))
   (user-profiles common-lisp:nil :type
    (common-lisp:or user-profile-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-user-profiles-response
                    'make-list-user-profiles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-profiles))
      (common-lisp:list
       (common-lisp:cons "UserProfiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-profiles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-workforces-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-workforces-request-"))
   (sort-by common-lisp:nil :type
    (common-lisp:or list-workforces-sort-by-options common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or workforce-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-workforces-request 'make-list-workforces-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workforces-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workforces-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workforces-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-workforces-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-workforces-response-"))
   (workforces (common-lisp:error ":workforces is required") :type
    (common-lisp:or workforces common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-workforces-response 'make-list-workforces-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workforces-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workforces-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workforces))
      (common-lisp:list
       (common-lisp:cons "Workforces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workforces-response))
   common-lisp:nil))
(common-lisp:deftype list-workforces-sort-by-options () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-workteams-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-workteams-request-"))
   (sort-by common-lisp:nil :type
    (common-lisp:or list-workteams-sort-by-options common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null))
   (name-contains common-lisp:nil :type
    (common-lisp:or workteam-name common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-workteams-request 'make-list-workteams-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workteams-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workteams-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-contains))
      (common-lisp:list
       (common-lisp:cons "NameContains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workteams-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-workteams-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-workteams-response-"))
   (workteams (common-lisp:error ":workteams is required") :type
    (common-lisp:or workteams common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-workteams-response 'make-list-workteams-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-workteams-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-workteams-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workteams))
      (common-lisp:list
       (common-lisp:cons "Workteams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-workteams-response))
   common-lisp:nil))
(common-lisp:deftype list-workteams-sort-by-options () 'common-lisp:string)
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype mlframework () 'common-lisp:string)
(common-lisp:deftype max-auto-mljob-runtime-in-seconds () 'common-lisp:integer)
(common-lisp:deftype max-candidates () 'common-lisp:integer)
(common-lisp:deftype max-concurrent-invocations-per-instance ()
  'common-lisp:integer)
(common-lisp:deftype max-concurrent-task-count () 'common-lisp:integer)
(common-lisp:deftype max-concurrent-transforms () 'common-lisp:integer)
(common-lisp:deftype max-human-labeled-object-count () 'common-lisp:integer)
(common-lisp:deftype max-number-of-tests () 'common-lisp:integer)
(common-lisp:deftype max-number-of-training-jobs () 'common-lisp:integer)
(common-lisp:deftype max-number-of-training-jobs-not-improving ()
  'common-lisp:integer)
(common-lisp:deftype max-parallel-execution-steps () 'common-lisp:integer)
(common-lisp:deftype max-parallel-of-tests () 'common-lisp:integer)
(common-lisp:deftype max-parallel-training-jobs () 'common-lisp:integer)
(common-lisp:deftype max-payload-in-mb () 'common-lisp:integer)
(common-lisp:deftype max-percentage-of-input-dataset-labeled ()
  'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype max-runtime-in-seconds () 'common-lisp:integer)
(common-lisp:deftype max-runtime-per-training-job-in-seconds ()
  'common-lisp:integer)
(common-lisp:deftype max-wait-time-in-seconds () 'common-lisp:integer)
(common-lisp:deftype maximum-execution-timeout-in-seconds ()
  'common-lisp:integer)
(common-lisp:deftype maximum-retry-attempts () 'common-lisp:integer)
(common-lisp:deftype media-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (member-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-member-definition-"))
   (cognito-member-definition common-lisp:nil :type
    (common-lisp:or cognito-member-definition common-lisp:null))
   (oidc-member-definition common-lisp:nil :type
    (common-lisp:or oidc-member-definition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'member-definition 'make-member-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input member-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input member-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cognito-member-definition))
      (common-lisp:list
       (common-lisp:cons "CognitoMemberDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'oidc-member-definition))
      (common-lisp:list
       (common-lisp:cons "OidcMemberDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input member-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype member-definitions ()
   '(trivial-types:proper-list member-definition))
 (common-lisp:defun |make-member-definitions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list member-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (metadata-properties (:copier common-lisp:nil)
      (:conc-name "struct-shape-metadata-properties-"))
   (commit-id common-lisp:nil :type
    (common-lisp:or metadata-property-value common-lisp:null))
   (repository common-lisp:nil :type
    (common-lisp:or metadata-property-value common-lisp:null))
   (generated-by common-lisp:nil :type
    (common-lisp:or metadata-property-value common-lisp:null))
   (project-id common-lisp:nil :type
    (common-lisp:or metadata-property-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'metadata-properties 'make-metadata-properties))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metadata-properties))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metadata-properties))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'commit-id))
      (common-lisp:list
       (common-lisp:cons "CommitId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository))
      (common-lisp:list
       (common-lisp:cons "Repository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generated-by))
      (common-lisp:list
       (common-lisp:cons "GeneratedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "ProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metadata-properties))
   common-lisp:nil))
(common-lisp:deftype metadata-property-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (metric-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-data-"))
   (metric-name common-lisp:nil :type
    (common-lisp:or metric-name common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or float common-lisp:null))
   (timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'metric-data 'make-metric-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-data-list ()
   '(trivial-types:proper-list metric-datum))
 (common-lisp:defun |make-metric-data-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-datum))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (metric-datum (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-datum-"))
   (metric-name common-lisp:nil :type
    (common-lisp:or auto-mlmetric-enum common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or float common-lisp:null))
   (set common-lisp:nil :type
    (common-lisp:or metric-set-source common-lisp:null))
   (standard-metric-name common-lisp:nil :type
    (common-lisp:or auto-mlmetric-extended-enum common-lisp:null)))
 (common-lisp:export (common-lisp:list 'metric-datum 'make-metric-datum))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-datum))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-datum))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'set))
      (common-lisp:list
       (common-lisp:cons "Set"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'standard-metric-name))
      (common-lisp:list
       (common-lisp:cons "StandardMetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-datum))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (metric-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-definition-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or metric-name common-lisp:null))
   (regex (common-lisp:error ":regex is required") :type
    (common-lisp:or metric-regex common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'metric-definition 'make-metric-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'regex))
      (common-lisp:list
       (common-lisp:cons "Regex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-definition-list ()
   '(trivial-types:proper-list metric-definition))
 (common-lisp:defun |make-metric-definition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-definition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metric-name () 'common-lisp:string)
(common-lisp:deftype metric-regex () 'common-lisp:string)
(common-lisp:deftype metric-set-source () 'common-lisp:string)
(common-lisp:deftype metric-value () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defstruct
     (metrics-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-metrics-source-"))
   (content-type (common-lisp:error ":content-type is required") :type
    (common-lisp:or content-type common-lisp:null))
   (content-digest common-lisp:nil :type
    (common-lisp:or content-digest common-lisp:null))
   (s3uri (common-lisp:error ":s3uri is required") :type
    (common-lisp:or s3uri common-lisp:null)))
 (common-lisp:export (common-lisp:list 'metrics-source 'make-metrics-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metrics-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metrics-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-digest))
      (common-lisp:list
       (common-lisp:cons "ContentDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metrics-source))
   common-lisp:nil))
(common-lisp:deftype minimum-instance-metadata-service-version ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (model (:copier common-lisp:nil) (:conc-name "struct-shape-model-"))
   (model-name common-lisp:nil :type
    (common-lisp:or model-name common-lisp:null))
   (primary-container common-lisp:nil :type
    (common-lisp:or container-definition common-lisp:null))
   (containers common-lisp:nil :type
    (common-lisp:or container-definition-list common-lisp:null))
   (inference-execution-config common-lisp:nil :type
    (common-lisp:or inference-execution-config common-lisp:null))
   (execution-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (vpc-config common-lisp:nil :type
    (common-lisp:or vpc-config common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (model-arn common-lisp:nil :type
    (common-lisp:or model-arn common-lisp:null))
   (enable-network-isolation common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'model 'make-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-container))
      (common-lisp:list
       (common-lisp:cons "PrimaryContainer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'containers))
      (common-lisp:list
       (common-lisp:cons "Containers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-execution-config))
      (common-lisp:list
       (common-lisp:cons "InferenceExecutionConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "ExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-arn))
      (common-lisp:list
       (common-lisp:cons "ModelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-network-isolation))
      (common-lisp:list
       (common-lisp:cons "EnableNetworkIsolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model))
   common-lisp:nil))
(common-lisp:deftype model-approval-status () 'common-lisp:string)
(common-lisp:deftype model-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (model-artifacts (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-artifacts-"))
   (s3model-artifacts (common-lisp:error ":s3model-artifacts is required")
    :type (common-lisp:or s3uri common-lisp:null)))
 (common-lisp:export (common-lisp:list 'model-artifacts 'make-model-artifacts))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-artifacts))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-artifacts))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3model-artifacts))
      (common-lisp:list
       (common-lisp:cons "S3ModelArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-artifacts))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (model-bias-app-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-bias-app-specification-"))
   (image-uri (common-lisp:error ":image-uri is required") :type
    (common-lisp:or image-uri common-lisp:null))
   (config-uri (common-lisp:error ":config-uri is required") :type
    (common-lisp:or s3uri common-lisp:null))
   (environment common-lisp:nil :type
    (common-lisp:or monitoring-environment-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-bias-app-specification
                    'make-model-bias-app-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-bias-app-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-bias-app-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-uri))
      (common-lisp:list
       (common-lisp:cons "ImageUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-uri))
      (common-lisp:list
       (common-lisp:cons "ConfigUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-bias-app-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (model-bias-baseline-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-bias-baseline-config-"))
   (baselining-job-name common-lisp:nil :type
    (common-lisp:or processing-job-name common-lisp:null))
   (constraints-resource common-lisp:nil :type
    (common-lisp:or monitoring-constraints-resource common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-bias-baseline-config
                    'make-model-bias-baseline-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-bias-baseline-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-bias-baseline-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baselining-job-name))
      (common-lisp:list
       (common-lisp:cons "BaseliningJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'constraints-resource))
      (common-lisp:list
       (common-lisp:cons "ConstraintsResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-bias-baseline-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (model-bias-job-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-bias-job-input-"))
   (endpoint-input common-lisp:nil :type
    (common-lisp:or endpoint-input common-lisp:null))
   (batch-transform-input common-lisp:nil :type
    (common-lisp:or batch-transform-input common-lisp:null))
   (ground-truth-s3input
    (common-lisp:error ":ground-truth-s3input is required") :type
    (common-lisp:or monitoring-ground-truth-s3input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-bias-job-input 'make-model-bias-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-bias-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-bias-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-input))
      (common-lisp:list
       (common-lisp:cons "EndpointInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-transform-input))
      (common-lisp:list
       (common-lisp:cons "BatchTransformInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ground-truth-s3input))
      (common-lisp:list
       (common-lisp:cons "GroundTruthS3Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-bias-job-input))
   common-lisp:nil))
(common-lisp:deftype model-cache-setting () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (model-card (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-card-"))
   (model-card-arn common-lisp:nil :type
    (common-lisp:or model-card-arn common-lisp:null))
   (model-card-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (model-card-version common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (content common-lisp:nil :type
    (common-lisp:or model-card-content common-lisp:null))
   (model-card-status common-lisp:nil :type
    (common-lisp:or model-card-status common-lisp:null))
   (security-config common-lisp:nil :type
    (common-lisp:or model-card-security-config common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (model-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (risk-rating common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'model-card 'make-model-card))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-card))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-card))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-arn))
      (common-lisp:list
       (common-lisp:cons "ModelCardArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-name))
      (common-lisp:list
       (common-lisp:cons "ModelCardName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-version))
      (common-lisp:list
       (common-lisp:cons "ModelCardVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-status))
      (common-lisp:list
       (common-lisp:cons "ModelCardStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-config))
      (common-lisp:list
       (common-lisp:cons "SecurityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "ModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk-rating))
      (common-lisp:list
       (common-lisp:cons "RiskRating"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-card))
   common-lisp:nil))
(common-lisp:deftype model-card-arn () 'common-lisp:string)
(common-lisp:deftype model-card-content () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (model-card-export-artifacts (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-card-export-artifacts-"))
   (s3export-artifacts (common-lisp:error ":s3export-artifacts is required")
    :type (common-lisp:or s3uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-card-export-artifacts
                    'make-model-card-export-artifacts))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-card-export-artifacts))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-card-export-artifacts))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3export-artifacts))
      (common-lisp:list
       (common-lisp:cons "S3ExportArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-card-export-artifacts))
   common-lisp:nil))
(common-lisp:deftype model-card-export-job-arn () 'common-lisp:string)
(common-lisp:deftype model-card-export-job-sort-by () 'common-lisp:string)
(common-lisp:deftype model-card-export-job-sort-order () 'common-lisp:string)
(common-lisp:deftype model-card-export-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (model-card-export-job-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-card-export-job-summary-"))
   (model-card-export-job-name
    (common-lisp:error ":model-card-export-job-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (model-card-export-job-arn
    (common-lisp:error ":model-card-export-job-arn is required") :type
    (common-lisp:or model-card-export-job-arn common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or model-card-export-job-status common-lisp:null))
   (model-card-name (common-lisp:error ":model-card-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (model-card-version (common-lisp:error ":model-card-version is required")
    :type (common-lisp:or integer common-lisp:null))
   (created-at (common-lisp:error ":created-at is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-at (common-lisp:error ":last-modified-at is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-card-export-job-summary
                    'make-model-card-export-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-card-export-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-card-export-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-card-export-job-name))
      (common-lisp:list
       (common-lisp:cons "ModelCardExportJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-card-export-job-arn))
      (common-lisp:list
       (common-lisp:cons "ModelCardExportJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-name))
      (common-lisp:list
       (common-lisp:cons "ModelCardName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-version))
      (common-lisp:list
       (common-lisp:cons "ModelCardVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-at))
      (common-lisp:list
       (common-lisp:cons "LastModifiedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-card-export-job-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype model-card-export-job-summary-list ()
   '(trivial-types:proper-list model-card-export-job-summary))
 (common-lisp:defun |make-model-card-export-job-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            model-card-export-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (model-card-export-output-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-card-export-output-config-"))
   (s3output-path (common-lisp:error ":s3output-path is required") :type
    (common-lisp:or s3uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-card-export-output-config
                    'make-model-card-export-output-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-card-export-output-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-card-export-output-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3output-path))
      (common-lisp:list
       (common-lisp:cons "S3OutputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-card-export-output-config))
   common-lisp:nil))
(common-lisp:deftype model-card-processing-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (model-card-security-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-card-security-config-"))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-card-security-config
                    'make-model-card-security-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-card-security-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-card-security-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-card-security-config))
   common-lisp:nil))
(common-lisp:deftype model-card-sort-by () 'common-lisp:string)
(common-lisp:deftype model-card-sort-order () 'common-lisp:string)
(common-lisp:deftype model-card-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (model-card-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-card-summary-"))
   (model-card-name (common-lisp:error ":model-card-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (model-card-arn (common-lisp:error ":model-card-arn is required") :type
    (common-lisp:or model-card-arn common-lisp:null))
   (model-card-status (common-lisp:error ":model-card-status is required")
    :type (common-lisp:or model-card-status common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-card-summary 'make-model-card-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-card-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-card-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-name))
      (common-lisp:list
       (common-lisp:cons "ModelCardName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-arn))
      (common-lisp:list
       (common-lisp:cons "ModelCardArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-status))
      (common-lisp:list
       (common-lisp:cons "ModelCardStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-card-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype model-card-summary-list ()
   '(trivial-types:proper-list model-card-summary))
 (common-lisp:defun |make-model-card-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list model-card-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype model-card-version-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (model-card-version-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-card-version-summary-"))
   (model-card-name (common-lisp:error ":model-card-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (model-card-arn (common-lisp:error ":model-card-arn is required") :type
    (common-lisp:or model-card-arn common-lisp:null))
   (model-card-status (common-lisp:error ":model-card-status is required")
    :type (common-lisp:or model-card-status common-lisp:null))
   (model-card-version (common-lisp:error ":model-card-version is required")
    :type (common-lisp:or integer common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-card-version-summary
                    'make-model-card-version-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-card-version-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-card-version-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-name))
      (common-lisp:list
       (common-lisp:cons "ModelCardName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-arn))
      (common-lisp:list
       (common-lisp:cons "ModelCardArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-status))
      (common-lisp:list
       (common-lisp:cons "ModelCardStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-version))
      (common-lisp:list
       (common-lisp:cons "ModelCardVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-card-version-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype model-card-version-summary-list ()
   '(trivial-types:proper-list model-card-version-summary))
 (common-lisp:defun |make-model-card-version-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            model-card-version-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (model-client-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-client-config-"))
   (invocations-timeout-in-seconds common-lisp:nil :type
    (common-lisp:or invocations-timeout-in-seconds common-lisp:null))
   (invocations-max-retries common-lisp:nil :type
    (common-lisp:or invocations-max-retries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-client-config 'make-model-client-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-client-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-client-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'invocations-timeout-in-seconds))
      (common-lisp:list
       (common-lisp:cons "InvocationsTimeoutInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'invocations-max-retries))
      (common-lisp:list
       (common-lisp:cons "InvocationsMaxRetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-client-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (model-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-configuration-"))
   (inference-specification-name common-lisp:nil :type
    (common-lisp:or inference-specification-name common-lisp:null))
   (environment-parameters common-lisp:nil :type
    (common-lisp:or environment-parameters common-lisp:null))
   (compilation-job-name common-lisp:nil :type
    (common-lisp:or recommendation-job-compilation-job-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-configuration 'make-model-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-specification-name))
      (common-lisp:list
       (common-lisp:cons "InferenceSpecificationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'environment-parameters))
      (common-lisp:list
       (common-lisp:cons "EnvironmentParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compilation-job-name))
      (common-lisp:list
       (common-lisp:cons "CompilationJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (model-dashboard-endpoint (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-dashboard-endpoint-"))
   (endpoint-name (common-lisp:error ":endpoint-name is required") :type
    (common-lisp:or endpoint-name common-lisp:null))
   (endpoint-arn (common-lisp:error ":endpoint-arn is required") :type
    (common-lisp:or endpoint-arn common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (endpoint-status (common-lisp:error ":endpoint-status is required") :type
    (common-lisp:or endpoint-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-dashboard-endpoint 'make-model-dashboard-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-dashboard-endpoint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-dashboard-endpoint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-status))
      (common-lisp:list
       (common-lisp:cons "EndpointStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-dashboard-endpoint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype model-dashboard-endpoints ()
   '(trivial-types:proper-list model-dashboard-endpoint))
 (common-lisp:defun |make-model-dashboard-endpoints|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            model-dashboard-endpoint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (model-dashboard-indicator-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-dashboard-indicator-action-"))
   (enabled common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-dashboard-indicator-action
                    'make-model-dashboard-indicator-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-dashboard-indicator-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-dashboard-indicator-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enabled))
      (common-lisp:list
       (common-lisp:cons "Enabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-dashboard-indicator-action))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (model-dashboard-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-dashboard-model-"))
   (model common-lisp:nil :type (common-lisp:or model common-lisp:null))
   (endpoints common-lisp:nil :type
    (common-lisp:or model-dashboard-endpoints common-lisp:null))
   (last-batch-transform-job common-lisp:nil :type
    (common-lisp:or transform-job common-lisp:null))
   (monitoring-schedules common-lisp:nil :type
    (common-lisp:or model-dashboard-monitoring-schedules common-lisp:null))
   (model-card common-lisp:nil :type
    (common-lisp:or model-dashboard-model-card common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-dashboard-model 'make-model-dashboard-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-dashboard-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-dashboard-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model))
      (common-lisp:list
       (common-lisp:cons "Model"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoints))
      (common-lisp:list
       (common-lisp:cons "Endpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-batch-transform-job))
      (common-lisp:list
       (common-lisp:cons "LastBatchTransformJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedules))
      (common-lisp:list
       (common-lisp:cons "MonitoringSchedules"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card))
      (common-lisp:list
       (common-lisp:cons "ModelCard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-dashboard-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (model-dashboard-model-card (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-dashboard-model-card-"))
   (model-card-arn common-lisp:nil :type
    (common-lisp:or model-card-arn common-lisp:null))
   (model-card-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (model-card-version common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (model-card-status common-lisp:nil :type
    (common-lisp:or model-card-status common-lisp:null))
   (security-config common-lisp:nil :type
    (common-lisp:or model-card-security-config common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (model-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (risk-rating common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-dashboard-model-card
                    'make-model-dashboard-model-card))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-dashboard-model-card))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-dashboard-model-card))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-arn))
      (common-lisp:list
       (common-lisp:cons "ModelCardArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-name))
      (common-lisp:list
       (common-lisp:cons "ModelCardName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-version))
      (common-lisp:list
       (common-lisp:cons "ModelCardVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-status))
      (common-lisp:list
       (common-lisp:cons "ModelCardStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-config))
      (common-lisp:list
       (common-lisp:cons "SecurityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-id))
      (common-lisp:list
       (common-lisp:cons "ModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'risk-rating))
      (common-lisp:list
       (common-lisp:cons "RiskRating"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-dashboard-model-card))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (model-dashboard-monitoring-schedule (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-dashboard-monitoring-schedule-"))
   (monitoring-schedule-arn common-lisp:nil :type
    (common-lisp:or monitoring-schedule-arn common-lisp:null))
   (monitoring-schedule-name common-lisp:nil :type
    (common-lisp:or monitoring-schedule-name common-lisp:null))
   (monitoring-schedule-status common-lisp:nil :type
    (common-lisp:or schedule-status common-lisp:null))
   (monitoring-type common-lisp:nil :type
    (common-lisp:or monitoring-type common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (monitoring-schedule-config common-lisp:nil :type
    (common-lisp:or monitoring-schedule-config common-lisp:null))
   (endpoint-name common-lisp:nil :type
    (common-lisp:or endpoint-name common-lisp:null))
   (monitoring-alert-summaries common-lisp:nil :type
    (common-lisp:or monitoring-alert-summary-list common-lisp:null))
   (last-monitoring-execution-summary common-lisp:nil :type
    (common-lisp:or monitoring-execution-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-dashboard-monitoring-schedule
                    'make-model-dashboard-monitoring-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-dashboard-monitoring-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-dashboard-monitoring-schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-name))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-status))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-type))
      (common-lisp:list
       (common-lisp:cons "MonitoringType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-config))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-alert-summaries))
      (common-lisp:list
       (common-lisp:cons "MonitoringAlertSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-monitoring-execution-summary))
      (common-lisp:list
       (common-lisp:cons "LastMonitoringExecutionSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-dashboard-monitoring-schedule))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype model-dashboard-monitoring-schedules ()
   '(trivial-types:proper-list model-dashboard-monitoring-schedule))
 (common-lisp:defun |make-model-dashboard-monitoring-schedules|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            model-dashboard-monitoring-schedule))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (model-data-quality (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-data-quality-"))
   (statistics common-lisp:nil :type
    (common-lisp:or metrics-source common-lisp:null))
   (constraints common-lisp:nil :type
    (common-lisp:or metrics-source common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-data-quality 'make-model-data-quality))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-data-quality))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-data-quality))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "Statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constraints))
      (common-lisp:list
       (common-lisp:cons "Constraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-data-quality))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (model-deploy-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-deploy-config-"))
   (auto-generate-endpoint-name common-lisp:nil :type
    (common-lisp:or auto-generate-endpoint-name common-lisp:null))
   (endpoint-name common-lisp:nil :type
    (common-lisp:or endpoint-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-deploy-config 'make-model-deploy-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-deploy-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-deploy-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-generate-endpoint-name))
      (common-lisp:list
       (common-lisp:cons "AutoGenerateEndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-deploy-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (model-deploy-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-deploy-result-"))
   (endpoint-name common-lisp:nil :type
    (common-lisp:or endpoint-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-deploy-result 'make-model-deploy-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-deploy-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-deploy-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-deploy-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (model-digests (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-digests-"))
   (artifact-digest common-lisp:nil :type
    (common-lisp:or artifact-digest common-lisp:null)))
 (common-lisp:export (common-lisp:list 'model-digests 'make-model-digests))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-digests))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-digests))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-digest))
      (common-lisp:list
       (common-lisp:cons "ArtifactDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-digests))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (model-explainability-app-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-explainability-app-specification-"))
   (image-uri (common-lisp:error ":image-uri is required") :type
    (common-lisp:or image-uri common-lisp:null))
   (config-uri (common-lisp:error ":config-uri is required") :type
    (common-lisp:or s3uri common-lisp:null))
   (environment common-lisp:nil :type
    (common-lisp:or monitoring-environment-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-explainability-app-specification
                    'make-model-explainability-app-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-explainability-app-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-explainability-app-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-uri))
      (common-lisp:list
       (common-lisp:cons "ImageUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'config-uri))
      (common-lisp:list
       (common-lisp:cons "ConfigUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-explainability-app-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (model-explainability-baseline-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-explainability-baseline-config-"))
   (baselining-job-name common-lisp:nil :type
    (common-lisp:or processing-job-name common-lisp:null))
   (constraints-resource common-lisp:nil :type
    (common-lisp:or monitoring-constraints-resource common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-explainability-baseline-config
                    'make-model-explainability-baseline-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-explainability-baseline-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-explainability-baseline-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baselining-job-name))
      (common-lisp:list
       (common-lisp:cons "BaseliningJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'constraints-resource))
      (common-lisp:list
       (common-lisp:cons "ConstraintsResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-explainability-baseline-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (model-explainability-job-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-explainability-job-input-"))
   (endpoint-input common-lisp:nil :type
    (common-lisp:or endpoint-input common-lisp:null))
   (batch-transform-input common-lisp:nil :type
    (common-lisp:or batch-transform-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-explainability-job-input
                    'make-model-explainability-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-explainability-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-explainability-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-input))
      (common-lisp:list
       (common-lisp:cons "EndpointInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-transform-input))
      (common-lisp:list
       (common-lisp:cons "BatchTransformInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-explainability-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (model-infrastructure-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-infrastructure-config-"))
   (infrastructure-type (common-lisp:error ":infrastructure-type is required")
    :type (common-lisp:or model-infrastructure-type common-lisp:null))
   (real-time-inference-config
    (common-lisp:error ":real-time-inference-config is required") :type
    (common-lisp:or real-time-inference-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-infrastructure-config
                    'make-model-infrastructure-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-infrastructure-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-infrastructure-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'infrastructure-type))
      (common-lisp:list
       (common-lisp:cons "InfrastructureType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'real-time-inference-config))
      (common-lisp:list
       (common-lisp:cons "RealTimeInferenceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-infrastructure-config))
   common-lisp:nil))
(common-lisp:deftype model-infrastructure-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (model-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-input-"))
   (data-input-config (common-lisp:error ":data-input-config is required")
    :type (common-lisp:or data-input-config common-lisp:null)))
 (common-lisp:export (common-lisp:list 'model-input 'make-model-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-input-config))
      (common-lisp:list
       (common-lisp:cons "DataInputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-input))
   common-lisp:nil))
(common-lisp:deftype model-insights-location () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (model-latency-threshold (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-latency-threshold-"))
   (percentile common-lisp:nil :type
    (common-lisp:or string64 common-lisp:null))
   (value-in-milliseconds common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-latency-threshold 'make-model-latency-threshold))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-latency-threshold))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-latency-threshold))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'percentile))
      (common-lisp:list
       (common-lisp:cons "Percentile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'value-in-milliseconds))
      (common-lisp:list
       (common-lisp:cons "ValueInMilliseconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-latency-threshold))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype model-latency-thresholds ()
   '(trivial-types:proper-list model-latency-threshold))
 (common-lisp:defun |make-model-latency-thresholds|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list model-latency-threshold))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (model-metadata-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-metadata-filter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or model-metadata-filter-type common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or string256 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-metadata-filter 'make-model-metadata-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-metadata-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-metadata-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-metadata-filter))
   common-lisp:nil))
(common-lisp:deftype model-metadata-filter-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype model-metadata-filters ()
   '(trivial-types:proper-list model-metadata-filter))
 (common-lisp:defun |make-model-metadata-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list model-metadata-filter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (model-metadata-search-expression (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-metadata-search-expression-"))
   (filters common-lisp:nil :type
    (common-lisp:or model-metadata-filters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-metadata-search-expression
                    'make-model-metadata-search-expression))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-metadata-search-expression))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-metadata-search-expression))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-metadata-search-expression))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype model-metadata-summaries ()
   '(trivial-types:proper-list model-metadata-summary))
 (common-lisp:defun |make-model-metadata-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list model-metadata-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (model-metadata-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-metadata-summary-"))
   (domain (common-lisp:error ":domain is required") :type
    (common-lisp:or string common-lisp:null))
   (framework (common-lisp:error ":framework is required") :type
    (common-lisp:or string common-lisp:null))
   (task (common-lisp:error ":task is required") :type
    (common-lisp:or string common-lisp:null))
   (model (common-lisp:error ":model is required") :type
    (common-lisp:or string common-lisp:null))
   (framework-version (common-lisp:error ":framework-version is required")
    :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-metadata-summary 'make-model-metadata-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-metadata-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-metadata-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework))
      (common-lisp:list
       (common-lisp:cons "Framework"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task))
      (common-lisp:list
       (common-lisp:cons "Task"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model))
      (common-lisp:list
       (common-lisp:cons "Model"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-version))
      (common-lisp:list
       (common-lisp:cons "FrameworkVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-metadata-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (model-metrics (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-metrics-"))
   (model-quality common-lisp:nil :type
    (common-lisp:or model-quality common-lisp:null))
   (model-data-quality common-lisp:nil :type
    (common-lisp:or model-data-quality common-lisp:null))
   (bias common-lisp:nil :type (common-lisp:or bias common-lisp:null))
   (explainability common-lisp:nil :type
    (common-lisp:or explainability common-lisp:null)))
 (common-lisp:export (common-lisp:list 'model-metrics 'make-model-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-quality))
      (common-lisp:list
       (common-lisp:cons "ModelQuality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-data-quality))
      (common-lisp:list
       (common-lisp:cons "ModelDataQuality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bias))
      (common-lisp:list
       (common-lisp:cons "Bias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'explainability))
      (common-lisp:list
       (common-lisp:cons "Explainability"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-metrics))
   common-lisp:nil))
(common-lisp:deftype model-name () 'common-lisp:string)
(common-lisp:deftype model-name-contains () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (model-package (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-package-"))
   (model-package-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (model-package-group-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (model-package-version common-lisp:nil :type
    (common-lisp:or model-package-version common-lisp:null))
   (model-package-arn common-lisp:nil :type
    (common-lisp:or model-package-arn common-lisp:null))
   (model-package-description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (inference-specification common-lisp:nil :type
    (common-lisp:or inference-specification common-lisp:null))
   (source-algorithm-specification common-lisp:nil :type
    (common-lisp:or source-algorithm-specification common-lisp:null))
   (validation-specification common-lisp:nil :type
    (common-lisp:or model-package-validation-specification common-lisp:null))
   (model-package-status common-lisp:nil :type
    (common-lisp:or model-package-status common-lisp:null))
   (model-package-status-details common-lisp:nil :type
    (common-lisp:or model-package-status-details common-lisp:null))
   (certify-for-marketplace common-lisp:nil :type
    (common-lisp:or certify-for-marketplace common-lisp:null))
   (model-approval-status common-lisp:nil :type
    (common-lisp:or model-approval-status common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (metadata-properties common-lisp:nil :type
    (common-lisp:or metadata-properties common-lisp:null))
   (model-metrics common-lisp:nil :type
    (common-lisp:or model-metrics common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (approval-description common-lisp:nil :type
    (common-lisp:or approval-description common-lisp:null))
   (domain common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (task common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (sample-payload-url common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (additional-inference-specifications common-lisp:nil :type
    (common-lisp:or additional-inference-specifications common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (customer-metadata-properties common-lisp:nil :type
    (common-lisp:or customer-metadata-map common-lisp:null))
   (drift-check-baselines common-lisp:nil :type
    (common-lisp:or drift-check-baselines common-lisp:null)))
 (common-lisp:export (common-lisp:list 'model-package 'make-model-package))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-package))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-package))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-package-name))
      (common-lisp:list
       (common-lisp:cons "ModelPackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-name))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-version))
      (common-lisp:list
       (common-lisp:cons "ModelPackageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-package-arn))
      (common-lisp:list
       (common-lisp:cons "ModelPackageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-description))
      (common-lisp:list
       (common-lisp:cons "ModelPackageDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-specification))
      (common-lisp:list
       (common-lisp:cons "InferenceSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-algorithm-specification))
      (common-lisp:list
       (common-lisp:cons "SourceAlgorithmSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'validation-specification))
      (common-lisp:list
       (common-lisp:cons "ValidationSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-status))
      (common-lisp:list
       (common-lisp:cons "ModelPackageStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-status-details))
      (common-lisp:list
       (common-lisp:cons "ModelPackageStatusDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certify-for-marketplace))
      (common-lisp:list
       (common-lisp:cons "CertifyForMarketplace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-approval-status))
      (common-lisp:list
       (common-lisp:cons "ModelApprovalStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-properties))
      (common-lisp:list
       (common-lisp:cons "MetadataProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-metrics))
      (common-lisp:list
       (common-lisp:cons "ModelMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approval-description))
      (common-lisp:list
       (common-lisp:cons "ApprovalDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task))
      (common-lisp:list
       (common-lisp:cons "Task"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-payload-url))
      (common-lisp:list
       (common-lisp:cons "SamplePayloadUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-inference-specifications))
      (common-lisp:list
       (common-lisp:cons "AdditionalInferenceSpecifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-metadata-properties))
      (common-lisp:list
       (common-lisp:cons "CustomerMetadataProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'drift-check-baselines))
      (common-lisp:list
       (common-lisp:cons "DriftCheckBaselines"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-package))
   common-lisp:nil))
(common-lisp:deftype model-package-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype model-package-arn-list ()
   '(trivial-types:proper-list model-package-arn))
 (common-lisp:defun |make-model-package-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list model-package-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (model-package-container-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-package-container-definition-"))
   (container-hostname common-lisp:nil :type
    (common-lisp:or container-hostname common-lisp:null))
   (image (common-lisp:error ":image is required") :type
    (common-lisp:or container-image common-lisp:null))
   (image-digest common-lisp:nil :type
    (common-lisp:or image-digest common-lisp:null))
   (model-data-url common-lisp:nil :type (common-lisp:or url common-lisp:null))
   (product-id common-lisp:nil :type
    (common-lisp:or product-id common-lisp:null))
   (environment common-lisp:nil :type
    (common-lisp:or environment-map common-lisp:null))
   (model-input common-lisp:nil :type
    (common-lisp:or model-input common-lisp:null))
   (framework common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (framework-version common-lisp:nil :type
    (common-lisp:or model-package-framework-version common-lisp:null))
   (nearest-model-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-package-container-definition
                    'make-model-package-container-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-package-container-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-package-container-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-hostname))
      (common-lisp:list
       (common-lisp:cons "ContainerHostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image))
      (common-lisp:list
       (common-lisp:cons "Image"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-digest))
      (common-lisp:list
       (common-lisp:cons "ImageDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-data-url))
      (common-lisp:list
       (common-lisp:cons "ModelDataUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-input))
      (common-lisp:list
       (common-lisp:cons "ModelInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework))
      (common-lisp:list
       (common-lisp:cons "Framework"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-version))
      (common-lisp:list
       (common-lisp:cons "FrameworkVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nearest-model-name))
      (common-lisp:list
       (common-lisp:cons "NearestModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-package-container-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype model-package-container-definition-list ()
   '(trivial-types:proper-list model-package-container-definition))
 (common-lisp:defun |make-model-package-container-definition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            model-package-container-definition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype model-package-framework-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (model-package-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-package-group-"))
   (model-package-group-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (model-package-group-arn common-lisp:nil :type
    (common-lisp:or model-package-group-arn common-lisp:null))
   (model-package-group-description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (model-package-group-status common-lisp:nil :type
    (common-lisp:or model-package-group-status common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-package-group 'make-model-package-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-package-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-package-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-name))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-arn))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-description))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-status))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-package-group))
   common-lisp:nil))
(common-lisp:deftype model-package-group-arn () 'common-lisp:string)
(common-lisp:deftype model-package-group-sort-by () 'common-lisp:string)
(common-lisp:deftype model-package-group-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (model-package-group-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-package-group-summary-"))
   (model-package-group-name
    (common-lisp:error ":model-package-group-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (model-package-group-arn
    (common-lisp:error ":model-package-group-arn is required") :type
    (common-lisp:or model-package-group-arn common-lisp:null))
   (model-package-group-description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or creation-time common-lisp:null))
   (model-package-group-status
    (common-lisp:error ":model-package-group-status is required") :type
    (common-lisp:or model-package-group-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-package-group-summary
                    'make-model-package-group-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-package-group-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-package-group-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-name))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-arn))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-description))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-status))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-package-group-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype model-package-group-summary-list ()
   '(trivial-types:proper-list model-package-group-summary))
 (common-lisp:defun |make-model-package-group-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            model-package-group-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype model-package-sort-by () 'common-lisp:string)
(common-lisp:deftype model-package-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (model-package-status-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-package-status-details-"))
   (validation-statuses (common-lisp:error ":validation-statuses is required")
    :type (common-lisp:or model-package-status-item-list common-lisp:null))
   (image-scan-statuses common-lisp:nil :type
    (common-lisp:or model-package-status-item-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-package-status-details
                    'make-model-package-status-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-package-status-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-package-status-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-statuses))
      (common-lisp:list
       (common-lisp:cons "ValidationStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-scan-statuses))
      (common-lisp:list
       (common-lisp:cons "ImageScanStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-package-status-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (model-package-status-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-package-status-item-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or detailed-model-package-status common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-package-status-item
                    'make-model-package-status-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-package-status-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-package-status-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-package-status-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype model-package-status-item-list ()
   '(trivial-types:proper-list model-package-status-item))
 (common-lisp:defun |make-model-package-status-item-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            model-package-status-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype model-package-summaries () 'common-lisp:hash-table)
 (common-lisp:defun |make-model-package-summaries|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (model-package-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-package-summary-"))
   (model-package-name (common-lisp:error ":model-package-name is required")
    :type (common-lisp:or entity-name common-lisp:null))
   (model-package-group-name common-lisp:nil :type
    (common-lisp:or entity-name common-lisp:null))
   (model-package-version common-lisp:nil :type
    (common-lisp:or model-package-version common-lisp:null))
   (model-package-arn (common-lisp:error ":model-package-arn is required")
    :type (common-lisp:or model-package-arn common-lisp:null))
   (model-package-description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or creation-time common-lisp:null))
   (model-package-status
    (common-lisp:error ":model-package-status is required") :type
    (common-lisp:or model-package-status common-lisp:null))
   (model-approval-status common-lisp:nil :type
    (common-lisp:or model-approval-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-package-summary 'make-model-package-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-package-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-package-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-package-name))
      (common-lisp:list
       (common-lisp:cons "ModelPackageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-name))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-version))
      (common-lisp:list
       (common-lisp:cons "ModelPackageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-package-arn))
      (common-lisp:list
       (common-lisp:cons "ModelPackageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-description))
      (common-lisp:list
       (common-lisp:cons "ModelPackageDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-status))
      (common-lisp:list
       (common-lisp:cons "ModelPackageStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-approval-status))
      (common-lisp:list
       (common-lisp:cons "ModelApprovalStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-package-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype model-package-summary-list ()
   '(trivial-types:proper-list model-package-summary))
 (common-lisp:defun |make-model-package-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list model-package-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype model-package-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (model-package-validation-profile (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-package-validation-profile-"))
   (profile-name (common-lisp:error ":profile-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (transform-job-definition
    (common-lisp:error ":transform-job-definition is required") :type
    (common-lisp:or transform-job-definition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-package-validation-profile
                    'make-model-package-validation-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-package-validation-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-package-validation-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profile-name))
      (common-lisp:list
       (common-lisp:cons "ProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transform-job-definition))
      (common-lisp:list
       (common-lisp:cons "TransformJobDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-package-validation-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype model-package-validation-profiles ()
   '(trivial-types:proper-list model-package-validation-profile))
 (common-lisp:defun |make-model-package-validation-profiles|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            model-package-validation-profile))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (model-package-validation-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-package-validation-specification-"))
   (validation-role (common-lisp:error ":validation-role is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (validation-profiles (common-lisp:error ":validation-profiles is required")
    :type (common-lisp:or model-package-validation-profiles common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-package-validation-specification
                    'make-model-package-validation-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-package-validation-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-package-validation-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-role))
      (common-lisp:list
       (common-lisp:cons "ValidationRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-profiles))
      (common-lisp:list
       (common-lisp:cons "ValidationProfiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-package-validation-specification))
   common-lisp:nil))
(common-lisp:deftype model-package-version () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (model-quality (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-quality-"))
   (statistics common-lisp:nil :type
    (common-lisp:or metrics-source common-lisp:null))
   (constraints common-lisp:nil :type
    (common-lisp:or metrics-source common-lisp:null)))
 (common-lisp:export (common-lisp:list 'model-quality 'make-model-quality))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-quality))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-quality))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics))
      (common-lisp:list
       (common-lisp:cons "Statistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'constraints))
      (common-lisp:list
       (common-lisp:cons "Constraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-quality))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (model-quality-app-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-quality-app-specification-"))
   (image-uri (common-lisp:error ":image-uri is required") :type
    (common-lisp:or image-uri common-lisp:null))
   (container-entrypoint common-lisp:nil :type
    (common-lisp:or container-entrypoint common-lisp:null))
   (container-arguments common-lisp:nil :type
    (common-lisp:or monitoring-container-arguments common-lisp:null))
   (record-preprocessor-source-uri common-lisp:nil :type
    (common-lisp:or s3uri common-lisp:null))
   (post-analytics-processor-source-uri common-lisp:nil :type
    (common-lisp:or s3uri common-lisp:null))
   (problem-type common-lisp:nil :type
    (common-lisp:or monitoring-problem-type common-lisp:null))
   (environment common-lisp:nil :type
    (common-lisp:or monitoring-environment-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-quality-app-specification
                    'make-model-quality-app-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-quality-app-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-quality-app-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-uri))
      (common-lisp:list
       (common-lisp:cons "ImageUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-entrypoint))
      (common-lisp:list
       (common-lisp:cons "ContainerEntrypoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-arguments))
      (common-lisp:list
       (common-lisp:cons "ContainerArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'record-preprocessor-source-uri))
      (common-lisp:list
       (common-lisp:cons "RecordPreprocessorSourceUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-analytics-processor-source-uri))
      (common-lisp:list
       (common-lisp:cons "PostAnalyticsProcessorSourceUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'problem-type))
      (common-lisp:list
       (common-lisp:cons "ProblemType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-quality-app-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (model-quality-baseline-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-quality-baseline-config-"))
   (baselining-job-name common-lisp:nil :type
    (common-lisp:or processing-job-name common-lisp:null))
   (constraints-resource common-lisp:nil :type
    (common-lisp:or monitoring-constraints-resource common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-quality-baseline-config
                    'make-model-quality-baseline-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-quality-baseline-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-quality-baseline-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baselining-job-name))
      (common-lisp:list
       (common-lisp:cons "BaseliningJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'constraints-resource))
      (common-lisp:list
       (common-lisp:cons "ConstraintsResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-quality-baseline-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (model-quality-job-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-quality-job-input-"))
   (endpoint-input common-lisp:nil :type
    (common-lisp:or endpoint-input common-lisp:null))
   (batch-transform-input common-lisp:nil :type
    (common-lisp:or batch-transform-input common-lisp:null))
   (ground-truth-s3input
    (common-lisp:error ":ground-truth-s3input is required") :type
    (common-lisp:or monitoring-ground-truth-s3input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-quality-job-input 'make-model-quality-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-quality-job-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-quality-job-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-input))
      (common-lisp:list
       (common-lisp:cons "EndpointInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-transform-input))
      (common-lisp:list
       (common-lisp:cons "BatchTransformInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ground-truth-s3input))
      (common-lisp:list
       (common-lisp:cons "GroundTruthS3Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-quality-job-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (model-register-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-register-settings-"))
   (status common-lisp:nil :type
    (common-lisp:or feature-status common-lisp:null))
   (cross-account-model-register-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-register-settings 'make-model-register-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-register-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-register-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'cross-account-model-register-role-arn))
      (common-lisp:list
       (common-lisp:cons "CrossAccountModelRegisterRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-register-settings))
   common-lisp:nil))
(common-lisp:deftype model-sort-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (model-step-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-step-metadata-"))
   (arn common-lisp:nil :type (common-lisp:or string256 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-step-metadata 'make-model-step-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-step-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-step-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-step-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (model-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-summary-"))
   (model-name (common-lisp:error ":model-name is required") :type
    (common-lisp:or model-name common-lisp:null))
   (model-arn (common-lisp:error ":model-arn is required") :type
    (common-lisp:or model-arn common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'model-summary 'make-model-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-arn))
      (common-lisp:list
       (common-lisp:cons "ModelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype model-summary-list ()
   '(trivial-types:proper-list model-summary))
 (common-lisp:defun |make-model-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list model-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype model-variant-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype model-variant-action-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-model-variant-action-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (model-variant-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-variant-config-"))
   (model-name (common-lisp:error ":model-name is required") :type
    (common-lisp:or model-name common-lisp:null))
   (variant-name (common-lisp:error ":variant-name is required") :type
    (common-lisp:or model-variant-name common-lisp:null))
   (infrastructure-config
    (common-lisp:error ":infrastructure-config is required") :type
    (common-lisp:or model-infrastructure-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-variant-config 'make-model-variant-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input model-variant-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input model-variant-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variant-name))
      (common-lisp:list
       (common-lisp:cons "VariantName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'infrastructure-config))
      (common-lisp:list
       (common-lisp:cons "InfrastructureConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input model-variant-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype model-variant-config-list ()
   '(trivial-types:proper-list model-variant-config))
 (common-lisp:defun |make-model-variant-config-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list model-variant-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (model-variant-config-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-model-variant-config-summary-"))
   (model-name (common-lisp:error ":model-name is required") :type
    (common-lisp:or model-name common-lisp:null))
   (variant-name (common-lisp:error ":variant-name is required") :type
    (common-lisp:or model-variant-name common-lisp:null))
   (infrastructure-config
    (common-lisp:error ":infrastructure-config is required") :type
    (common-lisp:or model-infrastructure-config common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or model-variant-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'model-variant-config-summary
                    'make-model-variant-config-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          model-variant-config-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          model-variant-config-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variant-name))
      (common-lisp:list
       (common-lisp:cons "VariantName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'infrastructure-config))
      (common-lisp:list
       (common-lisp:cons "InfrastructureConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          model-variant-config-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype model-variant-config-summary-list ()
   '(trivial-types:proper-list model-variant-config-summary))
 (common-lisp:defun |make-model-variant-config-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            model-variant-config-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype model-variant-name () 'common-lisp:string)
(common-lisp:deftype model-variant-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-alert-actions (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-alert-actions-"))
   (model-dashboard-indicator common-lisp:nil :type
    (common-lisp:or model-dashboard-indicator-action common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitoring-alert-actions 'make-monitoring-alert-actions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-alert-actions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-alert-actions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-dashboard-indicator))
      (common-lisp:list
       (common-lisp:cons "ModelDashboardIndicator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-alert-actions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype monitoring-alert-history-list ()
   '(trivial-types:proper-list monitoring-alert-history-summary))
 (common-lisp:defun |make-monitoring-alert-history-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            monitoring-alert-history-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype monitoring-alert-history-sort-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-alert-history-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-alert-history-summary-"))
   (monitoring-schedule-name
    (common-lisp:error ":monitoring-schedule-name is required") :type
    (common-lisp:or monitoring-schedule-name common-lisp:null))
   (monitoring-alert-name
    (common-lisp:error ":monitoring-alert-name is required") :type
    (common-lisp:or monitoring-alert-name common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (alert-status (common-lisp:error ":alert-status is required") :type
    (common-lisp:or monitoring-alert-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitoring-alert-history-summary
                    'make-monitoring-alert-history-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-alert-history-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-alert-history-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-name))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-alert-name))
      (common-lisp:list
       (common-lisp:cons "MonitoringAlertName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-status))
      (common-lisp:list
       (common-lisp:cons "AlertStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-alert-history-summary))
   common-lisp:nil))
(common-lisp:deftype monitoring-alert-name () 'common-lisp:string)
(common-lisp:deftype monitoring-alert-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-alert-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-alert-summary-"))
   (monitoring-alert-name
    (common-lisp:error ":monitoring-alert-name is required") :type
    (common-lisp:or monitoring-alert-name common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (alert-status (common-lisp:error ":alert-status is required") :type
    (common-lisp:or monitoring-alert-status common-lisp:null))
   (datapoints-to-alert (common-lisp:error ":datapoints-to-alert is required")
    :type (common-lisp:or monitoring-datapoints-to-alert common-lisp:null))
   (evaluation-period (common-lisp:error ":evaluation-period is required")
    :type (common-lisp:or monitoring-evaluation-period common-lisp:null))
   (actions (common-lisp:error ":actions is required") :type
    (common-lisp:or monitoring-alert-actions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitoring-alert-summary 'make-monitoring-alert-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-alert-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-alert-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-alert-name))
      (common-lisp:list
       (common-lisp:cons "MonitoringAlertName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alert-status))
      (common-lisp:list
       (common-lisp:cons "AlertStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datapoints-to-alert))
      (common-lisp:list
       (common-lisp:cons "DatapointsToAlert"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-period))
      (common-lisp:list
       (common-lisp:cons "EvaluationPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'actions))
      (common-lisp:list
       (common-lisp:cons "Actions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-alert-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype monitoring-alert-summary-list ()
   '(trivial-types:proper-list monitoring-alert-summary))
 (common-lisp:defun |make-monitoring-alert-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            monitoring-alert-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-app-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-app-specification-"))
   (image-uri (common-lisp:error ":image-uri is required") :type
    (common-lisp:or image-uri common-lisp:null))
   (container-entrypoint common-lisp:nil :type
    (common-lisp:or container-entrypoint common-lisp:null))
   (container-arguments common-lisp:nil :type
    (common-lisp:or monitoring-container-arguments common-lisp:null))
   (record-preprocessor-source-uri common-lisp:nil :type
    (common-lisp:or s3uri common-lisp:null))
   (post-analytics-processor-source-uri common-lisp:nil :type
    (common-lisp:or s3uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitoring-app-specification
                    'make-monitoring-app-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-app-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-app-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-uri))
      (common-lisp:list
       (common-lisp:cons "ImageUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-entrypoint))
      (common-lisp:list
       (common-lisp:cons "ContainerEntrypoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-arguments))
      (common-lisp:list
       (common-lisp:cons "ContainerArguments"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'record-preprocessor-source-uri))
      (common-lisp:list
       (common-lisp:cons "RecordPreprocessorSourceUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'post-analytics-processor-source-uri))
      (common-lisp:list
       (common-lisp:cons "PostAnalyticsProcessorSourceUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-app-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-baseline-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-baseline-config-"))
   (baselining-job-name common-lisp:nil :type
    (common-lisp:or processing-job-name common-lisp:null))
   (constraints-resource common-lisp:nil :type
    (common-lisp:or monitoring-constraints-resource common-lisp:null))
   (statistics-resource common-lisp:nil :type
    (common-lisp:or monitoring-statistics-resource common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitoring-baseline-config
                    'make-monitoring-baseline-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-baseline-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-baseline-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baselining-job-name))
      (common-lisp:list
       (common-lisp:cons "BaseliningJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'constraints-resource))
      (common-lisp:list
       (common-lisp:cons "ConstraintsResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'statistics-resource))
      (common-lisp:list
       (common-lisp:cons "StatisticsResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-baseline-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-cluster-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-cluster-config-"))
   (instance-count (common-lisp:error ":instance-count is required") :type
    (common-lisp:or processing-instance-count common-lisp:null))
   (instance-type (common-lisp:error ":instance-type is required") :type
    (common-lisp:or processing-instance-type common-lisp:null))
   (volume-size-in-gb (common-lisp:error ":volume-size-in-gb is required")
    :type (common-lisp:or processing-volume-size-in-gb common-lisp:null))
   (volume-kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitoring-cluster-config
                    'make-monitoring-cluster-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-cluster-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-cluster-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "VolumeSizeInGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "VolumeKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-cluster-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-constraints-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-constraints-resource-"))
   (s3uri common-lisp:nil :type (common-lisp:or s3uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitoring-constraints-resource
                    'make-monitoring-constraints-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-constraints-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-constraints-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-constraints-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype monitoring-container-arguments ()
   '(trivial-types:proper-list container-argument))
 (common-lisp:defun |make-monitoring-container-arguments|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list container-argument))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-csv-dataset-format (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-csv-dataset-format-"))
   (header common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitoring-csv-dataset-format
                    'make-monitoring-csv-dataset-format))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-csv-dataset-format))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-csv-dataset-format))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'header))
      (common-lisp:list
       (common-lisp:cons "Header"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-csv-dataset-format))
   common-lisp:nil))
(common-lisp:deftype monitoring-datapoints-to-alert () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-dataset-format (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-dataset-format-"))
   (csv common-lisp:nil :type
    (common-lisp:or monitoring-csv-dataset-format common-lisp:null))
   (json common-lisp:nil :type
    (common-lisp:or monitoring-json-dataset-format common-lisp:null))
   (parquet common-lisp:nil :type
    (common-lisp:or monitoring-parquet-dataset-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitoring-dataset-format
                    'make-monitoring-dataset-format))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-dataset-format))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-dataset-format))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csv))
      (common-lisp:list
       (common-lisp:cons "Csv"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'json))
      (common-lisp:list
       (common-lisp:cons "Json"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parquet))
      (common-lisp:list
       (common-lisp:cons "Parquet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-dataset-format))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype monitoring-environment-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-monitoring-environment-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype monitoring-evaluation-period () 'common-lisp:integer)
(common-lisp:deftype monitoring-execution-sort-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-execution-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-execution-summary-"))
   (monitoring-schedule-name
    (common-lisp:error ":monitoring-schedule-name is required") :type
    (common-lisp:or monitoring-schedule-name common-lisp:null))
   (scheduled-time (common-lisp:error ":scheduled-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (monitoring-execution-status
    (common-lisp:error ":monitoring-execution-status is required") :type
    (common-lisp:or execution-status common-lisp:null))
   (processing-job-arn common-lisp:nil :type
    (common-lisp:or processing-job-arn common-lisp:null))
   (endpoint-name common-lisp:nil :type
    (common-lisp:or endpoint-name common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (monitoring-job-definition-name common-lisp:nil :type
    (common-lisp:or monitoring-job-definition-name common-lisp:null))
   (monitoring-type common-lisp:nil :type
    (common-lisp:or monitoring-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitoring-execution-summary
                    'make-monitoring-execution-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-execution-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-execution-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-name))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scheduled-time))
      (common-lisp:list
       (common-lisp:cons "ScheduledTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-execution-status))
      (common-lisp:list
       (common-lisp:cons "MonitoringExecutionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-job-arn))
      (common-lisp:list
       (common-lisp:cons "ProcessingJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-job-definition-name))
      (common-lisp:list
       (common-lisp:cons "MonitoringJobDefinitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-type))
      (common-lisp:list
       (common-lisp:cons "MonitoringType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-execution-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype monitoring-execution-summary-list ()
   '(trivial-types:proper-list monitoring-execution-summary))
 (common-lisp:defun |make-monitoring-execution-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            monitoring-execution-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-ground-truth-s3input (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-ground-truth-s3input-"))
   (s3uri common-lisp:nil :type
    (common-lisp:or monitoring-s3uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitoring-ground-truth-s3input
                    'make-monitoring-ground-truth-s3input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-ground-truth-s3input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-ground-truth-s3input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-ground-truth-s3input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-input-"))
   (endpoint-input common-lisp:nil :type
    (common-lisp:or endpoint-input common-lisp:null))
   (batch-transform-input common-lisp:nil :type
    (common-lisp:or batch-transform-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitoring-input 'make-monitoring-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input monitoring-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input monitoring-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-input))
      (common-lisp:list
       (common-lisp:cons "EndpointInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'batch-transform-input))
      (common-lisp:list
       (common-lisp:cons "BatchTransformInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input monitoring-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype monitoring-inputs ()
   '(trivial-types:proper-list monitoring-input))
 (common-lisp:defun |make-monitoring-inputs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list monitoring-input))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-job-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-job-definition-"))
   (baseline-config common-lisp:nil :type
    (common-lisp:or monitoring-baseline-config common-lisp:null))
   (monitoring-inputs (common-lisp:error ":monitoring-inputs is required")
    :type (common-lisp:or monitoring-inputs common-lisp:null))
   (monitoring-output-config
    (common-lisp:error ":monitoring-output-config is required") :type
    (common-lisp:or monitoring-output-config common-lisp:null))
   (monitoring-resources
    (common-lisp:error ":monitoring-resources is required") :type
    (common-lisp:or monitoring-resources common-lisp:null))
   (monitoring-app-specification
    (common-lisp:error ":monitoring-app-specification is required") :type
    (common-lisp:or monitoring-app-specification common-lisp:null))
   (stopping-condition common-lisp:nil :type
    (common-lisp:or monitoring-stopping-condition common-lisp:null))
   (environment common-lisp:nil :type
    (common-lisp:or monitoring-environment-map common-lisp:null))
   (network-config common-lisp:nil :type
    (common-lisp:or network-config common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitoring-job-definition
                    'make-monitoring-job-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-job-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-job-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'baseline-config))
      (common-lisp:list
       (common-lisp:cons "BaselineConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-inputs))
      (common-lisp:list
       (common-lisp:cons "MonitoringInputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-output-config))
      (common-lisp:list
       (common-lisp:cons "MonitoringOutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-resources))
      (common-lisp:list
       (common-lisp:cons "MonitoringResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-app-specification))
      (common-lisp:list
       (common-lisp:cons "MonitoringAppSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-condition))
      (common-lisp:list
       (common-lisp:cons "StoppingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-config))
      (common-lisp:list
       (common-lisp:cons "NetworkConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-job-definition))
   common-lisp:nil))
(common-lisp:deftype monitoring-job-definition-arn () 'common-lisp:string)
(common-lisp:deftype monitoring-job-definition-name () 'common-lisp:string)
(common-lisp:deftype monitoring-job-definition-sort-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-job-definition-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-job-definition-summary-"))
   (monitoring-job-definition-name
    (common-lisp:error ":monitoring-job-definition-name is required") :type
    (common-lisp:or monitoring-job-definition-name common-lisp:null))
   (monitoring-job-definition-arn
    (common-lisp:error ":monitoring-job-definition-arn is required") :type
    (common-lisp:or monitoring-job-definition-arn common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (endpoint-name (common-lisp:error ":endpoint-name is required") :type
    (common-lisp:or endpoint-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitoring-job-definition-summary
                    'make-monitoring-job-definition-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-job-definition-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-job-definition-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-job-definition-name))
      (common-lisp:list
       (common-lisp:cons "MonitoringJobDefinitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-job-definition-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringJobDefinitionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-job-definition-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype monitoring-job-definition-summary-list ()
   '(trivial-types:proper-list monitoring-job-definition-summary))
 (common-lisp:defun |make-monitoring-job-definition-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            monitoring-job-definition-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-json-dataset-format (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-json-dataset-format-"))
   (line common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitoring-json-dataset-format
                    'make-monitoring-json-dataset-format))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-json-dataset-format))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-json-dataset-format))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line))
      (common-lisp:list
       (common-lisp:cons "Line"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-json-dataset-format))
   common-lisp:nil))
(common-lisp:deftype monitoring-max-runtime-in-seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-network-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-network-config-"))
   (enable-inter-container-traffic-encryption common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (enable-network-isolation common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (vpc-config common-lisp:nil :type
    (common-lisp:or vpc-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitoring-network-config
                    'make-monitoring-network-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-network-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-network-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-inter-container-traffic-encryption))
      (common-lisp:list
       (common-lisp:cons "EnableInterContainerTrafficEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-network-isolation))
      (common-lisp:list
       (common-lisp:cons "EnableNetworkIsolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-network-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-output-"))
   (s3output (common-lisp:error ":s3output is required") :type
    (common-lisp:or monitoring-s3output common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitoring-output 'make-monitoring-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input monitoring-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input monitoring-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3output))
      (common-lisp:list
       (common-lisp:cons "S3Output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input monitoring-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-output-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-output-config-"))
   (monitoring-outputs (common-lisp:error ":monitoring-outputs is required")
    :type (common-lisp:or monitoring-outputs common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitoring-output-config 'make-monitoring-output-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-output-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-output-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-outputs))
      (common-lisp:list
       (common-lisp:cons "MonitoringOutputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-output-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype monitoring-outputs ()
   '(trivial-types:proper-list monitoring-output))
 (common-lisp:defun |make-monitoring-outputs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list monitoring-output))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-parquet-dataset-format (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-parquet-dataset-format-")))
 (common-lisp:export
  (common-lisp:list 'monitoring-parquet-dataset-format
                    'make-monitoring-parquet-dataset-format))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-parquet-dataset-format))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-parquet-dataset-format))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-parquet-dataset-format))
   common-lisp:nil))
(common-lisp:deftype monitoring-problem-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-resources (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-resources-"))
   (cluster-config (common-lisp:error ":cluster-config is required") :type
    (common-lisp:or monitoring-cluster-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitoring-resources 'make-monitoring-resources))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input monitoring-resources))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input monitoring-resources))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-config))
      (common-lisp:list
       (common-lisp:cons "ClusterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input monitoring-resources))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-s3output (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-s3output-"))
   (s3uri (common-lisp:error ":s3uri is required") :type
    (common-lisp:or monitoring-s3uri common-lisp:null))
   (local-path (common-lisp:error ":local-path is required") :type
    (common-lisp:or processing-local-path common-lisp:null))
   (s3upload-mode common-lisp:nil :type
    (common-lisp:or processing-s3upload-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitoring-s3output 'make-monitoring-s3output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input monitoring-s3output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input monitoring-s3output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-path))
      (common-lisp:list
       (common-lisp:cons "LocalPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3upload-mode))
      (common-lisp:list
       (common-lisp:cons "S3UploadMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input monitoring-s3output))
   common-lisp:nil))
(common-lisp:deftype monitoring-s3uri () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-schedule (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-schedule-"))
   (monitoring-schedule-arn common-lisp:nil :type
    (common-lisp:or monitoring-schedule-arn common-lisp:null))
   (monitoring-schedule-name common-lisp:nil :type
    (common-lisp:or monitoring-schedule-name common-lisp:null))
   (monitoring-schedule-status common-lisp:nil :type
    (common-lisp:or schedule-status common-lisp:null))
   (monitoring-type common-lisp:nil :type
    (common-lisp:or monitoring-type common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (monitoring-schedule-config common-lisp:nil :type
    (common-lisp:or monitoring-schedule-config common-lisp:null))
   (endpoint-name common-lisp:nil :type
    (common-lisp:or endpoint-name common-lisp:null))
   (last-monitoring-execution-summary common-lisp:nil :type
    (common-lisp:or monitoring-execution-summary common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitoring-schedule 'make-monitoring-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input monitoring-schedule))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input monitoring-schedule))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-name))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-status))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-type))
      (common-lisp:list
       (common-lisp:cons "MonitoringType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-config))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-monitoring-execution-summary))
      (common-lisp:list
       (common-lisp:cons "LastMonitoringExecutionSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input monitoring-schedule))
   common-lisp:nil))
(common-lisp:deftype monitoring-schedule-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-schedule-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-schedule-config-"))
   (schedule-config common-lisp:nil :type
    (common-lisp:or schedule-config common-lisp:null))
   (monitoring-job-definition common-lisp:nil :type
    (common-lisp:or monitoring-job-definition common-lisp:null))
   (monitoring-job-definition-name common-lisp:nil :type
    (common-lisp:or monitoring-job-definition-name common-lisp:null))
   (monitoring-type common-lisp:nil :type
    (common-lisp:or monitoring-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitoring-schedule-config
                    'make-monitoring-schedule-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-schedule-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-schedule-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-config))
      (common-lisp:list
       (common-lisp:cons "ScheduleConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-job-definition))
      (common-lisp:list
       (common-lisp:cons "MonitoringJobDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-job-definition-name))
      (common-lisp:list
       (common-lisp:cons "MonitoringJobDefinitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-type))
      (common-lisp:list
       (common-lisp:cons "MonitoringType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-schedule-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype monitoring-schedule-list ()
   '(trivial-types:proper-list monitoring-schedule))
 (common-lisp:defun |make-monitoring-schedule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list monitoring-schedule))
   aws-sdk/generator/shape::members))
(common-lisp:deftype monitoring-schedule-name () 'common-lisp:string)
(common-lisp:deftype monitoring-schedule-sort-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-schedule-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-schedule-summary-"))
   (monitoring-schedule-name
    (common-lisp:error ":monitoring-schedule-name is required") :type
    (common-lisp:or monitoring-schedule-name common-lisp:null))
   (monitoring-schedule-arn
    (common-lisp:error ":monitoring-schedule-arn is required") :type
    (common-lisp:or monitoring-schedule-arn common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time (common-lisp:error ":last-modified-time is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (monitoring-schedule-status
    (common-lisp:error ":monitoring-schedule-status is required") :type
    (common-lisp:or schedule-status common-lisp:null))
   (endpoint-name common-lisp:nil :type
    (common-lisp:or endpoint-name common-lisp:null))
   (monitoring-job-definition-name common-lisp:nil :type
    (common-lisp:or monitoring-job-definition-name common-lisp:null))
   (monitoring-type common-lisp:nil :type
    (common-lisp:or monitoring-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitoring-schedule-summary
                    'make-monitoring-schedule-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-schedule-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-schedule-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-name))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-status))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-job-definition-name))
      (common-lisp:list
       (common-lisp:cons "MonitoringJobDefinitionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'monitoring-type))
      (common-lisp:list
       (common-lisp:cons "MonitoringType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-schedule-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype monitoring-schedule-summary-list ()
   '(trivial-types:proper-list monitoring-schedule-summary))
 (common-lisp:defun |make-monitoring-schedule-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            monitoring-schedule-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-statistics-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-statistics-resource-"))
   (s3uri common-lisp:nil :type (common-lisp:or s3uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitoring-statistics-resource
                    'make-monitoring-statistics-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-statistics-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-statistics-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-statistics-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (monitoring-stopping-condition (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitoring-stopping-condition-"))
   (max-runtime-in-seconds
    (common-lisp:error ":max-runtime-in-seconds is required") :type
    (common-lisp:or monitoring-max-runtime-in-seconds common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitoring-stopping-condition
                    'make-monitoring-stopping-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-stopping-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-stopping-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-runtime-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaxRuntimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitoring-stopping-condition))
   common-lisp:nil))
(common-lisp:deftype monitoring-time-offset-string () 'common-lisp:string)
(common-lisp:deftype monitoring-type () 'common-lisp:string)
(common-lisp:deftype mount-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (multi-model-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-multi-model-config-"))
   (model-cache-setting common-lisp:nil :type
    (common-lisp:or model-cache-setting common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'multi-model-config 'make-multi-model-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input multi-model-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input multi-model-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-cache-setting))
      (common-lisp:list
       (common-lisp:cons "ModelCacheSetting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input multi-model-config))
   common-lisp:nil))
(common-lisp:deftype name-contains () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (neo-vpc-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-neo-vpc-config-"))
   (security-group-ids (common-lisp:error ":security-group-ids is required")
    :type (common-lisp:or neo-vpc-security-group-ids common-lisp:null))
   (subnets (common-lisp:error ":subnets is required") :type
    (common-lisp:or neo-vpc-subnets common-lisp:null)))
 (common-lisp:export (common-lisp:list 'neo-vpc-config 'make-neo-vpc-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input neo-vpc-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input neo-vpc-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input neo-vpc-config))
   common-lisp:nil))
(common-lisp:deftype neo-vpc-security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype neo-vpc-security-group-ids ()
   '(trivial-types:proper-list neo-vpc-security-group-id))
 (common-lisp:defun |make-neo-vpc-security-group-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            neo-vpc-security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype neo-vpc-subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype neo-vpc-subnets ()
   '(trivial-types:proper-list neo-vpc-subnet-id))
 (common-lisp:defun |make-neo-vpc-subnets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list neo-vpc-subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (nested-filters (:copier common-lisp:nil)
      (:conc-name "struct-shape-nested-filters-"))
   (nested-property-name
    (common-lisp:error ":nested-property-name is required") :type
    (common-lisp:or resource-property-name common-lisp:null))
   (filters (common-lisp:error ":filters is required") :type
    (common-lisp:or filter-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'nested-filters 'make-nested-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input nested-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input nested-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'nested-property-name))
      (common-lisp:list
       (common-lisp:cons "NestedPropertyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input nested-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype nested-filters-list ()
   '(trivial-types:proper-list nested-filters))
 (common-lisp:defun |make-nested-filters-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list nested-filters))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (network-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-config-"))
   (enable-inter-container-traffic-encryption common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (enable-network-isolation common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (vpc-config common-lisp:nil :type
    (common-lisp:or vpc-config common-lisp:null)))
 (common-lisp:export (common-lisp:list 'network-config 'make-network-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-inter-container-traffic-encryption))
      (common-lisp:list
       (common-lisp:cons "EnableInterContainerTrafficEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-network-isolation))
      (common-lisp:list
       (common-lisp:cons "EnableNetworkIsolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-config))
   common-lisp:nil))
(common-lisp:deftype network-interface-id () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype notebook-instance-accelerator-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype notebook-instance-accelerator-types ()
   '(trivial-types:proper-list notebook-instance-accelerator-type))
 (common-lisp:defun |make-notebook-instance-accelerator-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            notebook-instance-accelerator-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype notebook-instance-arn () 'common-lisp:string)
(common-lisp:deftype notebook-instance-lifecycle-config-arn ()
  'common-lisp:string)
(common-lisp:deftype notebook-instance-lifecycle-config-content ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype notebook-instance-lifecycle-config-list ()
   '(trivial-types:proper-list notebook-instance-lifecycle-hook))
 (common-lisp:defun |make-notebook-instance-lifecycle-config-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            notebook-instance-lifecycle-hook))
   aws-sdk/generator/shape::members))
(common-lisp:deftype notebook-instance-lifecycle-config-name ()
  'common-lisp:string)
(common-lisp:deftype notebook-instance-lifecycle-config-name-contains ()
  'common-lisp:string)
(common-lisp:deftype notebook-instance-lifecycle-config-sort-key ()
  'common-lisp:string)
(common-lisp:deftype notebook-instance-lifecycle-config-sort-order ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (notebook-instance-lifecycle-config-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-notebook-instance-lifecycle-config-summary-"))
   (notebook-instance-lifecycle-config-name
    (common-lisp:error ":notebook-instance-lifecycle-config-name is required")
    :type
    (common-lisp:or notebook-instance-lifecycle-config-name common-lisp:null))
   (notebook-instance-lifecycle-config-arn
    (common-lisp:error ":notebook-instance-lifecycle-config-arn is required")
    :type
    (common-lisp:or notebook-instance-lifecycle-config-arn common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or last-modified-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'notebook-instance-lifecycle-config-summary
                    'make-notebook-instance-lifecycle-config-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notebook-instance-lifecycle-config-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notebook-instance-lifecycle-config-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-lifecycle-config-name))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceLifecycleConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-lifecycle-config-arn))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceLifecycleConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notebook-instance-lifecycle-config-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype notebook-instance-lifecycle-config-summary-list ()
   '(trivial-types:proper-list notebook-instance-lifecycle-config-summary))
 (common-lisp:defun |make-notebook-instance-lifecycle-config-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            notebook-instance-lifecycle-config-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (notebook-instance-lifecycle-hook (:copier common-lisp:nil)
      (:conc-name "struct-shape-notebook-instance-lifecycle-hook-"))
   (content common-lisp:nil :type
    (common-lisp:or notebook-instance-lifecycle-config-content
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'notebook-instance-lifecycle-hook
                    'make-notebook-instance-lifecycle-hook))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notebook-instance-lifecycle-hook))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notebook-instance-lifecycle-hook))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notebook-instance-lifecycle-hook))
   common-lisp:nil))
(common-lisp:deftype notebook-instance-name () 'common-lisp:string)
(common-lisp:deftype notebook-instance-name-contains () 'common-lisp:string)
(common-lisp:deftype notebook-instance-sort-key () 'common-lisp:string)
(common-lisp:deftype notebook-instance-sort-order () 'common-lisp:string)
(common-lisp:deftype notebook-instance-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (notebook-instance-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-notebook-instance-summary-"))
   (notebook-instance-name
    (common-lisp:error ":notebook-instance-name is required") :type
    (common-lisp:or notebook-instance-name common-lisp:null))
   (notebook-instance-arn
    (common-lisp:error ":notebook-instance-arn is required") :type
    (common-lisp:or notebook-instance-arn common-lisp:null))
   (notebook-instance-status common-lisp:nil :type
    (common-lisp:or notebook-instance-status common-lisp:null))
   (url common-lisp:nil :type
    (common-lisp:or notebook-instance-url common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or instance-type common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or last-modified-time common-lisp:null))
   (notebook-instance-lifecycle-config-name common-lisp:nil :type
    (common-lisp:or notebook-instance-lifecycle-config-name common-lisp:null))
   (default-code-repository common-lisp:nil :type
    (common-lisp:or code-repository-name-or-url common-lisp:null))
   (additional-code-repositories common-lisp:nil :type
    (common-lisp:or additional-code-repository-names-or-urls
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'notebook-instance-summary
                    'make-notebook-instance-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notebook-instance-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notebook-instance-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-name))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-arn))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-status))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-lifecycle-config-name))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceLifecycleConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-code-repository))
      (common-lisp:list
       (common-lisp:cons "DefaultCodeRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-code-repositories))
      (common-lisp:list
       (common-lisp:cons "AdditionalCodeRepositories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notebook-instance-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype notebook-instance-summary-list ()
   '(trivial-types:proper-list notebook-instance-summary))
 (common-lisp:defun |make-notebook-instance-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            notebook-instance-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype notebook-instance-url () 'common-lisp:string)
(common-lisp:deftype notebook-instance-volume-size-in-gb ()
  'common-lisp:integer)
(common-lisp:deftype notebook-output-option () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (notification-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-notification-configuration-"))
   (notification-topic-arn common-lisp:nil :type
    (common-lisp:or notification-topic-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'notification-configuration
                    'make-notification-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-topic-arn))
      (common-lisp:list
       (common-lisp:cons "NotificationTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          notification-configuration))
   common-lisp:nil))
(common-lisp:deftype notification-topic-arn () 'common-lisp:string)
(common-lisp:deftype number-of-human-workers-per-data-object ()
  'common-lisp:integer)
(common-lisp:deftype objective-status () 'common-lisp:string)
(common-lisp:deftype objective-status-counter () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (objective-status-counters (:copier common-lisp:nil)
      (:conc-name "struct-shape-objective-status-counters-"))
   (succeeded common-lisp:nil :type
    (common-lisp:or objective-status-counter common-lisp:null))
   (pending common-lisp:nil :type
    (common-lisp:or objective-status-counter common-lisp:null))
   (failed common-lisp:nil :type
    (common-lisp:or objective-status-counter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'objective-status-counters
                    'make-objective-status-counters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          objective-status-counters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          objective-status-counters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'succeeded))
      (common-lisp:list
       (common-lisp:cons "Succeeded"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pending))
      (common-lisp:list
       (common-lisp:cons "Pending"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed))
      (common-lisp:list
       (common-lisp:cons "Failed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          objective-status-counters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (offline-store-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-offline-store-config-"))
   (s3storage-config (common-lisp:error ":s3storage-config is required") :type
    (common-lisp:or s3storage-config common-lisp:null))
   (disable-glue-table-creation common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (data-catalog-config common-lisp:nil :type
    (common-lisp:or data-catalog-config common-lisp:null))
   (table-format common-lisp:nil :type
    (common-lisp:or table-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'offline-store-config 'make-offline-store-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input offline-store-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input offline-store-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3storage-config))
      (common-lisp:list
       (common-lisp:cons "S3StorageConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disable-glue-table-creation))
      (common-lisp:list
       (common-lisp:cons "DisableGlueTableCreation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-catalog-config))
      (common-lisp:list
       (common-lisp:cons "DataCatalogConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'table-format))
      (common-lisp:list
       (common-lisp:cons "TableFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input offline-store-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (offline-store-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-offline-store-status-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or offline-store-status-value common-lisp:null))
   (blocked-reason common-lisp:nil :type
    (common-lisp:or blocked-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'offline-store-status 'make-offline-store-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input offline-store-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input offline-store-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'blocked-reason))
      (common-lisp:list
       (common-lisp:cons "BlockedReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input offline-store-status))
   common-lisp:nil))
(common-lisp:deftype offline-store-status-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (oidc-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-oidc-config-"))
   (client-id (common-lisp:error ":client-id is required") :type
    (common-lisp:or client-id common-lisp:null))
   (client-secret (common-lisp:error ":client-secret is required") :type
    (common-lisp:or client-secret common-lisp:null))
   (issuer (common-lisp:error ":issuer is required") :type
    (common-lisp:or oidc-endpoint common-lisp:null))
   (authorization-endpoint
    (common-lisp:error ":authorization-endpoint is required") :type
    (common-lisp:or oidc-endpoint common-lisp:null))
   (token-endpoint (common-lisp:error ":token-endpoint is required") :type
    (common-lisp:or oidc-endpoint common-lisp:null))
   (user-info-endpoint (common-lisp:error ":user-info-endpoint is required")
    :type (common-lisp:or oidc-endpoint common-lisp:null))
   (logout-endpoint (common-lisp:error ":logout-endpoint is required") :type
    (common-lisp:or oidc-endpoint common-lisp:null))
   (jwks-uri (common-lisp:error ":jwks-uri is required") :type
    (common-lisp:or oidc-endpoint common-lisp:null)))
 (common-lisp:export (common-lisp:list 'oidc-config 'make-oidc-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input oidc-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input oidc-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-secret))
      (common-lisp:list
       (common-lisp:cons "ClientSecret"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "Issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorization-endpoint))
      (common-lisp:list
       (common-lisp:cons "AuthorizationEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-endpoint))
      (common-lisp:list
       (common-lisp:cons "TokenEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-info-endpoint))
      (common-lisp:list
       (common-lisp:cons "UserInfoEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logout-endpoint))
      (common-lisp:list
       (common-lisp:cons "LogoutEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jwks-uri))
      (common-lisp:list
       (common-lisp:cons "JwksUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input oidc-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (oidc-config-for-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-oidc-config-for-response-"))
   (client-id common-lisp:nil :type
    (common-lisp:or client-id common-lisp:null))
   (issuer common-lisp:nil :type
    (common-lisp:or oidc-endpoint common-lisp:null))
   (authorization-endpoint common-lisp:nil :type
    (common-lisp:or oidc-endpoint common-lisp:null))
   (token-endpoint common-lisp:nil :type
    (common-lisp:or oidc-endpoint common-lisp:null))
   (user-info-endpoint common-lisp:nil :type
    (common-lisp:or oidc-endpoint common-lisp:null))
   (logout-endpoint common-lisp:nil :type
    (common-lisp:or oidc-endpoint common-lisp:null))
   (jwks-uri common-lisp:nil :type
    (common-lisp:or oidc-endpoint common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'oidc-config-for-response 'make-oidc-config-for-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          oidc-config-for-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          oidc-config-for-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'issuer))
      (common-lisp:list
       (common-lisp:cons "Issuer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authorization-endpoint))
      (common-lisp:list
       (common-lisp:cons "AuthorizationEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'token-endpoint))
      (common-lisp:list
       (common-lisp:cons "TokenEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-info-endpoint))
      (common-lisp:list
       (common-lisp:cons "UserInfoEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logout-endpoint))
      (common-lisp:list
       (common-lisp:cons "LogoutEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'jwks-uri))
      (common-lisp:list
       (common-lisp:cons "JwksUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          oidc-config-for-response))
   common-lisp:nil))
(common-lisp:deftype oidc-endpoint () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (oidc-member-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-oidc-member-definition-"))
   (groups (common-lisp:error ":groups is required") :type
    (common-lisp:or groups common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'oidc-member-definition 'make-oidc-member-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          oidc-member-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          oidc-member-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          oidc-member-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (online-store-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-online-store-config-"))
   (security-config common-lisp:nil :type
    (common-lisp:or online-store-security-config common-lisp:null))
   (enable-online-store common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'online-store-config 'make-online-store-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input online-store-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input online-store-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-config))
      (common-lisp:list
       (common-lisp:cons "SecurityConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-online-store))
      (common-lisp:list
       (common-lisp:cons "EnableOnlineStore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input online-store-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (online-store-security-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-online-store-security-config-"))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'online-store-security-config
                    'make-online-store-security-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          online-store-security-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          online-store-security-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          online-store-security-config))
   common-lisp:nil))
(common-lisp:deftype online-store-total-size-bytes () 'common-lisp:integer)
(common-lisp:deftype operator () 'common-lisp:string)
(common-lisp:deftype optional-double () 'common-lisp:double-float)
(common-lisp:deftype optional-integer () 'common-lisp:integer)
(common-lisp:deftype optional-volume-size-in-gb () 'common-lisp:integer)
(common-lisp:deftype order-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (output-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-output-config-"))
   (s3output-location (common-lisp:error ":s3output-location is required")
    :type (common-lisp:or s3uri common-lisp:null))
   (target-device common-lisp:nil :type
    (common-lisp:or target-device common-lisp:null))
   (target-platform common-lisp:nil :type
    (common-lisp:or target-platform common-lisp:null))
   (compiler-options common-lisp:nil :type
    (common-lisp:or compiler-options common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'output-config 'make-output-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3output-location))
      (common-lisp:list
       (common-lisp:cons "S3OutputLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-device))
      (common-lisp:list
       (common-lisp:cons "TargetDevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-platform))
      (common-lisp:list
       (common-lisp:cons "TargetPlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compiler-options))
      (common-lisp:list
       (common-lisp:cons "CompilerOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (output-data-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-output-data-config-"))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (s3output-path (common-lisp:error ":s3output-path is required") :type
    (common-lisp:or s3uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'output-data-config 'make-output-data-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-data-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-data-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3output-path))
      (common-lisp:list
       (common-lisp:cons "S3OutputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-data-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (output-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-output-parameter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or string256 common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or string1024 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'output-parameter 'make-output-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input output-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input output-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input output-parameter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype output-parameter-list ()
   '(trivial-types:proper-list output-parameter))
 (common-lisp:defun |make-output-parameter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (parallelism-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-parallelism-configuration-"))
   (max-parallel-execution-steps
    (common-lisp:error ":max-parallel-execution-steps is required") :type
    (common-lisp:or max-parallel-execution-steps common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'parallelism-configuration
                    'make-parallelism-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parallelism-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parallelism-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-parallel-execution-steps))
      (common-lisp:list
       (common-lisp:cons "MaxParallelExecutionSteps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parallelism-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-parameter-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or pipeline-parameter-name common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or string1024 common-lisp:null)))
 (common-lisp:export (common-lisp:list 'parameter 'make-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter))
   common-lisp:nil))
(common-lisp:deftype parameter-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parameter-list () '(trivial-types:proper-list parameter))
 (common-lisp:defun |make-parameter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype parameter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (parameter-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-parameter-range-"))
   (integer-parameter-range-specification common-lisp:nil :type
    (common-lisp:or integer-parameter-range-specification common-lisp:null))
   (continuous-parameter-range-specification common-lisp:nil :type
    (common-lisp:or continuous-parameter-range-specification common-lisp:null))
   (categorical-parameter-range-specification common-lisp:nil :type
    (common-lisp:or categorical-parameter-range-specification
                    common-lisp:null)))
 (common-lisp:export (common-lisp:list 'parameter-range 'make-parameter-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'integer-parameter-range-specification))
      (common-lisp:list
       (common-lisp:cons "IntegerParameterRangeSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'continuous-parameter-range-specification))
      (common-lisp:list
       (common-lisp:cons "ContinuousParameterRangeSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'categorical-parameter-range-specification))
      (common-lisp:list
       (common-lisp:cons "CategoricalParameterRangeSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (parameter-ranges (:copier common-lisp:nil)
      (:conc-name "struct-shape-parameter-ranges-"))
   (integer-parameter-ranges common-lisp:nil :type
    (common-lisp:or integer-parameter-ranges common-lisp:null))
   (continuous-parameter-ranges common-lisp:nil :type
    (common-lisp:or continuous-parameter-ranges common-lisp:null))
   (categorical-parameter-ranges common-lisp:nil :type
    (common-lisp:or categorical-parameter-ranges common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'parameter-ranges 'make-parameter-ranges))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parameter-ranges))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parameter-ranges))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'integer-parameter-ranges))
      (common-lisp:list
       (common-lisp:cons "IntegerParameterRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'continuous-parameter-ranges))
      (common-lisp:list
       (common-lisp:cons "ContinuousParameterRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'categorical-parameter-ranges))
      (common-lisp:list
       (common-lisp:cons "CategoricalParameterRanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parameter-ranges))
   common-lisp:nil))
(common-lisp:deftype parameter-type () 'common-lisp:string)
(common-lisp:deftype parameter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype parameter-values ()
   '(trivial-types:proper-list parameter-value))
 (common-lisp:defun |make-parameter-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (parent (:copier common-lisp:nil) (:conc-name "struct-shape-parent-"))
   (trial-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (experiment-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'parent 'make-parent))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input parent))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input parent))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-name))
      (common-lisp:list
       (common-lisp:cons "TrialName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-name))
      (common-lisp:list
       (common-lisp:cons "ExperimentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input parent))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (parent-hyper-parameter-tuning-job (:copier common-lisp:nil)
      (:conc-name "struct-shape-parent-hyper-parameter-tuning-job-"))
   (hyper-parameter-tuning-job-name common-lisp:nil :type
    (common-lisp:or hyper-parameter-tuning-job-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'parent-hyper-parameter-tuning-job
                    'make-parent-hyper-parameter-tuning-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          parent-hyper-parameter-tuning-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          parent-hyper-parameter-tuning-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hyper-parameter-tuning-job-name))
      (common-lisp:list
       (common-lisp:cons "HyperParameterTuningJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          parent-hyper-parameter-tuning-job))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype parent-hyper-parameter-tuning-jobs ()
   '(trivial-types:proper-list parent-hyper-parameter-tuning-job))
 (common-lisp:defun |make-parent-hyper-parameter-tuning-jobs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            parent-hyper-parameter-tuning-job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype parents () '(trivial-types:proper-list parent))
 (common-lisp:defun |make-parents|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parent))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (pending-deployment-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-pending-deployment-summary-"))
   (endpoint-config-name
    (common-lisp:error ":endpoint-config-name is required") :type
    (common-lisp:or endpoint-config-name common-lisp:null))
   (production-variants common-lisp:nil :type
    (common-lisp:or pending-production-variant-summary-list common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (shadow-production-variants common-lisp:nil :type
    (common-lisp:or pending-production-variant-summary-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pending-deployment-summary
                    'make-pending-deployment-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-deployment-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-deployment-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-config-name))
      (common-lisp:list
       (common-lisp:cons "EndpointConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'production-variants))
      (common-lisp:list
       (common-lisp:cons "ProductionVariants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shadow-production-variants))
      (common-lisp:list
       (common-lisp:cons "ShadowProductionVariants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-deployment-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pending-production-variant-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-pending-production-variant-summary-"))
   (variant-name (common-lisp:error ":variant-name is required") :type
    (common-lisp:or variant-name common-lisp:null))
   (deployed-images common-lisp:nil :type
    (common-lisp:or deployed-images common-lisp:null))
   (current-weight common-lisp:nil :type
    (common-lisp:or variant-weight common-lisp:null))
   (desired-weight common-lisp:nil :type
    (common-lisp:or variant-weight common-lisp:null))
   (current-instance-count common-lisp:nil :type
    (common-lisp:or task-count common-lisp:null))
   (desired-instance-count common-lisp:nil :type
    (common-lisp:or task-count common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or production-variant-instance-type common-lisp:null))
   (accelerator-type common-lisp:nil :type
    (common-lisp:or production-variant-accelerator-type common-lisp:null))
   (variant-status common-lisp:nil :type
    (common-lisp:or production-variant-status-list common-lisp:null))
   (current-serverless-config common-lisp:nil :type
    (common-lisp:or production-variant-serverless-config common-lisp:null))
   (desired-serverless-config common-lisp:nil :type
    (common-lisp:or production-variant-serverless-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pending-production-variant-summary
                    'make-pending-production-variant-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pending-production-variant-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pending-production-variant-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variant-name))
      (common-lisp:list
       (common-lisp:cons "VariantName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployed-images))
      (common-lisp:list
       (common-lisp:cons "DeployedImages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-weight))
      (common-lisp:list
       (common-lisp:cons "CurrentWeight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-weight))
      (common-lisp:list
       (common-lisp:cons "DesiredWeight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-instance-count))
      (common-lisp:list
       (common-lisp:cons "CurrentInstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'desired-instance-count))
      (common-lisp:list
       (common-lisp:cons "DesiredInstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-type))
      (common-lisp:list
       (common-lisp:cons "AcceleratorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variant-status))
      (common-lisp:list
       (common-lisp:cons "VariantStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-serverless-config))
      (common-lisp:list
       (common-lisp:cons "CurrentServerlessConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'desired-serverless-config))
      (common-lisp:list
       (common-lisp:cons "DesiredServerlessConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pending-production-variant-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pending-production-variant-summary-list ()
   '(trivial-types:proper-list pending-production-variant-summary))
 (common-lisp:defun |make-pending-production-variant-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pending-production-variant-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype percentage () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (phase (:copier common-lisp:nil) (:conc-name "struct-shape-phase-"))
   (initial-number-of-users common-lisp:nil :type
    (common-lisp:or initial-number-of-users common-lisp:null))
   (spawn-rate common-lisp:nil :type
    (common-lisp:or spawn-rate common-lisp:null))
   (duration-in-seconds common-lisp:nil :type
    (common-lisp:or traffic-duration-in-seconds common-lisp:null)))
 (common-lisp:export (common-lisp:list 'phase 'make-phase))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input phase))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input phase))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-number-of-users))
      (common-lisp:list
       (common-lisp:cons "InitialNumberOfUsers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'spawn-rate))
      (common-lisp:list
       (common-lisp:cons "SpawnRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "DurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input phase))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype phases () '(trivial-types:proper-list phase))
 (common-lisp:defun |make-phases|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list phase))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (pipeline (:copier common-lisp:nil) (:conc-name "struct-shape-pipeline-"))
   (pipeline-arn common-lisp:nil :type
    (common-lisp:or pipeline-arn common-lisp:null))
   (pipeline-name common-lisp:nil :type
    (common-lisp:or pipeline-name common-lisp:null))
   (pipeline-display-name common-lisp:nil :type
    (common-lisp:or pipeline-name common-lisp:null))
   (pipeline-description common-lisp:nil :type
    (common-lisp:or pipeline-description common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (pipeline-status common-lisp:nil :type
    (common-lisp:or pipeline-status common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-run-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (parallelism-configuration common-lisp:nil :type
    (common-lisp:or parallelism-configuration common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'pipeline 'make-pipeline))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pipeline))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pipeline))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "PipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "PipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-display-name))
      (common-lisp:list
       (common-lisp:cons "PipelineDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-description))
      (common-lisp:list
       (common-lisp:cons "PipelineDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-status))
      (common-lisp:list
       (common-lisp:cons "PipelineStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-run-time))
      (common-lisp:list
       (common-lisp:cons "LastRunTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallelism-configuration))
      (common-lisp:list
       (common-lisp:cons "ParallelismConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pipeline))
   common-lisp:nil))
(common-lisp:deftype pipeline-arn () 'common-lisp:string)
(common-lisp:deftype pipeline-definition () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (pipeline-definition-s3location (:copier common-lisp:nil)
      (:conc-name "struct-shape-pipeline-definition-s3location-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket-name common-lisp:null))
   (object-key (common-lisp:error ":object-key is required") :type
    (common-lisp:or key common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pipeline-definition-s3location
                    'make-pipeline-definition-s3location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-definition-s3location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-definition-s3location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'object-key))
      (common-lisp:list
       (common-lisp:cons "ObjectKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-definition-s3location))
   common-lisp:nil))
(common-lisp:deftype pipeline-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (pipeline-execution (:copier common-lisp:nil)
      (:conc-name "struct-shape-pipeline-execution-"))
   (pipeline-arn common-lisp:nil :type
    (common-lisp:or pipeline-arn common-lisp:null))
   (pipeline-execution-arn common-lisp:nil :type
    (common-lisp:or pipeline-execution-arn common-lisp:null))
   (pipeline-execution-display-name common-lisp:nil :type
    (common-lisp:or pipeline-execution-name common-lisp:null))
   (pipeline-execution-status common-lisp:nil :type
    (common-lisp:or pipeline-execution-status common-lisp:null))
   (pipeline-execution-description common-lisp:nil :type
    (common-lisp:or pipeline-execution-description common-lisp:null))
   (pipeline-experiment-config common-lisp:nil :type
    (common-lisp:or pipeline-experiment-config common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or pipeline-execution-failure-reason common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (parallelism-configuration common-lisp:nil :type
    (common-lisp:or parallelism-configuration common-lisp:null))
   (pipeline-parameters common-lisp:nil :type
    (common-lisp:or parameter-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pipeline-execution 'make-pipeline-execution))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pipeline-execution))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pipeline-execution))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "PipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-arn))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-display-name))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-status))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-description))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-experiment-config))
      (common-lisp:list
       (common-lisp:cons "PipelineExperimentConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallelism-configuration))
      (common-lisp:list
       (common-lisp:cons "ParallelismConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-parameters))
      (common-lisp:list
       (common-lisp:cons "PipelineParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pipeline-execution))
   common-lisp:nil))
(common-lisp:deftype pipeline-execution-arn () 'common-lisp:string)
(common-lisp:deftype pipeline-execution-description () 'common-lisp:string)
(common-lisp:deftype pipeline-execution-failure-reason () 'common-lisp:string)
(common-lisp:deftype pipeline-execution-name () 'common-lisp:string)
(common-lisp:deftype pipeline-execution-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (pipeline-execution-step (:copier common-lisp:nil)
      (:conc-name "struct-shape-pipeline-execution-step-"))
   (step-name common-lisp:nil :type
    (common-lisp:or step-name common-lisp:null))
   (step-display-name common-lisp:nil :type
    (common-lisp:or step-display-name common-lisp:null))
   (step-description common-lisp:nil :type
    (common-lisp:or step-description common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (step-status common-lisp:nil :type
    (common-lisp:or step-status common-lisp:null))
   (cache-hit-result common-lisp:nil :type
    (common-lisp:or cache-hit-result common-lisp:null))
   (attempt-count common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (metadata common-lisp:nil :type
    (common-lisp:or pipeline-execution-step-metadata common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pipeline-execution-step 'make-pipeline-execution-step))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-execution-step))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-execution-step))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-name))
      (common-lisp:list
       (common-lisp:cons "StepName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-display-name))
      (common-lisp:list
       (common-lisp:cons "StepDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-description))
      (common-lisp:list
       (common-lisp:cons "StepDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'step-status))
      (common-lisp:list
       (common-lisp:cons "StepStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cache-hit-result))
      (common-lisp:list
       (common-lisp:cons "CacheHitResult"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attempt-count))
      (common-lisp:list
       (common-lisp:cons "AttemptCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "Metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-execution-step))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pipeline-execution-step-list ()
   '(trivial-types:proper-list pipeline-execution-step))
 (common-lisp:defun |make-pipeline-execution-step-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pipeline-execution-step))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (pipeline-execution-step-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-pipeline-execution-step-metadata-"))
   (training-job common-lisp:nil :type
    (common-lisp:or training-job-step-metadata common-lisp:null))
   (processing-job common-lisp:nil :type
    (common-lisp:or processing-job-step-metadata common-lisp:null))
   (transform-job common-lisp:nil :type
    (common-lisp:or transform-job-step-metadata common-lisp:null))
   (tuning-job common-lisp:nil :type
    (common-lisp:or tuning-job-step-meta-data common-lisp:null))
   (model common-lisp:nil :type
    (common-lisp:or model-step-metadata common-lisp:null))
   (register-model common-lisp:nil :type
    (common-lisp:or register-model-step-metadata common-lisp:null))
   (condition common-lisp:nil :type
    (common-lisp:or condition-step-metadata common-lisp:null))
   (callback common-lisp:nil :type
    (common-lisp:or callback-step-metadata common-lisp:null))
   (lambda common-lisp:nil :type
    (common-lisp:or lambda-step-metadata common-lisp:null))
   (quality-check common-lisp:nil :type
    (common-lisp:or quality-check-step-metadata common-lisp:null))
   (clarify-check common-lisp:nil :type
    (common-lisp:or clarify-check-step-metadata common-lisp:null))
   (emr common-lisp:nil :type
    (common-lisp:or emrstep-metadata common-lisp:null))
   (fail common-lisp:nil :type
    (common-lisp:or fail-step-metadata common-lisp:null))
   (auto-mljob common-lisp:nil :type
    (common-lisp:or auto-mljob-step-metadata common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pipeline-execution-step-metadata
                    'make-pipeline-execution-step-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-execution-step-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-execution-step-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-job))
      (common-lisp:list
       (common-lisp:cons "TrainingJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-job))
      (common-lisp:list
       (common-lisp:cons "ProcessingJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-job))
      (common-lisp:list
       (common-lisp:cons "TransformJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tuning-job))
      (common-lisp:list
       (common-lisp:cons "TuningJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model))
      (common-lisp:list
       (common-lisp:cons "Model"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'register-model))
      (common-lisp:list
       (common-lisp:cons "RegisterModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'condition))
      (common-lisp:list
       (common-lisp:cons "Condition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'callback))
      (common-lisp:list
       (common-lisp:cons "Callback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lambda))
      (common-lisp:list
       (common-lisp:cons "Lambda"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quality-check))
      (common-lisp:list
       (common-lisp:cons "QualityCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clarify-check))
      (common-lisp:list
       (common-lisp:cons "ClarifyCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'emr))
      (common-lisp:list
       (common-lisp:cons "EMR"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fail))
      (common-lisp:list
       (common-lisp:cons "Fail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mljob))
      (common-lisp:list
       (common-lisp:cons "AutoMLJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-execution-step-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pipeline-execution-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-pipeline-execution-summary-"))
   (pipeline-execution-arn common-lisp:nil :type
    (common-lisp:or pipeline-execution-arn common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (pipeline-execution-status common-lisp:nil :type
    (common-lisp:or pipeline-execution-status common-lisp:null))
   (pipeline-execution-description common-lisp:nil :type
    (common-lisp:or pipeline-execution-description common-lisp:null))
   (pipeline-execution-display-name common-lisp:nil :type
    (common-lisp:or pipeline-execution-name common-lisp:null))
   (pipeline-execution-failure-reason common-lisp:nil :type
    (common-lisp:or string3072 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pipeline-execution-summary
                    'make-pipeline-execution-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-execution-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-execution-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-arn))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-status))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-description))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-display-name))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-failure-reason))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionFailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-execution-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pipeline-execution-summary-list ()
   '(trivial-types:proper-list pipeline-execution-summary))
 (common-lisp:defun |make-pipeline-execution-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pipeline-execution-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (pipeline-experiment-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-pipeline-experiment-config-"))
   (experiment-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (trial-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pipeline-experiment-config
                    'make-pipeline-experiment-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-experiment-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-experiment-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-name))
      (common-lisp:list
       (common-lisp:cons "ExperimentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-name))
      (common-lisp:list
       (common-lisp:cons "TrialName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pipeline-experiment-config))
   common-lisp:nil))
(common-lisp:deftype pipeline-name () 'common-lisp:string)
(common-lisp:deftype pipeline-name-or-arn () 'common-lisp:string)
(common-lisp:deftype pipeline-parameter-name () 'common-lisp:string)
(common-lisp:deftype pipeline-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (pipeline-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-pipeline-summary-"))
   (pipeline-arn common-lisp:nil :type
    (common-lisp:or pipeline-arn common-lisp:null))
   (pipeline-name common-lisp:nil :type
    (common-lisp:or pipeline-name common-lisp:null))
   (pipeline-display-name common-lisp:nil :type
    (common-lisp:or pipeline-name common-lisp:null))
   (pipeline-description common-lisp:nil :type
    (common-lisp:or pipeline-description common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-execution-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pipeline-summary 'make-pipeline-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pipeline-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pipeline-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "PipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "PipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-display-name))
      (common-lisp:list
       (common-lisp:cons "PipelineDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-description))
      (common-lisp:list
       (common-lisp:cons "PipelineDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-execution-time))
      (common-lisp:list
       (common-lisp:cons "LastExecutionTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pipeline-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype pipeline-summary-list ()
   '(trivial-types:proper-list pipeline-summary))
 (common-lisp:defun |make-pipeline-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pipeline-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype platform-identifier () 'common-lisp:string)
(common-lisp:deftype policy-string () 'common-lisp:string)
(common-lisp:deftype presigned-domain-url () 'common-lisp:string)
(common-lisp:deftype probability-threshold-attribute ()
  'common-lisp:double-float)
(common-lisp:deftype problem-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (processing-cluster-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-processing-cluster-config-"))
   (instance-count (common-lisp:error ":instance-count is required") :type
    (common-lisp:or processing-instance-count common-lisp:null))
   (instance-type (common-lisp:error ":instance-type is required") :type
    (common-lisp:or processing-instance-type common-lisp:null))
   (volume-size-in-gb (common-lisp:error ":volume-size-in-gb is required")
    :type (common-lisp:or processing-volume-size-in-gb common-lisp:null))
   (volume-kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'processing-cluster-config
                    'make-processing-cluster-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          processing-cluster-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          processing-cluster-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "VolumeSizeInGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "VolumeKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          processing-cluster-config))
   common-lisp:nil))
(common-lisp:deftype processing-environment-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype processing-environment-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-processing-environment-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype processing-environment-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (processing-feature-store-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-processing-feature-store-output-"))
   (feature-group-name (common-lisp:error ":feature-group-name is required")
    :type (common-lisp:or feature-group-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'processing-feature-store-output
                    'make-processing-feature-store-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          processing-feature-store-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          processing-feature-store-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-group-name))
      (common-lisp:list
       (common-lisp:cons "FeatureGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          processing-feature-store-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (processing-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-processing-input-"))
   (input-name (common-lisp:error ":input-name is required") :type
    (common-lisp:or string common-lisp:null))
   (app-managed common-lisp:nil :type
    (common-lisp:or app-managed common-lisp:null))
   (s3input common-lisp:nil :type
    (common-lisp:or processing-s3input common-lisp:null))
   (dataset-definition common-lisp:nil :type
    (common-lisp:or dataset-definition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'processing-input 'make-processing-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input processing-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input processing-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-name))
      (common-lisp:list
       (common-lisp:cons "InputName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-managed))
      (common-lisp:list
       (common-lisp:cons "AppManaged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3input))
      (common-lisp:list
       (common-lisp:cons "S3Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dataset-definition))
      (common-lisp:list
       (common-lisp:cons "DatasetDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input processing-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype processing-inputs ()
   '(trivial-types:proper-list processing-input))
 (common-lisp:defun |make-processing-inputs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list processing-input))
   aws-sdk/generator/shape::members))
(common-lisp:deftype processing-instance-count () 'common-lisp:integer)
(common-lisp:deftype processing-instance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (processing-job (:copier common-lisp:nil)
      (:conc-name "struct-shape-processing-job-"))
   (processing-inputs common-lisp:nil :type
    (common-lisp:or processing-inputs common-lisp:null))
   (processing-output-config common-lisp:nil :type
    (common-lisp:or processing-output-config common-lisp:null))
   (processing-job-name common-lisp:nil :type
    (common-lisp:or processing-job-name common-lisp:null))
   (processing-resources common-lisp:nil :type
    (common-lisp:or processing-resources common-lisp:null))
   (stopping-condition common-lisp:nil :type
    (common-lisp:or processing-stopping-condition common-lisp:null))
   (app-specification common-lisp:nil :type
    (common-lisp:or app-specification common-lisp:null))
   (environment common-lisp:nil :type
    (common-lisp:or processing-environment-map common-lisp:null))
   (network-config common-lisp:nil :type
    (common-lisp:or network-config common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (experiment-config common-lisp:nil :type
    (common-lisp:or experiment-config common-lisp:null))
   (processing-job-arn common-lisp:nil :type
    (common-lisp:or processing-job-arn common-lisp:null))
   (processing-job-status common-lisp:nil :type
    (common-lisp:or processing-job-status common-lisp:null))
   (exit-message common-lisp:nil :type
    (common-lisp:or exit-message common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (processing-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (processing-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (monitoring-schedule-arn common-lisp:nil :type
    (common-lisp:or monitoring-schedule-arn common-lisp:null))
   (auto-mljob-arn common-lisp:nil :type
    (common-lisp:or auto-mljob-arn common-lisp:null))
   (training-job-arn common-lisp:nil :type
    (common-lisp:or training-job-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'processing-job 'make-processing-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input processing-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input processing-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-inputs))
      (common-lisp:list
       (common-lisp:cons "ProcessingInputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'processing-output-config))
      (common-lisp:list
       (common-lisp:cons "ProcessingOutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-job-name))
      (common-lisp:list
       (common-lisp:cons "ProcessingJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'processing-resources))
      (common-lisp:list
       (common-lisp:cons "ProcessingResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-condition))
      (common-lisp:list
       (common-lisp:cons "StoppingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-specification))
      (common-lisp:list
       (common-lisp:cons "AppSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-config))
      (common-lisp:list
       (common-lisp:cons "NetworkConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-config))
      (common-lisp:list
       (common-lisp:cons "ExperimentConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-job-arn))
      (common-lisp:list
       (common-lisp:cons "ProcessingJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'processing-job-status))
      (common-lisp:list
       (common-lisp:cons "ProcessingJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exit-message))
      (common-lisp:list
       (common-lisp:cons "ExitMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-end-time))
      (common-lisp:list
       (common-lisp:cons "ProcessingEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'processing-start-time))
      (common-lisp:list
       (common-lisp:cons "ProcessingStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mljob-arn))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-job-arn))
      (common-lisp:list
       (common-lisp:cons "TrainingJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input processing-job))
   common-lisp:nil))
(common-lisp:deftype processing-job-arn () 'common-lisp:string)
(common-lisp:deftype processing-job-name () 'common-lisp:string)
(common-lisp:deftype processing-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (processing-job-step-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-processing-job-step-metadata-"))
   (arn common-lisp:nil :type
    (common-lisp:or processing-job-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'processing-job-step-metadata
                    'make-processing-job-step-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          processing-job-step-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          processing-job-step-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          processing-job-step-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype processing-job-summaries ()
   '(trivial-types:proper-list processing-job-summary))
 (common-lisp:defun |make-processing-job-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list processing-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (processing-job-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-processing-job-summary-"))
   (processing-job-name (common-lisp:error ":processing-job-name is required")
    :type (common-lisp:or processing-job-name common-lisp:null))
   (processing-job-arn (common-lisp:error ":processing-job-arn is required")
    :type (common-lisp:or processing-job-arn common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (processing-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (processing-job-status
    (common-lisp:error ":processing-job-status is required") :type
    (common-lisp:or processing-job-status common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (exit-message common-lisp:nil :type
    (common-lisp:or exit-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'processing-job-summary 'make-processing-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          processing-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          processing-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-job-name))
      (common-lisp:list
       (common-lisp:cons "ProcessingJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-job-arn))
      (common-lisp:list
       (common-lisp:cons "ProcessingJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-end-time))
      (common-lisp:list
       (common-lisp:cons "ProcessingEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'processing-job-status))
      (common-lisp:list
       (common-lisp:cons "ProcessingJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exit-message))
      (common-lisp:list
       (common-lisp:cons "ExitMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          processing-job-summary))
   common-lisp:nil))
(common-lisp:deftype processing-local-path () 'common-lisp:string)
(common-lisp:deftype processing-max-runtime-in-seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (processing-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-processing-output-"))
   (output-name (common-lisp:error ":output-name is required") :type
    (common-lisp:or string common-lisp:null))
   (s3output common-lisp:nil :type
    (common-lisp:or processing-s3output common-lisp:null))
   (feature-store-output common-lisp:nil :type
    (common-lisp:or processing-feature-store-output common-lisp:null))
   (app-managed common-lisp:nil :type
    (common-lisp:or app-managed common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'processing-output 'make-processing-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input processing-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input processing-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-name))
      (common-lisp:list
       (common-lisp:cons "OutputName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3output))
      (common-lisp:list
       (common-lisp:cons "S3Output"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'feature-store-output))
      (common-lisp:list
       (common-lisp:cons "FeatureStoreOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-managed))
      (common-lisp:list
       (common-lisp:cons "AppManaged"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input processing-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (processing-output-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-processing-output-config-"))
   (outputs (common-lisp:error ":outputs is required") :type
    (common-lisp:or processing-outputs common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'processing-output-config 'make-processing-output-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          processing-output-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          processing-output-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'outputs))
      (common-lisp:list
       (common-lisp:cons "Outputs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          processing-output-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype processing-outputs ()
   '(trivial-types:proper-list processing-output))
 (common-lisp:defun |make-processing-outputs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list processing-output))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (processing-resources (:copier common-lisp:nil)
      (:conc-name "struct-shape-processing-resources-"))
   (cluster-config (common-lisp:error ":cluster-config is required") :type
    (common-lisp:or processing-cluster-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'processing-resources 'make-processing-resources))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input processing-resources))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input processing-resources))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-config))
      (common-lisp:list
       (common-lisp:cons "ClusterConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input processing-resources))
   common-lisp:nil))
(common-lisp:deftype processing-s3compression-type () 'common-lisp:string)
(common-lisp:deftype processing-s3data-distribution-type () 'common-lisp:string)
(common-lisp:deftype processing-s3data-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (processing-s3input (:copier common-lisp:nil)
      (:conc-name "struct-shape-processing-s3input-"))
   (s3uri (common-lisp:error ":s3uri is required") :type
    (common-lisp:or s3uri common-lisp:null))
   (local-path common-lisp:nil :type
    (common-lisp:or processing-local-path common-lisp:null))
   (s3data-type (common-lisp:error ":s3data-type is required") :type
    (common-lisp:or processing-s3data-type common-lisp:null))
   (s3input-mode common-lisp:nil :type
    (common-lisp:or processing-s3input-mode common-lisp:null))
   (s3data-distribution-type common-lisp:nil :type
    (common-lisp:or processing-s3data-distribution-type common-lisp:null))
   (s3compression-type common-lisp:nil :type
    (common-lisp:or processing-s3compression-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'processing-s3input 'make-processing-s3input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input processing-s3input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input processing-s3input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-path))
      (common-lisp:list
       (common-lisp:cons "LocalPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3data-type))
      (common-lisp:list
       (common-lisp:cons "S3DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3input-mode))
      (common-lisp:list
       (common-lisp:cons "S3InputMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3data-distribution-type))
      (common-lisp:list
       (common-lisp:cons "S3DataDistributionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3compression-type))
      (common-lisp:list
       (common-lisp:cons "S3CompressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input processing-s3input))
   common-lisp:nil))
(common-lisp:deftype processing-s3input-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (processing-s3output (:copier common-lisp:nil)
      (:conc-name "struct-shape-processing-s3output-"))
   (s3uri (common-lisp:error ":s3uri is required") :type
    (common-lisp:or s3uri common-lisp:null))
   (local-path (common-lisp:error ":local-path is required") :type
    (common-lisp:or processing-local-path common-lisp:null))
   (s3upload-mode (common-lisp:error ":s3upload-mode is required") :type
    (common-lisp:or processing-s3upload-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'processing-s3output 'make-processing-s3output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input processing-s3output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input processing-s3output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-path))
      (common-lisp:list
       (common-lisp:cons "LocalPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3upload-mode))
      (common-lisp:list
       (common-lisp:cons "S3UploadMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input processing-s3output))
   common-lisp:nil))
(common-lisp:deftype processing-s3upload-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (processing-stopping-condition (:copier common-lisp:nil)
      (:conc-name "struct-shape-processing-stopping-condition-"))
   (max-runtime-in-seconds
    (common-lisp:error ":max-runtime-in-seconds is required") :type
    (common-lisp:or processing-max-runtime-in-seconds common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'processing-stopping-condition
                    'make-processing-stopping-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          processing-stopping-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          processing-stopping-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-runtime-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaxRuntimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          processing-stopping-condition))
   common-lisp:nil))
(common-lisp:deftype processing-volume-size-in-gb () 'common-lisp:integer)
(common-lisp:deftype processor () 'common-lisp:string)
(common-lisp:deftype product-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype product-listings () '(trivial-types:proper-list string))
 (common-lisp:defun |make-product-listings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (production-variant (:copier common-lisp:nil)
      (:conc-name "struct-shape-production-variant-"))
   (variant-name (common-lisp:error ":variant-name is required") :type
    (common-lisp:or variant-name common-lisp:null))
   (model-name (common-lisp:error ":model-name is required") :type
    (common-lisp:or model-name common-lisp:null))
   (initial-instance-count common-lisp:nil :type
    (common-lisp:or initial-task-count common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or production-variant-instance-type common-lisp:null))
   (initial-variant-weight common-lisp:nil :type
    (common-lisp:or variant-weight common-lisp:null))
   (accelerator-type common-lisp:nil :type
    (common-lisp:or production-variant-accelerator-type common-lisp:null))
   (core-dump-config common-lisp:nil :type
    (common-lisp:or production-variant-core-dump-config common-lisp:null))
   (serverless-config common-lisp:nil :type
    (common-lisp:or production-variant-serverless-config common-lisp:null))
   (volume-size-in-gb common-lisp:nil :type
    (common-lisp:or production-variant-volume-size-in-gb common-lisp:null))
   (model-data-download-timeout-in-seconds common-lisp:nil :type
    (common-lisp:or production-variant-model-data-download-timeout-in-seconds
                    common-lisp:null))
   (container-startup-health-check-timeout-in-seconds common-lisp:nil :type
    (common-lisp:or
     production-variant-container-startup-health-check-timeout-in-seconds
     common-lisp:null))
   (enable-ssmaccess common-lisp:nil :type
    (common-lisp:or production-variant-ssmaccess common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'production-variant 'make-production-variant))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input production-variant))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input production-variant))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variant-name))
      (common-lisp:list
       (common-lisp:cons "VariantName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-instance-count))
      (common-lisp:list
       (common-lisp:cons "InitialInstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initial-variant-weight))
      (common-lisp:list
       (common-lisp:cons "InitialVariantWeight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-type))
      (common-lisp:list
       (common-lisp:cons "AcceleratorType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'core-dump-config))
      (common-lisp:list
       (common-lisp:cons "CoreDumpConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serverless-config))
      (common-lisp:list
       (common-lisp:cons "ServerlessConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "VolumeSizeInGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-data-download-timeout-in-seconds))
      (common-lisp:list
       (common-lisp:cons "ModelDataDownloadTimeoutInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-startup-health-check-timeout-in-seconds))
      (common-lisp:list
       (common-lisp:cons "ContainerStartupHealthCheckTimeoutInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-ssmaccess))
      (common-lisp:list
       (common-lisp:cons "EnableSSMAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input production-variant))
   common-lisp:nil))
(common-lisp:deftype production-variant-accelerator-type () 'common-lisp:string)
(common-lisp:deftype production-variant-container-startup-health-check-timeout-in-seconds
                     ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (production-variant-core-dump-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-production-variant-core-dump-config-"))
   (destination-s3uri (common-lisp:error ":destination-s3uri is required")
    :type (common-lisp:or destination-s3uri common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'production-variant-core-dump-config
                    'make-production-variant-core-dump-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          production-variant-core-dump-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          production-variant-core-dump-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-s3uri))
      (common-lisp:list
       (common-lisp:cons "DestinationS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          production-variant-core-dump-config))
   common-lisp:nil))
(common-lisp:deftype production-variant-instance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype production-variant-list ()
   '(trivial-types:proper-list production-variant))
 (common-lisp:defun |make-production-variant-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list production-variant))
   aws-sdk/generator/shape::members))
(common-lisp:deftype production-variant-model-data-download-timeout-in-seconds
                     ()
  'common-lisp:integer)
(common-lisp:deftype production-variant-ssmaccess () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (production-variant-serverless-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-production-variant-serverless-config-"))
   (memory-size-in-mb (common-lisp:error ":memory-size-in-mb is required")
    :type (common-lisp:or serverless-memory-size-in-mb common-lisp:null))
   (max-concurrency (common-lisp:error ":max-concurrency is required") :type
    (common-lisp:or serverless-max-concurrency common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'production-variant-serverless-config
                    'make-production-variant-serverless-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          production-variant-serverless-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          production-variant-serverless-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-size-in-mb))
      (common-lisp:list
       (common-lisp:cons "MemorySizeInMB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrency))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          production-variant-serverless-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (production-variant-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-production-variant-status-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or variant-status common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or variant-status-message common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'production-variant-status
                    'make-production-variant-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          production-variant-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          production-variant-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          production-variant-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype production-variant-status-list ()
   '(trivial-types:proper-list production-variant-status))
 (common-lisp:defun |make-production-variant-status-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            production-variant-status))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (production-variant-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-production-variant-summary-"))
   (variant-name (common-lisp:error ":variant-name is required") :type
    (common-lisp:or variant-name common-lisp:null))
   (deployed-images common-lisp:nil :type
    (common-lisp:or deployed-images common-lisp:null))
   (current-weight common-lisp:nil :type
    (common-lisp:or variant-weight common-lisp:null))
   (desired-weight common-lisp:nil :type
    (common-lisp:or variant-weight common-lisp:null))
   (current-instance-count common-lisp:nil :type
    (common-lisp:or task-count common-lisp:null))
   (desired-instance-count common-lisp:nil :type
    (common-lisp:or task-count common-lisp:null))
   (variant-status common-lisp:nil :type
    (common-lisp:or production-variant-status-list common-lisp:null))
   (current-serverless-config common-lisp:nil :type
    (common-lisp:or production-variant-serverless-config common-lisp:null))
   (desired-serverless-config common-lisp:nil :type
    (common-lisp:or production-variant-serverless-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'production-variant-summary
                    'make-production-variant-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          production-variant-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          production-variant-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variant-name))
      (common-lisp:list
       (common-lisp:cons "VariantName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployed-images))
      (common-lisp:list
       (common-lisp:cons "DeployedImages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-weight))
      (common-lisp:list
       (common-lisp:cons "CurrentWeight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-weight))
      (common-lisp:list
       (common-lisp:cons "DesiredWeight"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-instance-count))
      (common-lisp:list
       (common-lisp:cons "CurrentInstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'desired-instance-count))
      (common-lisp:list
       (common-lisp:cons "DesiredInstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variant-status))
      (common-lisp:list
       (common-lisp:cons "VariantStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'current-serverless-config))
      (common-lisp:list
       (common-lisp:cons "CurrentServerlessConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'desired-serverless-config))
      (common-lisp:list
       (common-lisp:cons "DesiredServerlessConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          production-variant-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype production-variant-summary-list ()
   '(trivial-types:proper-list production-variant-summary))
 (common-lisp:defun |make-production-variant-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            production-variant-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype production-variant-volume-size-in-gb ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (profiler-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-profiler-config-"))
   (s3output-path common-lisp:nil :type
    (common-lisp:or s3uri common-lisp:null))
   (profiling-interval-in-milliseconds common-lisp:nil :type
    (common-lisp:or profiling-interval-in-milliseconds common-lisp:null))
   (profiling-parameters common-lisp:nil :type
    (common-lisp:or profiling-parameters common-lisp:null))
   (disable-profiler common-lisp:nil :type
    (common-lisp:or disable-profiler common-lisp:null)))
 (common-lisp:export (common-lisp:list 'profiler-config 'make-profiler-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input profiler-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input profiler-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3output-path))
      (common-lisp:list
       (common-lisp:cons "S3OutputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'profiling-interval-in-milliseconds))
      (common-lisp:list
       (common-lisp:cons "ProfilingIntervalInMilliseconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'profiling-parameters))
      (common-lisp:list
       (common-lisp:cons "ProfilingParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-profiler))
      (common-lisp:list
       (common-lisp:cons "DisableProfiler"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input profiler-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (profiler-config-for-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-profiler-config-for-update-"))
   (s3output-path common-lisp:nil :type
    (common-lisp:or s3uri common-lisp:null))
   (profiling-interval-in-milliseconds common-lisp:nil :type
    (common-lisp:or profiling-interval-in-milliseconds common-lisp:null))
   (profiling-parameters common-lisp:nil :type
    (common-lisp:or profiling-parameters common-lisp:null))
   (disable-profiler common-lisp:nil :type
    (common-lisp:or disable-profiler common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'profiler-config-for-update
                    'make-profiler-config-for-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          profiler-config-for-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          profiler-config-for-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3output-path))
      (common-lisp:list
       (common-lisp:cons "S3OutputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'profiling-interval-in-milliseconds))
      (common-lisp:list
       (common-lisp:cons "ProfilingIntervalInMilliseconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'profiling-parameters))
      (common-lisp:list
       (common-lisp:cons "ProfilingParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-profiler))
      (common-lisp:list
       (common-lisp:cons "DisableProfiler"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          profiler-config-for-update))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (profiler-rule-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-profiler-rule-configuration-"))
   (rule-configuration-name
    (common-lisp:error ":rule-configuration-name is required") :type
    (common-lisp:or rule-configuration-name common-lisp:null))
   (local-path common-lisp:nil :type
    (common-lisp:or directory-path common-lisp:null))
   (s3output-path common-lisp:nil :type
    (common-lisp:or s3uri common-lisp:null))
   (rule-evaluator-image
    (common-lisp:error ":rule-evaluator-image is required") :type
    (common-lisp:or algorithm-image common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or processing-instance-type common-lisp:null))
   (volume-size-in-gb common-lisp:nil :type
    (common-lisp:or optional-volume-size-in-gb common-lisp:null))
   (rule-parameters common-lisp:nil :type
    (common-lisp:or rule-parameters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'profiler-rule-configuration
                    'make-profiler-rule-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          profiler-rule-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          profiler-rule-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rule-configuration-name))
      (common-lisp:list
       (common-lisp:cons "RuleConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-path))
      (common-lisp:list
       (common-lisp:cons "LocalPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3output-path))
      (common-lisp:list
       (common-lisp:cons "S3OutputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rule-evaluator-image))
      (common-lisp:list
       (common-lisp:cons "RuleEvaluatorImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "VolumeSizeInGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-parameters))
      (common-lisp:list
       (common-lisp:cons "RuleParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          profiler-rule-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype profiler-rule-configurations ()
   '(trivial-types:proper-list profiler-rule-configuration))
 (common-lisp:defun |make-profiler-rule-configurations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            profiler-rule-configuration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (profiler-rule-evaluation-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-profiler-rule-evaluation-status-"))
   (rule-configuration-name common-lisp:nil :type
    (common-lisp:or rule-configuration-name common-lisp:null))
   (rule-evaluation-job-arn common-lisp:nil :type
    (common-lisp:or processing-job-arn common-lisp:null))
   (rule-evaluation-status common-lisp:nil :type
    (common-lisp:or rule-evaluation-status common-lisp:null))
   (status-details common-lisp:nil :type
    (common-lisp:or status-details common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'profiler-rule-evaluation-status
                    'make-profiler-rule-evaluation-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          profiler-rule-evaluation-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          profiler-rule-evaluation-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rule-configuration-name))
      (common-lisp:list
       (common-lisp:cons "RuleConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rule-evaluation-job-arn))
      (common-lisp:list
       (common-lisp:cons "RuleEvaluationJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rule-evaluation-status))
      (common-lisp:list
       (common-lisp:cons "RuleEvaluationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-details))
      (common-lisp:list
       (common-lisp:cons "StatusDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          profiler-rule-evaluation-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype profiler-rule-evaluation-statuses ()
   '(trivial-types:proper-list profiler-rule-evaluation-status))
 (common-lisp:defun |make-profiler-rule-evaluation-statuses|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            profiler-rule-evaluation-status))
   aws-sdk/generator/shape::members))
(common-lisp:deftype profiling-interval-in-milliseconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype profiling-parameters () 'common-lisp:hash-table)
 (common-lisp:defun |make-profiling-parameters|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype profiling-status () 'common-lisp:string)
(common-lisp:deftype programming-lang () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (project (:copier common-lisp:nil) (:conc-name "struct-shape-project-"))
   (project-arn common-lisp:nil :type
    (common-lisp:or project-arn common-lisp:null))
   (project-name common-lisp:nil :type
    (common-lisp:or project-entity-name common-lisp:null))
   (project-id common-lisp:nil :type
    (common-lisp:or project-id common-lisp:null))
   (project-description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (service-catalog-provisioning-details common-lisp:nil :type
    (common-lisp:or service-catalog-provisioning-details common-lisp:null))
   (service-catalog-provisioned-product-details common-lisp:nil :type
    (common-lisp:or service-catalog-provisioned-product-details
                    common-lisp:null))
   (project-status common-lisp:nil :type
    (common-lisp:or project-status common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null)))
 (common-lisp:export (common-lisp:list 'project 'make-project))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "ProjectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "ProjectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "ProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-description))
      (common-lisp:list
       (common-lisp:cons "ProjectDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-catalog-provisioning-details))
      (common-lisp:list
       (common-lisp:cons "ServiceCatalogProvisioningDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-catalog-provisioned-product-details))
      (common-lisp:list
       (common-lisp:cons "ServiceCatalogProvisionedProductDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-status))
      (common-lisp:list
       (common-lisp:cons "ProjectStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project))
   common-lisp:nil))
(common-lisp:deftype project-arn () 'common-lisp:string)
(common-lisp:deftype project-entity-name () 'common-lisp:string)
(common-lisp:deftype project-id () 'common-lisp:string)
(common-lisp:deftype project-sort-by () 'common-lisp:string)
(common-lisp:deftype project-sort-order () 'common-lisp:string)
(common-lisp:deftype project-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (project-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-project-summary-"))
   (project-name (common-lisp:error ":project-name is required") :type
    (common-lisp:or project-entity-name common-lisp:null))
   (project-description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (project-arn (common-lisp:error ":project-arn is required") :type
    (common-lisp:or project-arn common-lisp:null))
   (project-id (common-lisp:error ":project-id is required") :type
    (common-lisp:or project-id common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (project-status (common-lisp:error ":project-status is required") :type
    (common-lisp:or project-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'project-summary 'make-project-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "ProjectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-description))
      (common-lisp:list
       (common-lisp:cons "ProjectDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "ProjectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "ProjectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-status))
      (common-lisp:list
       (common-lisp:cons "ProjectStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype project-summary-list ()
   '(trivial-types:proper-list project-summary))
 (common-lisp:defun |make-project-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list project-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype property-name-hint () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (property-name-query (:copier common-lisp:nil)
      (:conc-name "struct-shape-property-name-query-"))
   (property-name-hint (common-lisp:error ":property-name-hint is required")
    :type (common-lisp:or property-name-hint common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'property-name-query 'make-property-name-query))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input property-name-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input property-name-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-name-hint))
      (common-lisp:list
       (common-lisp:cons "PropertyNameHint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input property-name-query))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (property-name-suggestion (:copier common-lisp:nil)
      (:conc-name "struct-shape-property-name-suggestion-"))
   (property-name common-lisp:nil :type
    (common-lisp:or resource-property-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'property-name-suggestion 'make-property-name-suggestion))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          property-name-suggestion))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          property-name-suggestion))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-name))
      (common-lisp:list
       (common-lisp:cons "PropertyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          property-name-suggestion))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype property-name-suggestion-list ()
   '(trivial-types:proper-list property-name-suggestion))
 (common-lisp:defun |make-property-name-suggestion-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            property-name-suggestion))
   aws-sdk/generator/shape::members))
(common-lisp:deftype provisioned-product-status-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (provisioning-parameter (:copier common-lisp:nil)
      (:conc-name "struct-shape-provisioning-parameter-"))
   (key common-lisp:nil :type
    (common-lisp:or provisioning-parameter-key common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or provisioning-parameter-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'provisioning-parameter 'make-provisioning-parameter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-parameter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-parameter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          provisioning-parameter))
   common-lisp:nil))
(common-lisp:deftype provisioning-parameter-key () 'common-lisp:string)
(common-lisp:deftype provisioning-parameter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype provisioning-parameters ()
   '(trivial-types:proper-list provisioning-parameter))
 (common-lisp:defun |make-provisioning-parameters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list provisioning-parameter))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (public-workforce-task-price (:copier common-lisp:nil)
      (:conc-name "struct-shape-public-workforce-task-price-"))
   (amount-in-usd common-lisp:nil :type (common-lisp:or usd common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'public-workforce-task-price
                    'make-public-workforce-task-price))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          public-workforce-task-price))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          public-workforce-task-price))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amount-in-usd))
      (common-lisp:list
       (common-lisp:cons "AmountInUsd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          public-workforce-task-price))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-model-package-group-policy-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-model-package-group-policy-input-"))
   (model-package-group-name
    (common-lisp:error ":model-package-group-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (resource-policy (common-lisp:error ":resource-policy is required") :type
    (common-lisp:or policy-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-model-package-group-policy-input
                    'make-put-model-package-group-policy-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-model-package-group-policy-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-model-package-group-policy-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-name))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-policy))
      (common-lisp:list
       (common-lisp:cons "ResourcePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-model-package-group-policy-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-model-package-group-policy-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-model-package-group-policy-output-"))
   (model-package-group-arn
    (common-lisp:error ":model-package-group-arn is required") :type
    (common-lisp:or model-package-group-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-model-package-group-policy-output
                    'make-put-model-package-group-policy-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-model-package-group-policy-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-model-package-group-policy-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-arn))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-model-package-group-policy-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (quality-check-step-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-quality-check-step-metadata-"))
   (check-type common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (baseline-used-for-drift-check-statistics common-lisp:nil :type
    (common-lisp:or string1024 common-lisp:null))
   (baseline-used-for-drift-check-constraints common-lisp:nil :type
    (common-lisp:or string1024 common-lisp:null))
   (calculated-baseline-statistics common-lisp:nil :type
    (common-lisp:or string1024 common-lisp:null))
   (calculated-baseline-constraints common-lisp:nil :type
    (common-lisp:or string1024 common-lisp:null))
   (model-package-group-name common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (violation-report common-lisp:nil :type
    (common-lisp:or string1024 common-lisp:null))
   (check-job-arn common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (skip-check common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (register-new-baseline common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'quality-check-step-metadata
                    'make-quality-check-step-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          quality-check-step-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          quality-check-step-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-type))
      (common-lisp:list
       (common-lisp:cons "CheckType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'baseline-used-for-drift-check-statistics))
      (common-lisp:list
       (common-lisp:cons "BaselineUsedForDriftCheckStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'baseline-used-for-drift-check-constraints))
      (common-lisp:list
       (common-lisp:cons "BaselineUsedForDriftCheckConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculated-baseline-statistics))
      (common-lisp:list
       (common-lisp:cons "CalculatedBaselineStatistics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'calculated-baseline-constraints))
      (common-lisp:list
       (common-lisp:cons "CalculatedBaselineConstraints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-group-name))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'violation-report))
      (common-lisp:list
       (common-lisp:cons "ViolationReport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'check-job-arn))
      (common-lisp:list
       (common-lisp:cons "CheckJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skip-check))
      (common-lisp:list
       (common-lisp:cons "SkipCheck"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'register-new-baseline))
      (common-lisp:list
       (common-lisp:cons "RegisterNewBaseline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          quality-check-step-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (query-filters (:copier common-lisp:nil)
      (:conc-name "struct-shape-query-filters-"))
   (types common-lisp:nil :type (common-lisp:or query-types common-lisp:null))
   (lineage-types common-lisp:nil :type
    (common-lisp:or query-lineage-types common-lisp:null))
   (created-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (modified-before common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (modified-after common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (properties common-lisp:nil :type
    (common-lisp:or query-properties common-lisp:null)))
 (common-lisp:export (common-lisp:list 'query-filters 'make-query-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'types))
      (common-lisp:list
       (common-lisp:cons "Types"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lineage-types))
      (common-lisp:list
       (common-lisp:cons "LineageTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-before))
      (common-lisp:list
       (common-lisp:cons "CreatedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-after))
      (common-lisp:list
       (common-lisp:cons "CreatedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-before))
      (common-lisp:list
       (common-lisp:cons "ModifiedBefore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'modified-after))
      (common-lisp:list
       (common-lisp:cons "ModifiedAfter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-filters))
   common-lisp:nil))
(common-lisp:deftype query-lineage-max-depth () 'common-lisp:integer)
(common-lisp:deftype query-lineage-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (query-lineage-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-query-lineage-request-"))
   (start-arns common-lisp:nil :type
    (common-lisp:or query-lineage-start-arns common-lisp:null))
   (direction common-lisp:nil :type
    (common-lisp:or direction common-lisp:null))
   (include-edges common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (filters common-lisp:nil :type
    (common-lisp:or query-filters common-lisp:null))
   (max-depth common-lisp:nil :type
    (common-lisp:or query-lineage-max-depth common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or query-lineage-max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or string8192 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'query-lineage-request 'make-query-lineage-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-lineage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-lineage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-arns))
      (common-lisp:list
       (common-lisp:cons "StartArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'direction))
      (common-lisp:list
       (common-lisp:cons "Direction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'include-edges))
      (common-lisp:list
       (common-lisp:cons "IncludeEdges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-depth))
      (common-lisp:list
       (common-lisp:cons "MaxDepth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-lineage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (query-lineage-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-query-lineage-response-"))
   (vertices common-lisp:nil :type (common-lisp:or vertices common-lisp:null))
   (edges common-lisp:nil :type (common-lisp:or edges common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or string8192 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'query-lineage-response 'make-query-lineage-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          query-lineage-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          query-lineage-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vertices))
      (common-lisp:list
       (common-lisp:cons "Vertices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'edges))
      (common-lisp:list
       (common-lisp:cons "Edges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          query-lineage-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype query-lineage-start-arns ()
   '(trivial-types:proper-list association-entity-arn))
 (common-lisp:defun |make-query-lineage-start-arns|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list association-entity-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype query-lineage-types ()
   '(trivial-types:proper-list lineage-type))
 (common-lisp:defun |make-query-lineage-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lineage-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype query-properties () 'common-lisp:hash-table)
 (common-lisp:defun |make-query-properties|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype query-types () '(trivial-types:proper-list string40))
 (common-lisp:defun |make-query-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string40))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (rsession-app-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-rsession-app-settings-"))
   (default-resource-spec common-lisp:nil :type
    (common-lisp:or resource-spec common-lisp:null))
   (custom-images common-lisp:nil :type
    (common-lisp:or custom-images common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rsession-app-settings 'make-rsession-app-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rsession-app-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rsession-app-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-resource-spec))
      (common-lisp:list
       (common-lisp:cons "DefaultResourceSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-images))
      (common-lisp:list
       (common-lisp:cons "CustomImages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rsession-app-settings))
   common-lisp:nil))
(common-lisp:deftype rstudio-server-pro-access-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (rstudio-server-pro-app-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-rstudio-server-pro-app-settings-"))
   (access-status common-lisp:nil :type
    (common-lisp:or rstudio-server-pro-access-status common-lisp:null))
   (user-group common-lisp:nil :type
    (common-lisp:or rstudio-server-pro-user-group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rstudio-server-pro-app-settings
                    'make-rstudio-server-pro-app-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rstudio-server-pro-app-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rstudio-server-pro-app-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-status))
      (common-lisp:list
       (common-lisp:cons "AccessStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-group))
      (common-lisp:list
       (common-lisp:cons "UserGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rstudio-server-pro-app-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rstudio-server-pro-domain-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-rstudio-server-pro-domain-settings-"))
   (domain-execution-role-arn
    (common-lisp:error ":domain-execution-role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (rstudio-connect-url common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (rstudio-package-manager-url common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (default-resource-spec common-lisp:nil :type
    (common-lisp:or resource-spec common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rstudio-server-pro-domain-settings
                    'make-rstudio-server-pro-domain-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rstudio-server-pro-domain-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rstudio-server-pro-domain-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "DomainExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rstudio-connect-url))
      (common-lisp:list
       (common-lisp:cons "RStudioConnectUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rstudio-package-manager-url))
      (common-lisp:list
       (common-lisp:cons "RStudioPackageManagerUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-resource-spec))
      (common-lisp:list
       (common-lisp:cons "DefaultResourceSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rstudio-server-pro-domain-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rstudio-server-pro-domain-settings-for-update (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-rstudio-server-pro-domain-settings-for-update-"))
   (domain-execution-role-arn
    (common-lisp:error ":domain-execution-role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (default-resource-spec common-lisp:nil :type
    (common-lisp:or resource-spec common-lisp:null))
   (rstudio-connect-url common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (rstudio-package-manager-url common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'rstudio-server-pro-domain-settings-for-update
                    'make-rstudio-server-pro-domain-settings-for-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          rstudio-server-pro-domain-settings-for-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          rstudio-server-pro-domain-settings-for-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-execution-role-arn))
      (common-lisp:list
       (common-lisp:cons "DomainExecutionRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-resource-spec))
      (common-lisp:list
       (common-lisp:cons "DefaultResourceSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rstudio-connect-url))
      (common-lisp:list
       (common-lisp:cons "RStudioConnectUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rstudio-package-manager-url))
      (common-lisp:list
       (common-lisp:cons "RStudioPackageManagerUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          rstudio-server-pro-domain-settings-for-update))
   common-lisp:nil))
(common-lisp:deftype rstudio-server-pro-user-group () 'common-lisp:string)
(common-lisp:deftype random-seed () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (real-time-inference-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-real-time-inference-config-"))
   (instance-type (common-lisp:error ":instance-type is required") :type
    (common-lisp:or instance-type common-lisp:null))
   (instance-count (common-lisp:error ":instance-count is required") :type
    (common-lisp:or task-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'real-time-inference-config
                    'make-real-time-inference-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          real-time-inference-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          real-time-inference-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          real-time-inference-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype realtime-inference-instance-types ()
   '(trivial-types:proper-list production-variant-instance-type))
 (common-lisp:defun |make-realtime-inference-instance-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            production-variant-instance-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype recommendation-failure-reason () 'common-lisp:string)
(common-lisp:deftype recommendation-job-arn () 'common-lisp:string)
(common-lisp:deftype recommendation-job-compilation-job-name ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-job-compiled-output-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-job-compiled-output-config-"))
   (s3output-uri common-lisp:nil :type
    (common-lisp:or s3uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-job-compiled-output-config
                    'make-recommendation-job-compiled-output-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-job-compiled-output-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-job-compiled-output-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3output-uri))
      (common-lisp:list
       (common-lisp:cons "S3OutputUri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-job-compiled-output-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-job-container-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-job-container-config-"))
   (domain common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (task common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (framework common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (framework-version common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (payload-config common-lisp:nil :type
    (common-lisp:or recommendation-job-payload-config common-lisp:null))
   (nearest-model-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (supported-instance-types common-lisp:nil :type
    (common-lisp:or recommendation-job-supported-instance-types
                    common-lisp:null))
   (data-input-config common-lisp:nil :type
    (common-lisp:or recommendation-job-data-input-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-job-container-config
                    'make-recommendation-job-container-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-job-container-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-job-container-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task))
      (common-lisp:list
       (common-lisp:cons "Task"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework))
      (common-lisp:list
       (common-lisp:cons "Framework"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'framework-version))
      (common-lisp:list
       (common-lisp:cons "FrameworkVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload-config))
      (common-lisp:list
       (common-lisp:cons "PayloadConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nearest-model-name))
      (common-lisp:list
       (common-lisp:cons "NearestModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-instance-types))
      (common-lisp:list
       (common-lisp:cons "SupportedInstanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-input-config))
      (common-lisp:list
       (common-lisp:cons "DataInputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-job-container-config))
   common-lisp:nil))
(common-lisp:deftype recommendation-job-data-input-config ()
  'common-lisp:string)
(common-lisp:deftype recommendation-job-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-job-inference-benchmark (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-job-inference-benchmark-"))
   (metrics common-lisp:nil :type
    (common-lisp:or recommendation-metrics common-lisp:null))
   (endpoint-configuration common-lisp:nil :type
    (common-lisp:or endpoint-output-configuration common-lisp:null))
   (model-configuration (common-lisp:error ":model-configuration is required")
    :type (common-lisp:or model-configuration common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or recommendation-failure-reason common-lisp:null))
   (endpoint-metrics common-lisp:nil :type
    (common-lisp:or inference-metrics common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-job-inference-benchmark
                    'make-recommendation-job-inference-benchmark))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-job-inference-benchmark))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-job-inference-benchmark))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-configuration))
      (common-lisp:list
       (common-lisp:cons "EndpointConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-configuration))
      (common-lisp:list
       (common-lisp:cons "ModelConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-metrics))
      (common-lisp:list
       (common-lisp:cons "EndpointMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-job-inference-benchmark))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-job-input-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-job-input-config-"))
   (model-package-version-arn common-lisp:nil :type
    (common-lisp:or model-package-arn common-lisp:null))
   (job-duration-in-seconds common-lisp:nil :type
    (common-lisp:or job-duration-in-seconds common-lisp:null))
   (traffic-pattern common-lisp:nil :type
    (common-lisp:or traffic-pattern common-lisp:null))
   (resource-limit common-lisp:nil :type
    (common-lisp:or recommendation-job-resource-limit common-lisp:null))
   (endpoint-configurations common-lisp:nil :type
    (common-lisp:or endpoint-input-configurations common-lisp:null))
   (volume-kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (container-config common-lisp:nil :type
    (common-lisp:or recommendation-job-container-config common-lisp:null))
   (endpoints common-lisp:nil :type
    (common-lisp:or endpoints common-lisp:null))
   (vpc-config common-lisp:nil :type
    (common-lisp:or recommendation-job-vpc-config common-lisp:null))
   (model-name common-lisp:nil :type
    (common-lisp:or model-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-job-input-config
                    'make-recommendation-job-input-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-job-input-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-job-input-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-package-version-arn))
      (common-lisp:list
       (common-lisp:cons "ModelPackageVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "JobDurationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-pattern))
      (common-lisp:list
       (common-lisp:cons "TrafficPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-limit))
      (common-lisp:list
       (common-lisp:cons "ResourceLimit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-configurations))
      (common-lisp:list
       (common-lisp:cons "EndpointConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "VolumeKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'container-config))
      (common-lisp:list
       (common-lisp:cons "ContainerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoints))
      (common-lisp:list
       (common-lisp:cons "Endpoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-job-input-config))
   common-lisp:nil))
(common-lisp:deftype recommendation-job-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-job-output-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-job-output-config-"))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (compiled-output-config common-lisp:nil :type
    (common-lisp:or recommendation-job-compiled-output-config
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-job-output-config
                    'make-recommendation-job-output-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-job-output-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-job-output-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compiled-output-config))
      (common-lisp:list
       (common-lisp:cons "CompiledOutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-job-output-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-job-payload-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-job-payload-config-"))
   (sample-payload-url common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (supported-content-types common-lisp:nil :type
    (common-lisp:or recommendation-job-supported-content-types
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-job-payload-config
                    'make-recommendation-job-payload-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-job-payload-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-job-payload-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sample-payload-url))
      (common-lisp:list
       (common-lisp:cons "SamplePayloadUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-content-types))
      (common-lisp:list
       (common-lisp:cons "SupportedContentTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-job-payload-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-job-resource-limit (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-job-resource-limit-"))
   (max-number-of-tests common-lisp:nil :type
    (common-lisp:or max-number-of-tests common-lisp:null))
   (max-parallel-of-tests common-lisp:nil :type
    (common-lisp:or max-parallel-of-tests common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-job-resource-limit
                    'make-recommendation-job-resource-limit))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-job-resource-limit))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-job-resource-limit))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-number-of-tests))
      (common-lisp:list
       (common-lisp:cons "MaxNumberOfTests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-parallel-of-tests))
      (common-lisp:list
       (common-lisp:cons "MaxParallelOfTests"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-job-resource-limit))
   common-lisp:nil))
(common-lisp:deftype recommendation-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-job-stopping-conditions (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-job-stopping-conditions-"))
   (max-invocations common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (model-latency-thresholds common-lisp:nil :type
    (common-lisp:or model-latency-thresholds common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-job-stopping-conditions
                    'make-recommendation-job-stopping-conditions))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-job-stopping-conditions))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-job-stopping-conditions))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-invocations))
      (common-lisp:list
       (common-lisp:cons "MaxInvocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-latency-thresholds))
      (common-lisp:list
       (common-lisp:cons "ModelLatencyThresholds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-job-stopping-conditions))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype recommendation-job-supported-content-types ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-recommendation-job-supported-content-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype recommendation-job-supported-instance-types ()
   '(trivial-types:proper-list string))
 (common-lisp:defun |make-recommendation-job-supported-instance-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype recommendation-job-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-job-vpc-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-job-vpc-config-"))
   (security-group-ids (common-lisp:error ":security-group-ids is required")
    :type
    (common-lisp:or recommendation-job-vpc-security-group-ids
                    common-lisp:null))
   (subnets (common-lisp:error ":subnets is required") :type
    (common-lisp:or recommendation-job-vpc-subnets common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-job-vpc-config
                    'make-recommendation-job-vpc-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-job-vpc-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-job-vpc-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-job-vpc-config))
   common-lisp:nil))
(common-lisp:deftype recommendation-job-vpc-security-group-id ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype recommendation-job-vpc-security-group-ids ()
   '(trivial-types:proper-list recommendation-job-vpc-security-group-id))
 (common-lisp:defun |make-recommendation-job-vpc-security-group-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            recommendation-job-vpc-security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype recommendation-job-vpc-subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype recommendation-job-vpc-subnets ()
   '(trivial-types:proper-list recommendation-job-vpc-subnet-id))
 (common-lisp:defun |make-recommendation-job-vpc-subnets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            recommendation-job-vpc-subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (recommendation-metrics (:copier common-lisp:nil)
      (:conc-name "struct-shape-recommendation-metrics-"))
   (cost-per-hour (common-lisp:error ":cost-per-hour is required") :type
    (common-lisp:or float common-lisp:null))
   (cost-per-inference (common-lisp:error ":cost-per-inference is required")
    :type (common-lisp:or float common-lisp:null))
   (max-invocations (common-lisp:error ":max-invocations is required") :type
    (common-lisp:or integer common-lisp:null))
   (model-latency (common-lisp:error ":model-latency is required") :type
    (common-lisp:or integer common-lisp:null))
   (cpu-utilization common-lisp:nil :type
    (common-lisp:or utilization-metric common-lisp:null))
   (memory-utilization common-lisp:nil :type
    (common-lisp:or utilization-metric common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recommendation-metrics 'make-recommendation-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-metrics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-metrics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-per-hour))
      (common-lisp:list
       (common-lisp:cons "CostPerHour"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cost-per-inference))
      (common-lisp:list
       (common-lisp:cons "CostPerInference"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-invocations))
      (common-lisp:list
       (common-lisp:cons "MaxInvocations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-latency))
      (common-lisp:list
       (common-lisp:cons "ModelLatency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu-utilization))
      (common-lisp:list
       (common-lisp:cons "CpuUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory-utilization))
      (common-lisp:list
       (common-lisp:cons "MemoryUtilization"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recommendation-metrics))
   common-lisp:nil))
(common-lisp:deftype recommendation-step-type () 'common-lisp:string)
(common-lisp:deftype record-wrapper () 'common-lisp:string)
(common-lisp:deftype redshift-cluster-id () 'common-lisp:string)
(common-lisp:deftype redshift-database () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (redshift-dataset-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-redshift-dataset-definition-"))
   (cluster-id (common-lisp:error ":cluster-id is required") :type
    (common-lisp:or redshift-cluster-id common-lisp:null))
   (database (common-lisp:error ":database is required") :type
    (common-lisp:or redshift-database common-lisp:null))
   (db-user (common-lisp:error ":db-user is required") :type
    (common-lisp:or redshift-user-name common-lisp:null))
   (query-string (common-lisp:error ":query-string is required") :type
    (common-lisp:or redshift-query-string common-lisp:null))
   (cluster-role-arn (common-lisp:error ":cluster-role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (output-s3uri (common-lisp:error ":output-s3uri is required") :type
    (common-lisp:or s3uri common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (output-format (common-lisp:error ":output-format is required") :type
    (common-lisp:or redshift-result-format common-lisp:null))
   (output-compression common-lisp:nil :type
    (common-lisp:or redshift-result-compression-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'redshift-dataset-definition
                    'make-redshift-dataset-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          redshift-dataset-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          redshift-dataset-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-id))
      (common-lisp:list
       (common-lisp:cons "ClusterId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'database))
      (common-lisp:list
       (common-lisp:cons "Database"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'db-user))
      (common-lisp:list
       (common-lisp:cons "DbUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "QueryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cluster-role-arn))
      (common-lisp:list
       (common-lisp:cons "ClusterRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-s3uri))
      (common-lisp:list
       (common-lisp:cons "OutputS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-format))
      (common-lisp:list
       (common-lisp:cons "OutputFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-compression))
      (common-lisp:list
       (common-lisp:cons "OutputCompression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          redshift-dataset-definition))
   common-lisp:nil))
(common-lisp:deftype redshift-query-string () 'common-lisp:string)
(common-lisp:deftype redshift-result-compression-type () 'common-lisp:string)
(common-lisp:deftype redshift-result-format () 'common-lisp:string)
(common-lisp:deftype redshift-user-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (register-devices-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-devices-request-"))
   (device-fleet-name (common-lisp:error ":device-fleet-name is required")
    :type (common-lisp:or entity-name common-lisp:null))
   (devices (common-lisp:error ":devices is required") :type
    (common-lisp:or devices common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-devices-request 'make-register-devices-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-devices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-devices-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-fleet-name))
      (common-lisp:list
       (common-lisp:cons "DeviceFleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'devices))
      (common-lisp:list
       (common-lisp:cons "Devices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-devices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (register-model-step-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-model-step-metadata-"))
   (arn common-lisp:nil :type (common-lisp:or string256 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-model-step-metadata
                    'make-register-model-step-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-model-step-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-model-step-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-model-step-metadata))
   common-lisp:nil))
(common-lisp:deftype release-notes () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (render-ui-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-render-ui-template-request-"))
   (ui-template common-lisp:nil :type
    (common-lisp:or ui-template common-lisp:null))
   (task (common-lisp:error ":task is required") :type
    (common-lisp:or renderable-task common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or role-arn common-lisp:null))
   (human-task-ui-arn common-lisp:nil :type
    (common-lisp:or human-task-ui-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'render-ui-template-request
                    'make-render-ui-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          render-ui-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          render-ui-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ui-template))
      (common-lisp:list
       (common-lisp:cons "UiTemplate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task))
      (common-lisp:list
       (common-lisp:cons "Task"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'human-task-ui-arn))
      (common-lisp:list
       (common-lisp:cons "HumanTaskUiArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          render-ui-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (render-ui-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-render-ui-template-response-"))
   (rendered-content (common-lisp:error ":rendered-content is required") :type
    (common-lisp:or string common-lisp:null))
   (errors (common-lisp:error ":errors is required") :type
    (common-lisp:or rendering-error-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'render-ui-template-response
                    'make-render-ui-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          render-ui-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          render-ui-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rendered-content))
      (common-lisp:list
       (common-lisp:cons "RenderedContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          render-ui-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (renderable-task (:copier common-lisp:nil)
      (:conc-name "struct-shape-renderable-task-"))
   (input (common-lisp:error ":input is required") :type
    (common-lisp:or task-input common-lisp:null)))
 (common-lisp:export (common-lisp:list 'renderable-task 'make-renderable-task))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input renderable-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input renderable-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input))
      (common-lisp:list
       (common-lisp:cons "Input"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input renderable-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (rendering-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-rendering-error-"))
   (code (common-lisp:error ":code is required") :type
    (common-lisp:or string common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rendering-error 'make-rendering-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rendering-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rendering-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rendering-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rendering-error-list ()
   '(trivial-types:proper-list rendering-error))
 (common-lisp:defun |make-rendering-error-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rendering-error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype repository-access-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (repository-auth-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-repository-auth-config-"))
   (repository-credentials-provider-arn
    (common-lisp:error ":repository-credentials-provider-arn is required")
    :type
    (common-lisp:or repository-credentials-provider-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'repository-auth-config 'make-repository-auth-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          repository-auth-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          repository-auth-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'repository-credentials-provider-arn))
      (common-lisp:list
       (common-lisp:cons "RepositoryCredentialsProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          repository-auth-config))
   common-lisp:nil))
(common-lisp:deftype repository-credentials-provider-arn () 'common-lisp:string)
(common-lisp:deftype repository-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resolved-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-resolved-attributes-"))
   (auto-mljob-objective common-lisp:nil :type
    (common-lisp:or auto-mljob-objective common-lisp:null))
   (problem-type common-lisp:nil :type
    (common-lisp:or problem-type common-lisp:null))
   (completion-criteria common-lisp:nil :type
    (common-lisp:or auto-mljob-completion-criteria common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resolved-attributes 'make-resolved-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resolved-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resolved-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-mljob-objective))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobObjective"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'problem-type))
      (common-lisp:list
       (common-lisp:cons "ProblemType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-criteria))
      (common-lisp:list
       (common-lisp:cons "CompletionCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resolved-attributes))
   common-lisp:nil))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resource-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-config-"))
   (instance-type common-lisp:nil :type
    (common-lisp:or training-instance-type common-lisp:null))
   (instance-count common-lisp:nil :type
    (common-lisp:or training-instance-count common-lisp:null))
   (volume-size-in-gb (common-lisp:error ":volume-size-in-gb is required")
    :type (common-lisp:or volume-size-in-gb common-lisp:null))
   (volume-kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (instance-groups common-lisp:nil :type
    (common-lisp:or instance-groups common-lisp:null))
   (keep-alive-period-in-seconds common-lisp:nil :type
    (common-lisp:or keep-alive-period-in-seconds common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource-config 'make-resource-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "VolumeSizeInGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "VolumeKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-groups))
      (common-lisp:list
       (common-lisp:cons "InstanceGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'keep-alive-period-in-seconds))
      (common-lisp:list
       (common-lisp:cons "KeepAlivePeriodInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-config-for-update (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-config-for-update-"))
   (keep-alive-period-in-seconds
    (common-lisp:error ":keep-alive-period-in-seconds is required") :type
    (common-lisp:or keep-alive-period-in-seconds common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-config-for-update
                    'make-resource-config-for-update))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-config-for-update))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-config-for-update))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'keep-alive-period-in-seconds))
      (common-lisp:list
       (common-lisp:cons "KeepAlivePeriodInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-config-for-update))
   common-lisp:nil))
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-in-use
     (sagemaker-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use 'resource-in-use-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-limit-exceeded
     (sagemaker-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-limit-exceeded-message)))
 (common-lisp:export
  (common-lisp:list 'resource-limit-exceeded 'resource-limit-exceeded-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-limits (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-limits-"))
   (max-number-of-training-jobs common-lisp:nil :type
    (common-lisp:or max-number-of-training-jobs common-lisp:null))
   (max-parallel-training-jobs
    (common-lisp:error ":max-parallel-training-jobs is required") :type
    (common-lisp:or max-parallel-training-jobs common-lisp:null))
   (max-runtime-in-seconds common-lisp:nil :type
    (common-lisp:or hyper-parameter-tuning-max-runtime-in-seconds
                    common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource-limits 'make-resource-limits))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-limits))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-limits))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-number-of-training-jobs))
      (common-lisp:list
       (common-lisp:cons "MaxNumberOfTrainingJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-parallel-training-jobs))
      (common-lisp:list
       (common-lisp:cons "MaxParallelTrainingJobs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-runtime-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaxRuntimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-limits))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found
     (sagemaker-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found 'resource-not-found-message)))
(common-lisp:deftype resource-policy-string () 'common-lisp:string)
(common-lisp:deftype resource-property-name () 'common-lisp:string)
(common-lisp:deftype resource-retained-billable-time-in-seconds ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (resource-spec (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-spec-"))
   (sage-maker-image-arn common-lisp:nil :type
    (common-lisp:or image-arn common-lisp:null))
   (sage-maker-image-version-arn common-lisp:nil :type
    (common-lisp:or image-version-arn common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or app-instance-type common-lisp:null))
   (lifecycle-config-arn common-lisp:nil :type
    (common-lisp:or studio-lifecycle-config-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource-spec 'make-resource-spec))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-spec))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-spec))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sage-maker-image-arn))
      (common-lisp:list
       (common-lisp:cons "SageMakerImageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sage-maker-image-version-arn))
      (common-lisp:list
       (common-lisp:cons "SageMakerImageVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-config-arn))
      (common-lisp:list
       (common-lisp:cons "LifecycleConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-spec))
   common-lisp:nil))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype response-mimetype () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype response-mimetypes ()
   '(trivial-types:proper-list response-mimetype))
 (common-lisp:defun |make-response-mimetypes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list response-mimetype))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (retention-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-retention-policy-"))
   (home-efs-file-system common-lisp:nil :type
    (common-lisp:or retention-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'retention-policy 'make-retention-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input retention-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input retention-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'home-efs-file-system))
      (common-lisp:list
       (common-lisp:cons "HomeEfsFileSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input retention-policy))
   common-lisp:nil))
(common-lisp:deftype retention-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (retry-pipeline-execution-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-retry-pipeline-execution-request-"))
   (pipeline-execution-arn
    (common-lisp:error ":pipeline-execution-arn is required") :type
    (common-lisp:or pipeline-execution-arn common-lisp:null))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or idempotency-token common-lisp:null))
   (parallelism-configuration common-lisp:nil :type
    (common-lisp:or parallelism-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'retry-pipeline-execution-request
                    'make-retry-pipeline-execution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retry-pipeline-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retry-pipeline-execution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-arn))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallelism-configuration))
      (common-lisp:list
       (common-lisp:cons "ParallelismConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retry-pipeline-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (retry-pipeline-execution-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-retry-pipeline-execution-response-"))
   (pipeline-execution-arn common-lisp:nil :type
    (common-lisp:or pipeline-execution-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'retry-pipeline-execution-response
                    'make-retry-pipeline-execution-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          retry-pipeline-execution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          retry-pipeline-execution-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-arn))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          retry-pipeline-execution-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (retry-strategy (:copier common-lisp:nil)
      (:conc-name "struct-shape-retry-strategy-"))
   (maximum-retry-attempts
    (common-lisp:error ":maximum-retry-attempts is required") :type
    (common-lisp:or maximum-retry-attempts common-lisp:null)))
 (common-lisp:export (common-lisp:list 'retry-strategy 'make-retry-strategy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input retry-strategy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input retry-strategy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'maximum-retry-attempts))
      (common-lisp:list
       (common-lisp:cons "MaximumRetryAttempts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input retry-strategy))
   common-lisp:nil))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype root-access () 'common-lisp:string)
(common-lisp:deftype rule-configuration-name () 'common-lisp:string)
(common-lisp:deftype rule-evaluation-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype rule-parameters () 'common-lisp:hash-table)
 (common-lisp:defun |make-rule-parameters|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype s3data-distribution () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3data-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3data-source-"))
   (s3data-type (common-lisp:error ":s3data-type is required") :type
    (common-lisp:or s3data-type common-lisp:null))
   (s3uri (common-lisp:error ":s3uri is required") :type
    (common-lisp:or s3uri common-lisp:null))
   (s3data-distribution-type common-lisp:nil :type
    (common-lisp:or s3data-distribution common-lisp:null))
   (attribute-names common-lisp:nil :type
    (common-lisp:or attribute-names common-lisp:null))
   (instance-group-names common-lisp:nil :type
    (common-lisp:or instance-group-names common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3data-source 'make-s3data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3data-type))
      (common-lisp:list
       (common-lisp:cons "S3DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3data-distribution-type))
      (common-lisp:list
       (common-lisp:cons "S3DataDistributionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-names))
      (common-lisp:list
       (common-lisp:cons "AttributeNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-group-names))
      (common-lisp:list
       (common-lisp:cons "InstanceGroupNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3data-source))
   common-lisp:nil))
(common-lisp:deftype s3data-type () 'common-lisp:string)
(common-lisp:deftype s3output-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3storage-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3storage-config-"))
   (s3uri (common-lisp:error ":s3uri is required") :type
    (common-lisp:or s3uri common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null))
   (resolved-output-s3uri common-lisp:nil :type
    (common-lisp:or s3uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3storage-config 'make-s3storage-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input s3storage-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input s3storage-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resolved-output-s3uri))
      (common-lisp:list
       (common-lisp:cons "ResolvedOutputS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input s3storage-config))
   common-lisp:nil))
(common-lisp:deftype s3uri () 'common-lisp:string)
(common-lisp:deftype sage-maker-image-version-alias () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype sage-maker-image-version-aliases ()
   '(trivial-types:proper-list sage-maker-image-version-alias))
 (common-lisp:defun |make-sage-maker-image-version-aliases|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            sage-maker-image-version-alias))
   aws-sdk/generator/shape::members))
(common-lisp:deftype sagemaker-servicecatalog-status () 'common-lisp:string)
(common-lisp:deftype sampling-percentage () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (schedule-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-schedule-config-"))
   (schedule-expression (common-lisp:error ":schedule-expression is required")
    :type (common-lisp:or schedule-expression common-lisp:null)))
 (common-lisp:export (common-lisp:list 'schedule-config 'make-schedule-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input schedule-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input schedule-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule-expression))
      (common-lisp:list
       (common-lisp:cons "ScheduleExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input schedule-config))
   common-lisp:nil))
(common-lisp:deftype schedule-expression () 'common-lisp:string)
(common-lisp:deftype schedule-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (search-expression (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-expression-"))
   (filters common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (nested-filters common-lisp:nil :type
    (common-lisp:or nested-filters-list common-lisp:null))
   (sub-expressions common-lisp:nil :type
    (common-lisp:or search-expression-list common-lisp:null))
   (operator common-lisp:nil :type
    (common-lisp:or boolean-operator common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-expression 'make-search-expression))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-expression))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-expression))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nested-filters))
      (common-lisp:list
       (common-lisp:cons "NestedFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-expressions))
      (common-lisp:list
       (common-lisp:cons "SubExpressions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operator))
      (common-lisp:list
       (common-lisp:cons "Operator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-expression))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-expression-list ()
   '(trivial-types:proper-list search-expression))
 (common-lisp:defun |make-search-expression-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-expression))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (search-record (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-record-"))
   (training-job common-lisp:nil :type
    (common-lisp:or training-job common-lisp:null))
   (experiment common-lisp:nil :type
    (common-lisp:or experiment common-lisp:null))
   (trial common-lisp:nil :type (common-lisp:or trial common-lisp:null))
   (trial-component common-lisp:nil :type
    (common-lisp:or trial-component common-lisp:null))
   (endpoint common-lisp:nil :type (common-lisp:or endpoint common-lisp:null))
   (model-package common-lisp:nil :type
    (common-lisp:or model-package common-lisp:null))
   (model-package-group common-lisp:nil :type
    (common-lisp:or model-package-group common-lisp:null))
   (pipeline common-lisp:nil :type (common-lisp:or pipeline common-lisp:null))
   (pipeline-execution common-lisp:nil :type
    (common-lisp:or pipeline-execution common-lisp:null))
   (feature-group common-lisp:nil :type
    (common-lisp:or feature-group common-lisp:null))
   (project common-lisp:nil :type (common-lisp:or project common-lisp:null))
   (feature-metadata common-lisp:nil :type
    (common-lisp:or feature-metadata common-lisp:null))
   (hyper-parameter-tuning-job common-lisp:nil :type
    (common-lisp:or hyper-parameter-tuning-job-search-entity common-lisp:null))
   (model common-lisp:nil :type
    (common-lisp:or model-dashboard-model common-lisp:null))
   (model-card common-lisp:nil :type
    (common-lisp:or model-card common-lisp:null)))
 (common-lisp:export (common-lisp:list 'search-record 'make-search-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-job))
      (common-lisp:list
       (common-lisp:cons "TrainingJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment))
      (common-lisp:list
       (common-lisp:cons "Experiment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial))
      (common-lisp:list
       (common-lisp:cons "Trial"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-component))
      (common-lisp:list
       (common-lisp:cons "TrialComponent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint))
      (common-lisp:list
       (common-lisp:cons "Endpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-package))
      (common-lisp:list
       (common-lisp:cons "ModelPackage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-package-group))
      (common-lisp:list
       (common-lisp:cons "ModelPackageGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline))
      (common-lisp:list
       (common-lisp:cons "Pipeline"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-execution))
      (common-lisp:list
       (common-lisp:cons "PipelineExecution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-group))
      (common-lisp:list
       (common-lisp:cons "FeatureGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project))
      (common-lisp:list
       (common-lisp:cons "Project"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-metadata))
      (common-lisp:list
       (common-lisp:cons "FeatureMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hyper-parameter-tuning-job))
      (common-lisp:list
       (common-lisp:cons "HyperParameterTuningJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model))
      (common-lisp:list
       (common-lisp:cons "Model"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card))
      (common-lisp:list
       (common-lisp:cons "ModelCard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-request-"))
   (resource (common-lisp:error ":resource is required") :type
    (common-lisp:or resource-type common-lisp:null))
   (search-expression common-lisp:nil :type
    (common-lisp:or search-expression common-lisp:null))
   (sort-by common-lisp:nil :type
    (common-lisp:or resource-property-name common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or search-sort-order common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export (common-lisp:list 'search-request 'make-search-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "Resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'search-expression))
      (common-lisp:list
       (common-lisp:cons "SearchExpression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (search-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-search-response-"))
   (results common-lisp:nil :type
    (common-lisp:or search-results-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export (common-lisp:list 'search-response 'make-search-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input search-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input search-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'results))
      (common-lisp:list
       (common-lisp:cons "Results"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input search-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype search-results-list ()
   '(trivial-types:proper-list search-record))
 (common-lisp:defun |make-search-results-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list search-record))
   aws-sdk/generator/shape::members))
(common-lisp:deftype search-sort-order () 'common-lisp:string)
(common-lisp:deftype secondary-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (secondary-status-transition (:copier common-lisp:nil)
      (:conc-name "struct-shape-secondary-status-transition-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or secondary-status common-lisp:null))
   (start-time (common-lisp:error ":start-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (status-message common-lisp:nil :type
    (common-lisp:or status-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'secondary-status-transition
                    'make-secondary-status-transition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          secondary-status-transition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          secondary-status-transition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-message))
      (common-lisp:list
       (common-lisp:cons "StatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          secondary-status-transition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype secondary-status-transitions ()
   '(trivial-types:proper-list secondary-status-transition))
 (common-lisp:defun |make-secondary-status-transitions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            secondary-status-transition))
   aws-sdk/generator/shape::members))
(common-lisp:deftype secret-arn () 'common-lisp:string)
(common-lisp:deftype security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-ids ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun |make-security-group-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype seed () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (send-pipeline-execution-step-failure-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-send-pipeline-execution-step-failure-request-"))
   (callback-token (common-lisp:error ":callback-token is required") :type
    (common-lisp:or callback-token common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or string256 common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or idempotency-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-pipeline-execution-step-failure-request
                    'make-send-pipeline-execution-step-failure-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-pipeline-execution-step-failure-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-pipeline-execution-step-failure-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'callback-token))
      (common-lisp:list
       (common-lisp:cons "CallbackToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-pipeline-execution-step-failure-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (send-pipeline-execution-step-failure-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-send-pipeline-execution-step-failure-response-"))
   (pipeline-execution-arn common-lisp:nil :type
    (common-lisp:or pipeline-execution-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-pipeline-execution-step-failure-response
                    'make-send-pipeline-execution-step-failure-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-pipeline-execution-step-failure-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-pipeline-execution-step-failure-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-arn))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-pipeline-execution-step-failure-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (send-pipeline-execution-step-success-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-send-pipeline-execution-step-success-request-"))
   (callback-token (common-lisp:error ":callback-token is required") :type
    (common-lisp:or callback-token common-lisp:null))
   (output-parameters common-lisp:nil :type
    (common-lisp:or output-parameter-list common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or idempotency-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-pipeline-execution-step-success-request
                    'make-send-pipeline-execution-step-success-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-pipeline-execution-step-success-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-pipeline-execution-step-success-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'callback-token))
      (common-lisp:list
       (common-lisp:cons "CallbackToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-parameters))
      (common-lisp:list
       (common-lisp:cons "OutputParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-pipeline-execution-step-success-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (send-pipeline-execution-step-success-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-send-pipeline-execution-step-success-response-"))
   (pipeline-execution-arn common-lisp:nil :type
    (common-lisp:or pipeline-execution-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'send-pipeline-execution-step-success-response
                    'make-send-pipeline-execution-step-success-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-pipeline-execution-step-success-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-pipeline-execution-step-success-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-arn))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-pipeline-execution-step-success-response))
   common-lisp:nil))
(common-lisp:deftype serverless-max-concurrency () 'common-lisp:integer)
(common-lisp:deftype serverless-memory-size-in-mb () 'common-lisp:integer)
(common-lisp:deftype service-catalog-entity-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (service-catalog-provisioned-product-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-catalog-provisioned-product-details-"))
   (provisioned-product-id common-lisp:nil :type
    (common-lisp:or service-catalog-entity-id common-lisp:null))
   (provisioned-product-status-message common-lisp:nil :type
    (common-lisp:or provisioned-product-status-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-catalog-provisioned-product-details
                    'make-service-catalog-provisioned-product-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-catalog-provisioned-product-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-catalog-provisioned-product-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-product-id))
      (common-lisp:list
       (common-lisp:cons "ProvisionedProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioned-product-status-message))
      (common-lisp:list
       (common-lisp:cons "ProvisionedProductStatusMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-catalog-provisioned-product-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (service-catalog-provisioning-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-catalog-provisioning-details-"))
   (product-id (common-lisp:error ":product-id is required") :type
    (common-lisp:or service-catalog-entity-id common-lisp:null))
   (provisioning-artifact-id common-lisp:nil :type
    (common-lisp:or service-catalog-entity-id common-lisp:null))
   (path-id common-lisp:nil :type
    (common-lisp:or service-catalog-entity-id common-lisp:null))
   (provisioning-parameters common-lisp:nil :type
    (common-lisp:or provisioning-parameters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-catalog-provisioning-details
                    'make-service-catalog-provisioning-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-catalog-provisioning-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-catalog-provisioning-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-id))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-id))
      (common-lisp:list
       (common-lisp:cons "PathId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-parameters))
      (common-lisp:list
       (common-lisp:cons "ProvisioningParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-catalog-provisioning-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (service-catalog-provisioning-update-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-catalog-provisioning-update-details-"))
   (provisioning-artifact-id common-lisp:nil :type
    (common-lisp:or service-catalog-entity-id common-lisp:null))
   (provisioning-parameters common-lisp:nil :type
    (common-lisp:or provisioning-parameters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-catalog-provisioning-update-details
                    'make-service-catalog-provisioning-update-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-catalog-provisioning-update-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-catalog-provisioning-update-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-artifact-id))
      (common-lisp:list
       (common-lisp:cons "ProvisioningArtifactId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'provisioning-parameters))
      (common-lisp:list
       (common-lisp:cons "ProvisioningParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-catalog-provisioning-update-details))
   common-lisp:nil))
(common-lisp:deftype session-expiration-duration-in-seconds ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (shadow-mode-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-shadow-mode-config-"))
   (source-model-variant-name
    (common-lisp:error ":source-model-variant-name is required") :type
    (common-lisp:or model-variant-name common-lisp:null))
   (shadow-model-variants
    (common-lisp:error ":shadow-model-variants is required") :type
    (common-lisp:or shadow-model-variant-config-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'shadow-mode-config 'make-shadow-mode-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input shadow-mode-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input shadow-mode-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-model-variant-name))
      (common-lisp:list
       (common-lisp:cons "SourceModelVariantName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shadow-model-variants))
      (common-lisp:list
       (common-lisp:cons "ShadowModelVariants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input shadow-mode-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (shadow-model-variant-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-shadow-model-variant-config-"))
   (shadow-model-variant-name
    (common-lisp:error ":shadow-model-variant-name is required") :type
    (common-lisp:or model-variant-name common-lisp:null))
   (sampling-percentage (common-lisp:error ":sampling-percentage is required")
    :type (common-lisp:or percentage common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'shadow-model-variant-config
                    'make-shadow-model-variant-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          shadow-model-variant-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          shadow-model-variant-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'shadow-model-variant-name))
      (common-lisp:list
       (common-lisp:cons "ShadowModelVariantName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sampling-percentage))
      (common-lisp:list
       (common-lisp:cons "SamplingPercentage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          shadow-model-variant-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype shadow-model-variant-config-list ()
   '(trivial-types:proper-list shadow-model-variant-config))
 (common-lisp:defun |make-shadow-model-variant-config-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            shadow-model-variant-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (sharing-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-sharing-settings-"))
   (notebook-output-option common-lisp:nil :type
    (common-lisp:or notebook-output-option common-lisp:null))
   (s3output-path common-lisp:nil :type
    (common-lisp:or s3uri common-lisp:null))
   (s3kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sharing-settings 'make-sharing-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sharing-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sharing-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-output-option))
      (common-lisp:list
       (common-lisp:cons "NotebookOutputOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3output-path))
      (common-lisp:list
       (common-lisp:cons "S3OutputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3kms-key-id))
      (common-lisp:list
       (common-lisp:cons "S3KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sharing-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (shuffle-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-shuffle-config-"))
   (seed (common-lisp:error ":seed is required") :type
    (common-lisp:or seed common-lisp:null)))
 (common-lisp:export (common-lisp:list 'shuffle-config 'make-shuffle-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input shuffle-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input shuffle-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'seed))
      (common-lisp:list
       (common-lisp:cons "Seed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input shuffle-config))
   common-lisp:nil))
(common-lisp:deftype single-sign-on-user-identifier () 'common-lisp:string)
(common-lisp:deftype sns-topic-arn () 'common-lisp:string)
(common-lisp:deftype sort-actions-by () 'common-lisp:string)
(common-lisp:deftype sort-artifacts-by () 'common-lisp:string)
(common-lisp:deftype sort-associations-by () 'common-lisp:string)
(common-lisp:deftype sort-by () 'common-lisp:string)
(common-lisp:deftype sort-contexts-by () 'common-lisp:string)
(common-lisp:deftype sort-experiments-by () 'common-lisp:string)
(common-lisp:deftype sort-inference-experiments-by () 'common-lisp:string)
(common-lisp:deftype sort-lineage-groups-by () 'common-lisp:string)
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:deftype sort-pipeline-executions-by () 'common-lisp:string)
(common-lisp:deftype sort-pipelines-by () 'common-lisp:string)
(common-lisp:deftype sort-trial-components-by () 'common-lisp:string)
(common-lisp:deftype sort-trials-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (source-algorithm (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-algorithm-"))
   (model-data-url common-lisp:nil :type (common-lisp:or url common-lisp:null))
   (algorithm-name (common-lisp:error ":algorithm-name is required") :type
    (common-lisp:or arn-or-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'source-algorithm 'make-source-algorithm))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-algorithm))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-algorithm))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-data-url))
      (common-lisp:list
       (common-lisp:cons "ModelDataUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm-name))
      (common-lisp:list
       (common-lisp:cons "AlgorithmName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-algorithm))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype source-algorithm-list ()
   '(trivial-types:proper-list source-algorithm))
 (common-lisp:defun |make-source-algorithm-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list source-algorithm))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (source-algorithm-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-algorithm-specification-"))
   (source-algorithms (common-lisp:error ":source-algorithms is required")
    :type (common-lisp:or source-algorithm-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'source-algorithm-specification
                    'make-source-algorithm-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          source-algorithm-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          source-algorithm-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-algorithms))
      (common-lisp:list
       (common-lisp:cons "SourceAlgorithms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          source-algorithm-specification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (source-ip-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-ip-config-"))
   (cidrs (common-lisp:error ":cidrs is required") :type
    (common-lisp:or cidrs common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'source-ip-config 'make-source-ip-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-ip-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-ip-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cidrs))
      (common-lisp:list
       (common-lisp:cons "Cidrs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-ip-config))
   common-lisp:nil))
(common-lisp:deftype source-type () 'common-lisp:string)
(common-lisp:deftype source-uri () 'common-lisp:string)
(common-lisp:deftype space-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (space-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-space-details-"))
   (domain-id common-lisp:nil :type
    (common-lisp:or domain-id common-lisp:null))
   (space-name common-lisp:nil :type
    (common-lisp:or space-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or space-status common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or last-modified-time common-lisp:null)))
 (common-lisp:export (common-lisp:list 'space-details 'make-space-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input space-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input space-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "SpaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input space-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype space-list () '(trivial-types:proper-list space-details))
 (common-lisp:defun |make-space-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list space-details))
   aws-sdk/generator/shape::members))
(common-lisp:deftype space-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (space-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-space-settings-"))
   (jupyter-server-app-settings common-lisp:nil :type
    (common-lisp:or jupyter-server-app-settings common-lisp:null))
   (kernel-gateway-app-settings common-lisp:nil :type
    (common-lisp:or kernel-gateway-app-settings common-lisp:null)))
 (common-lisp:export (common-lisp:list 'space-settings 'make-space-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input space-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input space-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'jupyter-server-app-settings))
      (common-lisp:list
       (common-lisp:cons "JupyterServerAppSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kernel-gateway-app-settings))
      (common-lisp:list
       (common-lisp:cons "KernelGatewayAppSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input space-settings))
   common-lisp:nil))
(common-lisp:deftype space-sort-key () 'common-lisp:string)
(common-lisp:deftype space-status () 'common-lisp:string)
(common-lisp:deftype spawn-rate () 'common-lisp:integer)
(common-lisp:deftype split-type () 'common-lisp:string)
(common-lisp:deftype stage-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-edge-deployment-stage-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-edge-deployment-stage-request-"))
   (edge-deployment-plan-name
    (common-lisp:error ":edge-deployment-plan-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (stage-name (common-lisp:error ":stage-name is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-edge-deployment-stage-request
                    'make-start-edge-deployment-stage-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-edge-deployment-stage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-edge-deployment-stage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-deployment-plan-name))
      (common-lisp:list
       (common-lisp:cons "EdgeDeploymentPlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-name))
      (common-lisp:list
       (common-lisp:cons "StageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-edge-deployment-stage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-inference-experiment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-inference-experiment-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or inference-experiment-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-inference-experiment-request
                    'make-start-inference-experiment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-inference-experiment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-inference-experiment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-inference-experiment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-inference-experiment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-inference-experiment-response-"))
   (inference-experiment-arn
    (common-lisp:error ":inference-experiment-arn is required") :type
    (common-lisp:or inference-experiment-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-inference-experiment-response
                    'make-start-inference-experiment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-inference-experiment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-inference-experiment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-experiment-arn))
      (common-lisp:list
       (common-lisp:cons "InferenceExperimentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-inference-experiment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-monitoring-schedule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-monitoring-schedule-request-"))
   (monitoring-schedule-name
    (common-lisp:error ":monitoring-schedule-name is required") :type
    (common-lisp:or monitoring-schedule-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-monitoring-schedule-request
                    'make-start-monitoring-schedule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-monitoring-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-monitoring-schedule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-name))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-monitoring-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-notebook-instance-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-notebook-instance-input-"))
   (notebook-instance-name
    (common-lisp:error ":notebook-instance-name is required") :type
    (common-lisp:or notebook-instance-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-notebook-instance-input
                    'make-start-notebook-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-notebook-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-notebook-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-name))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-notebook-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-pipeline-execution-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-pipeline-execution-request-"))
   (pipeline-name (common-lisp:error ":pipeline-name is required") :type
    (common-lisp:or pipeline-name-or-arn common-lisp:null))
   (pipeline-execution-display-name common-lisp:nil :type
    (common-lisp:or pipeline-execution-name common-lisp:null))
   (pipeline-parameters common-lisp:nil :type
    (common-lisp:or parameter-list common-lisp:null))
   (pipeline-execution-description common-lisp:nil :type
    (common-lisp:or pipeline-execution-description common-lisp:null))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or idempotency-token common-lisp:null))
   (parallelism-configuration common-lisp:nil :type
    (common-lisp:or parallelism-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-pipeline-execution-request
                    'make-start-pipeline-execution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-pipeline-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-pipeline-execution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "PipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-display-name))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-parameters))
      (common-lisp:list
       (common-lisp:cons "PipelineParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-description))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallelism-configuration))
      (common-lisp:list
       (common-lisp:cons "ParallelismConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-pipeline-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-pipeline-execution-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-pipeline-execution-response-"))
   (pipeline-execution-arn common-lisp:nil :type
    (common-lisp:or pipeline-execution-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-pipeline-execution-response
                    'make-start-pipeline-execution-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-pipeline-execution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-pipeline-execution-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-arn))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-pipeline-execution-response))
   common-lisp:nil))
(common-lisp:deftype status-details () 'common-lisp:string)
(common-lisp:deftype status-message () 'common-lisp:string)
(common-lisp:deftype step-description () 'common-lisp:string)
(common-lisp:deftype step-display-name () 'common-lisp:string)
(common-lisp:deftype step-name () 'common-lisp:string)
(common-lisp:deftype step-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (stop-auto-mljob-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-auto-mljob-request-"))
   (auto-mljob-name (common-lisp:error ":auto-mljob-name is required") :type
    (common-lisp:or auto-mljob-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-auto-mljob-request 'make-stop-auto-mljob-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-auto-mljob-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-auto-mljob-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mljob-name))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-auto-mljob-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-compilation-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-compilation-job-request-"))
   (compilation-job-name
    (common-lisp:error ":compilation-job-name is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-compilation-job-request
                    'make-stop-compilation-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-compilation-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-compilation-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'compilation-job-name))
      (common-lisp:list
       (common-lisp:cons "CompilationJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-compilation-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-edge-deployment-stage-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-edge-deployment-stage-request-"))
   (edge-deployment-plan-name
    (common-lisp:error ":edge-deployment-plan-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (stage-name (common-lisp:error ":stage-name is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-edge-deployment-stage-request
                    'make-stop-edge-deployment-stage-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-edge-deployment-stage-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-edge-deployment-stage-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-deployment-plan-name))
      (common-lisp:list
       (common-lisp:cons "EdgeDeploymentPlanName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stage-name))
      (common-lisp:list
       (common-lisp:cons "StageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-edge-deployment-stage-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-edge-packaging-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-edge-packaging-job-request-"))
   (edge-packaging-job-name
    (common-lisp:error ":edge-packaging-job-name is required") :type
    (common-lisp:or entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-edge-packaging-job-request
                    'make-stop-edge-packaging-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-edge-packaging-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-edge-packaging-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'edge-packaging-job-name))
      (common-lisp:list
       (common-lisp:cons "EdgePackagingJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-edge-packaging-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-hyper-parameter-tuning-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-hyper-parameter-tuning-job-request-"))
   (hyper-parameter-tuning-job-name
    (common-lisp:error ":hyper-parameter-tuning-job-name is required") :type
    (common-lisp:or hyper-parameter-tuning-job-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-hyper-parameter-tuning-job-request
                    'make-stop-hyper-parameter-tuning-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-hyper-parameter-tuning-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-hyper-parameter-tuning-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'hyper-parameter-tuning-job-name))
      (common-lisp:list
       (common-lisp:cons "HyperParameterTuningJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-hyper-parameter-tuning-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-inference-experiment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-inference-experiment-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or inference-experiment-name common-lisp:null))
   (model-variant-actions
    (common-lisp:error ":model-variant-actions is required") :type
    (common-lisp:or model-variant-action-map common-lisp:null))
   (desired-model-variants common-lisp:nil :type
    (common-lisp:or model-variant-config-list common-lisp:null))
   (desired-state common-lisp:nil :type
    (common-lisp:or inference-experiment-stop-desired-state common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or inference-experiment-status-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-inference-experiment-request
                    'make-stop-inference-experiment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-inference-experiment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-inference-experiment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-variant-actions))
      (common-lisp:list
       (common-lisp:cons "ModelVariantActions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'desired-model-variants))
      (common-lisp:list
       (common-lisp:cons "DesiredModelVariants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'desired-state))
      (common-lisp:list
       (common-lisp:cons "DesiredState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-inference-experiment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-inference-experiment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-inference-experiment-response-"))
   (inference-experiment-arn
    (common-lisp:error ":inference-experiment-arn is required") :type
    (common-lisp:or inference-experiment-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-inference-experiment-response
                    'make-stop-inference-experiment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-inference-experiment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-inference-experiment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-experiment-arn))
      (common-lisp:list
       (common-lisp:cons "InferenceExperimentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-inference-experiment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-inference-recommendations-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-inference-recommendations-job-request-"))
   (job-name (common-lisp:error ":job-name is required") :type
    (common-lisp:or recommendation-job-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-inference-recommendations-job-request
                    'make-stop-inference-recommendations-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-inference-recommendations-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-inference-recommendations-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "JobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-inference-recommendations-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-labeling-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-labeling-job-request-"))
   (labeling-job-name (common-lisp:error ":labeling-job-name is required")
    :type (common-lisp:or labeling-job-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-labeling-job-request
                    'make-stop-labeling-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-labeling-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-labeling-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labeling-job-name))
      (common-lisp:list
       (common-lisp:cons "LabelingJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-labeling-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-monitoring-schedule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-monitoring-schedule-request-"))
   (monitoring-schedule-name
    (common-lisp:error ":monitoring-schedule-name is required") :type
    (common-lisp:or monitoring-schedule-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-monitoring-schedule-request
                    'make-stop-monitoring-schedule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-monitoring-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-monitoring-schedule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-name))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-monitoring-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-notebook-instance-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-notebook-instance-input-"))
   (notebook-instance-name
    (common-lisp:error ":notebook-instance-name is required") :type
    (common-lisp:or notebook-instance-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-notebook-instance-input
                    'make-stop-notebook-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-notebook-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-notebook-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-name))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-notebook-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-pipeline-execution-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-pipeline-execution-request-"))
   (pipeline-execution-arn
    (common-lisp:error ":pipeline-execution-arn is required") :type
    (common-lisp:or pipeline-execution-arn common-lisp:null))
   (client-request-token
    (common-lisp:error ":client-request-token is required") :type
    (common-lisp:or idempotency-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-pipeline-execution-request
                    'make-stop-pipeline-execution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-pipeline-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-pipeline-execution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-arn))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-pipeline-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-pipeline-execution-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-pipeline-execution-response-"))
   (pipeline-execution-arn common-lisp:nil :type
    (common-lisp:or pipeline-execution-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-pipeline-execution-response
                    'make-stop-pipeline-execution-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-pipeline-execution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-pipeline-execution-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-arn))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-pipeline-execution-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-processing-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-processing-job-request-"))
   (processing-job-name (common-lisp:error ":processing-job-name is required")
    :type (common-lisp:or processing-job-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-processing-job-request
                    'make-stop-processing-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-processing-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-processing-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-job-name))
      (common-lisp:list
       (common-lisp:cons "ProcessingJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-processing-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-training-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-training-job-request-"))
   (training-job-name (common-lisp:error ":training-job-name is required")
    :type (common-lisp:or training-job-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-training-job-request
                    'make-stop-training-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-training-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-training-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-job-name))
      (common-lisp:list
       (common-lisp:cons "TrainingJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-training-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-transform-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-transform-job-request-"))
   (transform-job-name (common-lisp:error ":transform-job-name is required")
    :type (common-lisp:or transform-job-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-transform-job-request
                    'make-stop-transform-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-transform-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-transform-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-job-name))
      (common-lisp:list
       (common-lisp:cons "TransformJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-transform-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stopping-condition (:copier common-lisp:nil)
      (:conc-name "struct-shape-stopping-condition-"))
   (max-runtime-in-seconds common-lisp:nil :type
    (common-lisp:or max-runtime-in-seconds common-lisp:null))
   (max-wait-time-in-seconds common-lisp:nil :type
    (common-lisp:or max-wait-time-in-seconds common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stopping-condition 'make-stopping-condition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input stopping-condition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input stopping-condition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-runtime-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaxRuntimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-wait-time-in-seconds))
      (common-lisp:list
       (common-lisp:cons "MaxWaitTimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input stopping-condition))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype string1024 () 'common-lisp:string)
(common-lisp:deftype string128 () 'common-lisp:string)
(common-lisp:deftype string200 () 'common-lisp:string)
(common-lisp:deftype string2048 () 'common-lisp:string)
(common-lisp:deftype string256 () 'common-lisp:string)
(common-lisp:deftype string3072 () 'common-lisp:string)
(common-lisp:deftype string40 () 'common-lisp:string)
(common-lisp:deftype string64 () 'common-lisp:string)
(common-lisp:deftype string8192 () 'common-lisp:string)
(common-lisp:deftype string-parameter-value () 'common-lisp:string)
(common-lisp:deftype studio-lifecycle-config-app-type () 'common-lisp:string)
(common-lisp:deftype studio-lifecycle-config-arn () 'common-lisp:string)
(common-lisp:deftype studio-lifecycle-config-content () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (studio-lifecycle-config-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-studio-lifecycle-config-details-"))
   (studio-lifecycle-config-arn common-lisp:nil :type
    (common-lisp:or studio-lifecycle-config-arn common-lisp:null))
   (studio-lifecycle-config-name common-lisp:nil :type
    (common-lisp:or studio-lifecycle-config-name common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (studio-lifecycle-config-app-type common-lisp:nil :type
    (common-lisp:or studio-lifecycle-config-app-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'studio-lifecycle-config-details
                    'make-studio-lifecycle-config-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          studio-lifecycle-config-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          studio-lifecycle-config-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-lifecycle-config-arn))
      (common-lisp:list
       (common-lisp:cons "StudioLifecycleConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-lifecycle-config-name))
      (common-lisp:list
       (common-lisp:cons "StudioLifecycleConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'studio-lifecycle-config-app-type))
      (common-lisp:list
       (common-lisp:cons "StudioLifecycleConfigAppType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          studio-lifecycle-config-details))
   common-lisp:nil))
(common-lisp:deftype studio-lifecycle-config-name () 'common-lisp:string)
(common-lisp:deftype studio-lifecycle-config-sort-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype studio-lifecycle-configs-list ()
   '(trivial-types:proper-list studio-lifecycle-config-details))
 (common-lisp:defun |make-studio-lifecycle-configs-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            studio-lifecycle-config-details))
   aws-sdk/generator/shape::members))
(common-lisp:deftype subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype subnets () '(trivial-types:proper-list subnet-id))
 (common-lisp:defun |make-subnets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (subscribed-workteam (:copier common-lisp:nil)
      (:conc-name "struct-shape-subscribed-workteam-"))
   (workteam-arn (common-lisp:error ":workteam-arn is required") :type
    (common-lisp:or workteam-arn common-lisp:null))
   (marketplace-title common-lisp:nil :type
    (common-lisp:or string200 common-lisp:null))
   (seller-name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (marketplace-description common-lisp:nil :type
    (common-lisp:or string200 common-lisp:null))
   (listing-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'subscribed-workteam 'make-subscribed-workteam))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subscribed-workteam))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subscribed-workteam))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workteam-arn))
      (common-lisp:list
       (common-lisp:cons "WorkteamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marketplace-title))
      (common-lisp:list
       (common-lisp:cons "MarketplaceTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'seller-name))
      (common-lisp:list
       (common-lisp:cons "SellerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'marketplace-description))
      (common-lisp:list
       (common-lisp:cons "MarketplaceDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'listing-id))
      (common-lisp:list
       (common-lisp:cons "ListingId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subscribed-workteam))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype subscribed-workteams ()
   '(trivial-types:proper-list subscribed-workteam))
 (common-lisp:defun |make-subscribed-workteams|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscribed-workteam))
   aws-sdk/generator/shape::members))
(common-lisp:deftype success () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (suggestion-query (:copier common-lisp:nil)
      (:conc-name "struct-shape-suggestion-query-"))
   (property-name-query common-lisp:nil :type
    (common-lisp:or property-name-query common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'suggestion-query 'make-suggestion-query))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input suggestion-query))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input suggestion-query))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-name-query))
      (common-lisp:list
       (common-lisp:cons "PropertyNameQuery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input suggestion-query))
   common-lisp:nil))
(common-lisp:deftype table-format () 'common-lisp:string)
(common-lisp:deftype table-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype target-attribute-name () 'common-lisp:string)
(common-lisp:deftype target-device () 'common-lisp:string)
(common-lisp:deftype target-label-column () 'common-lisp:string)
(common-lisp:deftype target-objective-metric-value () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defstruct
     (target-platform (:copier common-lisp:nil)
      (:conc-name "struct-shape-target-platform-"))
   (os (common-lisp:error ":os is required") :type
    (common-lisp:or target-platform-os common-lisp:null))
   (arch (common-lisp:error ":arch is required") :type
    (common-lisp:or target-platform-arch common-lisp:null))
   (accelerator common-lisp:nil :type
    (common-lisp:or target-platform-accelerator common-lisp:null)))
 (common-lisp:export (common-lisp:list 'target-platform 'make-target-platform))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input target-platform))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input target-platform))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'os))
      (common-lisp:list
       (common-lisp:cons "Os"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arch))
      (common-lisp:list
       (common-lisp:cons "Arch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator))
      (common-lisp:list
       (common-lisp:cons "Accelerator"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input target-platform))
   common-lisp:nil))
(common-lisp:deftype target-platform-accelerator () 'common-lisp:string)
(common-lisp:deftype target-platform-arch () 'common-lisp:string)
(common-lisp:deftype target-platform-os () 'common-lisp:string)
(common-lisp:deftype task-availability-lifetime-in-seconds ()
  'common-lisp:integer)
(common-lisp:deftype task-count () 'common-lisp:integer)
(common-lisp:deftype task-description () 'common-lisp:string)
(common-lisp:deftype task-input () 'common-lisp:string)
(common-lisp:deftype task-keyword () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype task-keywords ()
   '(trivial-types:proper-list task-keyword))
 (common-lisp:defun |make-task-keywords|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list task-keyword))
   aws-sdk/generator/shape::members))
(common-lisp:deftype task-time-limit-in-seconds () 'common-lisp:integer)
(common-lisp:deftype task-title () 'common-lisp:string)
(common-lisp:deftype template-content () 'common-lisp:string)
(common-lisp:deftype template-content-sha256 () 'common-lisp:string)
(common-lisp:deftype template-url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tensor-board-app-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-tensor-board-app-settings-"))
   (default-resource-spec common-lisp:nil :type
    (common-lisp:or resource-spec common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tensor-board-app-settings
                    'make-tensor-board-app-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tensor-board-app-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tensor-board-app-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-resource-spec))
      (common-lisp:list
       (common-lisp:cons "DefaultResourceSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tensor-board-app-settings))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tensor-board-output-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-tensor-board-output-config-"))
   (local-path common-lisp:nil :type
    (common-lisp:or directory-path common-lisp:null))
   (s3output-path (common-lisp:error ":s3output-path is required") :type
    (common-lisp:or s3uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tensor-board-output-config
                    'make-tensor-board-output-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tensor-board-output-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tensor-board-output-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'local-path))
      (common-lisp:list
       (common-lisp:cons "LocalPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3output-path))
      (common-lisp:list
       (common-lisp:cons "S3OutputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tensor-board-output-config))
   common-lisp:nil))
(common-lisp:deftype tenth-fractions-of-acent () 'common-lisp:integer)
(common-lisp:deftype termination-wait-in-seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (text-classification-job-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-text-classification-job-config-"))
   (completion-criteria common-lisp:nil :type
    (common-lisp:or auto-mljob-completion-criteria common-lisp:null))
   (content-column common-lisp:nil :type
    (common-lisp:or content-column common-lisp:null))
   (target-label-column common-lisp:nil :type
    (common-lisp:or target-label-column common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'text-classification-job-config
                    'make-text-classification-job-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          text-classification-job-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          text-classification-job-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-criteria))
      (common-lisp:list
       (common-lisp:cons "CompletionCriteria"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-column))
      (common-lisp:list
       (common-lisp:cons "ContentColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-label-column))
      (common-lisp:list
       (common-lisp:cons "TargetLabelColumn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          text-classification-job-config))
   common-lisp:nil))
(common-lisp:deftype thing-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (time-series-forecasting-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-time-series-forecasting-settings-"))
   (status common-lisp:nil :type
    (common-lisp:or feature-status common-lisp:null))
   (amazon-forecast-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'time-series-forecasting-settings
                    'make-time-series-forecasting-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          time-series-forecasting-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          time-series-forecasting-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amazon-forecast-role-arn))
      (common-lisp:list
       (common-lisp:cons "AmazonForecastRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          time-series-forecasting-settings))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype traffic-duration-in-seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (traffic-pattern (:copier common-lisp:nil)
      (:conc-name "struct-shape-traffic-pattern-"))
   (traffic-type common-lisp:nil :type
    (common-lisp:or traffic-type common-lisp:null))
   (phases common-lisp:nil :type (common-lisp:or phases common-lisp:null)))
 (common-lisp:export (common-lisp:list 'traffic-pattern 'make-traffic-pattern))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input traffic-pattern))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input traffic-pattern))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'traffic-type))
      (common-lisp:list
       (common-lisp:cons "TrafficType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phases))
      (common-lisp:list
       (common-lisp:cons "Phases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input traffic-pattern))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (traffic-routing-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-traffic-routing-config-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or traffic-routing-config-type common-lisp:null))
   (wait-interval-in-seconds
    (common-lisp:error ":wait-interval-in-seconds is required") :type
    (common-lisp:or wait-interval-in-seconds common-lisp:null))
   (canary-size common-lisp:nil :type
    (common-lisp:or capacity-size common-lisp:null))
   (linear-step-size common-lisp:nil :type
    (common-lisp:or capacity-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'traffic-routing-config 'make-traffic-routing-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          traffic-routing-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          traffic-routing-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wait-interval-in-seconds))
      (common-lisp:list
       (common-lisp:cons "WaitIntervalInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canary-size))
      (common-lisp:list
       (common-lisp:cons "CanarySize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'linear-step-size))
      (common-lisp:list
       (common-lisp:cons "LinearStepSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          traffic-routing-config))
   common-lisp:nil))
(common-lisp:deftype traffic-routing-config-type () 'common-lisp:string)
(common-lisp:deftype traffic-type () 'common-lisp:string)
(common-lisp:deftype training-container-argument () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype training-container-arguments ()
   '(trivial-types:proper-list training-container-argument))
 (common-lisp:defun |make-training-container-arguments|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            training-container-argument))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype training-container-entrypoint ()
   '(trivial-types:proper-list training-container-entrypoint-string))
 (common-lisp:defun |make-training-container-entrypoint|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            training-container-entrypoint-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype training-container-entrypoint-string ()
  'common-lisp:string)
(common-lisp:deftype training-environment-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype training-environment-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-training-environment-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype training-environment-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (training-image-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-training-image-config-"))
   (training-repository-access-mode
    (common-lisp:error ":training-repository-access-mode is required") :type
    (common-lisp:or training-repository-access-mode common-lisp:null))
   (training-repository-auth-config common-lisp:nil :type
    (common-lisp:or training-repository-auth-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'training-image-config 'make-training-image-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          training-image-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          training-image-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-repository-access-mode))
      (common-lisp:list
       (common-lisp:cons "TrainingRepositoryAccessMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-repository-auth-config))
      (common-lisp:list
       (common-lisp:cons "TrainingRepositoryAuthConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          training-image-config))
   common-lisp:nil))
(common-lisp:deftype training-input-mode () 'common-lisp:string)
(common-lisp:deftype training-instance-count () 'common-lisp:integer)
(common-lisp:deftype training-instance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype training-instance-types ()
   '(trivial-types:proper-list training-instance-type))
 (common-lisp:defun |make-training-instance-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list training-instance-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (training-job (:copier common-lisp:nil)
      (:conc-name "struct-shape-training-job-"))
   (training-job-name common-lisp:nil :type
    (common-lisp:or training-job-name common-lisp:null))
   (training-job-arn common-lisp:nil :type
    (common-lisp:or training-job-arn common-lisp:null))
   (tuning-job-arn common-lisp:nil :type
    (common-lisp:or hyper-parameter-tuning-job-arn common-lisp:null))
   (labeling-job-arn common-lisp:nil :type
    (common-lisp:or labeling-job-arn common-lisp:null))
   (auto-mljob-arn common-lisp:nil :type
    (common-lisp:or auto-mljob-arn common-lisp:null))
   (model-artifacts common-lisp:nil :type
    (common-lisp:or model-artifacts common-lisp:null))
   (training-job-status common-lisp:nil :type
    (common-lisp:or training-job-status common-lisp:null))
   (secondary-status common-lisp:nil :type
    (common-lisp:or secondary-status common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (hyper-parameters common-lisp:nil :type
    (common-lisp:or hyper-parameters common-lisp:null))
   (algorithm-specification common-lisp:nil :type
    (common-lisp:or algorithm-specification common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (input-data-config common-lisp:nil :type
    (common-lisp:or input-data-config common-lisp:null))
   (output-data-config common-lisp:nil :type
    (common-lisp:or output-data-config common-lisp:null))
   (resource-config common-lisp:nil :type
    (common-lisp:or resource-config common-lisp:null))
   (vpc-config common-lisp:nil :type
    (common-lisp:or vpc-config common-lisp:null))
   (stopping-condition common-lisp:nil :type
    (common-lisp:or stopping-condition common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (training-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (training-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (secondary-status-transitions common-lisp:nil :type
    (common-lisp:or secondary-status-transitions common-lisp:null))
   (final-metric-data-list common-lisp:nil :type
    (common-lisp:or final-metric-data-list common-lisp:null))
   (enable-network-isolation common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (enable-inter-container-traffic-encryption common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (enable-managed-spot-training common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (checkpoint-config common-lisp:nil :type
    (common-lisp:or checkpoint-config common-lisp:null))
   (training-time-in-seconds common-lisp:nil :type
    (common-lisp:or training-time-in-seconds common-lisp:null))
   (billable-time-in-seconds common-lisp:nil :type
    (common-lisp:or billable-time-in-seconds common-lisp:null))
   (debug-hook-config common-lisp:nil :type
    (common-lisp:or debug-hook-config common-lisp:null))
   (experiment-config common-lisp:nil :type
    (common-lisp:or experiment-config common-lisp:null))
   (debug-rule-configurations common-lisp:nil :type
    (common-lisp:or debug-rule-configurations common-lisp:null))
   (tensor-board-output-config common-lisp:nil :type
    (common-lisp:or tensor-board-output-config common-lisp:null))
   (debug-rule-evaluation-statuses common-lisp:nil :type
    (common-lisp:or debug-rule-evaluation-statuses common-lisp:null))
   (environment common-lisp:nil :type
    (common-lisp:or training-environment-map common-lisp:null))
   (retry-strategy common-lisp:nil :type
    (common-lisp:or retry-strategy common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'training-job 'make-training-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input training-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input training-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-job-name))
      (common-lisp:list
       (common-lisp:cons "TrainingJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-job-arn))
      (common-lisp:list
       (common-lisp:cons "TrainingJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tuning-job-arn))
      (common-lisp:list
       (common-lisp:cons "TuningJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labeling-job-arn))
      (common-lisp:list
       (common-lisp:cons "LabelingJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mljob-arn))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-artifacts))
      (common-lisp:list
       (common-lisp:cons "ModelArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-job-status))
      (common-lisp:list
       (common-lisp:cons "TrainingJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secondary-status))
      (common-lisp:list
       (common-lisp:cons "SecondaryStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hyper-parameters))
      (common-lisp:list
       (common-lisp:cons "HyperParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'algorithm-specification))
      (common-lisp:list
       (common-lisp:cons "AlgorithmSpecification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "OutputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-config))
      (common-lisp:list
       (common-lisp:cons "VpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-condition))
      (common-lisp:list
       (common-lisp:cons "StoppingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-start-time))
      (common-lisp:list
       (common-lisp:cons "TrainingStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-end-time))
      (common-lisp:list
       (common-lisp:cons "TrainingEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'secondary-status-transitions))
      (common-lisp:list
       (common-lisp:cons "SecondaryStatusTransitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'final-metric-data-list))
      (common-lisp:list
       (common-lisp:cons "FinalMetricDataList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-network-isolation))
      (common-lisp:list
       (common-lisp:cons "EnableNetworkIsolation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-inter-container-traffic-encryption))
      (common-lisp:list
       (common-lisp:cons "EnableInterContainerTrafficEncryption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-managed-spot-training))
      (common-lisp:list
       (common-lisp:cons "EnableManagedSpotTraining"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'checkpoint-config))
      (common-lisp:list
       (common-lisp:cons "CheckpointConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-time-in-seconds))
      (common-lisp:list
       (common-lisp:cons "TrainingTimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'billable-time-in-seconds))
      (common-lisp:list
       (common-lisp:cons "BillableTimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'debug-hook-config))
      (common-lisp:list
       (common-lisp:cons "DebugHookConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-config))
      (common-lisp:list
       (common-lisp:cons "ExperimentConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'debug-rule-configurations))
      (common-lisp:list
       (common-lisp:cons "DebugRuleConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tensor-board-output-config))
      (common-lisp:list
       (common-lisp:cons "TensorBoardOutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'debug-rule-evaluation-statuses))
      (common-lisp:list
       (common-lisp:cons "DebugRuleEvaluationStatuses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retry-strategy))
      (common-lisp:list
       (common-lisp:cons "RetryStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input training-job))
   common-lisp:nil))
(common-lisp:deftype training-job-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (training-job-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-training-job-definition-"))
   (training-input-mode (common-lisp:error ":training-input-mode is required")
    :type (common-lisp:or training-input-mode common-lisp:null))
   (hyper-parameters common-lisp:nil :type
    (common-lisp:or hyper-parameters common-lisp:null))
   (input-data-config (common-lisp:error ":input-data-config is required")
    :type (common-lisp:or input-data-config common-lisp:null))
   (output-data-config (common-lisp:error ":output-data-config is required")
    :type (common-lisp:or output-data-config common-lisp:null))
   (resource-config (common-lisp:error ":resource-config is required") :type
    (common-lisp:or resource-config common-lisp:null))
   (stopping-condition (common-lisp:error ":stopping-condition is required")
    :type (common-lisp:or stopping-condition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'training-job-definition 'make-training-job-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          training-job-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          training-job-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-input-mode))
      (common-lisp:list
       (common-lisp:cons "TrainingInputMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hyper-parameters))
      (common-lisp:list
       (common-lisp:cons "HyperParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-data-config))
      (common-lisp:list
       (common-lisp:cons "InputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-data-config))
      (common-lisp:list
       (common-lisp:cons "OutputDataConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopping-condition))
      (common-lisp:list
       (common-lisp:cons "StoppingCondition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          training-job-definition))
   common-lisp:nil))
(common-lisp:deftype training-job-early-stopping-type () 'common-lisp:string)
(common-lisp:deftype training-job-name () 'common-lisp:string)
(common-lisp:deftype training-job-sort-by-options () 'common-lisp:string)
(common-lisp:deftype training-job-status () 'common-lisp:string)
(common-lisp:deftype training-job-status-counter () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (training-job-status-counters (:copier common-lisp:nil)
      (:conc-name "struct-shape-training-job-status-counters-"))
   (completed common-lisp:nil :type
    (common-lisp:or training-job-status-counter common-lisp:null))
   (in-progress common-lisp:nil :type
    (common-lisp:or training-job-status-counter common-lisp:null))
   (retryable-error common-lisp:nil :type
    (common-lisp:or training-job-status-counter common-lisp:null))
   (non-retryable-error common-lisp:nil :type
    (common-lisp:or training-job-status-counter common-lisp:null))
   (stopped common-lisp:nil :type
    (common-lisp:or training-job-status-counter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'training-job-status-counters
                    'make-training-job-status-counters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          training-job-status-counters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          training-job-status-counters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed))
      (common-lisp:list
       (common-lisp:cons "Completed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'in-progress))
      (common-lisp:list
       (common-lisp:cons "InProgress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retryable-error))
      (common-lisp:list
       (common-lisp:cons "RetryableError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'non-retryable-error))
      (common-lisp:list
       (common-lisp:cons "NonRetryableError"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stopped))
      (common-lisp:list
       (common-lisp:cons "Stopped"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          training-job-status-counters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (training-job-step-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-training-job-step-metadata-"))
   (arn common-lisp:nil :type
    (common-lisp:or training-job-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'training-job-step-metadata
                    'make-training-job-step-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          training-job-step-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          training-job-step-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          training-job-step-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype training-job-summaries ()
   '(trivial-types:proper-list training-job-summary))
 (common-lisp:defun |make-training-job-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list training-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (training-job-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-training-job-summary-"))
   (training-job-name (common-lisp:error ":training-job-name is required")
    :type (common-lisp:or training-job-name common-lisp:null))
   (training-job-arn (common-lisp:error ":training-job-arn is required") :type
    (common-lisp:or training-job-arn common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (training-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (training-job-status (common-lisp:error ":training-job-status is required")
    :type (common-lisp:or training-job-status common-lisp:null))
   (warm-pool-status common-lisp:nil :type
    (common-lisp:or warm-pool-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'training-job-summary 'make-training-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input training-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input training-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-job-name))
      (common-lisp:list
       (common-lisp:cons "TrainingJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-job-arn))
      (common-lisp:list
       (common-lisp:cons "TrainingJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-end-time))
      (common-lisp:list
       (common-lisp:cons "TrainingEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-job-status))
      (common-lisp:list
       (common-lisp:cons "TrainingJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'warm-pool-status))
      (common-lisp:list
       (common-lisp:cons "WarmPoolStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input training-job-summary))
   common-lisp:nil))
(common-lisp:deftype training-repository-access-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (training-repository-auth-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-training-repository-auth-config-"))
   (training-repository-credentials-provider-arn
    (common-lisp:error
     ":training-repository-credentials-provider-arn is required")
    :type
    (common-lisp:or training-repository-credentials-provider-arn
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'training-repository-auth-config
                    'make-training-repository-auth-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          training-repository-auth-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          training-repository-auth-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-repository-credentials-provider-arn))
      (common-lisp:list
       (common-lisp:cons "TrainingRepositoryCredentialsProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          training-repository-auth-config))
   common-lisp:nil))
(common-lisp:deftype training-repository-credentials-provider-arn ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (training-specification (:copier common-lisp:nil)
      (:conc-name "struct-shape-training-specification-"))
   (training-image (common-lisp:error ":training-image is required") :type
    (common-lisp:or container-image common-lisp:null))
   (training-image-digest common-lisp:nil :type
    (common-lisp:or image-digest common-lisp:null))
   (supported-hyper-parameters common-lisp:nil :type
    (common-lisp:or hyper-parameter-specifications common-lisp:null))
   (supported-training-instance-types
    (common-lisp:error ":supported-training-instance-types is required") :type
    (common-lisp:or training-instance-types common-lisp:null))
   (supports-distributed-training common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (metric-definitions common-lisp:nil :type
    (common-lisp:or metric-definition-list common-lisp:null))
   (training-channels (common-lisp:error ":training-channels is required")
    :type (common-lisp:or channel-specifications common-lisp:null))
   (supported-tuning-job-objective-metrics common-lisp:nil :type
    (common-lisp:or hyper-parameter-tuning-job-objectives common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'training-specification 'make-training-specification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          training-specification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          training-specification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-image))
      (common-lisp:list
       (common-lisp:cons "TrainingImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'training-image-digest))
      (common-lisp:list
       (common-lisp:cons "TrainingImageDigest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-hyper-parameters))
      (common-lisp:list
       (common-lisp:cons "SupportedHyperParameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-training-instance-types))
      (common-lisp:list
       (common-lisp:cons "SupportedTrainingInstanceTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supports-distributed-training))
      (common-lisp:list
       (common-lisp:cons "SupportsDistributedTraining"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-definitions))
      (common-lisp:list
       (common-lisp:cons "MetricDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-channels))
      (common-lisp:list
       (common-lisp:cons "TrainingChannels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'supported-tuning-job-objective-metrics))
      (common-lisp:list
       (common-lisp:cons "SupportedTuningJobObjectiveMetrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          training-specification))
   common-lisp:nil))
(common-lisp:deftype training-time-in-seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (transform-data-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-transform-data-source-"))
   (s3data-source (common-lisp:error ":s3data-source is required") :type
    (common-lisp:or transform-s3data-source common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transform-data-source 'make-transform-data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transform-data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transform-data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3data-source))
      (common-lisp:list
       (common-lisp:cons "S3DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transform-data-source))
   common-lisp:nil))
(common-lisp:deftype transform-environment-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype transform-environment-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-transform-environment-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype transform-environment-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (transform-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-transform-input-"))
   (data-source (common-lisp:error ":data-source is required") :type
    (common-lisp:or transform-data-source common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or content-type common-lisp:null))
   (compression-type common-lisp:nil :type
    (common-lisp:or compression-type common-lisp:null))
   (split-type common-lisp:nil :type
    (common-lisp:or split-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'transform-input 'make-transform-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transform-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transform-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-source))
      (common-lisp:list
       (common-lisp:cons "DataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "ContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compression-type))
      (common-lisp:list
       (common-lisp:cons "CompressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'split-type))
      (common-lisp:list
       (common-lisp:cons "SplitType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transform-input))
   common-lisp:nil))
(common-lisp:deftype transform-instance-count () 'common-lisp:integer)
(common-lisp:deftype transform-instance-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype transform-instance-types ()
   '(trivial-types:proper-list transform-instance-type))
 (common-lisp:defun |make-transform-instance-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list transform-instance-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (transform-job (:copier common-lisp:nil)
      (:conc-name "struct-shape-transform-job-"))
   (transform-job-name common-lisp:nil :type
    (common-lisp:or transform-job-name common-lisp:null))
   (transform-job-arn common-lisp:nil :type
    (common-lisp:or transform-job-arn common-lisp:null))
   (transform-job-status common-lisp:nil :type
    (common-lisp:or transform-job-status common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null))
   (model-name common-lisp:nil :type
    (common-lisp:or model-name common-lisp:null))
   (max-concurrent-transforms common-lisp:nil :type
    (common-lisp:or max-concurrent-transforms common-lisp:null))
   (model-client-config common-lisp:nil :type
    (common-lisp:or model-client-config common-lisp:null))
   (max-payload-in-mb common-lisp:nil :type
    (common-lisp:or max-payload-in-mb common-lisp:null))
   (batch-strategy common-lisp:nil :type
    (common-lisp:or batch-strategy common-lisp:null))
   (environment common-lisp:nil :type
    (common-lisp:or transform-environment-map common-lisp:null))
   (transform-input common-lisp:nil :type
    (common-lisp:or transform-input common-lisp:null))
   (transform-output common-lisp:nil :type
    (common-lisp:or transform-output common-lisp:null))
   (transform-resources common-lisp:nil :type
    (common-lisp:or transform-resources common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (transform-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (transform-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (labeling-job-arn common-lisp:nil :type
    (common-lisp:or labeling-job-arn common-lisp:null))
   (auto-mljob-arn common-lisp:nil :type
    (common-lisp:or auto-mljob-arn common-lisp:null))
   (data-processing common-lisp:nil :type
    (common-lisp:or data-processing common-lisp:null))
   (experiment-config common-lisp:nil :type
    (common-lisp:or experiment-config common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'transform-job 'make-transform-job))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transform-job))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transform-job))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-job-name))
      (common-lisp:list
       (common-lisp:cons "TransformJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-job-arn))
      (common-lisp:list
       (common-lisp:cons "TransformJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transform-job-status))
      (common-lisp:list
       (common-lisp:cons "TransformJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-name))
      (common-lisp:list
       (common-lisp:cons "ModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-concurrent-transforms))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrentTransforms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-client-config))
      (common-lisp:list
       (common-lisp:cons "ModelClientConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-payload-in-mb))
      (common-lisp:list
       (common-lisp:cons "MaxPayloadInMB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-strategy))
      (common-lisp:list
       (common-lisp:cons "BatchStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-input))
      (common-lisp:list
       (common-lisp:cons "TransformInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-output))
      (common-lisp:list
       (common-lisp:cons "TransformOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-resources))
      (common-lisp:list
       (common-lisp:cons "TransformResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transform-start-time))
      (common-lisp:list
       (common-lisp:cons "TransformStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-end-time))
      (common-lisp:list
       (common-lisp:cons "TransformEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'labeling-job-arn))
      (common-lisp:list
       (common-lisp:cons "LabelingJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-mljob-arn))
      (common-lisp:list
       (common-lisp:cons "AutoMLJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-processing))
      (common-lisp:list
       (common-lisp:cons "DataProcessing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-config))
      (common-lisp:list
       (common-lisp:cons "ExperimentConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transform-job))
   common-lisp:nil))
(common-lisp:deftype transform-job-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (transform-job-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-transform-job-definition-"))
   (max-concurrent-transforms common-lisp:nil :type
    (common-lisp:or max-concurrent-transforms common-lisp:null))
   (max-payload-in-mb common-lisp:nil :type
    (common-lisp:or max-payload-in-mb common-lisp:null))
   (batch-strategy common-lisp:nil :type
    (common-lisp:or batch-strategy common-lisp:null))
   (environment common-lisp:nil :type
    (common-lisp:or transform-environment-map common-lisp:null))
   (transform-input (common-lisp:error ":transform-input is required") :type
    (common-lisp:or transform-input common-lisp:null))
   (transform-output (common-lisp:error ":transform-output is required") :type
    (common-lisp:or transform-output common-lisp:null))
   (transform-resources (common-lisp:error ":transform-resources is required")
    :type (common-lisp:or transform-resources common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transform-job-definition 'make-transform-job-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transform-job-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transform-job-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-concurrent-transforms))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrentTransforms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-payload-in-mb))
      (common-lisp:list
       (common-lisp:cons "MaxPayloadInMB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-strategy))
      (common-lisp:list
       (common-lisp:cons "BatchStrategy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'environment))
      (common-lisp:list
       (common-lisp:cons "Environment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-input))
      (common-lisp:list
       (common-lisp:cons "TransformInput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-output))
      (common-lisp:list
       (common-lisp:cons "TransformOutput"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-resources))
      (common-lisp:list
       (common-lisp:cons "TransformResources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transform-job-definition))
   common-lisp:nil))
(common-lisp:deftype transform-job-name () 'common-lisp:string)
(common-lisp:deftype transform-job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (transform-job-step-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-transform-job-step-metadata-"))
   (arn common-lisp:nil :type
    (common-lisp:or transform-job-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transform-job-step-metadata
                    'make-transform-job-step-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transform-job-step-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transform-job-step-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transform-job-step-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype transform-job-summaries ()
   '(trivial-types:proper-list transform-job-summary))
 (common-lisp:defun |make-transform-job-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list transform-job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (transform-job-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-transform-job-summary-"))
   (transform-job-name (common-lisp:error ":transform-job-name is required")
    :type (common-lisp:or transform-job-name common-lisp:null))
   (transform-job-arn (common-lisp:error ":transform-job-arn is required")
    :type (common-lisp:or transform-job-arn common-lisp:null))
   (creation-time (common-lisp:error ":creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (transform-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (transform-job-status
    (common-lisp:error ":transform-job-status is required") :type
    (common-lisp:or transform-job-status common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or failure-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transform-job-summary 'make-transform-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transform-job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transform-job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-job-name))
      (common-lisp:list
       (common-lisp:cons "TransformJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-job-arn))
      (common-lisp:list
       (common-lisp:cons "TransformJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-end-time))
      (common-lisp:list
       (common-lisp:cons "TransformEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transform-job-status))
      (common-lisp:list
       (common-lisp:cons "TransformJobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transform-job-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (transform-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-transform-output-"))
   (s3output-path (common-lisp:error ":s3output-path is required") :type
    (common-lisp:or s3uri common-lisp:null))
   (accept common-lisp:nil :type (common-lisp:or accept common-lisp:null))
   (assemble-with common-lisp:nil :type
    (common-lisp:or assembly-type common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transform-output 'make-transform-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transform-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transform-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3output-path))
      (common-lisp:list
       (common-lisp:cons "S3OutputPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accept))
      (common-lisp:list
       (common-lisp:cons "Accept"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assemble-with))
      (common-lisp:list
       (common-lisp:cons "AssembleWith"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "KmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transform-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (transform-resources (:copier common-lisp:nil)
      (:conc-name "struct-shape-transform-resources-"))
   (instance-type (common-lisp:error ":instance-type is required") :type
    (common-lisp:or transform-instance-type common-lisp:null))
   (instance-count (common-lisp:error ":instance-count is required") :type
    (common-lisp:or transform-instance-count common-lisp:null))
   (volume-kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transform-resources 'make-transform-resources))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transform-resources))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transform-resources))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-count))
      (common-lisp:list
       (common-lisp:cons "InstanceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-kms-key-id))
      (common-lisp:list
       (common-lisp:cons "VolumeKmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transform-resources))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (transform-s3data-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-transform-s3data-source-"))
   (s3data-type (common-lisp:error ":s3data-type is required") :type
    (common-lisp:or s3data-type common-lisp:null))
   (s3uri (common-lisp:error ":s3uri is required") :type
    (common-lisp:or s3uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transform-s3data-source 'make-transform-s3data-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transform-s3data-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transform-s3data-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3data-type))
      (common-lisp:list
       (common-lisp:cons "S3DataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3uri))
      (common-lisp:list
       (common-lisp:cons "S3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transform-s3data-source))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (trial (:copier common-lisp:nil) (:conc-name "struct-shape-trial-"))
   (trial-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (trial-arn common-lisp:nil :type
    (common-lisp:or trial-arn common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (experiment-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (source common-lisp:nil :type
    (common-lisp:or trial-source common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (metadata-properties common-lisp:nil :type
    (common-lisp:or metadata-properties common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (trial-component-summaries common-lisp:nil :type
    (common-lisp:or trial-component-simple-summaries common-lisp:null)))
 (common-lisp:export (common-lisp:list 'trial 'make-trial))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trial))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trial))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-name))
      (common-lisp:list
       (common-lisp:cons "TrialName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-arn))
      (common-lisp:list
       (common-lisp:cons "TrialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-name))
      (common-lisp:list
       (common-lisp:cons "ExperimentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-properties))
      (common-lisp:list
       (common-lisp:cons "MetadataProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trial-component-summaries))
      (common-lisp:list
       (common-lisp:cons "TrialComponentSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trial))
   common-lisp:nil))
(common-lisp:deftype trial-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (trial-component (:copier common-lisp:nil)
      (:conc-name "struct-shape-trial-component-"))
   (trial-component-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (trial-component-arn common-lisp:nil :type
    (common-lisp:or trial-component-arn common-lisp:null))
   (source common-lisp:nil :type
    (common-lisp:or trial-component-source common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or trial-component-status common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or trial-component-parameters common-lisp:null))
   (input-artifacts common-lisp:nil :type
    (common-lisp:or trial-component-artifacts common-lisp:null))
   (output-artifacts common-lisp:nil :type
    (common-lisp:or trial-component-artifacts common-lisp:null))
   (metrics common-lisp:nil :type
    (common-lisp:or trial-component-metric-summaries common-lisp:null))
   (metadata-properties common-lisp:nil :type
    (common-lisp:or metadata-properties common-lisp:null))
   (source-detail common-lisp:nil :type
    (common-lisp:or trial-component-source-detail common-lisp:null))
   (lineage-group-arn common-lisp:nil :type
    (common-lisp:or lineage-group-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (parents common-lisp:nil :type (common-lisp:or parents common-lisp:null))
   (run-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'trial-component 'make-trial-component))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trial-component))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trial-component))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trial-component-name))
      (common-lisp:list
       (common-lisp:cons "TrialComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-component-arn))
      (common-lisp:list
       (common-lisp:cons "TrialComponentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source))
      (common-lisp:list
       (common-lisp:cons "Source"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-artifacts))
      (common-lisp:list
       (common-lisp:cons "InputArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-artifacts))
      (common-lisp:list
       (common-lisp:cons "OutputArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metrics))
      (common-lisp:list
       (common-lisp:cons "Metrics"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata-properties))
      (common-lisp:list
       (common-lisp:cons "MetadataProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-detail))
      (common-lisp:list
       (common-lisp:cons "SourceDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lineage-group-arn))
      (common-lisp:list
       (common-lisp:cons "LineageGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parents))
      (common-lisp:list
       (common-lisp:cons "Parents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'run-name))
      (common-lisp:list
       (common-lisp:cons "RunName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trial-component))
   common-lisp:nil))
(common-lisp:deftype trial-component-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (trial-component-artifact (:copier common-lisp:nil)
      (:conc-name "struct-shape-trial-component-artifact-"))
   (media-type common-lisp:nil :type
    (common-lisp:or media-type common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or trial-component-artifact-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'trial-component-artifact 'make-trial-component-artifact))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          trial-component-artifact))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          trial-component-artifact))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'media-type))
      (common-lisp:list
       (common-lisp:cons "MediaType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          trial-component-artifact))
   common-lisp:nil))
(common-lisp:deftype trial-component-artifact-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype trial-component-artifacts () 'common-lisp:hash-table)
 (common-lisp:defun |make-trial-component-artifacts|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype trial-component-key256 () 'common-lisp:string)
(common-lisp:deftype trial-component-key64 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype trial-component-metric-summaries ()
   '(trivial-types:proper-list trial-component-metric-summary))
 (common-lisp:defun |make-trial-component-metric-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            trial-component-metric-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (trial-component-metric-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-trial-component-metric-summary-"))
   (metric-name common-lisp:nil :type
    (common-lisp:or metric-name common-lisp:null))
   (source-arn common-lisp:nil :type
    (common-lisp:or trial-component-source-arn common-lisp:null))
   (time-stamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (max common-lisp:nil :type
    (common-lisp:or optional-double common-lisp:null))
   (min common-lisp:nil :type
    (common-lisp:or optional-double common-lisp:null))
   (last common-lisp:nil :type
    (common-lisp:or optional-double common-lisp:null))
   (count common-lisp:nil :type
    (common-lisp:or optional-integer common-lisp:null))
   (avg common-lisp:nil :type
    (common-lisp:or optional-double common-lisp:null))
   (std-dev common-lisp:nil :type
    (common-lisp:or optional-double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'trial-component-metric-summary
                    'make-trial-component-metric-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          trial-component-metric-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          trial-component-metric-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-name))
      (common-lisp:list
       (common-lisp:cons "MetricName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-stamp))
      (common-lisp:list
       (common-lisp:cons "TimeStamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max))
      (common-lisp:list
       (common-lisp:cons "Max"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min))
      (common-lisp:list
       (common-lisp:cons "Min"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last))
      (common-lisp:list
       (common-lisp:cons "Last"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "Count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'avg))
      (common-lisp:list
       (common-lisp:cons "Avg"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'std-dev))
      (common-lisp:list
       (common-lisp:cons "StdDev"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          trial-component-metric-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (trial-component-parameter-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-trial-component-parameter-value-"))
   (string-value common-lisp:nil :type
    (common-lisp:or string-parameter-value common-lisp:null))
   (number-value common-lisp:nil :type
    (common-lisp:or double-parameter-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'trial-component-parameter-value
                    'make-trial-component-parameter-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          trial-component-parameter-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          trial-component-parameter-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value))
      (common-lisp:list
       (common-lisp:cons "StringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-value))
      (common-lisp:list
       (common-lisp:cons "NumberValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          trial-component-parameter-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype trial-component-parameters () 'common-lisp:hash-table)
 (common-lisp:defun |make-trial-component-parameters|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype trial-component-primary-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype trial-component-simple-summaries ()
   '(trivial-types:proper-list trial-component-simple-summary))
 (common-lisp:defun |make-trial-component-simple-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            trial-component-simple-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (trial-component-simple-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-trial-component-simple-summary-"))
   (trial-component-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (trial-component-arn common-lisp:nil :type
    (common-lisp:or trial-component-arn common-lisp:null))
   (trial-component-source common-lisp:nil :type
    (common-lisp:or trial-component-source common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'trial-component-simple-summary
                    'make-trial-component-simple-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          trial-component-simple-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          trial-component-simple-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trial-component-name))
      (common-lisp:list
       (common-lisp:cons "TrialComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-component-arn))
      (common-lisp:list
       (common-lisp:cons "TrialComponentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trial-component-source))
      (common-lisp:list
       (common-lisp:cons "TrialComponentSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          trial-component-simple-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (trial-component-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-trial-component-source-"))
   (source-arn (common-lisp:error ":source-arn is required") :type
    (common-lisp:or trial-component-source-arn common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or source-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'trial-component-source 'make-trial-component-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          trial-component-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          trial-component-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          trial-component-source))
   common-lisp:nil))
(common-lisp:deftype trial-component-source-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (trial-component-source-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-trial-component-source-detail-"))
   (source-arn common-lisp:nil :type
    (common-lisp:or trial-component-source-arn common-lisp:null))
   (training-job common-lisp:nil :type
    (common-lisp:or training-job common-lisp:null))
   (processing-job common-lisp:nil :type
    (common-lisp:or processing-job common-lisp:null))
   (transform-job common-lisp:nil :type
    (common-lisp:or transform-job common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'trial-component-source-detail
                    'make-trial-component-source-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          trial-component-source-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          trial-component-source-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-job))
      (common-lisp:list
       (common-lisp:cons "TrainingJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-job))
      (common-lisp:list
       (common-lisp:cons "ProcessingJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform-job))
      (common-lisp:list
       (common-lisp:cons "TransformJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          trial-component-source-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype trial-component-sources ()
   '(trivial-types:proper-list trial-component-source))
 (common-lisp:defun |make-trial-component-sources|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trial-component-source))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (trial-component-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-trial-component-status-"))
   (primary-status common-lisp:nil :type
    (common-lisp:or trial-component-primary-status common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or trial-component-status-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'trial-component-status 'make-trial-component-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          trial-component-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          trial-component-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'primary-status))
      (common-lisp:list
       (common-lisp:cons "PrimaryStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          trial-component-status))
   common-lisp:nil))
(common-lisp:deftype trial-component-status-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype trial-component-summaries ()
   '(trivial-types:proper-list trial-component-summary))
 (common-lisp:defun |make-trial-component-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trial-component-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (trial-component-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-trial-component-summary-"))
   (trial-component-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (trial-component-arn common-lisp:nil :type
    (common-lisp:or trial-component-arn common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (trial-component-source common-lisp:nil :type
    (common-lisp:or trial-component-source common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or trial-component-status common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-by common-lisp:nil :type
    (common-lisp:or user-context common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'trial-component-summary 'make-trial-component-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          trial-component-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          trial-component-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trial-component-name))
      (common-lisp:list
       (common-lisp:cons "TrialComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-component-arn))
      (common-lisp:list
       (common-lisp:cons "TrialComponentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trial-component-source))
      (common-lisp:list
       (common-lisp:cons "TrialComponentSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-by))
      (common-lisp:list
       (common-lisp:cons "CreatedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-by))
      (common-lisp:list
       (common-lisp:cons "LastModifiedBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          trial-component-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (trial-source (:copier common-lisp:nil)
      (:conc-name "struct-shape-trial-source-"))
   (source-arn (common-lisp:error ":source-arn is required") :type
    (common-lisp:or trial-source-arn common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or source-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'trial-source 'make-trial-source))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trial-source))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trial-source))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-arn))
      (common-lisp:list
       (common-lisp:cons "SourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-type))
      (common-lisp:list
       (common-lisp:cons "SourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trial-source))
   common-lisp:nil))
(common-lisp:deftype trial-source-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype trial-summaries ()
   '(trivial-types:proper-list trial-summary))
 (common-lisp:defun |make-trial-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trial-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (trial-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-trial-summary-"))
   (trial-arn common-lisp:nil :type
    (common-lisp:or trial-arn common-lisp:null))
   (trial-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (trial-source common-lisp:nil :type
    (common-lisp:or trial-source common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'trial-summary 'make-trial-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trial-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trial-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-arn))
      (common-lisp:list
       (common-lisp:cons "TrialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-name))
      (common-lisp:list
       (common-lisp:cons "TrialName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-source))
      (common-lisp:list
       (common-lisp:cons "TrialSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trial-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tuning-job-completion-criteria (:copier common-lisp:nil)
      (:conc-name "struct-shape-tuning-job-completion-criteria-"))
   (target-objective-metric-value common-lisp:nil :type
    (common-lisp:or target-objective-metric-value common-lisp:null))
   (best-objective-not-improving common-lisp:nil :type
    (common-lisp:or best-objective-not-improving common-lisp:null))
   (convergence-detected common-lisp:nil :type
    (common-lisp:or convergence-detected common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tuning-job-completion-criteria
                    'make-tuning-job-completion-criteria))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tuning-job-completion-criteria))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tuning-job-completion-criteria))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'target-objective-metric-value))
      (common-lisp:list
       (common-lisp:cons "TargetObjectiveMetricValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'best-objective-not-improving))
      (common-lisp:list
       (common-lisp:cons "BestObjectiveNotImproving"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'convergence-detected))
      (common-lisp:list
       (common-lisp:cons "ConvergenceDetected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tuning-job-completion-criteria))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tuning-job-step-meta-data (:copier common-lisp:nil)
      (:conc-name "struct-shape-tuning-job-step-meta-data-"))
   (arn common-lisp:nil :type
    (common-lisp:or hyper-parameter-tuning-job-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tuning-job-step-meta-data
                    'make-tuning-job-step-meta-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tuning-job-step-meta-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tuning-job-step-meta-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tuning-job-step-meta-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (usd (:copier common-lisp:nil) (:conc-name "struct-shape-usd-"))
   (dollars common-lisp:nil :type (common-lisp:or dollars common-lisp:null))
   (cents common-lisp:nil :type (common-lisp:or cents common-lisp:null))
   (tenth-fractions-of-acent common-lisp:nil :type
    (common-lisp:or tenth-fractions-of-acent common-lisp:null)))
 (common-lisp:export (common-lisp:list 'usd 'make-usd))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input usd))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input usd))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dollars))
      (common-lisp:list
       (common-lisp:cons "Dollars"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cents))
      (common-lisp:list
       (common-lisp:cons "Cents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tenth-fractions-of-acent))
      (common-lisp:list
       (common-lisp:cons "TenthFractionsOfACent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input usd))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ui-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-ui-config-"))
   (ui-template-s3uri common-lisp:nil :type
    (common-lisp:or s3uri common-lisp:null))
   (human-task-ui-arn common-lisp:nil :type
    (common-lisp:or human-task-ui-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ui-config 'make-ui-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ui-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ui-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ui-template-s3uri))
      (common-lisp:list
       (common-lisp:cons "UiTemplateS3Uri"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'human-task-ui-arn))
      (common-lisp:list
       (common-lisp:cons "HumanTaskUiArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ui-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ui-template (:copier common-lisp:nil)
      (:conc-name "struct-shape-ui-template-"))
   (content (common-lisp:error ":content is required") :type
    (common-lisp:or template-content common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ui-template 'make-ui-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ui-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ui-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ui-template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ui-template-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-ui-template-info-"))
   (url common-lisp:nil :type (common-lisp:or template-url common-lisp:null))
   (content-sha256 common-lisp:nil :type
    (common-lisp:or template-content-sha256 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ui-template-info 'make-ui-template-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ui-template-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ui-template-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-sha256))
      (common-lisp:list
       (common-lisp:cons "ContentSha256"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ui-template-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-action-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-action-request-"))
   (action-name (common-lisp:error ":action-name is required") :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or experiment-description common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or action-status common-lisp:null))
   (properties common-lisp:nil :type
    (common-lisp:or lineage-entity-parameters common-lisp:null))
   (properties-to-remove common-lisp:nil :type
    (common-lisp:or list-lineage-entity-parameter-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-action-request 'make-update-action-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-action-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-action-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "ActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'properties-to-remove))
      (common-lisp:list
       (common-lisp:cons "PropertiesToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-action-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-action-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-action-response-"))
   (action-arn common-lisp:nil :type
    (common-lisp:or action-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-action-response 'make-update-action-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-action-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-action-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-arn))
      (common-lisp:list
       (common-lisp:cons "ActionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-action-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-app-image-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-app-image-config-request-"))
   (app-image-config-name
    (common-lisp:error ":app-image-config-name is required") :type
    (common-lisp:or app-image-config-name common-lisp:null))
   (kernel-gateway-image-config common-lisp:nil :type
    (common-lisp:or kernel-gateway-image-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-app-image-config-request
                    'make-update-app-image-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-app-image-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-app-image-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-image-config-name))
      (common-lisp:list
       (common-lisp:cons "AppImageConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kernel-gateway-image-config))
      (common-lisp:list
       (common-lisp:cons "KernelGatewayImageConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-app-image-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-app-image-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-app-image-config-response-"))
   (app-image-config-arn common-lisp:nil :type
    (common-lisp:or app-image-config-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-app-image-config-response
                    'make-update-app-image-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-app-image-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-app-image-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-image-config-arn))
      (common-lisp:list
       (common-lisp:cons "AppImageConfigArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-app-image-config-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-artifact-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-artifact-request-"))
   (artifact-arn (common-lisp:error ":artifact-arn is required") :type
    (common-lisp:or artifact-arn common-lisp:null))
   (artifact-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (properties common-lisp:nil :type
    (common-lisp:or lineage-entity-parameters common-lisp:null))
   (properties-to-remove common-lisp:nil :type
    (common-lisp:or list-lineage-entity-parameter-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-artifact-request 'make-update-artifact-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-artifact-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-artifact-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-arn))
      (common-lisp:list
       (common-lisp:cons "ArtifactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-name))
      (common-lisp:list
       (common-lisp:cons "ArtifactName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'properties-to-remove))
      (common-lisp:list
       (common-lisp:cons "PropertiesToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-artifact-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-artifact-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-artifact-response-"))
   (artifact-arn common-lisp:nil :type
    (common-lisp:or artifact-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-artifact-response 'make-update-artifact-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-artifact-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-artifact-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'artifact-arn))
      (common-lisp:list
       (common-lisp:cons "ArtifactArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-artifact-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-code-repository-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-code-repository-input-"))
   (code-repository-name
    (common-lisp:error ":code-repository-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (git-config common-lisp:nil :type
    (common-lisp:or git-config-for-update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-code-repository-input
                    'make-update-code-repository-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-code-repository-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-code-repository-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-repository-name))
      (common-lisp:list
       (common-lisp:cons "CodeRepositoryName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'git-config))
      (common-lisp:list
       (common-lisp:cons "GitConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-code-repository-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-code-repository-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-code-repository-output-"))
   (code-repository-arn (common-lisp:error ":code-repository-arn is required")
    :type (common-lisp:or code-repository-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-code-repository-output
                    'make-update-code-repository-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-code-repository-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-code-repository-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-repository-arn))
      (common-lisp:list
       (common-lisp:cons "CodeRepositoryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-code-repository-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-context-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-context-request-"))
   (context-name (common-lisp:error ":context-name is required") :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or experiment-description common-lisp:null))
   (properties common-lisp:nil :type
    (common-lisp:or lineage-entity-parameters common-lisp:null))
   (properties-to-remove common-lisp:nil :type
    (common-lisp:or list-lineage-entity-parameter-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-context-request 'make-update-context-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-context-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-context-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-name))
      (common-lisp:list
       (common-lisp:cons "ContextName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "Properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'properties-to-remove))
      (common-lisp:list
       (common-lisp:cons "PropertiesToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-context-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-context-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-context-response-"))
   (context-arn common-lisp:nil :type
    (common-lisp:or context-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-context-response 'make-update-context-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-context-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-context-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-arn))
      (common-lisp:list
       (common-lisp:cons "ContextArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-context-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-device-fleet-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-device-fleet-request-"))
   (device-fleet-name (common-lisp:error ":device-fleet-name is required")
    :type (common-lisp:or entity-name common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or device-fleet-description common-lisp:null))
   (output-config (common-lisp:error ":output-config is required") :type
    (common-lisp:or edge-output-config common-lisp:null))
   (enable-iot-role-alias common-lisp:nil :type
    (common-lisp:or enable-iot-role-alias common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-device-fleet-request
                    'make-update-device-fleet-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-device-fleet-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-device-fleet-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-fleet-name))
      (common-lisp:list
       (common-lisp:cons "DeviceFleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-config))
      (common-lisp:list
       (common-lisp:cons "OutputConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'enable-iot-role-alias))
      (common-lisp:list
       (common-lisp:cons "EnableIotRoleAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-device-fleet-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-devices-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-devices-request-"))
   (device-fleet-name (common-lisp:error ":device-fleet-name is required")
    :type (common-lisp:or entity-name common-lisp:null))
   (devices (common-lisp:error ":devices is required") :type
    (common-lisp:or devices common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-devices-request 'make-update-devices-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-devices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-devices-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-fleet-name))
      (common-lisp:list
       (common-lisp:cons "DeviceFleetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'devices))
      (common-lisp:list
       (common-lisp:cons "Devices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-devices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-domain-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-domain-request-"))
   (domain-id (common-lisp:error ":domain-id is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (default-user-settings common-lisp:nil :type
    (common-lisp:or user-settings common-lisp:null))
   (domain-settings-for-update common-lisp:nil :type
    (common-lisp:or domain-settings-for-update common-lisp:null))
   (default-space-settings common-lisp:nil :type
    (common-lisp:or default-space-settings common-lisp:null))
   (app-security-group-management common-lisp:nil :type
    (common-lisp:or app-security-group-management common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-domain-request 'make-update-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-user-settings))
      (common-lisp:list
       (common-lisp:cons "DefaultUserSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'domain-settings-for-update))
      (common-lisp:list
       (common-lisp:cons "DomainSettingsForUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-space-settings))
      (common-lisp:list
       (common-lisp:cons "DefaultSpaceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-security-group-management))
      (common-lisp:list
       (common-lisp:cons "AppSecurityGroupManagement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-domain-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-domain-response-"))
   (domain-arn common-lisp:nil :type
    (common-lisp:or domain-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-domain-response 'make-update-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-arn))
      (common-lisp:list
       (common-lisp:cons "DomainArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-endpoint-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-endpoint-input-"))
   (endpoint-name (common-lisp:error ":endpoint-name is required") :type
    (common-lisp:or endpoint-name common-lisp:null))
   (endpoint-config-name
    (common-lisp:error ":endpoint-config-name is required") :type
    (common-lisp:or endpoint-config-name common-lisp:null))
   (retain-all-variant-properties common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (exclude-retained-variant-properties common-lisp:nil :type
    (common-lisp:or variant-property-list common-lisp:null))
   (deployment-config common-lisp:nil :type
    (common-lisp:or deployment-config common-lisp:null))
   (retain-deployment-config common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-endpoint-input 'make-update-endpoint-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'endpoint-config-name))
      (common-lisp:list
       (common-lisp:cons "EndpointConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retain-all-variant-properties))
      (common-lisp:list
       (common-lisp:cons "RetainAllVariantProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'exclude-retained-variant-properties))
      (common-lisp:list
       (common-lisp:cons "ExcludeRetainedVariantProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deployment-config))
      (common-lisp:list
       (common-lisp:cons "DeploymentConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'retain-deployment-config))
      (common-lisp:list
       (common-lisp:cons "RetainDeploymentConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-endpoint-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-endpoint-output-"))
   (endpoint-arn (common-lisp:error ":endpoint-arn is required") :type
    (common-lisp:or endpoint-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-endpoint-output 'make-update-endpoint-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-endpoint-weights-and-capacities-input (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-endpoint-weights-and-capacities-input-"))
   (endpoint-name (common-lisp:error ":endpoint-name is required") :type
    (common-lisp:or endpoint-name common-lisp:null))
   (desired-weights-and-capacities
    (common-lisp:error ":desired-weights-and-capacities is required") :type
    (common-lisp:or desired-weight-and-capacity-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-endpoint-weights-and-capacities-input
                    'make-update-endpoint-weights-and-capacities-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-weights-and-capacities-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-weights-and-capacities-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-name))
      (common-lisp:list
       (common-lisp:cons "EndpointName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'desired-weights-and-capacities))
      (common-lisp:list
       (common-lisp:cons "DesiredWeightsAndCapacities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-weights-and-capacities-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-endpoint-weights-and-capacities-output (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-endpoint-weights-and-capacities-output-"))
   (endpoint-arn (common-lisp:error ":endpoint-arn is required") :type
    (common-lisp:or endpoint-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-endpoint-weights-and-capacities-output
                    'make-update-endpoint-weights-and-capacities-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-weights-and-capacities-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-weights-and-capacities-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'endpoint-arn))
      (common-lisp:list
       (common-lisp:cons "EndpointArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-endpoint-weights-and-capacities-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-experiment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-experiment-request-"))
   (experiment-name (common-lisp:error ":experiment-name is required") :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or experiment-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-experiment-request
                    'make-update-experiment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-name))
      (common-lisp:list
       (common-lisp:cons "ExperimentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-experiment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-experiment-response-"))
   (experiment-arn common-lisp:nil :type
    (common-lisp:or experiment-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-experiment-response
                    'make-update-experiment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'experiment-arn))
      (common-lisp:list
       (common-lisp:cons "ExperimentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-experiment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-feature-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-feature-group-request-"))
   (feature-group-name (common-lisp:error ":feature-group-name is required")
    :type (common-lisp:or feature-group-name common-lisp:null))
   (feature-additions common-lisp:nil :type
    (common-lisp:or feature-additions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-feature-group-request
                    'make-update-feature-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-feature-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-feature-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-group-name))
      (common-lisp:list
       (common-lisp:cons "FeatureGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-additions))
      (common-lisp:list
       (common-lisp:cons "FeatureAdditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-feature-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-feature-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-feature-group-response-"))
   (feature-group-arn (common-lisp:error ":feature-group-arn is required")
    :type (common-lisp:or feature-group-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-feature-group-response
                    'make-update-feature-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-feature-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-feature-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-group-arn))
      (common-lisp:list
       (common-lisp:cons "FeatureGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-feature-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-feature-metadata-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-feature-metadata-request-"))
   (feature-group-name (common-lisp:error ":feature-group-name is required")
    :type (common-lisp:or feature-group-name common-lisp:null))
   (feature-name (common-lisp:error ":feature-name is required") :type
    (common-lisp:or feature-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or feature-description common-lisp:null))
   (parameter-additions common-lisp:nil :type
    (common-lisp:or feature-parameter-additions common-lisp:null))
   (parameter-removals common-lisp:nil :type
    (common-lisp:or feature-parameter-removals common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-feature-metadata-request
                    'make-update-feature-metadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-feature-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-feature-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-group-name))
      (common-lisp:list
       (common-lisp:cons "FeatureGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'feature-name))
      (common-lisp:list
       (common-lisp:cons "FeatureName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-additions))
      (common-lisp:list
       (common-lisp:cons "ParameterAdditions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameter-removals))
      (common-lisp:list
       (common-lisp:cons "ParameterRemovals"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-feature-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-hub-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-hub-request-"))
   (hub-name (common-lisp:error ":hub-name is required") :type
    (common-lisp:or hub-name common-lisp:null))
   (hub-description common-lisp:nil :type
    (common-lisp:or hub-description common-lisp:null))
   (hub-display-name common-lisp:nil :type
    (common-lisp:or hub-display-name common-lisp:null))
   (hub-search-keywords common-lisp:nil :type
    (common-lisp:or hub-search-keyword-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-hub-request 'make-update-hub-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-hub-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-hub-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-name))
      (common-lisp:list
       (common-lisp:cons "HubName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-description))
      (common-lisp:list
       (common-lisp:cons "HubDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-display-name))
      (common-lisp:list
       (common-lisp:cons "HubDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-search-keywords))
      (common-lisp:list
       (common-lisp:cons "HubSearchKeywords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-hub-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-hub-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-hub-response-"))
   (hub-arn (common-lisp:error ":hub-arn is required") :type
    (common-lisp:or hub-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-hub-response 'make-update-hub-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-hub-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-hub-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hub-arn))
      (common-lisp:list
       (common-lisp:cons "HubArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-hub-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-image-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-image-request-"))
   (delete-properties common-lisp:nil :type
    (common-lisp:or image-delete-property-list common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or image-description common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or image-display-name common-lisp:null))
   (image-name (common-lisp:error ":image-name is required") :type
    (common-lisp:or image-name common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-image-request 'make-update-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-image-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-image-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'delete-properties))
      (common-lisp:list
       (common-lisp:cons "DeleteProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-name))
      (common-lisp:list
       (common-lisp:cons "ImageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-image-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-image-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-image-response-"))
   (image-arn common-lisp:nil :type
    (common-lisp:or image-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-image-response 'make-update-image-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-image-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-image-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-arn))
      (common-lisp:list
       (common-lisp:cons "ImageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-image-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-image-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-image-version-request-"))
   (image-name (common-lisp:error ":image-name is required") :type
    (common-lisp:or image-name common-lisp:null))
   (alias common-lisp:nil :type
    (common-lisp:or sage-maker-image-version-alias common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or image-version-number common-lisp:null))
   (aliases-to-add common-lisp:nil :type
    (common-lisp:or sage-maker-image-version-aliases common-lisp:null))
   (aliases-to-delete common-lisp:nil :type
    (common-lisp:or sage-maker-image-version-aliases common-lisp:null))
   (vendor-guidance common-lisp:nil :type
    (common-lisp:or vendor-guidance common-lisp:null))
   (job-type common-lisp:nil :type (common-lisp:or job-type common-lisp:null))
   (mlframework common-lisp:nil :type
    (common-lisp:or mlframework common-lisp:null))
   (programming-lang common-lisp:nil :type
    (common-lisp:or programming-lang common-lisp:null))
   (processor common-lisp:nil :type
    (common-lisp:or processor common-lisp:null))
   (horovod common-lisp:nil :type (common-lisp:or horovod common-lisp:null))
   (release-notes common-lisp:nil :type
    (common-lisp:or release-notes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-image-version-request
                    'make-update-image-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-image-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-image-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-name))
      (common-lisp:list
       (common-lisp:cons "ImageName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "Alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "Version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aliases-to-add))
      (common-lisp:list
       (common-lisp:cons "AliasesToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aliases-to-delete))
      (common-lisp:list
       (common-lisp:cons "AliasesToDelete"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor-guidance))
      (common-lisp:list
       (common-lisp:cons "VendorGuidance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mlframework))
      (common-lisp:list
       (common-lisp:cons "MLFramework"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'programming-lang))
      (common-lisp:list
       (common-lisp:cons "ProgrammingLang"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processor))
      (common-lisp:list
       (common-lisp:cons "Processor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'horovod))
      (common-lisp:list
       (common-lisp:cons "Horovod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-notes))
      (common-lisp:list
       (common-lisp:cons "ReleaseNotes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-image-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-image-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-image-version-response-"))
   (image-version-arn common-lisp:nil :type
    (common-lisp:or image-version-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-image-version-response
                    'make-update-image-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-image-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-image-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-version-arn))
      (common-lisp:list
       (common-lisp:cons "ImageVersionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-image-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-inference-experiment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-inference-experiment-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or inference-experiment-name common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or inference-experiment-schedule common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or inference-experiment-description common-lisp:null))
   (model-variants common-lisp:nil :type
    (common-lisp:or model-variant-config-list common-lisp:null))
   (data-storage-config common-lisp:nil :type
    (common-lisp:or inference-experiment-data-storage-config common-lisp:null))
   (shadow-mode-config common-lisp:nil :type
    (common-lisp:or shadow-mode-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-inference-experiment-request
                    'make-update-inference-experiment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-inference-experiment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-inference-experiment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schedule))
      (common-lisp:list
       (common-lisp:cons "Schedule"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-variants))
      (common-lisp:list
       (common-lisp:cons "ModelVariants"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-storage-config))
      (common-lisp:list
       (common-lisp:cons "DataStorageConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shadow-mode-config))
      (common-lisp:list
       (common-lisp:cons "ShadowModeConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-inference-experiment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-inference-experiment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-inference-experiment-response-"))
   (inference-experiment-arn
    (common-lisp:error ":inference-experiment-arn is required") :type
    (common-lisp:or inference-experiment-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-inference-experiment-response
                    'make-update-inference-experiment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-inference-experiment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-inference-experiment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inference-experiment-arn))
      (common-lisp:list
       (common-lisp:cons "InferenceExperimentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-inference-experiment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-model-card-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-model-card-request-"))
   (model-card-name (common-lisp:error ":model-card-name is required") :type
    (common-lisp:or entity-name common-lisp:null))
   (content common-lisp:nil :type
    (common-lisp:or model-card-content common-lisp:null))
   (model-card-status common-lisp:nil :type
    (common-lisp:or model-card-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-model-card-request
                    'make-update-model-card-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-model-card-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-model-card-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-name))
      (common-lisp:list
       (common-lisp:cons "ModelCardName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-status))
      (common-lisp:list
       (common-lisp:cons "ModelCardStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-model-card-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-model-card-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-model-card-response-"))
   (model-card-arn (common-lisp:error ":model-card-arn is required") :type
    (common-lisp:or model-card-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-model-card-response
                    'make-update-model-card-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-model-card-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-model-card-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-card-arn))
      (common-lisp:list
       (common-lisp:cons "ModelCardArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-model-card-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-model-package-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-model-package-input-"))
   (model-package-arn (common-lisp:error ":model-package-arn is required")
    :type (common-lisp:or model-package-arn common-lisp:null))
   (model-approval-status common-lisp:nil :type
    (common-lisp:or model-approval-status common-lisp:null))
   (approval-description common-lisp:nil :type
    (common-lisp:or approval-description common-lisp:null))
   (customer-metadata-properties common-lisp:nil :type
    (common-lisp:or customer-metadata-map common-lisp:null))
   (customer-metadata-properties-to-remove common-lisp:nil :type
    (common-lisp:or customer-metadata-key-list common-lisp:null))
   (additional-inference-specifications-to-add common-lisp:nil :type
    (common-lisp:or additional-inference-specifications common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-model-package-input
                    'make-update-model-package-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-model-package-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-model-package-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-package-arn))
      (common-lisp:list
       (common-lisp:cons "ModelPackageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'model-approval-status))
      (common-lisp:list
       (common-lisp:cons "ModelApprovalStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'approval-description))
      (common-lisp:list
       (common-lisp:cons "ApprovalDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-metadata-properties))
      (common-lisp:list
       (common-lisp:cons "CustomerMetadataProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-metadata-properties-to-remove))
      (common-lisp:list
       (common-lisp:cons "CustomerMetadataPropertiesToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-inference-specifications-to-add))
      (common-lisp:list
       (common-lisp:cons "AdditionalInferenceSpecificationsToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-model-package-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-model-package-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-model-package-output-"))
   (model-package-arn (common-lisp:error ":model-package-arn is required")
    :type (common-lisp:or model-package-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-model-package-output
                    'make-update-model-package-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-model-package-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-model-package-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model-package-arn))
      (common-lisp:list
       (common-lisp:cons "ModelPackageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-model-package-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-monitoring-alert-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-monitoring-alert-request-"))
   (monitoring-schedule-name
    (common-lisp:error ":monitoring-schedule-name is required") :type
    (common-lisp:or monitoring-schedule-name common-lisp:null))
   (monitoring-alert-name
    (common-lisp:error ":monitoring-alert-name is required") :type
    (common-lisp:or monitoring-alert-name common-lisp:null))
   (datapoints-to-alert (common-lisp:error ":datapoints-to-alert is required")
    :type (common-lisp:or monitoring-datapoints-to-alert common-lisp:null))
   (evaluation-period (common-lisp:error ":evaluation-period is required")
    :type (common-lisp:or monitoring-evaluation-period common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-monitoring-alert-request
                    'make-update-monitoring-alert-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-monitoring-alert-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-monitoring-alert-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-name))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-alert-name))
      (common-lisp:list
       (common-lisp:cons "MonitoringAlertName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'datapoints-to-alert))
      (common-lisp:list
       (common-lisp:cons "DatapointsToAlert"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-period))
      (common-lisp:list
       (common-lisp:cons "EvaluationPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-monitoring-alert-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-monitoring-alert-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-monitoring-alert-response-"))
   (monitoring-schedule-arn
    (common-lisp:error ":monitoring-schedule-arn is required") :type
    (common-lisp:or monitoring-schedule-arn common-lisp:null))
   (monitoring-alert-name common-lisp:nil :type
    (common-lisp:or monitoring-alert-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-monitoring-alert-response
                    'make-update-monitoring-alert-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-monitoring-alert-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-monitoring-alert-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-alert-name))
      (common-lisp:list
       (common-lisp:cons "MonitoringAlertName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-monitoring-alert-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-monitoring-schedule-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-monitoring-schedule-request-"))
   (monitoring-schedule-name
    (common-lisp:error ":monitoring-schedule-name is required") :type
    (common-lisp:or monitoring-schedule-name common-lisp:null))
   (monitoring-schedule-config
    (common-lisp:error ":monitoring-schedule-config is required") :type
    (common-lisp:or monitoring-schedule-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-monitoring-schedule-request
                    'make-update-monitoring-schedule-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-monitoring-schedule-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-monitoring-schedule-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-name))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-config))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-monitoring-schedule-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-monitoring-schedule-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-monitoring-schedule-response-"))
   (monitoring-schedule-arn
    (common-lisp:error ":monitoring-schedule-arn is required") :type
    (common-lisp:or monitoring-schedule-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-monitoring-schedule-response
                    'make-update-monitoring-schedule-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-monitoring-schedule-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-monitoring-schedule-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'monitoring-schedule-arn))
      (common-lisp:list
       (common-lisp:cons "MonitoringScheduleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-monitoring-schedule-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-notebook-instance-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-notebook-instance-input-"))
   (notebook-instance-name
    (common-lisp:error ":notebook-instance-name is required") :type
    (common-lisp:or notebook-instance-name common-lisp:null))
   (instance-type common-lisp:nil :type
    (common-lisp:or instance-type common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (lifecycle-config-name common-lisp:nil :type
    (common-lisp:or notebook-instance-lifecycle-config-name common-lisp:null))
   (disassociate-lifecycle-config common-lisp:nil :type
    (common-lisp:or disassociate-notebook-instance-lifecycle-config
                    common-lisp:null))
   (volume-size-in-gb common-lisp:nil :type
    (common-lisp:or notebook-instance-volume-size-in-gb common-lisp:null))
   (default-code-repository common-lisp:nil :type
    (common-lisp:or code-repository-name-or-url common-lisp:null))
   (additional-code-repositories common-lisp:nil :type
    (common-lisp:or additional-code-repository-names-or-urls common-lisp:null))
   (accelerator-types common-lisp:nil :type
    (common-lisp:or notebook-instance-accelerator-types common-lisp:null))
   (disassociate-accelerator-types common-lisp:nil :type
    (common-lisp:or disassociate-notebook-instance-accelerator-types
                    common-lisp:null))
   (disassociate-default-code-repository common-lisp:nil :type
    (common-lisp:or disassociate-default-code-repository common-lisp:null))
   (disassociate-additional-code-repositories common-lisp:nil :type
    (common-lisp:or disassociate-additional-code-repositories
                    common-lisp:null))
   (root-access common-lisp:nil :type
    (common-lisp:or root-access common-lisp:null))
   (instance-metadata-service-configuration common-lisp:nil :type
    (common-lisp:or instance-metadata-service-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-notebook-instance-input
                    'make-update-notebook-instance-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-instance-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-instance-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-name))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-type))
      (common-lisp:list
       (common-lisp:cons "InstanceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lifecycle-config-name))
      (common-lisp:list
       (common-lisp:cons "LifecycleConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disassociate-lifecycle-config))
      (common-lisp:list
       (common-lisp:cons "DisassociateLifecycleConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'volume-size-in-gb))
      (common-lisp:list
       (common-lisp:cons "VolumeSizeInGB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'default-code-repository))
      (common-lisp:list
       (common-lisp:cons "DefaultCodeRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'additional-code-repositories))
      (common-lisp:list
       (common-lisp:cons "AdditionalCodeRepositories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accelerator-types))
      (common-lisp:list
       (common-lisp:cons "AcceleratorTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disassociate-accelerator-types))
      (common-lisp:list
       (common-lisp:cons "DisassociateAcceleratorTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disassociate-default-code-repository))
      (common-lisp:list
       (common-lisp:cons "DisassociateDefaultCodeRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disassociate-additional-code-repositories))
      (common-lisp:list
       (common-lisp:cons "DisassociateAdditionalCodeRepositories"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'root-access))
      (common-lisp:list
       (common-lisp:cons "RootAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-metadata-service-configuration))
      (common-lisp:list
       (common-lisp:cons "InstanceMetadataServiceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-instance-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-notebook-instance-lifecycle-config-input (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-notebook-instance-lifecycle-config-input-"))
   (notebook-instance-lifecycle-config-name
    (common-lisp:error ":notebook-instance-lifecycle-config-name is required")
    :type
    (common-lisp:or notebook-instance-lifecycle-config-name common-lisp:null))
   (on-create common-lisp:nil :type
    (common-lisp:or notebook-instance-lifecycle-config-list common-lisp:null))
   (on-start common-lisp:nil :type
    (common-lisp:or notebook-instance-lifecycle-config-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-notebook-instance-lifecycle-config-input
                    'make-update-notebook-instance-lifecycle-config-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-instance-lifecycle-config-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-instance-lifecycle-config-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notebook-instance-lifecycle-config-name))
      (common-lisp:list
       (common-lisp:cons "NotebookInstanceLifecycleConfigName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-create))
      (common-lisp:list
       (common-lisp:cons "OnCreate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'on-start))
      (common-lisp:list
       (common-lisp:cons "OnStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-instance-lifecycle-config-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-notebook-instance-lifecycle-config-output
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-notebook-instance-lifecycle-config-output-")))
 (common-lisp:export
  (common-lisp:list 'update-notebook-instance-lifecycle-config-output
                    'make-update-notebook-instance-lifecycle-config-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-instance-lifecycle-config-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-instance-lifecycle-config-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-instance-lifecycle-config-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-notebook-instance-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-notebook-instance-output-")))
 (common-lisp:export
  (common-lisp:list 'update-notebook-instance-output
                    'make-update-notebook-instance-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-instance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-instance-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-notebook-instance-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-pipeline-execution-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-pipeline-execution-request-"))
   (pipeline-execution-arn
    (common-lisp:error ":pipeline-execution-arn is required") :type
    (common-lisp:or pipeline-execution-arn common-lisp:null))
   (pipeline-execution-description common-lisp:nil :type
    (common-lisp:or pipeline-execution-description common-lisp:null))
   (pipeline-execution-display-name common-lisp:nil :type
    (common-lisp:or pipeline-execution-name common-lisp:null))
   (parallelism-configuration common-lisp:nil :type
    (common-lisp:or parallelism-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-pipeline-execution-request
                    'make-update-pipeline-execution-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-execution-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-execution-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-arn))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-description))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-display-name))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallelism-configuration))
      (common-lisp:list
       (common-lisp:cons "ParallelismConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-execution-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-pipeline-execution-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-pipeline-execution-response-"))
   (pipeline-execution-arn common-lisp:nil :type
    (common-lisp:or pipeline-execution-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-pipeline-execution-response
                    'make-update-pipeline-execution-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-execution-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-execution-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-execution-arn))
      (common-lisp:list
       (common-lisp:cons "PipelineExecutionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-execution-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-pipeline-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-pipeline-request-"))
   (pipeline-name (common-lisp:error ":pipeline-name is required") :type
    (common-lisp:or pipeline-name common-lisp:null))
   (pipeline-display-name common-lisp:nil :type
    (common-lisp:or pipeline-name common-lisp:null))
   (pipeline-definition common-lisp:nil :type
    (common-lisp:or pipeline-definition common-lisp:null))
   (pipeline-definition-s3location common-lisp:nil :type
    (common-lisp:or pipeline-definition-s3location common-lisp:null))
   (pipeline-description common-lisp:nil :type
    (common-lisp:or pipeline-description common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (parallelism-configuration common-lisp:nil :type
    (common-lisp:or parallelism-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-pipeline-request 'make-update-pipeline-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-name))
      (common-lisp:list
       (common-lisp:cons "PipelineName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-display-name))
      (common-lisp:list
       (common-lisp:cons "PipelineDisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-definition))
      (common-lisp:list
       (common-lisp:cons "PipelineDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-definition-s3location))
      (common-lisp:list
       (common-lisp:cons "PipelineDefinitionS3Location"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pipeline-description))
      (common-lisp:list
       (common-lisp:cons "PipelineDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parallelism-configuration))
      (common-lisp:list
       (common-lisp:cons "ParallelismConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-pipeline-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-pipeline-response-"))
   (pipeline-arn common-lisp:nil :type
    (common-lisp:or pipeline-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-pipeline-response 'make-update-pipeline-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pipeline-arn))
      (common-lisp:list
       (common-lisp:cons "PipelineArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-pipeline-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-project-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-project-input-"))
   (project-name (common-lisp:error ":project-name is required") :type
    (common-lisp:or project-entity-name common-lisp:null))
   (project-description common-lisp:nil :type
    (common-lisp:or entity-description common-lisp:null))
   (service-catalog-provisioning-update-details common-lisp:nil :type
    (common-lisp:or service-catalog-provisioning-update-details
                    common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-project-input 'make-update-project-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-project-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-project-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "ProjectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-description))
      (common-lisp:list
       (common-lisp:cons "ProjectDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-catalog-provisioning-update-details))
      (common-lisp:list
       (common-lisp:cons "ServiceCatalogProvisioningUpdateDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-project-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-project-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-project-output-"))
   (project-arn (common-lisp:error ":project-arn is required") :type
    (common-lisp:or project-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-project-output 'make-update-project-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-project-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-project-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "ProjectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-project-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-space-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-space-request-"))
   (domain-id (common-lisp:error ":domain-id is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (space-name (common-lisp:error ":space-name is required") :type
    (common-lisp:or space-name common-lisp:null))
   (space-settings common-lisp:nil :type
    (common-lisp:or space-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-space-request 'make-update-space-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-space-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-space-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-name))
      (common-lisp:list
       (common-lisp:cons "SpaceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-settings))
      (common-lisp:list
       (common-lisp:cons "SpaceSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-space-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-space-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-space-response-"))
   (space-arn common-lisp:nil :type
    (common-lisp:or space-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-space-response 'make-update-space-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-space-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-space-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'space-arn))
      (common-lisp:list
       (common-lisp:cons "SpaceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-space-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-training-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-training-job-request-"))
   (training-job-name (common-lisp:error ":training-job-name is required")
    :type (common-lisp:or training-job-name common-lisp:null))
   (profiler-config common-lisp:nil :type
    (common-lisp:or profiler-config-for-update common-lisp:null))
   (profiler-rule-configurations common-lisp:nil :type
    (common-lisp:or profiler-rule-configurations common-lisp:null))
   (resource-config common-lisp:nil :type
    (common-lisp:or resource-config-for-update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-training-job-request
                    'make-update-training-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-training-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-training-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-job-name))
      (common-lisp:list
       (common-lisp:cons "TrainingJobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'profiler-config))
      (common-lisp:list
       (common-lisp:cons "ProfilerConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'profiler-rule-configurations))
      (common-lisp:list
       (common-lisp:cons "ProfilerRuleConfigurations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-config))
      (common-lisp:list
       (common-lisp:cons "ResourceConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-training-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-training-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-training-job-response-"))
   (training-job-arn (common-lisp:error ":training-job-arn is required") :type
    (common-lisp:or training-job-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-training-job-response
                    'make-update-training-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-training-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-training-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'training-job-arn))
      (common-lisp:list
       (common-lisp:cons "TrainingJobArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-training-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-trial-component-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-trial-component-request-"))
   (trial-component-name
    (common-lisp:error ":trial-component-name is required") :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or trial-component-status common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-time common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or trial-component-parameters common-lisp:null))
   (parameters-to-remove common-lisp:nil :type
    (common-lisp:or list-trial-component-key256 common-lisp:null))
   (input-artifacts common-lisp:nil :type
    (common-lisp:or trial-component-artifacts common-lisp:null))
   (input-artifacts-to-remove common-lisp:nil :type
    (common-lisp:or list-trial-component-key256 common-lisp:null))
   (output-artifacts common-lisp:nil :type
    (common-lisp:or trial-component-artifacts common-lisp:null))
   (output-artifacts-to-remove common-lisp:nil :type
    (common-lisp:or list-trial-component-key256 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-trial-component-request
                    'make-update-trial-component-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-trial-component-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-trial-component-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'trial-component-name))
      (common-lisp:list
       (common-lisp:cons "TrialComponentName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parameters))
      (common-lisp:list
       (common-lisp:cons "Parameters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'parameters-to-remove))
      (common-lisp:list
       (common-lisp:cons "ParametersToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-artifacts))
      (common-lisp:list
       (common-lisp:cons "InputArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'input-artifacts-to-remove))
      (common-lisp:list
       (common-lisp:cons "InputArtifactsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-artifacts))
      (common-lisp:list
       (common-lisp:cons "OutputArtifacts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'output-artifacts-to-remove))
      (common-lisp:list
       (common-lisp:cons "OutputArtifactsToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-trial-component-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-trial-component-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-trial-component-response-"))
   (trial-component-arn common-lisp:nil :type
    (common-lisp:or trial-component-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-trial-component-response
                    'make-update-trial-component-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-trial-component-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-trial-component-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-component-arn))
      (common-lisp:list
       (common-lisp:cons "TrialComponentArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-trial-component-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-trial-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-trial-request-"))
   (trial-name (common-lisp:error ":trial-name is required") :type
    (common-lisp:or experiment-entity-name common-lisp:null))
   (display-name common-lisp:nil :type
    (common-lisp:or experiment-entity-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-trial-request 'make-update-trial-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-trial-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-trial-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-name))
      (common-lisp:list
       (common-lisp:cons "TrialName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'display-name))
      (common-lisp:list
       (common-lisp:cons "DisplayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-trial-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-trial-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-trial-response-"))
   (trial-arn common-lisp:nil :type
    (common-lisp:or trial-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-trial-response 'make-update-trial-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-trial-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-trial-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trial-arn))
      (common-lisp:list
       (common-lisp:cons "TrialArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-trial-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-user-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-user-profile-request-"))
   (domain-id (common-lisp:error ":domain-id is required") :type
    (common-lisp:or domain-id common-lisp:null))
   (user-profile-name (common-lisp:error ":user-profile-name is required")
    :type (common-lisp:or user-profile-name common-lisp:null))
   (user-settings common-lisp:nil :type
    (common-lisp:or user-settings common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-user-profile-request
                    'make-update-user-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-profile-name))
      (common-lisp:list
       (common-lisp:cons "UserProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-settings))
      (common-lisp:list
       (common-lisp:cons "UserSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-user-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-user-profile-response-"))
   (user-profile-arn common-lisp:nil :type
    (common-lisp:or user-profile-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-user-profile-response
                    'make-update-user-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-user-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-user-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-profile-arn))
      (common-lisp:list
       (common-lisp:cons "UserProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-user-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-workforce-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-workforce-request-"))
   (workforce-name (common-lisp:error ":workforce-name is required") :type
    (common-lisp:or workforce-name common-lisp:null))
   (source-ip-config common-lisp:nil :type
    (common-lisp:or source-ip-config common-lisp:null))
   (oidc-config common-lisp:nil :type
    (common-lisp:or oidc-config common-lisp:null))
   (workforce-vpc-config common-lisp:nil :type
    (common-lisp:or workforce-vpc-config-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-workforce-request 'make-update-workforce-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workforce-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workforce-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workforce-name))
      (common-lisp:list
       (common-lisp:cons "WorkforceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ip-config))
      (common-lisp:list
       (common-lisp:cons "SourceIpConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oidc-config))
      (common-lisp:list
       (common-lisp:cons "OidcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workforce-vpc-config))
      (common-lisp:list
       (common-lisp:cons "WorkforceVpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workforce-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-workforce-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-workforce-response-"))
   (workforce (common-lisp:error ":workforce is required") :type
    (common-lisp:or workforce common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-workforce-response
                    'make-update-workforce-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workforce-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workforce-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workforce))
      (common-lisp:list
       (common-lisp:cons "Workforce"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workforce-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-workteam-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-workteam-request-"))
   (workteam-name (common-lisp:error ":workteam-name is required") :type
    (common-lisp:or workteam-name common-lisp:null))
   (member-definitions common-lisp:nil :type
    (common-lisp:or member-definitions common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or string200 common-lisp:null))
   (notification-configuration common-lisp:nil :type
    (common-lisp:or notification-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-workteam-request 'make-update-workteam-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workteam-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workteam-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workteam-name))
      (common-lisp:list
       (common-lisp:cons "WorkteamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-definitions))
      (common-lisp:list
       (common-lisp:cons "MemberDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-configuration))
      (common-lisp:list
       (common-lisp:cons "NotificationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workteam-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-workteam-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-workteam-response-"))
   (workteam (common-lisp:error ":workteam is required") :type
    (common-lisp:or workteam common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-workteam-response 'make-update-workteam-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-workteam-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-workteam-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workteam))
      (common-lisp:list
       (common-lisp:cons "Workteam"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-workteam-response))
   common-lisp:nil))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (user-context (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-context-"))
   (user-profile-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (user-profile-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null))
   (domain-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (iam-identity common-lisp:nil :type
    (common-lisp:or iam-identity common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user-context 'make-user-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-profile-arn))
      (common-lisp:list
       (common-lisp:cons "UserProfileArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-profile-name))
      (common-lisp:list
       (common-lisp:cons "UserProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-identity))
      (common-lisp:list
       (common-lisp:cons "IamIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-context))
   common-lisp:nil))
(common-lisp:deftype user-profile-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (user-profile-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-profile-details-"))
   (domain-id common-lisp:nil :type
    (common-lisp:or domain-id common-lisp:null))
   (user-profile-name common-lisp:nil :type
    (common-lisp:or user-profile-name common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or user-profile-status common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or creation-time common-lisp:null))
   (last-modified-time common-lisp:nil :type
    (common-lisp:or last-modified-time common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'user-profile-details 'make-user-profile-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-profile-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-profile-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-id))
      (common-lisp:list
       (common-lisp:cons "DomainId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-profile-name))
      (common-lisp:list
       (common-lisp:cons "UserProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-time))
      (common-lisp:list
       (common-lisp:cons "LastModifiedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-profile-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype user-profile-list ()
   '(trivial-types:proper-list user-profile-details))
 (common-lisp:defun |make-user-profile-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-profile-details))
   aws-sdk/generator/shape::members))
(common-lisp:deftype user-profile-name () 'common-lisp:string)
(common-lisp:deftype user-profile-sort-key () 'common-lisp:string)
(common-lisp:deftype user-profile-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (user-settings (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-settings-"))
   (execution-role common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null))
   (security-groups common-lisp:nil :type
    (common-lisp:or security-group-ids common-lisp:null))
   (sharing-settings common-lisp:nil :type
    (common-lisp:or sharing-settings common-lisp:null))
   (jupyter-server-app-settings common-lisp:nil :type
    (common-lisp:or jupyter-server-app-settings common-lisp:null))
   (kernel-gateway-app-settings common-lisp:nil :type
    (common-lisp:or kernel-gateway-app-settings common-lisp:null))
   (tensor-board-app-settings common-lisp:nil :type
    (common-lisp:or tensor-board-app-settings common-lisp:null))
   (rstudio-server-pro-app-settings common-lisp:nil :type
    (common-lisp:or rstudio-server-pro-app-settings common-lisp:null))
   (rsession-app-settings common-lisp:nil :type
    (common-lisp:or rsession-app-settings common-lisp:null))
   (canvas-app-settings common-lisp:nil :type
    (common-lisp:or canvas-app-settings common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user-settings 'make-user-settings))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-settings))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-settings))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'execution-role))
      (common-lisp:list
       (common-lisp:cons "ExecutionRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sharing-settings))
      (common-lisp:list
       (common-lisp:cons "SharingSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'jupyter-server-app-settings))
      (common-lisp:list
       (common-lisp:cons "JupyterServerAppSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kernel-gateway-app-settings))
      (common-lisp:list
       (common-lisp:cons "KernelGatewayAppSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tensor-board-app-settings))
      (common-lisp:list
       (common-lisp:cons "TensorBoardAppSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rstudio-server-pro-app-settings))
      (common-lisp:list
       (common-lisp:cons "RStudioServerProAppSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'rsession-app-settings))
      (common-lisp:list
       (common-lisp:cons "RSessionAppSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'canvas-app-settings))
      (common-lisp:list
       (common-lisp:cons "CanvasAppSettings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-settings))
   common-lisp:nil))
(common-lisp:deftype utilization-metric () 'common-lisp:single-float)
(common-lisp:deftype validation-fraction () 'common-lisp:single-float)
(common-lisp:deftype variant-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (variant-property (:copier common-lisp:nil)
      (:conc-name "struct-shape-variant-property-"))
   (variant-property-type
    (common-lisp:error ":variant-property-type is required") :type
    (common-lisp:or variant-property-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'variant-property 'make-variant-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input variant-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input variant-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'variant-property-type))
      (common-lisp:list
       (common-lisp:cons "VariantPropertyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input variant-property))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype variant-property-list ()
   '(trivial-types:proper-list variant-property))
 (common-lisp:defun |make-variant-property-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list variant-property))
   aws-sdk/generator/shape::members))
(common-lisp:deftype variant-property-type () 'common-lisp:string)
(common-lisp:deftype variant-status () 'common-lisp:string)
(common-lisp:deftype variant-status-message () 'common-lisp:string)
(common-lisp:deftype variant-weight () 'common-lisp:single-float)
(common-lisp:deftype vendor-guidance () 'common-lisp:string)
(common-lisp:deftype version-id () 'common-lisp:string)
(common-lisp:deftype versioned-arn-or-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (vertex (:copier common-lisp:nil) (:conc-name "struct-shape-vertex-"))
   (arn common-lisp:nil :type
    (common-lisp:or association-entity-arn common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or string40 common-lisp:null))
   (lineage-type common-lisp:nil :type
    (common-lisp:or lineage-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'vertex 'make-vertex))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vertex))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vertex))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lineage-type))
      (common-lisp:list
       (common-lisp:cons "LineageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vertex))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vertices () '(trivial-types:proper-list vertex))
 (common-lisp:defun |make-vertices|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vertex))
   aws-sdk/generator/shape::members))
(common-lisp:deftype volume-size-in-gb () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-config-"))
   (security-group-ids (common-lisp:error ":security-group-ids is required")
    :type (common-lisp:or vpc-security-group-ids common-lisp:null))
   (subnets (common-lisp:error ":subnets is required") :type
    (common-lisp:or subnets common-lisp:null)))
 (common-lisp:export (common-lisp:list 'vpc-config 'make-vpc-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-config))
   common-lisp:nil))
(common-lisp:deftype vpc-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype vpc-security-group-ids ()
   '(trivial-types:proper-list security-group-id))
 (common-lisp:defun |make-vpc-security-group-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype wait-interval-in-seconds () 'common-lisp:integer)
(common-lisp:deftype warm-pool-resource-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (warm-pool-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-warm-pool-status-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or warm-pool-resource-status common-lisp:null))
   (resource-retained-billable-time-in-seconds common-lisp:nil :type
    (common-lisp:or resource-retained-billable-time-in-seconds
                    common-lisp:null))
   (reused-by-job common-lisp:nil :type
    (common-lisp:or training-job-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'warm-pool-status 'make-warm-pool-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input warm-pool-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input warm-pool-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-retained-billable-time-in-seconds))
      (common-lisp:list
       (common-lisp:cons "ResourceRetainedBillableTimeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reused-by-job))
      (common-lisp:list
       (common-lisp:cons "ReusedByJob"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input warm-pool-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (workforce (:copier common-lisp:nil)
      (:conc-name "struct-shape-workforce-"))
   (workforce-name (common-lisp:error ":workforce-name is required") :type
    (common-lisp:or workforce-name common-lisp:null))
   (workforce-arn (common-lisp:error ":workforce-arn is required") :type
    (common-lisp:or workforce-arn common-lisp:null))
   (last-updated-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (source-ip-config common-lisp:nil :type
    (common-lisp:or source-ip-config common-lisp:null))
   (sub-domain common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (cognito-config common-lisp:nil :type
    (common-lisp:or cognito-config common-lisp:null))
   (oidc-config common-lisp:nil :type
    (common-lisp:or oidc-config-for-response common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (workforce-vpc-config common-lisp:nil :type
    (common-lisp:or workforce-vpc-config-response common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or workforce-status common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or workforce-failure-reason common-lisp:null)))
 (common-lisp:export (common-lisp:list 'workforce 'make-workforce))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workforce))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workforce))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workforce-name))
      (common-lisp:list
       (common-lisp:cons "WorkforceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workforce-arn))
      (common-lisp:list
       (common-lisp:cons "WorkforceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-ip-config))
      (common-lisp:list
       (common-lisp:cons "SourceIpConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-domain))
      (common-lisp:list
       (common-lisp:cons "SubDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cognito-config))
      (common-lisp:list
       (common-lisp:cons "CognitoConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'oidc-config))
      (common-lisp:list
       (common-lisp:cons "OidcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'workforce-vpc-config))
      (common-lisp:list
       (common-lisp:cons "WorkforceVpcConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-reason))
      (common-lisp:list
       (common-lisp:cons "FailureReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workforce))
   common-lisp:nil))
(common-lisp:deftype workforce-arn () 'common-lisp:string)
(common-lisp:deftype workforce-failure-reason () 'common-lisp:string)
(common-lisp:deftype workforce-name () 'common-lisp:string)
(common-lisp:deftype workforce-security-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype workforce-security-group-ids ()
   '(trivial-types:proper-list workforce-security-group-id))
 (common-lisp:defun |make-workforce-security-group-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            workforce-security-group-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype workforce-status () 'common-lisp:string)
(common-lisp:deftype workforce-subnet-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype workforce-subnets ()
   '(trivial-types:proper-list workforce-subnet-id))
 (common-lisp:defun |make-workforce-subnets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workforce-subnet-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (workforce-vpc-config-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-workforce-vpc-config-request-"))
   (vpc-id common-lisp:nil :type
    (common-lisp:or workforce-vpc-id common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or workforce-security-group-ids common-lisp:null))
   (subnets common-lisp:nil :type
    (common-lisp:or workforce-subnets common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workforce-vpc-config-request
                    'make-workforce-vpc-config-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workforce-vpc-config-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workforce-vpc-config-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workforce-vpc-config-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (workforce-vpc-config-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-workforce-vpc-config-response-"))
   (vpc-id (common-lisp:error ":vpc-id is required") :type
    (common-lisp:or workforce-vpc-id common-lisp:null))
   (security-group-ids (common-lisp:error ":security-group-ids is required")
    :type (common-lisp:or workforce-security-group-ids common-lisp:null))
   (subnets (common-lisp:error ":subnets is required") :type
    (common-lisp:or workforce-subnets common-lisp:null))
   (vpc-endpoint-id common-lisp:nil :type
    (common-lisp:or workforce-vpc-endpoint-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'workforce-vpc-config-response
                    'make-workforce-vpc-config-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          workforce-vpc-config-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          workforce-vpc-config-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-group-ids))
      (common-lisp:list
       (common-lisp:cons "SecurityGroupIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          workforce-vpc-config-response))
   common-lisp:nil))
(common-lisp:deftype workforce-vpc-endpoint-id () 'common-lisp:string)
(common-lisp:deftype workforce-vpc-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype workforces () '(trivial-types:proper-list workforce))
 (common-lisp:defun |make-workforces|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workforce))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (workteam (:copier common-lisp:nil) (:conc-name "struct-shape-workteam-"))
   (workteam-name (common-lisp:error ":workteam-name is required") :type
    (common-lisp:or workteam-name common-lisp:null))
   (member-definitions (common-lisp:error ":member-definitions is required")
    :type (common-lisp:or member-definitions common-lisp:null))
   (workteam-arn (common-lisp:error ":workteam-arn is required") :type
    (common-lisp:or workteam-arn common-lisp:null))
   (workforce-arn common-lisp:nil :type
    (common-lisp:or workforce-arn common-lisp:null))
   (product-listing-ids common-lisp:nil :type
    (common-lisp:or product-listings common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or string200 common-lisp:null))
   (sub-domain common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (notification-configuration common-lisp:nil :type
    (common-lisp:or notification-configuration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'workteam 'make-workteam))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input workteam))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input workteam))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workteam-name))
      (common-lisp:list
       (common-lisp:cons "WorkteamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'member-definitions))
      (common-lisp:list
       (common-lisp:cons "MemberDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workteam-arn))
      (common-lisp:list
       (common-lisp:cons "WorkteamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'workforce-arn))
      (common-lisp:list
       (common-lisp:cons "WorkforceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-listing-ids))
      (common-lisp:list
       (common-lisp:cons "ProductListingIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-domain))
      (common-lisp:list
       (common-lisp:cons "SubDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-updated-date))
      (common-lisp:list
       (common-lisp:cons "LastUpdatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-configuration))
      (common-lisp:list
       (common-lisp:cons "NotificationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input workteam))
   common-lisp:nil))
(common-lisp:deftype workteam-arn () 'common-lisp:string)
(common-lisp:deftype workteam-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype workteams () '(trivial-types:proper-list workteam))
 (common-lisp:defun |make-workteams|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list workteam))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun add-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-arn destination-arn
                     association-type)
   (common-lisp:declare
    (common-lisp:ignorable source-arn destination-arn association-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-association-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AddAssociation"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-association))
(common-lisp:progn
 (common-lisp:defun add-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-tags-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "AddTags"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-tags))
(common-lisp:progn
 (common-lisp:defun associate-trial-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trial-component-name trial-name)
   (common-lisp:declare
    (common-lisp:ignorable trial-component-name trial-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-trial-component-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateTrialComponent"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-trial-component))
(common-lisp:progn
 (common-lisp:defun batch-describe-model-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-package-arn-list)
   (common-lisp:declare (common-lisp:ignorable model-package-arn-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-describe-model-package-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "BatchDescribeModelPackage"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-describe-model-package))
(common-lisp:progn
 (common-lisp:defun create-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-name source action-type
                     description status properties metadata-properties tags)
   (common-lisp:declare
    (common-lisp:ignorable action-name source action-type description status
     properties metadata-properties tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAction"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-action))
(common-lisp:progn
 (common-lisp:defun create-algorithm
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key algorithm-name algorithm-description
                     training-specification inference-specification
                     validation-specification certify-for-marketplace tags)
   (common-lisp:declare
    (common-lisp:ignorable algorithm-name algorithm-description
     training-specification inference-specification validation-specification
     certify-for-marketplace tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-algorithm-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAlgorithm"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-algorithm))
(common-lisp:progn
 (common-lisp:defun create-app
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id user-profile-name app-type
                     app-name tags resource-spec space-name)
   (common-lisp:declare
    (common-lisp:ignorable domain-id user-profile-name app-type app-name tags
     resource-spec space-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-app-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "CreateApp"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-app))
(common-lisp:progn
 (common-lisp:defun create-app-image-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-image-config-name tags
                     kernel-gateway-image-config)
   (common-lisp:declare
    (common-lisp:ignorable app-image-config-name tags
     kernel-gateway-image-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-app-image-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAppImageConfig"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-app-image-config))
(common-lisp:progn
 (common-lisp:defun create-artifact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key artifact-name source artifact-type
                     properties metadata-properties tags)
   (common-lisp:declare
    (common-lisp:ignorable artifact-name source artifact-type properties
     metadata-properties tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-artifact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateArtifact"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-artifact))
(common-lisp:progn
 (common-lisp:defun create-auto-mljob
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-mljob-name input-data-config
                     output-data-config problem-type auto-mljob-objective
                     auto-mljob-config role-arn
                     generate-candidate-definitions-only tags
                     model-deploy-config)
   (common-lisp:declare
    (common-lisp:ignorable auto-mljob-name input-data-config output-data-config
     problem-type auto-mljob-objective auto-mljob-config role-arn
     generate-candidate-definitions-only tags model-deploy-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-auto-mljob-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAutoMLJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-auto-mljob))
(common-lisp:progn
 (common-lisp:defun create-auto-mljob-v2
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-mljob-name
                     auto-mljob-input-data-config output-data-config
                     auto-mlproblem-type-config role-arn tags security-config
                     auto-mljob-objective model-deploy-config
                     data-split-config)
   (common-lisp:declare
    (common-lisp:ignorable auto-mljob-name auto-mljob-input-data-config
     output-data-config auto-mlproblem-type-config role-arn tags
     security-config auto-mljob-objective model-deploy-config
     data-split-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-auto-mljob-v2request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAutoMLJobV2"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-auto-mljob-v2))
(common-lisp:progn
 (common-lisp:defun create-code-repository
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key code-repository-name git-config tags)
   (common-lisp:declare
    (common-lisp:ignorable code-repository-name git-config tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-code-repository-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCodeRepository"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-code-repository))
(common-lisp:progn
 (common-lisp:defun create-compilation-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key compilation-job-name role-arn
                     model-package-version-arn input-config output-config
                     vpc-config stopping-condition tags)
   (common-lisp:declare
    (common-lisp:ignorable compilation-job-name role-arn
     model-package-version-arn input-config output-config vpc-config
     stopping-condition tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-compilation-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateCompilationJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-compilation-job))
(common-lisp:progn
 (common-lisp:defun create-context
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key context-name source context-type
                     description properties tags)
   (common-lisp:declare
    (common-lisp:ignorable context-name source context-type description
     properties tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-context-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateContext"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-context))
(common-lisp:progn
 (common-lisp:defun create-data-quality-job-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-definition-name
                     data-quality-baseline-config
                     data-quality-app-specification data-quality-job-input
                     data-quality-job-output-config job-resources
                     network-config role-arn stopping-condition tags)
   (common-lisp:declare
    (common-lisp:ignorable job-definition-name data-quality-baseline-config
     data-quality-app-specification data-quality-job-input
     data-quality-job-output-config job-resources network-config role-arn
     stopping-condition tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-data-quality-job-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDataQualityJobDefinition"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-data-quality-job-definition))
(common-lisp:progn
 (common-lisp:defun create-device-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-fleet-name role-arn description
                     output-config tags enable-iot-role-alias)
   (common-lisp:declare
    (common-lisp:ignorable device-fleet-name role-arn description output-config
     tags enable-iot-role-alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-device-fleet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDeviceFleet"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-device-fleet))
(common-lisp:progn
 (common-lisp:defun create-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-name auth-mode
                     default-user-settings subnet-ids vpc-id tags
                     app-network-access-type home-efs-file-system-kms-key-id
                     kms-key-id app-security-group-management domain-settings
                     default-space-settings)
   (common-lisp:declare
    (common-lisp:ignorable domain-name auth-mode default-user-settings
     subnet-ids vpc-id tags app-network-access-type
     home-efs-file-system-kms-key-id kms-key-id app-security-group-management
     domain-settings default-space-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateDomain"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-domain))
(common-lisp:progn
 (common-lisp:defun create-edge-deployment-plan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key edge-deployment-plan-name model-configs
                     device-fleet-name stages tags)
   (common-lisp:declare
    (common-lisp:ignorable edge-deployment-plan-name model-configs
     device-fleet-name stages tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-edge-deployment-plan-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateEdgeDeploymentPlan"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-edge-deployment-plan))
(common-lisp:progn
 (common-lisp:defun create-edge-deployment-stage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key edge-deployment-plan-name stages)
   (common-lisp:declare
    (common-lisp:ignorable edge-deployment-plan-name stages))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-edge-deployment-stage-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateEdgeDeploymentStage"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-edge-deployment-stage))
(common-lisp:progn
 (common-lisp:defun create-edge-packaging-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key edge-packaging-job-name
                     compilation-job-name model-name model-version role-arn
                     output-config resource-key tags)
   (common-lisp:declare
    (common-lisp:ignorable edge-packaging-job-name compilation-job-name
     model-name model-version role-arn output-config resource-key tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-edge-packaging-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateEdgePackagingJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-edge-packaging-job))
(common-lisp:progn
 (common-lisp:defun create-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-name endpoint-config-name
                     deployment-config tags)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-name endpoint-config-name deployment-config
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-endpoint-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateEndpoint"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-endpoint))
(common-lisp:progn
 (common-lisp:defun create-endpoint-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-config-name production-variants
                     data-capture-config tags kms-key-id async-inference-config
                     explainer-config shadow-production-variants)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-config-name production-variants
     data-capture-config tags kms-key-id async-inference-config
     explainer-config shadow-production-variants))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-endpoint-config-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateEndpointConfig"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-endpoint-config))
(common-lisp:progn
 (common-lisp:defun create-experiment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key experiment-name display-name description
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable experiment-name display-name description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-experiment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateExperiment"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-experiment))
(common-lisp:progn
 (common-lisp:defun create-feature-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key feature-group-name
                     record-identifier-feature-name event-time-feature-name
                     feature-definitions online-store-config
                     offline-store-config role-arn description tags)
   (common-lisp:declare
    (common-lisp:ignorable feature-group-name record-identifier-feature-name
     event-time-feature-name feature-definitions online-store-config
     offline-store-config role-arn description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-feature-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateFeatureGroup"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-feature-group))
(common-lisp:progn
 (common-lisp:defun create-flow-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-definition-name
                     human-loop-request-source human-loop-activation-config
                     human-loop-config output-config role-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable flow-definition-name human-loop-request-source
     human-loop-activation-config human-loop-config output-config role-arn
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-flow-definition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateFlowDefinition"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-flow-definition))
(common-lisp:progn
 (common-lisp:defun create-hub
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hub-name hub-description hub-display-name
                     hub-search-keywords s3storage-config tags)
   (common-lisp:declare
    (common-lisp:ignorable hub-name hub-description hub-display-name
     hub-search-keywords s3storage-config tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-hub-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "CreateHub"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-hub))
(common-lisp:progn
 (common-lisp:defun create-human-task-ui
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key human-task-ui-name ui-template tags)
   (common-lisp:declare
    (common-lisp:ignorable human-task-ui-name ui-template tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-human-task-ui-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateHumanTaskUi"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-human-task-ui))
(common-lisp:progn
 (common-lisp:defun create-hyper-parameter-tuning-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hyper-parameter-tuning-job-name
                     hyper-parameter-tuning-job-config training-job-definition
                     training-job-definitions warm-start-config tags)
   (common-lisp:declare
    (common-lisp:ignorable hyper-parameter-tuning-job-name
     hyper-parameter-tuning-job-config training-job-definition
     training-job-definitions warm-start-config tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-hyper-parameter-tuning-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateHyperParameterTuningJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-hyper-parameter-tuning-job))
(common-lisp:progn
 (common-lisp:defun create-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key description display-name image-name
                     role-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable description display-name image-name role-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateImage"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-image))
(common-lisp:progn
 (common-lisp:defun create-image-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key base-image client-token image-name
                     aliases vendor-guidance job-type mlframework
                     programming-lang processor horovod release-notes)
   (common-lisp:declare
    (common-lisp:ignorable base-image client-token image-name aliases
     vendor-guidance job-type mlframework programming-lang processor horovod
     release-notes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-image-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateImageVersion"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-image-version))
(common-lisp:progn
 (common-lisp:defun create-inference-experiment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name type schedule description role-arn
                     endpoint-name model-variants data-storage-config
                     shadow-mode-config kms-key tags)
   (common-lisp:declare
    (common-lisp:ignorable name type schedule description role-arn
     endpoint-name model-variants data-storage-config shadow-mode-config
     kms-key tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-inference-experiment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateInferenceExperiment"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-inference-experiment))
(common-lisp:progn
 (common-lisp:defun create-inference-recommendations-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name job-type role-arn input-config
                     job-description stopping-conditions output-config tags)
   (common-lisp:declare
    (common-lisp:ignorable job-name job-type role-arn input-config
     job-description stopping-conditions output-config tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-inference-recommendations-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateInferenceRecommendationsJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-inference-recommendations-job))
(common-lisp:progn
 (common-lisp:defun create-labeling-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key labeling-job-name label-attribute-name
                     input-config output-config role-arn
                     label-category-config-s3uri stopping-conditions
                     labeling-job-algorithms-config human-task-config tags)
   (common-lisp:declare
    (common-lisp:ignorable labeling-job-name label-attribute-name input-config
     output-config role-arn label-category-config-s3uri stopping-conditions
     labeling-job-algorithms-config human-task-config tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-labeling-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateLabelingJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-labeling-job))
(common-lisp:progn
 (common-lisp:defun create-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-name primary-container containers
                     inference-execution-config execution-role-arn tags
                     vpc-config enable-network-isolation)
   (common-lisp:declare
    (common-lisp:ignorable model-name primary-container containers
     inference-execution-config execution-role-arn tags vpc-config
     enable-network-isolation))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-model-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateModel"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-model))
(common-lisp:progn
 (common-lisp:defun create-model-bias-job-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-definition-name
                     model-bias-baseline-config model-bias-app-specification
                     model-bias-job-input model-bias-job-output-config
                     job-resources network-config role-arn stopping-condition
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable job-definition-name model-bias-baseline-config
     model-bias-app-specification model-bias-job-input
     model-bias-job-output-config job-resources network-config role-arn
     stopping-condition tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-model-bias-job-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateModelBiasJobDefinition"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-model-bias-job-definition))
(common-lisp:progn
 (common-lisp:defun create-model-card
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-card-name security-config content
                     model-card-status tags)
   (common-lisp:declare
    (common-lisp:ignorable model-card-name security-config content
     model-card-status tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-model-card-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateModelCard"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-model-card))
(common-lisp:progn
 (common-lisp:defun create-model-card-export-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-card-name model-card-version
                     model-card-export-job-name output-config)
   (common-lisp:declare
    (common-lisp:ignorable model-card-name model-card-version
     model-card-export-job-name output-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-model-card-export-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateModelCardExportJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-model-card-export-job))
(common-lisp:progn
 (common-lisp:defun create-model-explainability-job-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-definition-name
                     model-explainability-baseline-config
                     model-explainability-app-specification
                     model-explainability-job-input
                     model-explainability-job-output-config job-resources
                     network-config role-arn stopping-condition tags)
   (common-lisp:declare
    (common-lisp:ignorable job-definition-name
     model-explainability-baseline-config
     model-explainability-app-specification model-explainability-job-input
     model-explainability-job-output-config job-resources network-config
     role-arn stopping-condition tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-model-explainability-job-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateModelExplainabilityJobDefinition"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-model-explainability-job-definition))
(common-lisp:progn
 (common-lisp:defun create-model-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-package-name
                     model-package-group-name model-package-description
                     inference-specification validation-specification
                     source-algorithm-specification certify-for-marketplace
                     tags model-approval-status metadata-properties
                     model-metrics client-token customer-metadata-properties
                     drift-check-baselines domain task sample-payload-url
                     additional-inference-specifications)
   (common-lisp:declare
    (common-lisp:ignorable model-package-name model-package-group-name
     model-package-description inference-specification validation-specification
     source-algorithm-specification certify-for-marketplace tags
     model-approval-status metadata-properties model-metrics client-token
     customer-metadata-properties drift-check-baselines domain task
     sample-payload-url additional-inference-specifications))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-model-package-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateModelPackage"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-model-package))
(common-lisp:progn
 (common-lisp:defun create-model-package-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-package-group-name
                     model-package-group-description tags)
   (common-lisp:declare
    (common-lisp:ignorable model-package-group-name
     model-package-group-description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-model-package-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateModelPackageGroup"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-model-package-group))
(common-lisp:progn
 (common-lisp:defun create-model-quality-job-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-definition-name
                     model-quality-baseline-config
                     model-quality-app-specification model-quality-job-input
                     model-quality-job-output-config job-resources
                     network-config role-arn stopping-condition tags)
   (common-lisp:declare
    (common-lisp:ignorable job-definition-name model-quality-baseline-config
     model-quality-app-specification model-quality-job-input
     model-quality-job-output-config job-resources network-config role-arn
     stopping-condition tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-model-quality-job-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateModelQualityJobDefinition"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-model-quality-job-definition))
(common-lisp:progn
 (common-lisp:defun create-monitoring-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitoring-schedule-name
                     monitoring-schedule-config tags)
   (common-lisp:declare
    (common-lisp:ignorable monitoring-schedule-name monitoring-schedule-config
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-monitoring-schedule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateMonitoringSchedule"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-monitoring-schedule))
(common-lisp:progn
 (common-lisp:defun create-notebook-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notebook-instance-name instance-type
                     subnet-id security-group-ids role-arn kms-key-id tags
                     lifecycle-config-name direct-internet-access
                     volume-size-in-gb accelerator-types
                     default-code-repository additional-code-repositories
                     root-access platform-identifier
                     instance-metadata-service-configuration)
   (common-lisp:declare
    (common-lisp:ignorable notebook-instance-name instance-type subnet-id
     security-group-ids role-arn kms-key-id tags lifecycle-config-name
     direct-internet-access volume-size-in-gb accelerator-types
     default-code-repository additional-code-repositories root-access
     platform-identifier instance-metadata-service-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-notebook-instance-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateNotebookInstance"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-notebook-instance))
(common-lisp:progn
 (common-lisp:defun create-notebook-instance-lifecycle-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notebook-instance-lifecycle-config-name
                     on-create on-start)
   (common-lisp:declare
    (common-lisp:ignorable notebook-instance-lifecycle-config-name on-create
     on-start))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-notebook-instance-lifecycle-config-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateNotebookInstanceLifecycleConfig"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-notebook-instance-lifecycle-config))
(common-lisp:progn
 (common-lisp:defun create-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name pipeline-display-name
                     pipeline-definition pipeline-definition-s3location
                     pipeline-description client-request-token role-arn tags
                     parallelism-configuration)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name pipeline-display-name
     pipeline-definition pipeline-definition-s3location pipeline-description
     client-request-token role-arn tags parallelism-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-pipeline-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreatePipeline"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-pipeline))
(common-lisp:progn
 (common-lisp:defun create-presigned-domain-url
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id user-profile-name
                     session-expiration-duration-in-seconds expires-in-seconds
                     space-name)
   (common-lisp:declare
    (common-lisp:ignorable domain-id user-profile-name
     session-expiration-duration-in-seconds expires-in-seconds space-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-presigned-domain-url-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreatePresignedDomainUrl"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-presigned-domain-url))
(common-lisp:progn
 (common-lisp:defun create-presigned-notebook-instance-url
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notebook-instance-name
                     session-expiration-duration-in-seconds)
   (common-lisp:declare
    (common-lisp:ignorable notebook-instance-name
     session-expiration-duration-in-seconds))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-presigned-notebook-instance-url-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreatePresignedNotebookInstanceUrl"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-presigned-notebook-instance-url))
(common-lisp:progn
 (common-lisp:defun create-processing-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key processing-inputs
                     processing-output-config processing-job-name
                     processing-resources stopping-condition app-specification
                     environment network-config role-arn tags
                     experiment-config)
   (common-lisp:declare
    (common-lisp:ignorable processing-inputs processing-output-config
     processing-job-name processing-resources stopping-condition
     app-specification environment network-config role-arn tags
     experiment-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-processing-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateProcessingJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-processing-job))
(common-lisp:progn
 (common-lisp:defun create-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name project-description
                     service-catalog-provisioning-details tags)
   (common-lisp:declare
    (common-lisp:ignorable project-name project-description
     service-catalog-provisioning-details tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-project-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateProject"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-project))
(common-lisp:progn
 (common-lisp:defun create-space
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id space-name tags space-settings)
   (common-lisp:declare
    (common-lisp:ignorable domain-id space-name tags space-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-space-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateSpace"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-space))
(common-lisp:progn
 (common-lisp:defun create-studio-lifecycle-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key studio-lifecycle-config-name
                     studio-lifecycle-config-content
                     studio-lifecycle-config-app-type tags)
   (common-lisp:declare
    (common-lisp:ignorable studio-lifecycle-config-name
     studio-lifecycle-config-content studio-lifecycle-config-app-type tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-studio-lifecycle-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateStudioLifecycleConfig"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-studio-lifecycle-config))
(common-lisp:progn
 (common-lisp:defun create-training-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key training-job-name hyper-parameters
                     algorithm-specification role-arn input-data-config
                     output-data-config resource-config vpc-config
                     stopping-condition tags enable-network-isolation
                     enable-inter-container-traffic-encryption
                     enable-managed-spot-training checkpoint-config
                     debug-hook-config debug-rule-configurations
                     tensor-board-output-config experiment-config
                     profiler-config profiler-rule-configurations environment
                     retry-strategy)
   (common-lisp:declare
    (common-lisp:ignorable training-job-name hyper-parameters
     algorithm-specification role-arn input-data-config output-data-config
     resource-config vpc-config stopping-condition tags
     enable-network-isolation enable-inter-container-traffic-encryption
     enable-managed-spot-training checkpoint-config debug-hook-config
     debug-rule-configurations tensor-board-output-config experiment-config
     profiler-config profiler-rule-configurations environment retry-strategy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-training-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateTrainingJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-training-job))
(common-lisp:progn
 (common-lisp:defun create-transform-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transform-job-name model-name
                     max-concurrent-transforms model-client-config
                     max-payload-in-mb batch-strategy environment
                     transform-input transform-output data-capture-config
                     transform-resources data-processing tags
                     experiment-config)
   (common-lisp:declare
    (common-lisp:ignorable transform-job-name model-name
     max-concurrent-transforms model-client-config max-payload-in-mb
     batch-strategy environment transform-input transform-output
     data-capture-config transform-resources data-processing tags
     experiment-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-transform-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateTransformJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-transform-job))
(common-lisp:progn
 (common-lisp:defun create-trial
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trial-name display-name experiment-name
                     metadata-properties tags)
   (common-lisp:declare
    (common-lisp:ignorable trial-name display-name experiment-name
     metadata-properties tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-trial-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateTrial"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-trial))
(common-lisp:progn
 (common-lisp:defun create-trial-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trial-component-name display-name status
                     start-time end-time parameters input-artifacts
                     output-artifacts metadata-properties tags)
   (common-lisp:declare
    (common-lisp:ignorable trial-component-name display-name status start-time
     end-time parameters input-artifacts output-artifacts metadata-properties
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-trial-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateTrialComponent"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-trial-component))
(common-lisp:progn
 (common-lisp:defun create-user-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id user-profile-name
                     single-sign-on-user-identifier single-sign-on-user-value
                     tags user-settings)
   (common-lisp:declare
    (common-lisp:ignorable domain-id user-profile-name
     single-sign-on-user-identifier single-sign-on-user-value tags
     user-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateUserProfile"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-user-profile))
(common-lisp:progn
 (common-lisp:defun create-workforce
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cognito-config oidc-config
                     source-ip-config workforce-name tags workforce-vpc-config)
   (common-lisp:declare
    (common-lisp:ignorable cognito-config oidc-config source-ip-config
     workforce-name tags workforce-vpc-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-workforce-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateWorkforce"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-workforce))
(common-lisp:progn
 (common-lisp:defun create-workteam
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workteam-name workforce-name
                     member-definitions description notification-configuration
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable workteam-name workforce-name member-definitions
     description notification-configuration tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-workteam-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateWorkteam"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-workteam))
(common-lisp:progn
 (common-lisp:defun delete-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-name)
   (common-lisp:declare (common-lisp:ignorable action-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAction"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-action))
(common-lisp:progn
 (common-lisp:defun delete-algorithm
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key algorithm-name)
   (common-lisp:declare (common-lisp:ignorable algorithm-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-algorithm-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAlgorithm"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-algorithm))
(common-lisp:progn
 (common-lisp:defun delete-app
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id user-profile-name app-type
                     app-name space-name)
   (common-lisp:declare
    (common-lisp:ignorable domain-id user-profile-name app-type app-name
     space-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-app-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "DeleteApp"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-app))
(common-lisp:progn
 (common-lisp:defun delete-app-image-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-image-config-name)
   (common-lisp:declare (common-lisp:ignorable app-image-config-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-app-image-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAppImageConfig"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-app-image-config))
(common-lisp:progn
 (common-lisp:defun delete-artifact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key artifact-arn source)
   (common-lisp:declare (common-lisp:ignorable artifact-arn source))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-artifact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteArtifact"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-artifact))
(common-lisp:progn
 (common-lisp:defun delete-association
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-arn destination-arn)
   (common-lisp:declare (common-lisp:ignorable source-arn destination-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-association-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAssociation"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-association))
(common-lisp:progn
 (common-lisp:defun delete-code-repository
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key code-repository-name)
   (common-lisp:declare (common-lisp:ignorable code-repository-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-code-repository-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteCodeRepository"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-code-repository))
(common-lisp:progn
 (common-lisp:defun delete-context
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key context-name)
   (common-lisp:declare (common-lisp:ignorable context-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-context-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteContext"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-context))
(common-lisp:progn
 (common-lisp:defun delete-data-quality-job-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-definition-name)
   (common-lisp:declare (common-lisp:ignorable job-definition-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-data-quality-job-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDataQualityJobDefinition"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-data-quality-job-definition))
(common-lisp:progn
 (common-lisp:defun delete-device-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-fleet-name)
   (common-lisp:declare (common-lisp:ignorable device-fleet-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-device-fleet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDeviceFleet"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-device-fleet))
(common-lisp:progn
 (common-lisp:defun delete-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id retention-policy)
   (common-lisp:declare (common-lisp:ignorable domain-id retention-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteDomain"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-domain))
(common-lisp:progn
 (common-lisp:defun delete-edge-deployment-plan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key edge-deployment-plan-name)
   (common-lisp:declare (common-lisp:ignorable edge-deployment-plan-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-edge-deployment-plan-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteEdgeDeploymentPlan"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-edge-deployment-plan))
(common-lisp:progn
 (common-lisp:defun delete-edge-deployment-stage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key edge-deployment-plan-name stage-name)
   (common-lisp:declare
    (common-lisp:ignorable edge-deployment-plan-name stage-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-edge-deployment-stage-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteEdgeDeploymentStage"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-edge-deployment-stage))
(common-lisp:progn
 (common-lisp:defun delete-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-name)
   (common-lisp:declare (common-lisp:ignorable endpoint-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-endpoint-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteEndpoint"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-endpoint))
(common-lisp:progn
 (common-lisp:defun delete-endpoint-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-config-name)
   (common-lisp:declare (common-lisp:ignorable endpoint-config-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-endpoint-config-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteEndpointConfig"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-endpoint-config))
(common-lisp:progn
 (common-lisp:defun delete-experiment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key experiment-name)
   (common-lisp:declare (common-lisp:ignorable experiment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-experiment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteExperiment"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-experiment))
(common-lisp:progn
 (common-lisp:defun delete-feature-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key feature-group-name)
   (common-lisp:declare (common-lisp:ignorable feature-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-feature-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteFeatureGroup"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-feature-group))
(common-lisp:progn
 (common-lisp:defun delete-flow-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-definition-name)
   (common-lisp:declare (common-lisp:ignorable flow-definition-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-flow-definition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteFlowDefinition"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-flow-definition))
(common-lisp:progn
 (common-lisp:defun delete-hub
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hub-name)
   (common-lisp:declare (common-lisp:ignorable hub-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-hub-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "DeleteHub"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-hub))
(common-lisp:progn
 (common-lisp:defun delete-hub-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hub-name hub-content-type
                     hub-content-name hub-content-version)
   (common-lisp:declare
    (common-lisp:ignorable hub-name hub-content-type hub-content-name
     hub-content-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-hub-content-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteHubContent"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-hub-content))
(common-lisp:progn
 (common-lisp:defun delete-human-task-ui
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key human-task-ui-name)
   (common-lisp:declare (common-lisp:ignorable human-task-ui-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-human-task-ui-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteHumanTaskUi"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-human-task-ui))
(common-lisp:progn
 (common-lisp:defun delete-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-name)
   (common-lisp:declare (common-lisp:ignorable image-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteImage"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-image))
(common-lisp:progn
 (common-lisp:defun delete-image-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-name version alias)
   (common-lisp:declare (common-lisp:ignorable image-name version alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-image-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteImageVersion"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-image-version))
(common-lisp:progn
 (common-lisp:defun delete-inference-experiment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-inference-experiment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteInferenceExperiment"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-inference-experiment))
(common-lisp:progn
 (common-lisp:defun delete-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-name)
   (common-lisp:declare (common-lisp:ignorable model-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-model-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteModel"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-model))
(common-lisp:progn
 (common-lisp:defun delete-model-bias-job-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-definition-name)
   (common-lisp:declare (common-lisp:ignorable job-definition-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-model-bias-job-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteModelBiasJobDefinition"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-model-bias-job-definition))
(common-lisp:progn
 (common-lisp:defun delete-model-card
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-card-name)
   (common-lisp:declare (common-lisp:ignorable model-card-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-model-card-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteModelCard"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-model-card))
(common-lisp:progn
 (common-lisp:defun delete-model-explainability-job-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-definition-name)
   (common-lisp:declare (common-lisp:ignorable job-definition-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-model-explainability-job-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteModelExplainabilityJobDefinition"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-model-explainability-job-definition))
(common-lisp:progn
 (common-lisp:defun delete-model-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-package-name)
   (common-lisp:declare (common-lisp:ignorable model-package-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-model-package-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteModelPackage"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-model-package))
(common-lisp:progn
 (common-lisp:defun delete-model-package-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-package-group-name)
   (common-lisp:declare (common-lisp:ignorable model-package-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-model-package-group-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteModelPackageGroup"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-model-package-group))
(common-lisp:progn
 (common-lisp:defun delete-model-package-group-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-package-group-name)
   (common-lisp:declare (common-lisp:ignorable model-package-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-model-package-group-policy-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteModelPackageGroupPolicy"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-model-package-group-policy))
(common-lisp:progn
 (common-lisp:defun delete-model-quality-job-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-definition-name)
   (common-lisp:declare (common-lisp:ignorable job-definition-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-model-quality-job-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteModelQualityJobDefinition"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-model-quality-job-definition))
(common-lisp:progn
 (common-lisp:defun delete-monitoring-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitoring-schedule-name)
   (common-lisp:declare (common-lisp:ignorable monitoring-schedule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-monitoring-schedule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteMonitoringSchedule"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-monitoring-schedule))
(common-lisp:progn
 (common-lisp:defun delete-notebook-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notebook-instance-name)
   (common-lisp:declare (common-lisp:ignorable notebook-instance-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-notebook-instance-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteNotebookInstance"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-notebook-instance))
(common-lisp:progn
 (common-lisp:defun delete-notebook-instance-lifecycle-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notebook-instance-lifecycle-config-name)
   (common-lisp:declare
    (common-lisp:ignorable notebook-instance-lifecycle-config-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-notebook-instance-lifecycle-config-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteNotebookInstanceLifecycleConfig"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-notebook-instance-lifecycle-config))
(common-lisp:progn
 (common-lisp:defun delete-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-pipeline-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeletePipeline"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-pipeline))
(common-lisp:progn
 (common-lisp:defun delete-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name)
   (common-lisp:declare (common-lisp:ignorable project-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-project-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteProject"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-project))
(common-lisp:progn
 (common-lisp:defun delete-space
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id space-name)
   (common-lisp:declare (common-lisp:ignorable domain-id space-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-space-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSpace"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-space))
(common-lisp:progn
 (common-lisp:defun delete-studio-lifecycle-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key studio-lifecycle-config-name)
   (common-lisp:declare (common-lisp:ignorable studio-lifecycle-config-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-studio-lifecycle-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteStudioLifecycleConfig"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-studio-lifecycle-config))
(common-lisp:progn
 (common-lisp:defun delete-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-tags-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "DeleteTags"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-tags))
(common-lisp:progn
 (common-lisp:defun delete-trial
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trial-name)
   (common-lisp:declare (common-lisp:ignorable trial-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-trial-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteTrial"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-trial))
(common-lisp:progn
 (common-lisp:defun delete-trial-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trial-component-name)
   (common-lisp:declare (common-lisp:ignorable trial-component-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-trial-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteTrialComponent"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-trial-component))
(common-lisp:progn
 (common-lisp:defun delete-user-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id user-profile-name)
   (common-lisp:declare (common-lisp:ignorable domain-id user-profile-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteUserProfile"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-user-profile))
(common-lisp:progn
 (common-lisp:defun delete-workforce
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workforce-name)
   (common-lisp:declare (common-lisp:ignorable workforce-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-workforce-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteWorkforce"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-workforce))
(common-lisp:progn
 (common-lisp:defun delete-workteam
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workteam-name)
   (common-lisp:declare (common-lisp:ignorable workteam-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-workteam-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteWorkteam"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-workteam))
(common-lisp:progn
 (common-lisp:defun deregister-devices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-fleet-name device-names)
   (common-lisp:declare (common-lisp:ignorable device-fleet-name device-names))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deregister-devices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeregisterDevices"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-devices))
(common-lisp:progn
 (common-lisp:defun describe-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-name)
   (common-lisp:declare (common-lisp:ignorable action-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAction"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-action))
(common-lisp:progn
 (common-lisp:defun describe-algorithm
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key algorithm-name)
   (common-lisp:declare (common-lisp:ignorable algorithm-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-algorithm-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAlgorithm"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-algorithm))
(common-lisp:progn
 (common-lisp:defun describe-app
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id user-profile-name app-type
                     app-name space-name)
   (common-lisp:declare
    (common-lisp:ignorable domain-id user-profile-name app-type app-name
     space-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-app-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeApp"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-app))
(common-lisp:progn
 (common-lisp:defun describe-app-image-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-image-config-name)
   (common-lisp:declare (common-lisp:ignorable app-image-config-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-app-image-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAppImageConfig"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-app-image-config))
(common-lisp:progn
 (common-lisp:defun describe-artifact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key artifact-arn)
   (common-lisp:declare (common-lisp:ignorable artifact-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-artifact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeArtifact"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-artifact))
(common-lisp:progn
 (common-lisp:defun describe-auto-mljob
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-mljob-name)
   (common-lisp:declare (common-lisp:ignorable auto-mljob-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-auto-mljob-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAutoMLJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-auto-mljob))
(common-lisp:progn
 (common-lisp:defun describe-auto-mljob-v2
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-mljob-name)
   (common-lisp:declare (common-lisp:ignorable auto-mljob-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-auto-mljob-v2request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAutoMLJobV2"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-auto-mljob-v2))
(common-lisp:progn
 (common-lisp:defun describe-code-repository
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key code-repository-name)
   (common-lisp:declare (common-lisp:ignorable code-repository-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-code-repository-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeCodeRepository"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-code-repository))
(common-lisp:progn
 (common-lisp:defun describe-compilation-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key compilation-job-name)
   (common-lisp:declare (common-lisp:ignorable compilation-job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-compilation-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeCompilationJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-compilation-job))
(common-lisp:progn
 (common-lisp:defun describe-context
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key context-name)
   (common-lisp:declare (common-lisp:ignorable context-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-context-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeContext"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-context))
(common-lisp:progn
 (common-lisp:defun describe-data-quality-job-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-definition-name)
   (common-lisp:declare (common-lisp:ignorable job-definition-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-data-quality-job-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDataQualityJobDefinition"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-data-quality-job-definition))
(common-lisp:progn
 (common-lisp:defun describe-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token device-name device-fleet-name)
   (common-lisp:declare
    (common-lisp:ignorable next-token device-name device-fleet-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDevice"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-device))
(common-lisp:progn
 (common-lisp:defun describe-device-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-fleet-name)
   (common-lisp:declare (common-lisp:ignorable device-fleet-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-device-fleet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDeviceFleet"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-device-fleet))
(common-lisp:progn
 (common-lisp:defun describe-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id)
   (common-lisp:declare (common-lisp:ignorable domain-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeDomain"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-domain))
(common-lisp:progn
 (common-lisp:defun describe-edge-deployment-plan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key edge-deployment-plan-name next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable edge-deployment-plan-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-edge-deployment-plan-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEdgeDeploymentPlan"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-edge-deployment-plan))
(common-lisp:progn
 (common-lisp:defun describe-edge-packaging-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key edge-packaging-job-name)
   (common-lisp:declare (common-lisp:ignorable edge-packaging-job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-edge-packaging-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEdgePackagingJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-edge-packaging-job))
(common-lisp:progn
 (common-lisp:defun describe-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-name)
   (common-lisp:declare (common-lisp:ignorable endpoint-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-endpoint-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEndpoint"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-endpoint))
(common-lisp:progn
 (common-lisp:defun describe-endpoint-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-config-name)
   (common-lisp:declare (common-lisp:ignorable endpoint-config-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-endpoint-config-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeEndpointConfig"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-endpoint-config))
(common-lisp:progn
 (common-lisp:defun describe-experiment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key experiment-name)
   (common-lisp:declare (common-lisp:ignorable experiment-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-experiment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeExperiment"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-experiment))
(common-lisp:progn
 (common-lisp:defun describe-feature-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key feature-group-name next-token)
   (common-lisp:declare (common-lisp:ignorable feature-group-name next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-feature-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeFeatureGroup"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-feature-group))
(common-lisp:progn
 (common-lisp:defun describe-feature-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key feature-group-name feature-name)
   (common-lisp:declare
    (common-lisp:ignorable feature-group-name feature-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-feature-metadata-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeFeatureMetadata"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-feature-metadata))
(common-lisp:progn
 (common-lisp:defun describe-flow-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key flow-definition-name)
   (common-lisp:declare (common-lisp:ignorable flow-definition-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-flow-definition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeFlowDefinition"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-flow-definition))
(common-lisp:progn
 (common-lisp:defun describe-hub
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hub-name)
   (common-lisp:declare (common-lisp:ignorable hub-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-hub-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeHub"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-hub))
(common-lisp:progn
 (common-lisp:defun describe-hub-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hub-name hub-content-type
                     hub-content-name hub-content-version)
   (common-lisp:declare
    (common-lisp:ignorable hub-name hub-content-type hub-content-name
     hub-content-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-hub-content-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeHubContent"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-hub-content))
(common-lisp:progn
 (common-lisp:defun describe-human-task-ui
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key human-task-ui-name)
   (common-lisp:declare (common-lisp:ignorable human-task-ui-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-human-task-ui-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeHumanTaskUi"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-human-task-ui))
(common-lisp:progn
 (common-lisp:defun describe-hyper-parameter-tuning-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hyper-parameter-tuning-job-name)
   (common-lisp:declare
    (common-lisp:ignorable hyper-parameter-tuning-job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-hyper-parameter-tuning-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeHyperParameterTuningJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-hyper-parameter-tuning-job))
(common-lisp:progn
 (common-lisp:defun describe-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-name)
   (common-lisp:declare (common-lisp:ignorable image-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeImage"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-image))
(common-lisp:progn
 (common-lisp:defun describe-image-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-name version alias)
   (common-lisp:declare (common-lisp:ignorable image-name version alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-image-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeImageVersion"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-image-version))
(common-lisp:progn
 (common-lisp:defun describe-inference-experiment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-inference-experiment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeInferenceExperiment"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-inference-experiment))
(common-lisp:progn
 (common-lisp:defun describe-inference-recommendations-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name)
   (common-lisp:declare (common-lisp:ignorable job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-inference-recommendations-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeInferenceRecommendationsJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-inference-recommendations-job))
(common-lisp:progn
 (common-lisp:defun describe-labeling-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key labeling-job-name)
   (common-lisp:declare (common-lisp:ignorable labeling-job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-labeling-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeLabelingJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-labeling-job))
(common-lisp:progn
 (common-lisp:defun describe-lineage-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lineage-group-name)
   (common-lisp:declare (common-lisp:ignorable lineage-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-lineage-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeLineageGroup"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-lineage-group))
(common-lisp:progn
 (common-lisp:defun describe-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-name)
   (common-lisp:declare (common-lisp:ignorable model-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-model-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeModel"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-model))
(common-lisp:progn
 (common-lisp:defun describe-model-bias-job-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-definition-name)
   (common-lisp:declare (common-lisp:ignorable job-definition-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-model-bias-job-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeModelBiasJobDefinition"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-model-bias-job-definition))
(common-lisp:progn
 (common-lisp:defun describe-model-card
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-card-name model-card-version)
   (common-lisp:declare
    (common-lisp:ignorable model-card-name model-card-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-model-card-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeModelCard"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-model-card))
(common-lisp:progn
 (common-lisp:defun describe-model-card-export-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-card-export-job-arn)
   (common-lisp:declare (common-lisp:ignorable model-card-export-job-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-model-card-export-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeModelCardExportJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-model-card-export-job))
(common-lisp:progn
 (common-lisp:defun describe-model-explainability-job-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-definition-name)
   (common-lisp:declare (common-lisp:ignorable job-definition-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-model-explainability-job-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeModelExplainabilityJobDefinition"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-model-explainability-job-definition))
(common-lisp:progn
 (common-lisp:defun describe-model-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-package-name)
   (common-lisp:declare (common-lisp:ignorable model-package-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-model-package-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeModelPackage"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-model-package))
(common-lisp:progn
 (common-lisp:defun describe-model-package-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-package-group-name)
   (common-lisp:declare (common-lisp:ignorable model-package-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-model-package-group-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeModelPackageGroup"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-model-package-group))
(common-lisp:progn
 (common-lisp:defun describe-model-quality-job-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-definition-name)
   (common-lisp:declare (common-lisp:ignorable job-definition-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-model-quality-job-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeModelQualityJobDefinition"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-model-quality-job-definition))
(common-lisp:progn
 (common-lisp:defun describe-monitoring-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitoring-schedule-name)
   (common-lisp:declare (common-lisp:ignorable monitoring-schedule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-monitoring-schedule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeMonitoringSchedule"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-monitoring-schedule))
(common-lisp:progn
 (common-lisp:defun describe-notebook-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notebook-instance-name)
   (common-lisp:declare (common-lisp:ignorable notebook-instance-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-notebook-instance-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeNotebookInstance"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-notebook-instance))
(common-lisp:progn
 (common-lisp:defun describe-notebook-instance-lifecycle-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notebook-instance-lifecycle-config-name)
   (common-lisp:declare
    (common-lisp:ignorable notebook-instance-lifecycle-config-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-notebook-instance-lifecycle-config-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeNotebookInstanceLifecycleConfig"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-notebook-instance-lifecycle-config))
(common-lisp:progn
 (common-lisp:defun describe-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name)
   (common-lisp:declare (common-lisp:ignorable pipeline-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-pipeline-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribePipeline"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-pipeline))
(common-lisp:progn
 (common-lisp:defun describe-pipeline-definition-for-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-execution-arn)
   (common-lisp:declare (common-lisp:ignorable pipeline-execution-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-pipeline-definition-for-execution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribePipelineDefinitionForExecution"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-pipeline-definition-for-execution))
(common-lisp:progn
 (common-lisp:defun describe-pipeline-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-execution-arn)
   (common-lisp:declare (common-lisp:ignorable pipeline-execution-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-pipeline-execution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribePipelineExecution"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-pipeline-execution))
(common-lisp:progn
 (common-lisp:defun describe-processing-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key processing-job-name)
   (common-lisp:declare (common-lisp:ignorable processing-job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-processing-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeProcessingJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-processing-job))
(common-lisp:progn
 (common-lisp:defun describe-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name)
   (common-lisp:declare (common-lisp:ignorable project-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-project-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeProject"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-project))
(common-lisp:progn
 (common-lisp:defun describe-space
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id space-name)
   (common-lisp:declare (common-lisp:ignorable domain-id space-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-space-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeSpace"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-space))
(common-lisp:progn
 (common-lisp:defun describe-studio-lifecycle-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key studio-lifecycle-config-name)
   (common-lisp:declare (common-lisp:ignorable studio-lifecycle-config-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-studio-lifecycle-config-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeStudioLifecycleConfig"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-studio-lifecycle-config))
(common-lisp:progn
 (common-lisp:defun describe-subscribed-workteam
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workteam-arn)
   (common-lisp:declare (common-lisp:ignorable workteam-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-subscribed-workteam-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeSubscribedWorkteam"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-subscribed-workteam))
(common-lisp:progn
 (common-lisp:defun describe-training-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key training-job-name)
   (common-lisp:declare (common-lisp:ignorable training-job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-training-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeTrainingJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-training-job))
(common-lisp:progn
 (common-lisp:defun describe-transform-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transform-job-name)
   (common-lisp:declare (common-lisp:ignorable transform-job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-transform-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeTransformJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-transform-job))
(common-lisp:progn
 (common-lisp:defun describe-trial
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trial-name)
   (common-lisp:declare (common-lisp:ignorable trial-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-trial-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeTrial"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-trial))
(common-lisp:progn
 (common-lisp:defun describe-trial-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trial-component-name)
   (common-lisp:declare (common-lisp:ignorable trial-component-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-trial-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeTrialComponent"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-trial-component))
(common-lisp:progn
 (common-lisp:defun describe-user-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id user-profile-name)
   (common-lisp:declare (common-lisp:ignorable domain-id user-profile-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-user-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeUserProfile"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-user-profile))
(common-lisp:progn
 (common-lisp:defun describe-workforce
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workforce-name)
   (common-lisp:declare (common-lisp:ignorable workforce-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-workforce-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeWorkforce"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-workforce))
(common-lisp:progn
 (common-lisp:defun describe-workteam
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workteam-name)
   (common-lisp:declare (common-lisp:ignorable workteam-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-workteam-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeWorkteam"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-workteam))
(common-lisp:progn
 (common-lisp:defun disable-sagemaker-servicecatalog-portfolio ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'sagemaker-request :method "POST" :path "/"
                                :params
                                `(("Action"
                                   ,@"DisableSagemakerServicecatalogPortfolio")
                                  ("Version" ,@"2017-07-24"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'disable-sagemaker-servicecatalog-portfolio))
(common-lisp:progn
 (common-lisp:defun disassociate-trial-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trial-component-name trial-name)
   (common-lisp:declare
    (common-lisp:ignorable trial-component-name trial-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-trial-component-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisassociateTrialComponent"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-trial-component))
(common-lisp:progn
 (common-lisp:defun enable-sagemaker-servicecatalog-portfolio ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'sagemaker-request :method "POST" :path "/"
                                :params
                                `(("Action"
                                   ,@"EnableSagemakerServicecatalogPortfolio")
                                  ("Version" ,@"2017-07-24"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'enable-sagemaker-servicecatalog-portfolio))
(common-lisp:progn
 (common-lisp:defun get-device-fleet-report
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-fleet-name)
   (common-lisp:declare (common-lisp:ignorable device-fleet-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-device-fleet-report-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetDeviceFleetReport"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-device-fleet-report))
(common-lisp:progn
 (common-lisp:defun get-lineage-group-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lineage-group-name)
   (common-lisp:declare (common-lisp:ignorable lineage-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-lineage-group-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetLineageGroupPolicy"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-lineage-group-policy))
(common-lisp:progn
 (common-lisp:defun get-model-package-group-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-package-group-name)
   (common-lisp:declare (common-lisp:ignorable model-package-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-model-package-group-policy-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetModelPackageGroupPolicy"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-model-package-group-policy))
(common-lisp:progn
 (common-lisp:defun get-sagemaker-servicecatalog-portfolio-status ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'sagemaker-request :method "POST" :path "/"
                                :params
                                `(("Action"
                                   ,@"GetSagemakerServicecatalogPortfolioStatus")
                                  ("Version" ,@"2017-07-24"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-sagemaker-servicecatalog-portfolio-status))
(common-lisp:progn
 (common-lisp:defun get-search-suggestions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource suggestion-query)
   (common-lisp:declare (common-lisp:ignorable resource suggestion-query))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-search-suggestions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSearchSuggestions"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-search-suggestions))
(common-lisp:progn
 (common-lisp:defun import-hub-content
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hub-content-name hub-content-version
                     hub-content-type document-schema-version hub-name
                     hub-content-display-name hub-content-description
                     hub-content-markdown hub-content-document
                     hub-content-search-keywords tags)
   (common-lisp:declare
    (common-lisp:ignorable hub-content-name hub-content-version
     hub-content-type document-schema-version hub-name hub-content-display-name
     hub-content-description hub-content-markdown hub-content-document
     hub-content-search-keywords tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-hub-content-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ImportHubContent"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'import-hub-content))
(common-lisp:progn
 (common-lisp:defun list-actions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-uri action-type created-after
                     created-before sort-by sort-order next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable source-uri action-type created-after created-before
     sort-by sort-order next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-actions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListActions"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-actions))
(common-lisp:progn
 (common-lisp:defun list-algorithms
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creation-time-after creation-time-before
                     max-results name-contains next-token sort-by sort-order)
   (common-lisp:declare
    (common-lisp:ignorable creation-time-after creation-time-before max-results
     name-contains next-token sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-algorithms-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAlgorithms"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-algorithms))
(common-lisp:progn
 (common-lisp:defun list-aliases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-name alias version max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable image-name alias version max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-aliases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAliases"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-aliases))
(common-lisp:progn
 (common-lisp:defun list-app-image-configs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token name-contains
                     creation-time-before creation-time-after
                     modified-time-before modified-time-after sort-by
                     sort-order)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token name-contains
     creation-time-before creation-time-after modified-time-before
     modified-time-after sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-app-image-configs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAppImageConfigs"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-app-image-configs))
(common-lisp:progn
 (common-lisp:defun list-apps
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results sort-order sort-by
                     domain-id-equals user-profile-name-equals
                     space-name-equals)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results sort-order sort-by
     domain-id-equals user-profile-name-equals space-name-equals))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-apps-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListApps"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-apps))
(common-lisp:progn
 (common-lisp:defun list-artifacts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-uri artifact-type created-after
                     created-before sort-by sort-order next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable source-uri artifact-type created-after
     created-before sort-by sort-order next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-artifacts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListArtifacts"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-artifacts))
(common-lisp:progn
 (common-lisp:defun list-associations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-arn destination-arn source-type
                     destination-type association-type created-after
                     created-before sort-by sort-order next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable source-arn destination-arn source-type
     destination-type association-type created-after created-before sort-by
     sort-order next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-associations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAssociations"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-associations))
(common-lisp:progn
 (common-lisp:defun list-auto-mljobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creation-time-after creation-time-before
                     last-modified-time-after last-modified-time-before
                     name-contains status-equals sort-order sort-by max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable creation-time-after creation-time-before
     last-modified-time-after last-modified-time-before name-contains
     status-equals sort-order sort-by max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-auto-mljobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAutoMLJobs"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-auto-mljobs))
(common-lisp:progn
 (common-lisp:defun list-candidates-for-auto-mljob
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-mljob-name status-equals
                     candidate-name-equals sort-order sort-by max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable auto-mljob-name status-equals candidate-name-equals
     sort-order sort-by max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-candidates-for-auto-mljob-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListCandidatesForAutoMLJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-candidates-for-auto-mljob))
(common-lisp:progn
 (common-lisp:defun list-code-repositories
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creation-time-after creation-time-before
                     last-modified-time-after last-modified-time-before
                     max-results name-contains next-token sort-by sort-order)
   (common-lisp:declare
    (common-lisp:ignorable creation-time-after creation-time-before
     last-modified-time-after last-modified-time-before max-results
     name-contains next-token sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-code-repositories-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListCodeRepositories"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-code-repositories))
(common-lisp:progn
 (common-lisp:defun list-compilation-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results
                     creation-time-after creation-time-before
                     last-modified-time-after last-modified-time-before
                     name-contains status-equals sort-by sort-order)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results creation-time-after
     creation-time-before last-modified-time-after last-modified-time-before
     name-contains status-equals sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-compilation-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListCompilationJobs"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-compilation-jobs))
(common-lisp:progn
 (common-lisp:defun list-contexts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-uri context-type created-after
                     created-before sort-by sort-order next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable source-uri context-type created-after created-before
     sort-by sort-order next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-contexts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListContexts"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-contexts))
(common-lisp:progn
 (common-lisp:defun list-data-quality-job-definitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-name sort-by sort-order
                     next-token max-results name-contains creation-time-before
                     creation-time-after)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-name sort-by sort-order next-token
     max-results name-contains creation-time-before creation-time-after))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-data-quality-job-definitions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDataQualityJobDefinitions"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-data-quality-job-definitions))
(common-lisp:progn
 (common-lisp:defun list-device-fleets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results
                     creation-time-after creation-time-before
                     last-modified-time-after last-modified-time-before
                     name-contains sort-by sort-order)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results creation-time-after
     creation-time-before last-modified-time-after last-modified-time-before
     name-contains sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-device-fleets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDeviceFleets"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-device-fleets))
(common-lisp:progn
 (common-lisp:defun list-devices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results
                     latest-heartbeat-after model-name device-fleet-name)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results latest-heartbeat-after
     model-name device-fleet-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-devices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDevices"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-devices))
(common-lisp:progn
 (common-lisp:defun list-domains
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-domains-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListDomains"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-domains))
(common-lisp:progn
 (common-lisp:defun list-edge-deployment-plans
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results
                     creation-time-after creation-time-before
                     last-modified-time-after last-modified-time-before
                     name-contains device-fleet-name-contains sort-by
                     sort-order)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results creation-time-after
     creation-time-before last-modified-time-after last-modified-time-before
     name-contains device-fleet-name-contains sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-edge-deployment-plans-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListEdgeDeploymentPlans"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-edge-deployment-plans))
(common-lisp:progn
 (common-lisp:defun list-edge-packaging-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results
                     creation-time-after creation-time-before
                     last-modified-time-after last-modified-time-before
                     name-contains model-name-contains status-equals sort-by
                     sort-order)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results creation-time-after
     creation-time-before last-modified-time-after last-modified-time-before
     name-contains model-name-contains status-equals sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-edge-packaging-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListEdgePackagingJobs"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-edge-packaging-jobs))
(common-lisp:progn
 (common-lisp:defun list-endpoint-configs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sort-by sort-order next-token max-results
                     name-contains creation-time-before creation-time-after)
   (common-lisp:declare
    (common-lisp:ignorable sort-by sort-order next-token max-results
     name-contains creation-time-before creation-time-after))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-endpoint-configs-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListEndpointConfigs"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-endpoint-configs))
(common-lisp:progn
 (common-lisp:defun list-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sort-by sort-order next-token max-results
                     name-contains creation-time-before creation-time-after
                     last-modified-time-before last-modified-time-after
                     status-equals)
   (common-lisp:declare
    (common-lisp:ignorable sort-by sort-order next-token max-results
     name-contains creation-time-before creation-time-after
     last-modified-time-before last-modified-time-after status-equals))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-endpoints-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListEndpoints"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-endpoints))
(common-lisp:progn
 (common-lisp:defun list-experiments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key created-after created-before sort-by
                     sort-order next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable created-after created-before sort-by sort-order
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-experiments-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListExperiments"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-experiments))
(common-lisp:progn
 (common-lisp:defun list-feature-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name-contains feature-group-status-equals
                     offline-store-status-equals creation-time-after
                     creation-time-before sort-order sort-by max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable name-contains feature-group-status-equals
     offline-store-status-equals creation-time-after creation-time-before
     sort-order sort-by max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-feature-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListFeatureGroups"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-feature-groups))
(common-lisp:progn
 (common-lisp:defun list-flow-definitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creation-time-after creation-time-before
                     sort-order next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable creation-time-after creation-time-before sort-order
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-flow-definitions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListFlowDefinitions"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-flow-definitions))
(common-lisp:progn
 (common-lisp:defun list-hub-content-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hub-name hub-content-type
                     hub-content-name min-version max-schema-version
                     creation-time-before creation-time-after sort-by
                     sort-order max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable hub-name hub-content-type hub-content-name
     min-version max-schema-version creation-time-before creation-time-after
     sort-by sort-order max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-hub-content-versions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListHubContentVersions"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-hub-content-versions))
(common-lisp:progn
 (common-lisp:defun list-hub-contents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hub-name hub-content-type name-contains
                     max-schema-version creation-time-before
                     creation-time-after sort-by sort-order max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable hub-name hub-content-type name-contains
     max-schema-version creation-time-before creation-time-after sort-by
     sort-order max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-hub-contents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListHubContents"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-hub-contents))
(common-lisp:progn
 (common-lisp:defun list-hubs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name-contains creation-time-before
                     creation-time-after last-modified-time-before
                     last-modified-time-after sort-by sort-order max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable name-contains creation-time-before
     creation-time-after last-modified-time-before last-modified-time-after
     sort-by sort-order max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-hubs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListHubs"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-hubs))
(common-lisp:progn
 (common-lisp:defun list-human-task-uis
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creation-time-after creation-time-before
                     sort-order next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable creation-time-after creation-time-before sort-order
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-human-task-uis-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListHumanTaskUis"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-human-task-uis))
(common-lisp:progn
 (common-lisp:defun list-hyper-parameter-tuning-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results sort-by sort-order
                     name-contains creation-time-after creation-time-before
                     last-modified-time-after last-modified-time-before
                     status-equals)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results sort-by sort-order
     name-contains creation-time-after creation-time-before
     last-modified-time-after last-modified-time-before status-equals))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-hyper-parameter-tuning-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListHyperParameterTuningJobs"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-hyper-parameter-tuning-jobs))
(common-lisp:progn
 (common-lisp:defun list-image-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creation-time-after creation-time-before
                     image-name last-modified-time-after
                     last-modified-time-before max-results next-token sort-by
                     sort-order)
   (common-lisp:declare
    (common-lisp:ignorable creation-time-after creation-time-before image-name
     last-modified-time-after last-modified-time-before max-results next-token
     sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-image-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListImageVersions"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-image-versions))
(common-lisp:progn
 (common-lisp:defun list-images
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creation-time-after creation-time-before
                     last-modified-time-after last-modified-time-before
                     max-results name-contains next-token sort-by sort-order)
   (common-lisp:declare
    (common-lisp:ignorable creation-time-after creation-time-before
     last-modified-time-after last-modified-time-before max-results
     name-contains next-token sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-images-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListImages"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-images))
(common-lisp:progn
 (common-lisp:defun list-inference-experiments
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name-contains type status-equals
                     creation-time-after creation-time-before
                     last-modified-time-after last-modified-time-before sort-by
                     sort-order next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable name-contains type status-equals creation-time-after
     creation-time-before last-modified-time-after last-modified-time-before
     sort-by sort-order next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-inference-experiments-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListInferenceExperiments"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-inference-experiments))
(common-lisp:progn
 (common-lisp:defun list-inference-recommendations-job-steps
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name status step-type max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable job-name status step-type max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-inference-recommendations-job-steps-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListInferenceRecommendationsJobSteps"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-inference-recommendations-job-steps))
(common-lisp:progn
 (common-lisp:defun list-inference-recommendations-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creation-time-after creation-time-before
                     last-modified-time-after last-modified-time-before
                     name-contains status-equals sort-by sort-order next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable creation-time-after creation-time-before
     last-modified-time-after last-modified-time-before name-contains
     status-equals sort-by sort-order next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-inference-recommendations-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListInferenceRecommendationsJobs"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-inference-recommendations-jobs))
(common-lisp:progn
 (common-lisp:defun list-labeling-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creation-time-after creation-time-before
                     last-modified-time-after last-modified-time-before
                     max-results next-token name-contains sort-by sort-order
                     status-equals)
   (common-lisp:declare
    (common-lisp:ignorable creation-time-after creation-time-before
     last-modified-time-after last-modified-time-before max-results next-token
     name-contains sort-by sort-order status-equals))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-labeling-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListLabelingJobs"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-labeling-jobs))
(common-lisp:progn
 (common-lisp:defun list-labeling-jobs-for-workteam
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workteam-arn max-results next-token
                     creation-time-after creation-time-before
                     job-reference-code-contains sort-by sort-order)
   (common-lisp:declare
    (common-lisp:ignorable workteam-arn max-results next-token
     creation-time-after creation-time-before job-reference-code-contains
     sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-labeling-jobs-for-workteam-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListLabelingJobsForWorkteam"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-labeling-jobs-for-workteam))
(common-lisp:progn
 (common-lisp:defun list-lineage-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key created-after created-before sort-by
                     sort-order next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable created-after created-before sort-by sort-order
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-lineage-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListLineageGroups"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-lineage-groups))
(common-lisp:progn
 (common-lisp:defun list-model-bias-job-definitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-name sort-by sort-order
                     next-token max-results name-contains creation-time-before
                     creation-time-after)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-name sort-by sort-order next-token
     max-results name-contains creation-time-before creation-time-after))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-model-bias-job-definitions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListModelBiasJobDefinitions"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-model-bias-job-definitions))
(common-lisp:progn
 (common-lisp:defun list-model-card-export-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-card-name model-card-version
                     creation-time-after creation-time-before
                     model-card-export-job-name-contains status-equals sort-by
                     sort-order next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable model-card-name model-card-version
     creation-time-after creation-time-before
     model-card-export-job-name-contains status-equals sort-by sort-order
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-model-card-export-jobs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListModelCardExportJobs"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-model-card-export-jobs))
(common-lisp:progn
 (common-lisp:defun list-model-card-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creation-time-after creation-time-before
                     max-results model-card-name model-card-status next-token
                     sort-by sort-order)
   (common-lisp:declare
    (common-lisp:ignorable creation-time-after creation-time-before max-results
     model-card-name model-card-status next-token sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-model-card-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListModelCardVersions"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-model-card-versions))
(common-lisp:progn
 (common-lisp:defun list-model-cards
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creation-time-after creation-time-before
                     max-results name-contains model-card-status next-token
                     sort-by sort-order)
   (common-lisp:declare
    (common-lisp:ignorable creation-time-after creation-time-before max-results
     name-contains model-card-status next-token sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-model-cards-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListModelCards"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-model-cards))
(common-lisp:progn
 (common-lisp:defun list-model-explainability-job-definitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-name sort-by sort-order
                     next-token max-results name-contains creation-time-before
                     creation-time-after)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-name sort-by sort-order next-token
     max-results name-contains creation-time-before creation-time-after))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-model-explainability-job-definitions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListModelExplainabilityJobDefinitions"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-model-explainability-job-definitions))
(common-lisp:progn
 (common-lisp:defun list-model-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key search-expression next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable search-expression next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-model-metadata-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListModelMetadata"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-model-metadata))
(common-lisp:progn
 (common-lisp:defun list-model-package-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creation-time-after creation-time-before
                     max-results name-contains next-token sort-by sort-order)
   (common-lisp:declare
    (common-lisp:ignorable creation-time-after creation-time-before max-results
     name-contains next-token sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-model-package-groups-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListModelPackageGroups"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-model-package-groups))
(common-lisp:progn
 (common-lisp:defun list-model-packages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creation-time-after creation-time-before
                     max-results name-contains model-approval-status
                     model-package-group-name model-package-type next-token
                     sort-by sort-order)
   (common-lisp:declare
    (common-lisp:ignorable creation-time-after creation-time-before max-results
     name-contains model-approval-status model-package-group-name
     model-package-type next-token sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-model-packages-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListModelPackages"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-model-packages))
(common-lisp:progn
 (common-lisp:defun list-model-quality-job-definitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-name sort-by sort-order
                     next-token max-results name-contains creation-time-before
                     creation-time-after)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-name sort-by sort-order next-token
     max-results name-contains creation-time-before creation-time-after))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-model-quality-job-definitions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListModelQualityJobDefinitions"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-model-quality-job-definitions))
(common-lisp:progn
 (common-lisp:defun list-models
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sort-by sort-order next-token max-results
                     name-contains creation-time-before creation-time-after)
   (common-lisp:declare
    (common-lisp:ignorable sort-by sort-order next-token max-results
     name-contains creation-time-before creation-time-after))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-models-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListModels"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-models))
(common-lisp:progn
 (common-lisp:defun list-monitoring-alert-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitoring-schedule-name
                     monitoring-alert-name sort-by sort-order next-token
                     max-results creation-time-before creation-time-after
                     status-equals)
   (common-lisp:declare
    (common-lisp:ignorable monitoring-schedule-name monitoring-alert-name
     sort-by sort-order next-token max-results creation-time-before
     creation-time-after status-equals))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-monitoring-alert-history-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMonitoringAlertHistory"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-monitoring-alert-history))
(common-lisp:progn
 (common-lisp:defun list-monitoring-alerts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitoring-schedule-name next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable monitoring-schedule-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-monitoring-alerts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMonitoringAlerts"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-monitoring-alerts))
(common-lisp:progn
 (common-lisp:defun list-monitoring-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitoring-schedule-name endpoint-name
                     sort-by sort-order next-token max-results
                     scheduled-time-before scheduled-time-after
                     creation-time-before creation-time-after
                     last-modified-time-before last-modified-time-after
                     status-equals monitoring-job-definition-name
                     monitoring-type-equals)
   (common-lisp:declare
    (common-lisp:ignorable monitoring-schedule-name endpoint-name sort-by
     sort-order next-token max-results scheduled-time-before
     scheduled-time-after creation-time-before creation-time-after
     last-modified-time-before last-modified-time-after status-equals
     monitoring-job-definition-name monitoring-type-equals))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-monitoring-executions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMonitoringExecutions"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-monitoring-executions))
(common-lisp:progn
 (common-lisp:defun list-monitoring-schedules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-name sort-by sort-order
                     next-token max-results name-contains creation-time-before
                     creation-time-after last-modified-time-before
                     last-modified-time-after status-equals
                     monitoring-job-definition-name monitoring-type-equals)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-name sort-by sort-order next-token
     max-results name-contains creation-time-before creation-time-after
     last-modified-time-before last-modified-time-after status-equals
     monitoring-job-definition-name monitoring-type-equals))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-monitoring-schedules-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMonitoringSchedules"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-monitoring-schedules))
(common-lisp:progn
 (common-lisp:defun list-notebook-instance-lifecycle-configs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results sort-by sort-order
                     name-contains creation-time-before creation-time-after
                     last-modified-time-before last-modified-time-after)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results sort-by sort-order
     name-contains creation-time-before creation-time-after
     last-modified-time-before last-modified-time-after))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-notebook-instance-lifecycle-configs-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListNotebookInstanceLifecycleConfigs"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-notebook-instance-lifecycle-configs))
(common-lisp:progn
 (common-lisp:defun list-notebook-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results sort-by sort-order
                     name-contains creation-time-before creation-time-after
                     last-modified-time-before last-modified-time-after
                     status-equals
                     notebook-instance-lifecycle-config-name-contains
                     default-code-repository-contains
                     additional-code-repository-equals)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results sort-by sort-order
     name-contains creation-time-before creation-time-after
     last-modified-time-before last-modified-time-after status-equals
     notebook-instance-lifecycle-config-name-contains
     default-code-repository-contains additional-code-repository-equals))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-notebook-instances-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListNotebookInstances"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-notebook-instances))
(common-lisp:progn
 (common-lisp:defun list-pipeline-execution-steps
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-execution-arn next-token
                     max-results sort-order)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-execution-arn next-token max-results
     sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-pipeline-execution-steps-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListPipelineExecutionSteps"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-pipeline-execution-steps))
(common-lisp:progn
 (common-lisp:defun list-pipeline-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name created-after
                     created-before sort-by sort-order next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name created-after created-before sort-by
     sort-order next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-pipeline-executions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListPipelineExecutions"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-pipeline-executions))
(common-lisp:progn
 (common-lisp:defun list-pipeline-parameters-for-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-execution-arn next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-execution-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-pipeline-parameters-for-execution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListPipelineParametersForExecution"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-pipeline-parameters-for-execution))
(common-lisp:progn
 (common-lisp:defun list-pipelines
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name-prefix created-after
                     created-before sort-by sort-order next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name-prefix created-after created-before
     sort-by sort-order next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-pipelines-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListPipelines"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-pipelines))
(common-lisp:progn
 (common-lisp:defun list-processing-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creation-time-after creation-time-before
                     last-modified-time-after last-modified-time-before
                     name-contains status-equals sort-by sort-order next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable creation-time-after creation-time-before
     last-modified-time-after last-modified-time-before name-contains
     status-equals sort-by sort-order next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-processing-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListProcessingJobs"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-processing-jobs))
(common-lisp:progn
 (common-lisp:defun list-projects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creation-time-after creation-time-before
                     max-results name-contains next-token sort-by sort-order)
   (common-lisp:declare
    (common-lisp:ignorable creation-time-after creation-time-before max-results
     name-contains next-token sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-projects-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListProjects"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-projects))
(common-lisp:progn
 (common-lisp:defun list-spaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results sort-order sort-by
                     domain-id-equals space-name-contains)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results sort-order sort-by
     domain-id-equals space-name-contains))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-spaces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListSpaces"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-spaces))
(common-lisp:progn
 (common-lisp:defun list-stage-devices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results
                     edge-deployment-plan-name
                     exclude-devices-deployed-in-other-stage stage-name)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results edge-deployment-plan-name
     exclude-devices-deployed-in-other-stage stage-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-stage-devices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListStageDevices"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-stage-devices))
(common-lisp:progn
 (common-lisp:defun list-studio-lifecycle-configs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token name-contains
                     app-type-equals creation-time-before creation-time-after
                     modified-time-before modified-time-after sort-by
                     sort-order)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token name-contains app-type-equals
     creation-time-before creation-time-after modified-time-before
     modified-time-after sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-studio-lifecycle-configs-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListStudioLifecycleConfigs"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-studio-lifecycle-configs))
(common-lisp:progn
 (common-lisp:defun list-subscribed-workteams
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name-contains next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable name-contains next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-subscribed-workteams-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListSubscribedWorkteams"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-subscribed-workteams))
(common-lisp:progn
 (common-lisp:defun list-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListTags"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags))
(common-lisp:progn
 (common-lisp:defun list-training-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results
                     creation-time-after creation-time-before
                     last-modified-time-after last-modified-time-before
                     name-contains status-equals sort-by sort-order
                     warm-pool-status-equals)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results creation-time-after
     creation-time-before last-modified-time-after last-modified-time-before
     name-contains status-equals sort-by sort-order warm-pool-status-equals))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-training-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTrainingJobs"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-training-jobs))
(common-lisp:progn
 (common-lisp:defun list-training-jobs-for-hyper-parameter-tuning-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hyper-parameter-tuning-job-name
                     next-token max-results status-equals sort-by sort-order)
   (common-lisp:declare
    (common-lisp:ignorable hyper-parameter-tuning-job-name next-token
     max-results status-equals sort-by sort-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-training-jobs-for-hyper-parameter-tuning-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTrainingJobsForHyperParameterTuningJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-training-jobs-for-hyper-parameter-tuning-job))
(common-lisp:progn
 (common-lisp:defun list-transform-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key creation-time-after creation-time-before
                     last-modified-time-after last-modified-time-before
                     name-contains status-equals sort-by sort-order next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable creation-time-after creation-time-before
     last-modified-time-after last-modified-time-before name-contains
     status-equals sort-by sort-order next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-transform-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTransformJobs"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-transform-jobs))
(common-lisp:progn
 (common-lisp:defun list-trial-components
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key experiment-name trial-name source-arn
                     created-after created-before sort-by sort-order
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable experiment-name trial-name source-arn created-after
     created-before sort-by sort-order max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-trial-components-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTrialComponents"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-trial-components))
(common-lisp:progn
 (common-lisp:defun list-trials
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key experiment-name trial-component-name
                     created-after created-before sort-by sort-order
                     max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable experiment-name trial-component-name created-after
     created-before sort-by sort-order max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-trials-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListTrials"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-trials))
(common-lisp:progn
 (common-lisp:defun list-user-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results sort-order sort-by
                     domain-id-equals user-profile-name-contains)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results sort-order sort-by
     domain-id-equals user-profile-name-contains))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-user-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListUserProfiles"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-user-profiles))
(common-lisp:progn
 (common-lisp:defun list-workforces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sort-by sort-order name-contains
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable sort-by sort-order name-contains next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-workforces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListWorkforces"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-workforces))
(common-lisp:progn
 (common-lisp:defun list-workteams
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sort-by sort-order name-contains
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable sort-by sort-order name-contains next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-workteams-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListWorkteams"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-workteams))
(common-lisp:progn
 (common-lisp:defun put-model-package-group-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-package-group-name resource-policy)
   (common-lisp:declare
    (common-lisp:ignorable model-package-group-name resource-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-model-package-group-policy-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutModelPackageGroupPolicy"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-model-package-group-policy))
(common-lisp:progn
 (common-lisp:defun query-lineage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key start-arns direction include-edges
                     filters max-depth max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable start-arns direction include-edges filters max-depth
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-query-lineage-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "QueryLineage"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'query-lineage))
(common-lisp:progn
 (common-lisp:defun register-devices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-fleet-name devices tags)
   (common-lisp:declare (common-lisp:ignorable device-fleet-name devices tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-devices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RegisterDevices"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-devices))
(common-lisp:progn
 (common-lisp:defun render-ui-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ui-template task role-arn
                     human-task-ui-arn)
   (common-lisp:declare
    (common-lisp:ignorable ui-template task role-arn human-task-ui-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-render-ui-template-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RenderUiTemplate"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'render-ui-template))
(common-lisp:progn
 (common-lisp:defun retry-pipeline-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-execution-arn
                     client-request-token parallelism-configuration)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-execution-arn client-request-token
     parallelism-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-retry-pipeline-execution-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RetryPipelineExecution"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'retry-pipeline-execution))
(common-lisp:progn
 (common-lisp:defun search
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource search-expression sort-by
                     sort-order next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable resource search-expression sort-by sort-order
     next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "Search"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'search))
(common-lisp:progn
 (common-lisp:defun send-pipeline-execution-step-failure
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key callback-token failure-reason
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable callback-token failure-reason client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-send-pipeline-execution-step-failure-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SendPipelineExecutionStepFailure"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'send-pipeline-execution-step-failure))
(common-lisp:progn
 (common-lisp:defun send-pipeline-execution-step-success
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key callback-token output-parameters
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable callback-token output-parameters
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-send-pipeline-execution-step-success-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SendPipelineExecutionStepSuccess"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'send-pipeline-execution-step-success))
(common-lisp:progn
 (common-lisp:defun start-edge-deployment-stage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key edge-deployment-plan-name stage-name)
   (common-lisp:declare
    (common-lisp:ignorable edge-deployment-plan-name stage-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-edge-deployment-stage-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartEdgeDeploymentStage"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-edge-deployment-stage))
(common-lisp:progn
 (common-lisp:defun start-inference-experiment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-inference-experiment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartInferenceExperiment"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-inference-experiment))
(common-lisp:progn
 (common-lisp:defun start-monitoring-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitoring-schedule-name)
   (common-lisp:declare (common-lisp:ignorable monitoring-schedule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-monitoring-schedule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartMonitoringSchedule"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-monitoring-schedule))
(common-lisp:progn
 (common-lisp:defun start-notebook-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notebook-instance-name)
   (common-lisp:declare (common-lisp:ignorable notebook-instance-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-notebook-instance-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartNotebookInstance"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-notebook-instance))
(common-lisp:progn
 (common-lisp:defun start-pipeline-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name
                     pipeline-execution-display-name pipeline-parameters
                     pipeline-execution-description client-request-token
                     parallelism-configuration)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name pipeline-execution-display-name
     pipeline-parameters pipeline-execution-description client-request-token
     parallelism-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-pipeline-execution-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartPipelineExecution"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-pipeline-execution))
(common-lisp:progn
 (common-lisp:defun stop-auto-mljob
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-mljob-name)
   (common-lisp:declare (common-lisp:ignorable auto-mljob-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-auto-mljob-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopAutoMLJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-auto-mljob))
(common-lisp:progn
 (common-lisp:defun stop-compilation-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key compilation-job-name)
   (common-lisp:declare (common-lisp:ignorable compilation-job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-compilation-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopCompilationJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-compilation-job))
(common-lisp:progn
 (common-lisp:defun stop-edge-deployment-stage
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key edge-deployment-plan-name stage-name)
   (common-lisp:declare
    (common-lisp:ignorable edge-deployment-plan-name stage-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-edge-deployment-stage-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopEdgeDeploymentStage"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-edge-deployment-stage))
(common-lisp:progn
 (common-lisp:defun stop-edge-packaging-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key edge-packaging-job-name)
   (common-lisp:declare (common-lisp:ignorable edge-packaging-job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-edge-packaging-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopEdgePackagingJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-edge-packaging-job))
(common-lisp:progn
 (common-lisp:defun stop-hyper-parameter-tuning-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hyper-parameter-tuning-job-name)
   (common-lisp:declare
    (common-lisp:ignorable hyper-parameter-tuning-job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-hyper-parameter-tuning-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopHyperParameterTuningJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-hyper-parameter-tuning-job))
(common-lisp:progn
 (common-lisp:defun stop-inference-experiment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name model-variant-actions
                     desired-model-variants desired-state reason)
   (common-lisp:declare
    (common-lisp:ignorable name model-variant-actions desired-model-variants
     desired-state reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-inference-experiment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopInferenceExperiment"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-inference-experiment))
(common-lisp:progn
 (common-lisp:defun stop-inference-recommendations-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name)
   (common-lisp:declare (common-lisp:ignorable job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stop-inference-recommendations-job-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopInferenceRecommendationsJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-inference-recommendations-job))
(common-lisp:progn
 (common-lisp:defun stop-labeling-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key labeling-job-name)
   (common-lisp:declare (common-lisp:ignorable labeling-job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-labeling-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopLabelingJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-labeling-job))
(common-lisp:progn
 (common-lisp:defun stop-monitoring-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitoring-schedule-name)
   (common-lisp:declare (common-lisp:ignorable monitoring-schedule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-monitoring-schedule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopMonitoringSchedule"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-monitoring-schedule))
(common-lisp:progn
 (common-lisp:defun stop-notebook-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notebook-instance-name)
   (common-lisp:declare (common-lisp:ignorable notebook-instance-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-notebook-instance-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopNotebookInstance"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-notebook-instance))
(common-lisp:progn
 (common-lisp:defun stop-pipeline-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-execution-arn
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-execution-arn client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-pipeline-execution-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopPipelineExecution"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-pipeline-execution))
(common-lisp:progn
 (common-lisp:defun stop-processing-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key processing-job-name)
   (common-lisp:declare (common-lisp:ignorable processing-job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-processing-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopProcessingJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-processing-job))
(common-lisp:progn
 (common-lisp:defun stop-training-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key training-job-name)
   (common-lisp:declare (common-lisp:ignorable training-job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-training-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopTrainingJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-training-job))
(common-lisp:progn
 (common-lisp:defun stop-transform-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key transform-job-name)
   (common-lisp:declare (common-lisp:ignorable transform-job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-transform-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopTransformJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-transform-job))
(common-lisp:progn
 (common-lisp:defun update-action
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-name description status properties
                     properties-to-remove)
   (common-lisp:declare
    (common-lisp:ignorable action-name description status properties
     properties-to-remove))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-action-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateAction"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-action))
(common-lisp:progn
 (common-lisp:defun update-app-image-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-image-config-name
                     kernel-gateway-image-config)
   (common-lisp:declare
    (common-lisp:ignorable app-image-config-name kernel-gateway-image-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-app-image-config-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateAppImageConfig"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-app-image-config))
(common-lisp:progn
 (common-lisp:defun update-artifact
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key artifact-arn artifact-name properties
                     properties-to-remove)
   (common-lisp:declare
    (common-lisp:ignorable artifact-arn artifact-name properties
     properties-to-remove))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-artifact-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateArtifact"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-artifact))
(common-lisp:progn
 (common-lisp:defun update-code-repository
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key code-repository-name git-config)
   (common-lisp:declare
    (common-lisp:ignorable code-repository-name git-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-code-repository-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateCodeRepository"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-code-repository))
(common-lisp:progn
 (common-lisp:defun update-context
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key context-name description properties
                     properties-to-remove)
   (common-lisp:declare
    (common-lisp:ignorable context-name description properties
     properties-to-remove))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-context-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateContext"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-context))
(common-lisp:progn
 (common-lisp:defun update-device-fleet
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-fleet-name role-arn description
                     output-config enable-iot-role-alias)
   (common-lisp:declare
    (common-lisp:ignorable device-fleet-name role-arn description output-config
     enable-iot-role-alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-device-fleet-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDeviceFleet"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-device-fleet))
(common-lisp:progn
 (common-lisp:defun update-devices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-fleet-name devices)
   (common-lisp:declare (common-lisp:ignorable device-fleet-name devices))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-devices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDevices"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-devices))
(common-lisp:progn
 (common-lisp:defun update-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id default-user-settings
                     domain-settings-for-update default-space-settings
                     app-security-group-management)
   (common-lisp:declare
    (common-lisp:ignorable domain-id default-user-settings
     domain-settings-for-update default-space-settings
     app-security-group-management))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateDomain"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-domain))
(common-lisp:progn
 (common-lisp:defun update-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-name endpoint-config-name
                     retain-all-variant-properties
                     exclude-retained-variant-properties deployment-config
                     retain-deployment-config)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-name endpoint-config-name
     retain-all-variant-properties exclude-retained-variant-properties
     deployment-config retain-deployment-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-endpoint-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateEndpoint"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-endpoint))
(common-lisp:progn
 (common-lisp:defun update-endpoint-weights-and-capacities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-name
                     desired-weights-and-capacities)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-name desired-weights-and-capacities))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-endpoint-weights-and-capacities-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateEndpointWeightsAndCapacities"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-endpoint-weights-and-capacities))
(common-lisp:progn
 (common-lisp:defun update-experiment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key experiment-name display-name description)
   (common-lisp:declare
    (common-lisp:ignorable experiment-name display-name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-experiment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateExperiment"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-experiment))
(common-lisp:progn
 (common-lisp:defun update-feature-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key feature-group-name feature-additions)
   (common-lisp:declare
    (common-lisp:ignorable feature-group-name feature-additions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-feature-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateFeatureGroup"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-feature-group))
(common-lisp:progn
 (common-lisp:defun update-feature-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key feature-group-name feature-name
                     description parameter-additions parameter-removals)
   (common-lisp:declare
    (common-lisp:ignorable feature-group-name feature-name description
     parameter-additions parameter-removals))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-feature-metadata-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateFeatureMetadata"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-feature-metadata))
(common-lisp:progn
 (common-lisp:defun update-hub
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hub-name hub-description hub-display-name
                     hub-search-keywords)
   (common-lisp:declare
    (common-lisp:ignorable hub-name hub-description hub-display-name
     hub-search-keywords))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-hub-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "UpdateHub"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-hub))
(common-lisp:progn
 (common-lisp:defun update-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key delete-properties description
                     display-name image-name role-arn)
   (common-lisp:declare
    (common-lisp:ignorable delete-properties description display-name
     image-name role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateImage"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-image))
(common-lisp:progn
 (common-lisp:defun update-image-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image-name alias version aliases-to-add
                     aliases-to-delete vendor-guidance job-type mlframework
                     programming-lang processor horovod release-notes)
   (common-lisp:declare
    (common-lisp:ignorable image-name alias version aliases-to-add
     aliases-to-delete vendor-guidance job-type mlframework programming-lang
     processor horovod release-notes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-image-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateImageVersion"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-image-version))
(common-lisp:progn
 (common-lisp:defun update-inference-experiment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name schedule description model-variants
                     data-storage-config shadow-mode-config)
   (common-lisp:declare
    (common-lisp:ignorable name schedule description model-variants
     data-storage-config shadow-mode-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-inference-experiment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateInferenceExperiment"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-inference-experiment))
(common-lisp:progn
 (common-lisp:defun update-model-card
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-card-name content
                     model-card-status)
   (common-lisp:declare
    (common-lisp:ignorable model-card-name content model-card-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-model-card-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateModelCard"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-model-card))
(common-lisp:progn
 (common-lisp:defun update-model-package
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key model-package-arn model-approval-status
                     approval-description customer-metadata-properties
                     customer-metadata-properties-to-remove
                     additional-inference-specifications-to-add)
   (common-lisp:declare
    (common-lisp:ignorable model-package-arn model-approval-status
     approval-description customer-metadata-properties
     customer-metadata-properties-to-remove
     additional-inference-specifications-to-add))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-model-package-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateModelPackage"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-model-package))
(common-lisp:progn
 (common-lisp:defun update-monitoring-alert
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitoring-schedule-name
                     monitoring-alert-name datapoints-to-alert
                     evaluation-period)
   (common-lisp:declare
    (common-lisp:ignorable monitoring-schedule-name monitoring-alert-name
     datapoints-to-alert evaluation-period))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-monitoring-alert-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateMonitoringAlert"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-monitoring-alert))
(common-lisp:progn
 (common-lisp:defun update-monitoring-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key monitoring-schedule-name
                     monitoring-schedule-config)
   (common-lisp:declare
    (common-lisp:ignorable monitoring-schedule-name
     monitoring-schedule-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-monitoring-schedule-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateMonitoringSchedule"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-monitoring-schedule))
(common-lisp:progn
 (common-lisp:defun update-notebook-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notebook-instance-name instance-type
                     role-arn lifecycle-config-name
                     disassociate-lifecycle-config volume-size-in-gb
                     default-code-repository additional-code-repositories
                     accelerator-types disassociate-accelerator-types
                     disassociate-default-code-repository
                     disassociate-additional-code-repositories root-access
                     instance-metadata-service-configuration)
   (common-lisp:declare
    (common-lisp:ignorable notebook-instance-name instance-type role-arn
     lifecycle-config-name disassociate-lifecycle-config volume-size-in-gb
     default-code-repository additional-code-repositories accelerator-types
     disassociate-accelerator-types disassociate-default-code-repository
     disassociate-additional-code-repositories root-access
     instance-metadata-service-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-notebook-instance-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateNotebookInstance"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-notebook-instance))
(common-lisp:progn
 (common-lisp:defun update-notebook-instance-lifecycle-config
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key notebook-instance-lifecycle-config-name
                     on-create on-start)
   (common-lisp:declare
    (common-lisp:ignorable notebook-instance-lifecycle-config-name on-create
     on-start))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-notebook-instance-lifecycle-config-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateNotebookInstanceLifecycleConfig"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-notebook-instance-lifecycle-config))
(common-lisp:progn
 (common-lisp:defun update-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name pipeline-display-name
                     pipeline-definition pipeline-definition-s3location
                     pipeline-description role-arn parallelism-configuration)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name pipeline-display-name
     pipeline-definition pipeline-definition-s3location pipeline-description
     role-arn parallelism-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-pipeline-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdatePipeline"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-pipeline))
(common-lisp:progn
 (common-lisp:defun update-pipeline-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-execution-arn
                     pipeline-execution-description
                     pipeline-execution-display-name parallelism-configuration)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-execution-arn
     pipeline-execution-description pipeline-execution-display-name
     parallelism-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-pipeline-execution-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdatePipelineExecution"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-pipeline-execution))
(common-lisp:progn
 (common-lisp:defun update-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-name project-description
                     service-catalog-provisioning-update-details tags)
   (common-lisp:declare
    (common-lisp:ignorable project-name project-description
     service-catalog-provisioning-update-details tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-project-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateProject"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-project))
(common-lisp:progn
 (common-lisp:defun update-space
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id space-name space-settings)
   (common-lisp:declare
    (common-lisp:ignorable domain-id space-name space-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-space-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateSpace"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-space))
(common-lisp:progn
 (common-lisp:defun update-training-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key training-job-name profiler-config
                     profiler-rule-configurations resource-config)
   (common-lisp:declare
    (common-lisp:ignorable training-job-name profiler-config
     profiler-rule-configurations resource-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-training-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateTrainingJob"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-training-job))
(common-lisp:progn
 (common-lisp:defun update-trial
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trial-name display-name)
   (common-lisp:declare (common-lisp:ignorable trial-name display-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-trial-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateTrial"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-trial))
(common-lisp:progn
 (common-lisp:defun update-trial-component
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key trial-component-name display-name status
                     start-time end-time parameters parameters-to-remove
                     input-artifacts input-artifacts-to-remove output-artifacts
                     output-artifacts-to-remove)
   (common-lisp:declare
    (common-lisp:ignorable trial-component-name display-name status start-time
     end-time parameters parameters-to-remove input-artifacts
     input-artifacts-to-remove output-artifacts output-artifacts-to-remove))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-trial-component-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateTrialComponent"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-trial-component))
(common-lisp:progn
 (common-lisp:defun update-user-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key domain-id user-profile-name
                     user-settings)
   (common-lisp:declare
    (common-lisp:ignorable domain-id user-profile-name user-settings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-user-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateUserProfile"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-user-profile))
(common-lisp:progn
 (common-lisp:defun update-workforce
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workforce-name source-ip-config
                     oidc-config workforce-vpc-config)
   (common-lisp:declare
    (common-lisp:ignorable workforce-name source-ip-config oidc-config
     workforce-vpc-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-workforce-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateWorkforce"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-workforce))
(common-lisp:progn
 (common-lisp:defun update-workteam
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key workteam-name member-definitions
                     description notification-configuration)
   (common-lisp:declare
    (common-lisp:ignorable workteam-name member-definitions description
     notification-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-workteam-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'sagemaker-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateWorkteam"
                                                        "2017-07-24"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-workteam))
