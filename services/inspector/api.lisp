;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/inspector/api
  (:use)
  (:nicknames #:aws/inspector)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/inspector/api)
(common-lisp:progn
 (common-lisp:defclass inspector-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "inspector"))
 (common-lisp:export 'inspector-request))
(common-lisp:progn
 (common-lisp:define-condition inspector-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'inspector-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("AgentsAlreadyRunningAssessmentException"
     . agents-already-running-assessment-exception)
    ("AssessmentRunInProgressException" . assessment-run-in-progress-exception)
    ("InternalException" . internal-exception)
    ("InvalidCrossAccountRoleException" . invalid-cross-account-role-exception)
    ("InvalidInputException" . invalid-input-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("NoSuchEntityException" . no-such-entity-exception)
    ("PreviewGenerationInProgressException"
     . preview-generation-in-progress-exception)
    ("ServiceTemporarilyUnavailableException"
     . service-temporarily-unavailable-exception)
    ("UnsupportedFeatureException" . unsupported-feature-exception)))
(common-lisp:deftype access-denied-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (inspector-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)
      (error-code :initarg :error-code :initform common-lisp:nil :reader
       access-denied-exception-error-code)
      (can-retry :initarg :can-retry :initform common-lisp:nil :reader
       access-denied-exception-can-retry)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message
                    'access-denied-exception-error-code
                    'access-denied-exception-can-retry)))
(common-lisp:progn
 (common-lisp:defstruct
     (add-attributes-to-findings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-attributes-to-findings-request-"))
   (finding-arns (common-lisp:error ":findingarns is required") :type
    (common-lisp:or add-remove-attributes-finding-arn-list common-lisp:null))
   (attributes (common-lisp:error ":attributes is required") :type
    (common-lisp:or user-attribute-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-attributes-to-findings-request
                    'make-add-attributes-to-findings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-attributes-to-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-attributes-to-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-arns))
      (common-lisp:list
       (common-lisp:cons "findingArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-attributes-to-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-attributes-to-findings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-attributes-to-findings-response-"))
   (failed-items (common-lisp:error ":faileditems is required") :type
    (common-lisp:or failed-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-attributes-to-findings-response
                    'make-add-attributes-to-findings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-attributes-to-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-attributes-to-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-items))
      (common-lisp:list
       (common-lisp:cons "failedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-attributes-to-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype add-remove-attributes-finding-arn-list ()
   '(trivial-types:proper-list arn))
 (common-lisp:defun |make-add-remove-attributes-finding-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (agent-already-running-assessment (:copier common-lisp:nil)
      (:conc-name "struct-shape-agent-already-running-assessment-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or agent-id common-lisp:null))
   (assessment-run-arn (common-lisp:error ":assessmentrunarn is required")
    :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'agent-already-running-assessment
                    'make-agent-already-running-assessment))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          agent-already-running-assessment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          agent-already-running-assessment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          agent-already-running-assessment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype agent-already-running-assessment-list ()
   '(trivial-types:proper-list agent-already-running-assessment))
 (common-lisp:defun |make-agent-already-running-assessment-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            agent-already-running-assessment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (agent-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-agent-filter-"))
   (agent-healths (common-lisp:error ":agenthealths is required") :type
    (common-lisp:or agent-health-list common-lisp:null))
   (agent-health-codes (common-lisp:error ":agenthealthcodes is required")
    :type (common-lisp:or agent-health-code-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'agent-filter 'make-agent-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input agent-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input agent-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-healths))
      (common-lisp:list
       (common-lisp:cons "agentHealths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-health-codes))
      (common-lisp:list
       (common-lisp:cons "agentHealthCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input agent-filter))
   common-lisp:nil))
(common-lisp:deftype agent-health () 'common-lisp:string)
(common-lisp:deftype agent-health-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype agent-health-code-list ()
   '(trivial-types:proper-list agent-health-code))
 (common-lisp:defun |make-agent-health-code-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list agent-health-code))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype agent-health-list ()
   '(trivial-types:proper-list agent-health))
 (common-lisp:defun |make-agent-health-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list agent-health))
   aws-sdk/generator/shape::members))
(common-lisp:deftype agent-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype agent-id-list () '(trivial-types:proper-list agent-id))
 (common-lisp:defun |make-agent-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list agent-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (agent-preview (:copier common-lisp:nil)
      (:conc-name "struct-shape-agent-preview-"))
   (hostname common-lisp:nil :type (common-lisp:or hostname common-lisp:null))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or agent-id common-lisp:null))
   (auto-scaling-group common-lisp:nil :type
    (common-lisp:or auto-scaling-group common-lisp:null))
   (agent-health common-lisp:nil :type
    (common-lisp:or agent-health common-lisp:null))
   (agent-version common-lisp:nil :type
    (common-lisp:or agent-version common-lisp:null))
   (operating-system common-lisp:nil :type
    (common-lisp:or operating-system common-lisp:null))
   (kernel-version common-lisp:nil :type
    (common-lisp:or kernel-version common-lisp:null))
   (ipv4address common-lisp:nil :type
    (common-lisp:or ipv4address common-lisp:null)))
 (common-lisp:export (common-lisp:list 'agent-preview 'make-agent-preview))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input agent-preview))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input agent-preview))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-group))
      (common-lisp:list
       (common-lisp:cons "autoScalingGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-health))
      (common-lisp:list
       (common-lisp:cons "agentHealth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-version))
      (common-lisp:list
       (common-lisp:cons "agentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operating-system))
      (common-lisp:list
       (common-lisp:cons "operatingSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kernel-version))
      (common-lisp:list
       (common-lisp:cons "kernelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv4address))
      (common-lisp:list
       (common-lisp:cons "ipv4Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input agent-preview))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype agent-preview-list ()
   '(trivial-types:proper-list agent-preview))
 (common-lisp:defun |make-agent-preview-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list agent-preview))
   aws-sdk/generator/shape::members))
(common-lisp:deftype agent-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition agents-already-running-assessment-exception
     (inspector-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       agents-already-running-assessment-exception-message)
      (agents :initarg :agents :initform common-lisp:nil :reader
       agents-already-running-assessment-exception-agents)
      (agents-truncated :initarg :agents-truncated :initform common-lisp:nil
       :reader agents-already-running-assessment-exception-agents-truncated)
      (can-retry :initarg :can-retry :initform common-lisp:nil :reader
       agents-already-running-assessment-exception-can-retry)))
 (common-lisp:export
  (common-lisp:list 'agents-already-running-assessment-exception
                    'agents-already-running-assessment-exception-message
                    'agents-already-running-assessment-exception-agents
                    'agents-already-running-assessment-exception-agents-truncated
                    'agents-already-running-assessment-exception-can-retry)))
(common-lisp:deftype ami-id () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype arn-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype assessment-rules-package-arn-list ()
   '(trivial-types:proper-list arn))
 (common-lisp:defun |make-assessment-rules-package-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (assessment-run (:copier common-lisp:nil)
      (:conc-name "struct-shape-assessment-run-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or assessment-run-name common-lisp:null))
   (assessment-template-arn
    (common-lisp:error ":assessmenttemplatearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or assessment-run-state common-lisp:null))
   (duration-in-seconds (common-lisp:error ":durationinseconds is required")
    :type (common-lisp:or assessment-run-duration common-lisp:null))
   (rules-package-arns (common-lisp:error ":rulespackagearns is required")
    :type (common-lisp:or assessment-rules-package-arn-list common-lisp:null))
   (user-attributes-for-findings
    (common-lisp:error ":userattributesforfindings is required") :type
    (common-lisp:or user-attribute-list common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (started-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (completed-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (state-changed-at (common-lisp:error ":statechangedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (data-collected (common-lisp:error ":datacollected is required") :type
    (common-lisp:or bool common-lisp:null))
   (state-changes (common-lisp:error ":statechanges is required") :type
    (common-lisp:or assessment-run-state-change-list common-lisp:null))
   (notifications (common-lisp:error ":notifications is required") :type
    (common-lisp:or assessment-run-notification-list common-lisp:null))
   (finding-counts (common-lisp:error ":findingcounts is required") :type
    (common-lisp:or assessment-run-finding-counts common-lisp:null)))
 (common-lisp:export (common-lisp:list 'assessment-run 'make-assessment-run))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assessment-run))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assessment-run))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-template-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentTemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "durationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules-package-arns))
      (common-lisp:list
       (common-lisp:cons "rulesPackageArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-attributes-for-findings))
      (common-lisp:list
       (common-lisp:cons "userAttributesForFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-at))
      (common-lisp:list
       (common-lisp:cons "completedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-changed-at))
      (common-lisp:list
       (common-lisp:cons "stateChangedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-collected))
      (common-lisp:list
       (common-lisp:cons "dataCollected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-changes))
      (common-lisp:list
       (common-lisp:cons "stateChanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notifications))
      (common-lisp:list
       (common-lisp:cons "notifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-counts))
      (common-lisp:list
       (common-lisp:cons "findingCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assessment-run))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (assessment-run-agent (:copier common-lisp:nil)
      (:conc-name "struct-shape-assessment-run-agent-"))
   (agent-id (common-lisp:error ":agentid is required") :type
    (common-lisp:or agent-id common-lisp:null))
   (assessment-run-arn (common-lisp:error ":assessmentrunarn is required")
    :type (common-lisp:or arn common-lisp:null))
   (agent-health (common-lisp:error ":agenthealth is required") :type
    (common-lisp:or agent-health common-lisp:null))
   (agent-health-code (common-lisp:error ":agenthealthcode is required") :type
    (common-lisp:or agent-health-code common-lisp:null))
   (agent-health-details common-lisp:nil :type
    (common-lisp:or message common-lisp:null))
   (auto-scaling-group common-lisp:nil :type
    (common-lisp:or auto-scaling-group common-lisp:null))
   (telemetry-metadata (common-lisp:error ":telemetrymetadata is required")
    :type (common-lisp:or telemetry-metadata-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assessment-run-agent 'make-assessment-run-agent))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assessment-run-agent))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assessment-run-agent))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-health))
      (common-lisp:list
       (common-lisp:cons "agentHealth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-health-code))
      (common-lisp:list
       (common-lisp:cons "agentHealthCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agent-health-details))
      (common-lisp:list
       (common-lisp:cons "agentHealthDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-group))
      (common-lisp:list
       (common-lisp:cons "autoScalingGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'telemetry-metadata))
      (common-lisp:list
       (common-lisp:cons "telemetryMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assessment-run-agent))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assessment-run-agent-list ()
   '(trivial-types:proper-list assessment-run-agent))
 (common-lisp:defun |make-assessment-run-agent-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list assessment-run-agent))
   aws-sdk/generator/shape::members))
(common-lisp:deftype assessment-run-duration () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (assessment-run-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-assessment-run-filter-"))
   (name-pattern common-lisp:nil :type
    (common-lisp:or name-pattern common-lisp:null))
   (states common-lisp:nil :type
    (common-lisp:or assessment-run-state-list common-lisp:null))
   (duration-range common-lisp:nil :type
    (common-lisp:or duration-range common-lisp:null))
   (rules-package-arns common-lisp:nil :type
    (common-lisp:or filter-rules-package-arn-list common-lisp:null))
   (start-time-range common-lisp:nil :type
    (common-lisp:or timestamp-range common-lisp:null))
   (completion-time-range common-lisp:nil :type
    (common-lisp:or timestamp-range common-lisp:null))
   (state-change-time-range common-lisp:nil :type
    (common-lisp:or timestamp-range common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assessment-run-filter 'make-assessment-run-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assessment-run-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assessment-run-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-pattern))
      (common-lisp:list
       (common-lisp:cons "namePattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'states))
      (common-lisp:list
       (common-lisp:cons "states"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-range))
      (common-lisp:list
       (common-lisp:cons "durationRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules-package-arns))
      (common-lisp:list
       (common-lisp:cons "rulesPackageArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time-range))
      (common-lisp:list
       (common-lisp:cons "startTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'completion-time-range))
      (common-lisp:list
       (common-lisp:cons "completionTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-change-time-range))
      (common-lisp:list
       (common-lisp:cons "stateChangeTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assessment-run-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assessment-run-finding-counts () 'common-lisp:hash-table)
 (common-lisp:defun |make-assessment-run-finding-counts|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype assessment-run-in-progress-arn-list ()
   '(trivial-types:proper-list arn))
 (common-lisp:defun |make-assessment-run-in-progress-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition assessment-run-in-progress-exception
     (inspector-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       assessment-run-in-progress-exception-message)
      (assessment-run-arns :initarg :assessment-run-arns :initform
       common-lisp:nil :reader
       assessment-run-in-progress-exception-assessment-run-arns)
      (assessment-run-arns-truncated :initarg :assessment-run-arns-truncated
       :initform common-lisp:nil :reader
       assessment-run-in-progress-exception-assessment-run-arns-truncated)
      (can-retry :initarg :can-retry :initform common-lisp:nil :reader
       assessment-run-in-progress-exception-can-retry)))
 (common-lisp:export
  (common-lisp:list 'assessment-run-in-progress-exception
                    'assessment-run-in-progress-exception-message
                    'assessment-run-in-progress-exception-assessment-run-arns
                    'assessment-run-in-progress-exception-assessment-run-arns-truncated
                    'assessment-run-in-progress-exception-can-retry)))
(common-lisp:progn
 (common-lisp:deftype assessment-run-list ()
   '(trivial-types:proper-list assessment-run))
 (common-lisp:defun |make-assessment-run-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list assessment-run))
   aws-sdk/generator/shape::members))
(common-lisp:deftype assessment-run-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (assessment-run-notification (:copier common-lisp:nil)
      (:conc-name "struct-shape-assessment-run-notification-"))
   (date (common-lisp:error ":date is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (event (common-lisp:error ":event is required") :type
    (common-lisp:or inspector-event common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or message common-lisp:null))
   (error (common-lisp:error ":error is required") :type
    (common-lisp:or bool common-lisp:null))
   (sns-topic-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (sns-publish-status-code common-lisp:nil :type
    (common-lisp:or assessment-run-notification-sns-status-code
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assessment-run-notification
                    'make-assessment-run-notification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assessment-run-notification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assessment-run-notification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "snsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sns-publish-status-code))
      (common-lisp:list
       (common-lisp:cons "snsPublishStatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assessment-run-notification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assessment-run-notification-list ()
   '(trivial-types:proper-list assessment-run-notification))
 (common-lisp:defun |make-assessment-run-notification-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            assessment-run-notification))
   aws-sdk/generator/shape::members))
(common-lisp:deftype assessment-run-notification-sns-status-code ()
  'common-lisp:string)
(common-lisp:deftype assessment-run-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (assessment-run-state-change (:copier common-lisp:nil)
      (:conc-name "struct-shape-assessment-run-state-change-"))
   (state-changed-at (common-lisp:error ":statechangedat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or assessment-run-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assessment-run-state-change
                    'make-assessment-run-state-change))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assessment-run-state-change))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assessment-run-state-change))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-changed-at))
      (common-lisp:list
       (common-lisp:cons "stateChangedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assessment-run-state-change))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assessment-run-state-change-list ()
   '(trivial-types:proper-list assessment-run-state-change))
 (common-lisp:defun |make-assessment-run-state-change-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            assessment-run-state-change))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype assessment-run-state-list ()
   '(trivial-types:proper-list assessment-run-state))
 (common-lisp:defun |make-assessment-run-state-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list assessment-run-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (assessment-target (:copier common-lisp:nil)
      (:conc-name "struct-shape-assessment-target-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or assessment-target-name common-lisp:null))
   (resource-group-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assessment-target 'make-assessment-target))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assessment-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assessment-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-arn))
      (common-lisp:list
       (common-lisp:cons "resourceGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assessment-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (assessment-target-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-assessment-target-filter-"))
   (assessment-target-name-pattern common-lisp:nil :type
    (common-lisp:or name-pattern common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assessment-target-filter 'make-assessment-target-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assessment-target-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assessment-target-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-target-name-pattern))
      (common-lisp:list
       (common-lisp:cons "assessmentTargetNamePattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assessment-target-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assessment-target-list ()
   '(trivial-types:proper-list assessment-target))
 (common-lisp:defun |make-assessment-target-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list assessment-target))
   aws-sdk/generator/shape::members))
(common-lisp:deftype assessment-target-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (assessment-template (:copier common-lisp:nil)
      (:conc-name "struct-shape-assessment-template-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or assessment-template-name common-lisp:null))
   (assessment-target-arn
    (common-lisp:error ":assessmenttargetarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (duration-in-seconds (common-lisp:error ":durationinseconds is required")
    :type (common-lisp:or assessment-run-duration common-lisp:null))
   (rules-package-arns (common-lisp:error ":rulespackagearns is required")
    :type
    (common-lisp:or assessment-template-rules-package-arn-list
                    common-lisp:null))
   (user-attributes-for-findings
    (common-lisp:error ":userattributesforfindings is required") :type
    (common-lisp:or user-attribute-list common-lisp:null))
   (last-assessment-run-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (assessment-run-count (common-lisp:error ":assessmentruncount is required")
    :type (common-lisp:or arn-count common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assessment-template 'make-assessment-template))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assessment-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assessment-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-target-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentTargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "durationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules-package-arns))
      (common-lisp:list
       (common-lisp:cons "rulesPackageArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-attributes-for-findings))
      (common-lisp:list
       (common-lisp:cons "userAttributesForFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-assessment-run-arn))
      (common-lisp:list
       (common-lisp:cons "lastAssessmentRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-run-count))
      (common-lisp:list
       (common-lisp:cons "assessmentRunCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assessment-template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (assessment-template-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-assessment-template-filter-"))
   (name-pattern common-lisp:nil :type
    (common-lisp:or name-pattern common-lisp:null))
   (duration-range common-lisp:nil :type
    (common-lisp:or duration-range common-lisp:null))
   (rules-package-arns common-lisp:nil :type
    (common-lisp:or filter-rules-package-arn-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'assessment-template-filter
                    'make-assessment-template-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assessment-template-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assessment-template-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-pattern))
      (common-lisp:list
       (common-lisp:cons "namePattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-range))
      (common-lisp:list
       (common-lisp:cons "durationRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules-package-arns))
      (common-lisp:list
       (common-lisp:cons "rulesPackageArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assessment-template-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assessment-template-list ()
   '(trivial-types:proper-list assessment-template))
 (common-lisp:defun |make-assessment-template-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list assessment-template))
   aws-sdk/generator/shape::members))
(common-lisp:deftype assessment-template-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype assessment-template-rules-package-arn-list ()
   '(trivial-types:proper-list arn))
 (common-lisp:defun |make-assessment-template-rules-package-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (asset-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-attributes-"))
   (schema-version (common-lisp:error ":schemaversion is required") :type
    (common-lisp:or numeric-version common-lisp:null))
   (agent-id common-lisp:nil :type (common-lisp:or agent-id common-lisp:null))
   (auto-scaling-group common-lisp:nil :type
    (common-lisp:or auto-scaling-group common-lisp:null))
   (ami-id common-lisp:nil :type (common-lisp:or ami-id common-lisp:null))
   (hostname common-lisp:nil :type (common-lisp:or hostname common-lisp:null))
   (ipv4addresses common-lisp:nil :type
    (common-lisp:or ipv4address-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (network-interfaces common-lisp:nil :type
    (common-lisp:or network-interfaces common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'asset-attributes 'make-asset-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version))
      (common-lisp:list
       (common-lisp:cons "schemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-group))
      (common-lisp:list
       (common-lisp:cons "autoScalingGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-id))
      (common-lisp:list
       (common-lisp:cons "amiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv4addresses))
      (common-lisp:list
       (common-lisp:cons "ipv4Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-interfaces))
      (common-lisp:list
       (common-lisp:cons "networkInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-attributes))
   common-lisp:nil))
(common-lisp:deftype asset-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (attribute (:copier common-lisp:nil)
      (:conc-name "struct-shape-attribute-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or attribute-key common-lisp:null))
   (value common-lisp:nil :type
    (common-lisp:or attribute-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'attribute 'make-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute))
   common-lisp:nil))
(common-lisp:deftype attribute-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attribute-list () '(trivial-types:proper-list attribute))
 (common-lisp:defun |make-attribute-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype attribute-value () 'common-lisp:string)
(common-lisp:deftype auto-scaling-group () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype auto-scaling-group-list ()
   '(trivial-types:proper-list auto-scaling-group))
 (common-lisp:defun |make-auto-scaling-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auto-scaling-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype batch-describe-arn-list ()
   '(trivial-types:proper-list arn))
 (common-lisp:defun |make-batch-describe-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype batch-describe-exclusions-arn-list ()
   '(trivial-types:proper-list arn))
 (common-lisp:defun |make-batch-describe-exclusions-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bool () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (create-assessment-target-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-assessment-target-request-"))
   (assessment-target-name
    (common-lisp:error ":assessmenttargetname is required") :type
    (common-lisp:or assessment-target-name common-lisp:null))
   (resource-group-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-assessment-target-request
                    'make-create-assessment-target-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-target-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-target-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-target-name))
      (common-lisp:list
       (common-lisp:cons "assessmentTargetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-arn))
      (common-lisp:list
       (common-lisp:cons "resourceGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-target-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-assessment-target-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-assessment-target-response-"))
   (assessment-target-arn
    (common-lisp:error ":assessmenttargetarn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-assessment-target-response
                    'make-create-assessment-target-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-target-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-target-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-target-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentTargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-target-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-assessment-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-assessment-template-request-"))
   (assessment-target-arn
    (common-lisp:error ":assessmenttargetarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (assessment-template-name
    (common-lisp:error ":assessmenttemplatename is required") :type
    (common-lisp:or assessment-template-name common-lisp:null))
   (duration-in-seconds (common-lisp:error ":durationinseconds is required")
    :type (common-lisp:or assessment-run-duration common-lisp:null))
   (rules-package-arns (common-lisp:error ":rulespackagearns is required")
    :type
    (common-lisp:or assessment-template-rules-package-arn-list
                    common-lisp:null))
   (user-attributes-for-findings common-lisp:nil :type
    (common-lisp:or user-attribute-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-assessment-template-request
                    'make-create-assessment-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-target-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentTargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-template-name))
      (common-lisp:list
       (common-lisp:cons "assessmentTemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "durationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules-package-arns))
      (common-lisp:list
       (common-lisp:cons "rulesPackageArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-attributes-for-findings))
      (common-lisp:list
       (common-lisp:cons "userAttributesForFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-assessment-template-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-assessment-template-response-"))
   (assessment-template-arn
    (common-lisp:error ":assessmenttemplatearn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-assessment-template-response
                    'make-create-assessment-template-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-template-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentTemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-exclusions-preview-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-exclusions-preview-request-"))
   (assessment-template-arn
    (common-lisp:error ":assessmenttemplatearn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-exclusions-preview-request
                    'make-create-exclusions-preview-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-exclusions-preview-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-exclusions-preview-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-template-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentTemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-exclusions-preview-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-exclusions-preview-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-exclusions-preview-response-"))
   (preview-token (common-lisp:error ":previewtoken is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-exclusions-preview-response
                    'make-create-exclusions-preview-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-exclusions-preview-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-exclusions-preview-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preview-token))
      (common-lisp:list
       (common-lisp:cons "previewToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-exclusions-preview-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-resource-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-resource-group-request-"))
   (resource-group-tags (common-lisp:error ":resourcegrouptags is required")
    :type (common-lisp:or resource-group-tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-resource-group-request
                    'make-create-resource-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-tags))
      (common-lisp:list
       (common-lisp:cons "resourceGroupTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-resource-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-resource-group-response-"))
   (resource-group-arn (common-lisp:error ":resourcegrouparn is required")
    :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-resource-group-response
                    'make-create-resource-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-arn))
      (common-lisp:list
       (common-lisp:cons "resourceGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-assessment-run-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-assessment-run-request-"))
   (assessment-run-arn (common-lisp:error ":assessmentrunarn is required")
    :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-assessment-run-request
                    'make-delete-assessment-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-assessment-target-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-assessment-target-request-"))
   (assessment-target-arn
    (common-lisp:error ":assessmenttargetarn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-assessment-target-request
                    'make-delete-assessment-target-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-target-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-target-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-target-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentTargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-target-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-assessment-template-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-assessment-template-request-"))
   (assessment-template-arn
    (common-lisp:error ":assessmenttemplatearn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-assessment-template-request
                    'make-delete-assessment-template-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-template-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentTemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-assessment-runs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-assessment-runs-request-"))
   (assessment-run-arns (common-lisp:error ":assessmentrunarns is required")
    :type (common-lisp:or batch-describe-arn-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-assessment-runs-request
                    'make-describe-assessment-runs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-runs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-arns))
      (common-lisp:list
       (common-lisp:cons "assessmentRunArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-runs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-assessment-runs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-assessment-runs-response-"))
   (assessment-runs (common-lisp:error ":assessmentruns is required") :type
    (common-lisp:or assessment-run-list common-lisp:null))
   (failed-items (common-lisp:error ":faileditems is required") :type
    (common-lisp:or failed-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-assessment-runs-response
                    'make-describe-assessment-runs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-runs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-runs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-runs))
      (common-lisp:list
       (common-lisp:cons "assessmentRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-items))
      (common-lisp:list
       (common-lisp:cons "failedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-runs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-assessment-targets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-assessment-targets-request-"))
   (assessment-target-arns
    (common-lisp:error ":assessmenttargetarns is required") :type
    (common-lisp:or batch-describe-arn-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-assessment-targets-request
                    'make-describe-assessment-targets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-targets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-targets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-target-arns))
      (common-lisp:list
       (common-lisp:cons "assessmentTargetArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-targets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-assessment-targets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-assessment-targets-response-"))
   (assessment-targets (common-lisp:error ":assessmenttargets is required")
    :type (common-lisp:or assessment-target-list common-lisp:null))
   (failed-items (common-lisp:error ":faileditems is required") :type
    (common-lisp:or failed-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-assessment-targets-response
                    'make-describe-assessment-targets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-targets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-targets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-targets))
      (common-lisp:list
       (common-lisp:cons "assessmentTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-items))
      (common-lisp:list
       (common-lisp:cons "failedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-targets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-assessment-templates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-assessment-templates-request-"))
   (assessment-template-arns
    (common-lisp:error ":assessmenttemplatearns is required") :type
    (common-lisp:or batch-describe-arn-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-assessment-templates-request
                    'make-describe-assessment-templates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-templates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-template-arns))
      (common-lisp:list
       (common-lisp:cons "assessmentTemplateArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-assessment-templates-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-assessment-templates-response-"))
   (assessment-templates (common-lisp:error ":assessmenttemplates is required")
    :type (common-lisp:or assessment-template-list common-lisp:null))
   (failed-items (common-lisp:error ":faileditems is required") :type
    (common-lisp:or failed-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-assessment-templates-response
                    'make-describe-assessment-templates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-templates))
      (common-lisp:list
       (common-lisp:cons "assessmentTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-items))
      (common-lisp:list
       (common-lisp:cons "failedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-templates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-cross-account-access-role-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-cross-account-access-role-response-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (valid (common-lisp:error ":valid is required") :type
    (common-lisp:or bool common-lisp:null))
   (registered-at (common-lisp:error ":registeredat is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-cross-account-access-role-response
                    'make-describe-cross-account-access-role-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cross-account-access-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cross-account-access-role-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid))
      (common-lisp:list
       (common-lisp:cons "valid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registered-at))
      (common-lisp:list
       (common-lisp:cons "registeredAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cross-account-access-role-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-exclusions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-exclusions-request-"))
   (exclusion-arns (common-lisp:error ":exclusionarns is required") :type
    (common-lisp:or batch-describe-exclusions-arn-list common-lisp:null))
   (locale common-lisp:nil :type (common-lisp:or locale common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-exclusions-request
                    'make-describe-exclusions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-exclusions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-exclusions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusion-arns))
      (common-lisp:list
       (common-lisp:cons "exclusionArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-exclusions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-exclusions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-exclusions-response-"))
   (exclusions (common-lisp:error ":exclusions is required") :type
    (common-lisp:or exclusion-map common-lisp:null))
   (failed-items (common-lisp:error ":faileditems is required") :type
    (common-lisp:or failed-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-exclusions-response
                    'make-describe-exclusions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-exclusions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-exclusions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusions))
      (common-lisp:list
       (common-lisp:cons "exclusions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-items))
      (common-lisp:list
       (common-lisp:cons "failedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-exclusions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-findings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-findings-request-"))
   (finding-arns (common-lisp:error ":findingarns is required") :type
    (common-lisp:or batch-describe-arn-list common-lisp:null))
   (locale common-lisp:nil :type (common-lisp:or locale common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-findings-request
                    'make-describe-findings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-arns))
      (common-lisp:list
       (common-lisp:cons "findingArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-findings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-findings-response-"))
   (findings (common-lisp:error ":findings is required") :type
    (common-lisp:or finding-list common-lisp:null))
   (failed-items (common-lisp:error ":faileditems is required") :type
    (common-lisp:or failed-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-findings-response
                    'make-describe-findings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings))
      (common-lisp:list
       (common-lisp:cons "findings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-items))
      (common-lisp:list
       (common-lisp:cons "failedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-resource-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-resource-groups-request-"))
   (resource-group-arns (common-lisp:error ":resourcegrouparns is required")
    :type (common-lisp:or batch-describe-arn-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-resource-groups-request
                    'make-describe-resource-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-arns))
      (common-lisp:list
       (common-lisp:cons "resourceGroupArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-resource-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-resource-groups-response-"))
   (resource-groups (common-lisp:error ":resourcegroups is required") :type
    (common-lisp:or resource-group-list common-lisp:null))
   (failed-items (common-lisp:error ":faileditems is required") :type
    (common-lisp:or failed-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-resource-groups-response
                    'make-describe-resource-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-groups))
      (common-lisp:list
       (common-lisp:cons "resourceGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-items))
      (common-lisp:list
       (common-lisp:cons "failedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-rules-packages-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-rules-packages-request-"))
   (rules-package-arns (common-lisp:error ":rulespackagearns is required")
    :type (common-lisp:or batch-describe-arn-list common-lisp:null))
   (locale common-lisp:nil :type (common-lisp:or locale common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-rules-packages-request
                    'make-describe-rules-packages-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-rules-packages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-rules-packages-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules-package-arns))
      (common-lisp:list
       (common-lisp:cons "rulesPackageArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-rules-packages-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-rules-packages-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-rules-packages-response-"))
   (rules-packages (common-lisp:error ":rulespackages is required") :type
    (common-lisp:or rules-package-list common-lisp:null))
   (failed-items (common-lisp:error ":faileditems is required") :type
    (common-lisp:or failed-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-rules-packages-response
                    'make-describe-rules-packages-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-rules-packages-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-rules-packages-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules-packages))
      (common-lisp:list
       (common-lisp:cons "rulesPackages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-items))
      (common-lisp:list
       (common-lisp:cons "failedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-rules-packages-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (duration-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-duration-range-"))
   (min-seconds common-lisp:nil :type
    (common-lisp:or assessment-run-duration common-lisp:null))
   (max-seconds common-lisp:nil :type
    (common-lisp:or assessment-run-duration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'duration-range 'make-duration-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input duration-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input duration-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-seconds))
      (common-lisp:list
       (common-lisp:cons "minSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-seconds))
      (common-lisp:list
       (common-lisp:cons "maxSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input duration-range))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (event-subscription (:copier common-lisp:nil)
      (:conc-name "struct-shape-event-subscription-"))
   (event (common-lisp:error ":event is required") :type
    (common-lisp:or inspector-event common-lisp:null))
   (subscribed-at (common-lisp:error ":subscribedat is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'event-subscription 'make-event-subscription))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-subscription))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-subscription))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribed-at))
      (common-lisp:list
       (common-lisp:cons "subscribedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-subscription))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-subscription-list ()
   '(trivial-types:proper-list event-subscription))
 (common-lisp:defun |make-event-subscription-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-subscription))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (exclusion (:copier common-lisp:nil)
      (:conc-name "struct-shape-exclusion-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or text common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or text common-lisp:null))
   (recommendation (common-lisp:error ":recommendation is required") :type
    (common-lisp:or text common-lisp:null))
   (scopes (common-lisp:error ":scopes is required") :type
    (common-lisp:or scope-list common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or attribute-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'exclusion 'make-exclusion))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input exclusion))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input exclusion))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation))
      (common-lisp:list
       (common-lisp:cons "recommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scopes))
      (common-lisp:list
       (common-lisp:cons "scopes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input exclusion))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype exclusion-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-exclusion-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (exclusion-preview (:copier common-lisp:nil)
      (:conc-name "struct-shape-exclusion-preview-"))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or text common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or text common-lisp:null))
   (recommendation (common-lisp:error ":recommendation is required") :type
    (common-lisp:or text common-lisp:null))
   (scopes (common-lisp:error ":scopes is required") :type
    (common-lisp:or scope-list common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or attribute-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'exclusion-preview 'make-exclusion-preview))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input exclusion-preview))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input exclusion-preview))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation))
      (common-lisp:list
       (common-lisp:cons "recommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scopes))
      (common-lisp:list
       (common-lisp:cons "scopes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input exclusion-preview))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype exclusion-preview-list ()
   '(trivial-types:proper-list exclusion-preview))
 (common-lisp:defun |make-exclusion-preview-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list exclusion-preview))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (failed-item-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-failed-item-details-"))
   (failure-code (common-lisp:error ":failurecode is required") :type
    (common-lisp:or failed-item-error-code common-lisp:null))
   (retryable (common-lisp:error ":retryable is required") :type
    (common-lisp:or bool common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'failed-item-details 'make-failed-item-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failed-item-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failed-item-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "failureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retryable))
      (common-lisp:list
       (common-lisp:cons "retryable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failed-item-details))
   common-lisp:nil))
(common-lisp:deftype failed-item-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype failed-items () 'common-lisp:hash-table)
 (common-lisp:defun |make-failed-items| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype filter-rules-package-arn-list ()
   '(trivial-types:proper-list arn))
 (common-lisp:defun |make-filter-rules-package-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (finding (:copier common-lisp:nil) (:conc-name "struct-shape-finding-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (schema-version common-lisp:nil :type
    (common-lisp:or numeric-version common-lisp:null))
   (service common-lisp:nil :type
    (common-lisp:or service-name common-lisp:null))
   (service-attributes common-lisp:nil :type
    (common-lisp:or inspector-service-attributes common-lisp:null))
   (asset-type common-lisp:nil :type
    (common-lisp:or asset-type common-lisp:null))
   (asset-attributes common-lisp:nil :type
    (common-lisp:or asset-attributes common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or finding-id common-lisp:null))
   (title common-lisp:nil :type (common-lisp:or text common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or text common-lisp:null))
   (recommendation common-lisp:nil :type
    (common-lisp:or text common-lisp:null))
   (severity common-lisp:nil :type (common-lisp:or severity common-lisp:null))
   (numeric-severity common-lisp:nil :type
    (common-lisp:or numeric-severity common-lisp:null))
   (confidence common-lisp:nil :type
    (common-lisp:or ioc-confidence common-lisp:null))
   (indicator-of-compromise common-lisp:nil :type
    (common-lisp:or bool common-lisp:null))
   (attributes (common-lisp:error ":attributes is required") :type
    (common-lisp:or attribute-list common-lisp:null))
   (user-attributes (common-lisp:error ":userattributes is required") :type
    (common-lisp:or user-attribute-list common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at (common-lisp:error ":updatedat is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'finding 'make-finding))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version))
      (common-lisp:list
       (common-lisp:cons "schemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-attributes))
      (common-lisp:list
       (common-lisp:cons "serviceAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-type))
      (common-lisp:list
       (common-lisp:cons "assetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-attributes))
      (common-lisp:list
       (common-lisp:cons "assetAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation))
      (common-lisp:list
       (common-lisp:cons "recommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'numeric-severity))
      (common-lisp:list
       (common-lisp:cons "numericSeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'indicator-of-compromise))
      (common-lisp:list
       (common-lisp:cons "indicatorOfCompromise"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-attributes))
      (common-lisp:list
       (common-lisp:cons "userAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding))
   common-lisp:nil))
(common-lisp:deftype finding-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (finding-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-finding-filter-"))
   (agent-ids common-lisp:nil :type
    (common-lisp:or agent-id-list common-lisp:null))
   (auto-scaling-groups common-lisp:nil :type
    (common-lisp:or auto-scaling-group-list common-lisp:null))
   (rule-names common-lisp:nil :type
    (common-lisp:or rule-name-list common-lisp:null))
   (severities common-lisp:nil :type
    (common-lisp:or severity-list common-lisp:null))
   (rules-package-arns common-lisp:nil :type
    (common-lisp:or filter-rules-package-arn-list common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or attribute-list common-lisp:null))
   (user-attributes common-lisp:nil :type
    (common-lisp:or attribute-list common-lisp:null))
   (creation-time-range common-lisp:nil :type
    (common-lisp:or timestamp-range common-lisp:null)))
 (common-lisp:export (common-lisp:list 'finding-filter 'make-finding-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-ids))
      (common-lisp:list
       (common-lisp:cons "agentIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-groups))
      (common-lisp:list
       (common-lisp:cons "autoScalingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-names))
      (common-lisp:list
       (common-lisp:cons "ruleNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severities))
      (common-lisp:list
       (common-lisp:cons "severities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules-package-arns))
      (common-lisp:list
       (common-lisp:cons "rulesPackageArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-attributes))
      (common-lisp:list
       (common-lisp:cons "userAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-range))
      (common-lisp:list
       (common-lisp:cons "creationTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding-filter))
   common-lisp:nil))
(common-lisp:deftype finding-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype finding-list () '(trivial-types:proper-list finding))
 (common-lisp:defun |make-finding-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (get-assessment-report-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-assessment-report-request-"))
   (assessment-run-arn (common-lisp:error ":assessmentrunarn is required")
    :type (common-lisp:or arn common-lisp:null))
   (report-file-format (common-lisp:error ":reportfileformat is required")
    :type (common-lisp:or report-file-format common-lisp:null))
   (report-type (common-lisp:error ":reporttype is required") :type
    (common-lisp:or report-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-assessment-report-request
                    'make-get-assessment-report-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-report-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-report-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-file-format))
      (common-lisp:list
       (common-lisp:cons "reportFileFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-type))
      (common-lisp:list
       (common-lisp:cons "reportType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-report-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-assessment-report-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-assessment-report-response-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or report-status common-lisp:null))
   (url common-lisp:nil :type (common-lisp:or url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-assessment-report-response
                    'make-get-assessment-report-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-report-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-report-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-report-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-exclusions-preview-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-exclusions-preview-request-"))
   (assessment-template-arn
    (common-lisp:error ":assessmenttemplatearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (preview-token (common-lisp:error ":previewtoken is required") :type
    (common-lisp:or uuid common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-max-results common-lisp:null))
   (locale common-lisp:nil :type (common-lisp:or locale common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-exclusions-preview-request
                    'make-get-exclusions-preview-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-exclusions-preview-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-exclusions-preview-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-template-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentTemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preview-token))
      (common-lisp:list
       (common-lisp:cons "previewToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-exclusions-preview-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-exclusions-preview-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-exclusions-preview-response-"))
   (preview-status (common-lisp:error ":previewstatus is required") :type
    (common-lisp:or preview-status common-lisp:null))
   (exclusion-previews common-lisp:nil :type
    (common-lisp:or exclusion-preview-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-exclusions-preview-response
                    'make-get-exclusions-preview-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-exclusions-preview-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-exclusions-preview-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preview-status))
      (common-lisp:list
       (common-lisp:cons "previewStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusion-previews))
      (common-lisp:list
       (common-lisp:cons "exclusionPreviews"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-exclusions-preview-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-telemetry-metadata-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-telemetry-metadata-request-"))
   (assessment-run-arn (common-lisp:error ":assessmentrunarn is required")
    :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-telemetry-metadata-request
                    'make-get-telemetry-metadata-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-telemetry-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-telemetry-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-telemetry-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-telemetry-metadata-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-telemetry-metadata-response-"))
   (telemetry-metadata (common-lisp:error ":telemetrymetadata is required")
    :type (common-lisp:or telemetry-metadata-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-telemetry-metadata-response
                    'make-get-telemetry-metadata-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-telemetry-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-telemetry-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'telemetry-metadata))
      (common-lisp:list
       (common-lisp:cons "telemetryMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-telemetry-metadata-response))
   common-lisp:nil))
(common-lisp:deftype hostname () 'common-lisp:string)
(common-lisp:deftype inspector-event () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (inspector-service-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-inspector-service-attributes-"))
   (schema-version (common-lisp:error ":schemaversion is required") :type
    (common-lisp:or numeric-version common-lisp:null))
   (assessment-run-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null))
   (rules-package-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'inspector-service-attributes
                    'make-inspector-service-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inspector-service-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inspector-service-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version))
      (common-lisp:list
       (common-lisp:cons "schemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules-package-arn))
      (common-lisp:list
       (common-lisp:cons "rulesPackageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inspector-service-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-exception
     (inspector-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-exception-message)
      (can-retry :initarg :can-retry :initform common-lisp:nil :reader
       internal-exception-can-retry)))
 (common-lisp:export
  (common-lisp:list 'internal-exception 'internal-exception-message
                    'internal-exception-can-retry)))
(common-lisp:deftype invalid-cross-account-role-error-code ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition invalid-cross-account-role-exception
     (inspector-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-cross-account-role-exception-message)
      (error-code :initarg :error-code :initform common-lisp:nil :reader
       invalid-cross-account-role-exception-error-code)
      (can-retry :initarg :can-retry :initform common-lisp:nil :reader
       invalid-cross-account-role-exception-can-retry)))
 (common-lisp:export
  (common-lisp:list 'invalid-cross-account-role-exception
                    'invalid-cross-account-role-exception-message
                    'invalid-cross-account-role-exception-error-code
                    'invalid-cross-account-role-exception-can-retry)))
(common-lisp:deftype invalid-input-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition invalid-input-exception
     (inspector-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-input-exception-message)
      (error-code :initarg :error-code :initform common-lisp:nil :reader
       invalid-input-exception-error-code)
      (can-retry :initarg :can-retry :initform common-lisp:nil :reader
       invalid-input-exception-can-retry)))
 (common-lisp:export
  (common-lisp:list 'invalid-input-exception 'invalid-input-exception-message
                    'invalid-input-exception-error-code
                    'invalid-input-exception-can-retry)))
(common-lisp:deftype ioc-confidence () 'common-lisp:integer)
(common-lisp:deftype ipv4address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ipv4address-list ()
   '(trivial-types:proper-list ipv4address))
 (common-lisp:defun |make-ipv4address-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ipv4address))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype ipv6addresses () '(trivial-types:proper-list text))
 (common-lisp:defun |make-ipv6addresses|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list text))
   aws-sdk/generator/shape::members))
(common-lisp:deftype kernel-version () 'common-lisp:string)
(common-lisp:deftype limit-exceeded-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (inspector-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)
      (error-code :initarg :error-code :initform common-lisp:nil :reader
       limit-exceeded-exception-error-code)
      (can-retry :initarg :can-retry :initform common-lisp:nil :reader
       limit-exceeded-exception-can-retry)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception 'limit-exceeded-exception-message
                    'limit-exceeded-exception-error-code
                    'limit-exceeded-exception-can-retry)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-assessment-run-agents-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-assessment-run-agents-request-"))
   (assessment-run-arn (common-lisp:error ":assessmentrunarn is required")
    :type (common-lisp:or arn common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or agent-filter common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-assessment-run-agents-request
                    'make-list-assessment-run-agents-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-run-agents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-run-agents-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-run-agents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-assessment-run-agents-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-assessment-run-agents-response-"))
   (assessment-run-agents
    (common-lisp:error ":assessmentrunagents is required") :type
    (common-lisp:or assessment-run-agent-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-assessment-run-agents-response
                    'make-list-assessment-run-agents-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-run-agents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-run-agents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-run-agents))
      (common-lisp:list
       (common-lisp:cons "assessmentRunAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-run-agents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-assessment-runs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-assessment-runs-request-"))
   (assessment-template-arns common-lisp:nil :type
    (common-lisp:or list-parent-arn-list common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or assessment-run-filter common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-assessment-runs-request
                    'make-list-assessment-runs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-runs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-template-arns))
      (common-lisp:list
       (common-lisp:cons "assessmentTemplateArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-runs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-assessment-runs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-assessment-runs-response-"))
   (assessment-run-arns (common-lisp:error ":assessmentrunarns is required")
    :type (common-lisp:or list-returned-arn-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-assessment-runs-response
                    'make-list-assessment-runs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-runs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-runs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-arns))
      (common-lisp:list
       (common-lisp:cons "assessmentRunArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-runs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-assessment-targets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-assessment-targets-request-"))
   (filter common-lisp:nil :type
    (common-lisp:or assessment-target-filter common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-assessment-targets-request
                    'make-list-assessment-targets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-targets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-targets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-targets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-assessment-targets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-assessment-targets-response-"))
   (assessment-target-arns
    (common-lisp:error ":assessmenttargetarns is required") :type
    (common-lisp:or list-returned-arn-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-assessment-targets-response
                    'make-list-assessment-targets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-targets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-targets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-target-arns))
      (common-lisp:list
       (common-lisp:cons "assessmentTargetArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-targets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-assessment-templates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-assessment-templates-request-"))
   (assessment-target-arns common-lisp:nil :type
    (common-lisp:or list-parent-arn-list common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or assessment-template-filter common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-assessment-templates-request
                    'make-list-assessment-templates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-templates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-target-arns))
      (common-lisp:list
       (common-lisp:cons "assessmentTargetArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-assessment-templates-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-assessment-templates-response-"))
   (assessment-template-arns
    (common-lisp:error ":assessmenttemplatearns is required") :type
    (common-lisp:or list-returned-arn-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-assessment-templates-response
                    'make-list-assessment-templates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-template-arns))
      (common-lisp:list
       (common-lisp:cons "assessmentTemplateArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-templates-response))
   common-lisp:nil))
(common-lisp:deftype list-event-subscriptions-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-event-subscriptions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-event-subscriptions-request-"))
   (resource-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-event-subscriptions-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-event-subscriptions-request
                    'make-list-event-subscriptions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-subscriptions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-subscriptions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-subscriptions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-event-subscriptions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-event-subscriptions-response-"))
   (subscriptions (common-lisp:error ":subscriptions is required") :type
    (common-lisp:or subscription-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-event-subscriptions-response
                    'make-list-event-subscriptions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-subscriptions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-subscriptions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriptions))
      (common-lisp:list
       (common-lisp:cons "subscriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-subscriptions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-exclusions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-exclusions-request-"))
   (assessment-run-arn (common-lisp:error ":assessmentrunarn is required")
    :type (common-lisp:or arn common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-exclusions-request 'make-list-exclusions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-exclusions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-exclusions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-exclusions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-exclusions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-exclusions-response-"))
   (exclusion-arns (common-lisp:error ":exclusionarns is required") :type
    (common-lisp:or list-returned-arn-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-exclusions-response 'make-list-exclusions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-exclusions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-exclusions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusion-arns))
      (common-lisp:list
       (common-lisp:cons "exclusionArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-exclusions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-findings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-findings-request-"))
   (assessment-run-arns common-lisp:nil :type
    (common-lisp:or list-parent-arn-list common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or finding-filter common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-findings-request 'make-list-findings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-arns))
      (common-lisp:list
       (common-lisp:cons "assessmentRunArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-findings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-findings-response-"))
   (finding-arns (common-lisp:error ":findingarns is required") :type
    (common-lisp:or list-returned-arn-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-findings-response 'make-list-findings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-arns))
      (common-lisp:list
       (common-lisp:cons "findingArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-response))
   common-lisp:nil))
(common-lisp:deftype list-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype list-parent-arn-list () '(trivial-types:proper-list arn))
 (common-lisp:defun |make-list-parent-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-returned-arn-list ()
   '(trivial-types:proper-list arn))
 (common-lisp:defun |make-list-returned-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (list-rules-packages-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-rules-packages-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-rules-packages-request
                    'make-list-rules-packages-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-rules-packages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-rules-packages-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-rules-packages-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-rules-packages-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-rules-packages-response-"))
   (rules-package-arns (common-lisp:error ":rulespackagearns is required")
    :type (common-lisp:or list-returned-arn-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-rules-packages-response
                    'make-list-rules-packages-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-rules-packages-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-rules-packages-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules-package-arns))
      (common-lisp:list
       (common-lisp:cons "rulesPackageArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-rules-packages-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype locale () 'common-lisp:string)
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:deftype message-type () 'common-lisp:string)
(common-lisp:deftype name-pattern () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (network-interface (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-interface-"))
   (network-interface-id common-lisp:nil :type
    (common-lisp:or text common-lisp:null))
   (subnet-id common-lisp:nil :type (common-lisp:or text common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or text common-lisp:null))
   (private-dns-name common-lisp:nil :type
    (common-lisp:or text common-lisp:null))
   (private-ip-address common-lisp:nil :type
    (common-lisp:or text common-lisp:null))
   (private-ip-addresses common-lisp:nil :type
    (common-lisp:or private-ip-addresses common-lisp:null))
   (public-dns-name common-lisp:nil :type
    (common-lisp:or text common-lisp:null))
   (public-ip common-lisp:nil :type (common-lisp:or text common-lisp:null))
   (ipv6addresses common-lisp:nil :type
    (common-lisp:or ipv6addresses common-lisp:null))
   (security-groups common-lisp:nil :type
    (common-lisp:or security-groups common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-interface 'make-network-interface))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "networkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "subnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-dns-name))
      (common-lisp:list
       (common-lisp:cons "privateDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "privateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-ip-addresses))
      (common-lisp:list
       (common-lisp:cons "privateIpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-dns-name))
      (common-lisp:list
       (common-lisp:cons "publicDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip))
      (common-lisp:list
       (common-lisp:cons "publicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6addresses))
      (common-lisp:list
       (common-lisp:cons "ipv6Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "securityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-interface))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-interfaces ()
   '(trivial-types:proper-list network-interface))
 (common-lisp:defun |make-network-interfaces|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-interface))
   aws-sdk/generator/shape::members))
(common-lisp:deftype no-such-entity-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition no-such-entity-exception
     (inspector-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-entity-exception-message)
      (error-code :initarg :error-code :initform common-lisp:nil :reader
       no-such-entity-exception-error-code)
      (can-retry :initarg :can-retry :initform common-lisp:nil :reader
       no-such-entity-exception-can-retry)))
 (common-lisp:export
  (common-lisp:list 'no-such-entity-exception 'no-such-entity-exception-message
                    'no-such-entity-exception-error-code
                    'no-such-entity-exception-can-retry)))
(common-lisp:deftype numeric-severity () 'common-lisp:double-float)
(common-lisp:deftype numeric-version () 'common-lisp:integer)
(common-lisp:deftype operating-system () 'common-lisp:string)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:deftype preview-agents-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (preview-agents-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-preview-agents-request-"))
   (preview-agents-arn (common-lisp:error ":previewagentsarn is required")
    :type (common-lisp:or arn common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or preview-agents-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'preview-agents-request 'make-preview-agents-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          preview-agents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          preview-agents-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preview-agents-arn))
      (common-lisp:list
       (common-lisp:cons "previewAgentsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          preview-agents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (preview-agents-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-preview-agents-response-"))
   (agent-previews (common-lisp:error ":agentpreviews is required") :type
    (common-lisp:or agent-preview-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'preview-agents-response 'make-preview-agents-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          preview-agents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          preview-agents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-previews))
      (common-lisp:list
       (common-lisp:cons "agentPreviews"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          preview-agents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition preview-generation-in-progress-exception
     (inspector-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       preview-generation-in-progress-exception-message)))
 (common-lisp:export
  (common-lisp:list 'preview-generation-in-progress-exception
                    'preview-generation-in-progress-exception-message)))
(common-lisp:deftype preview-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (private-ip (:copier common-lisp:nil)
      (:conc-name "struct-shape-private-ip-"))
   (private-dns-name common-lisp:nil :type
    (common-lisp:or text common-lisp:null))
   (private-ip-address common-lisp:nil :type
    (common-lisp:or text common-lisp:null)))
 (common-lisp:export (common-lisp:list 'private-ip 'make-private-ip))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input private-ip))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input private-ip))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-dns-name))
      (common-lisp:list
       (common-lisp:cons "privateDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "privateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input private-ip))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype private-ip-addresses ()
   '(trivial-types:proper-list private-ip))
 (common-lisp:defun |make-private-ip-addresses|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list private-ip))
   aws-sdk/generator/shape::members))
(common-lisp:deftype provider-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (register-cross-account-access-role-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-register-cross-account-access-role-request-"))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-cross-account-access-role-request
                    'make-register-cross-account-access-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-cross-account-access-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-cross-account-access-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-cross-account-access-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-attributes-from-findings-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-attributes-from-findings-request-"))
   (finding-arns (common-lisp:error ":findingarns is required") :type
    (common-lisp:or add-remove-attributes-finding-arn-list common-lisp:null))
   (attribute-keys (common-lisp:error ":attributekeys is required") :type
    (common-lisp:or user-attribute-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-attributes-from-findings-request
                    'make-remove-attributes-from-findings-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-attributes-from-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-attributes-from-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-arns))
      (common-lisp:list
       (common-lisp:cons "findingArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-keys))
      (common-lisp:list
       (common-lisp:cons "attributeKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-attributes-from-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-attributes-from-findings-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-attributes-from-findings-response-"))
   (failed-items (common-lisp:error ":faileditems is required") :type
    (common-lisp:or failed-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-attributes-from-findings-response
                    'make-remove-attributes-from-findings-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-attributes-from-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-attributes-from-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-items))
      (common-lisp:list
       (common-lisp:cons "failedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-attributes-from-findings-response))
   common-lisp:nil))
(common-lisp:deftype report-file-format () 'common-lisp:string)
(common-lisp:deftype report-status () 'common-lisp:string)
(common-lisp:deftype report-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resource-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-group-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or resource-group-tags common-lisp:null))
   (created-at (common-lisp:error ":createdat is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource-group 'make-resource-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-group-list ()
   '(trivial-types:proper-list resource-group))
 (common-lisp:defun |make-resource-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-group-tag (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-group-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-group-tag 'make-resource-group-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-group-tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-group-tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-group-tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-group-tags ()
   '(trivial-types:proper-list resource-group-tag))
 (common-lisp:defun |make-resource-group-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-group-tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype rule-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype rule-name-list () '(trivial-types:proper-list rule-name))
 (common-lisp:defun |make-rule-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (rules-package (:copier common-lisp:nil)
      (:conc-name "struct-shape-rules-package-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or rules-package-name common-lisp:null))
   (version (common-lisp:error ":version is required") :type
    (common-lisp:or version common-lisp:null))
   (provider (common-lisp:error ":provider is required") :type
    (common-lisp:or provider-name common-lisp:null))
   (description common-lisp:nil :type (common-lisp:or text common-lisp:null)))
 (common-lisp:export (common-lisp:list 'rules-package 'make-rules-package))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rules-package))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rules-package))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rules-package))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rules-package-list ()
   '(trivial-types:proper-list rules-package))
 (common-lisp:defun |make-rules-package-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rules-package))
   aws-sdk/generator/shape::members))
(common-lisp:deftype rules-package-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (scope (:copier common-lisp:nil) (:conc-name "struct-shape-scope-"))
   (key common-lisp:nil :type (common-lisp:or scope-type common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or scope-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'scope 'make-scope))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scope))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scope))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scope))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scope-list () '(trivial-types:proper-list scope))
 (common-lisp:defun |make-scope-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scope))
   aws-sdk/generator/shape::members))
(common-lisp:deftype scope-type () 'common-lisp:string)
(common-lisp:deftype scope-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (security-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-security-group-"))
   (group-name common-lisp:nil :type (common-lisp:or text common-lisp:null))
   (group-id common-lisp:nil :type (common-lisp:or text common-lisp:null)))
 (common-lisp:export (common-lisp:list 'security-group 'make-security-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "groupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "groupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input security-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-groups ()
   '(trivial-types:proper-list security-group))
 (common-lisp:defun |make-security-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype service-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-temporarily-unavailable-exception
     (inspector-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-temporarily-unavailable-exception-message)
      (can-retry :initarg :can-retry :initform common-lisp:nil :reader
       service-temporarily-unavailable-exception-can-retry)))
 (common-lisp:export
  (common-lisp:list 'service-temporarily-unavailable-exception
                    'service-temporarily-unavailable-exception-message
                    'service-temporarily-unavailable-exception-can-retry)))
(common-lisp:progn
 (common-lisp:defstruct
     (set-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-set-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-tags-for-resource-request
                    'make-set-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:deftype severity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype severity-list () '(trivial-types:proper-list severity))
 (common-lisp:defun |make-severity-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list severity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (start-assessment-run-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-assessment-run-request-"))
   (assessment-template-arn
    (common-lisp:error ":assessmenttemplatearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (assessment-run-name common-lisp:nil :type
    (common-lisp:or assessment-run-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-assessment-run-request
                    'make-start-assessment-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-template-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentTemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-name))
      (common-lisp:list
       (common-lisp:cons "assessmentRunName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-assessment-run-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-assessment-run-response-"))
   (assessment-run-arn (common-lisp:error ":assessmentrunarn is required")
    :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-assessment-run-response
                    'make-start-assessment-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-run-response))
   common-lisp:nil))
(common-lisp:deftype stop-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (stop-assessment-run-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stop-assessment-run-request-"))
   (assessment-run-arn (common-lisp:error ":assessmentrunarn is required")
    :type (common-lisp:or arn common-lisp:null))
   (stop-action common-lisp:nil :type
    (common-lisp:or stop-action common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-assessment-run-request
                    'make-stop-assessment-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-assessment-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-assessment-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-action))
      (common-lisp:list
       (common-lisp:cons "stopAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-assessment-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (subscribe-to-event-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-subscribe-to-event-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (event (common-lisp:error ":event is required") :type
    (common-lisp:or inspector-event common-lisp:null))
   (topic-arn (common-lisp:error ":topicarn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'subscribe-to-event-request
                    'make-subscribe-to-event-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subscribe-to-event-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subscribe-to-event-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "topicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subscribe-to-event-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (subscription (:copier common-lisp:nil)
      (:conc-name "struct-shape-subscription-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (topic-arn (common-lisp:error ":topicarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (event-subscriptions (common-lisp:error ":eventsubscriptions is required")
    :type (common-lisp:or event-subscription-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'subscription 'make-subscription))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subscription))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subscription))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "topicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-subscriptions))
      (common-lisp:list
       (common-lisp:cons "eventSubscriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subscription))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype subscription-list ()
   '(trivial-types:proper-list subscription))
 (common-lisp:defun |make-subscription-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscription))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (telemetry-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-telemetry-metadata-"))
   (message-type (common-lisp:error ":messagetype is required") :type
    (common-lisp:or message-type common-lisp:null))
   (count (common-lisp:error ":count is required") :type
    (common-lisp:or long common-lisp:null))
   (data-size common-lisp:nil :type (common-lisp:or long common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'telemetry-metadata 'make-telemetry-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input telemetry-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input telemetry-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "messageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-size))
      (common-lisp:list
       (common-lisp:cons "dataSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input telemetry-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype telemetry-metadata-list ()
   '(trivial-types:proper-list telemetry-metadata))
 (common-lisp:defun |make-telemetry-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list telemetry-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype text () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (timestamp-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-timestamp-range-"))
   (begin-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'timestamp-range 'make-timestamp-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timestamp-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timestamp-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin-date))
      (common-lisp:list
       (common-lisp:cons "beginDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date))
      (common-lisp:list
       (common-lisp:cons "endDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timestamp-range))
   common-lisp:nil))
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (unsubscribe-from-event-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-unsubscribe-from-event-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (event (common-lisp:error ":event is required") :type
    (common-lisp:or inspector-event common-lisp:null))
   (topic-arn (common-lisp:error ":topicarn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unsubscribe-from-event-request
                    'make-unsubscribe-from-event-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unsubscribe-from-event-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unsubscribe-from-event-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "topicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unsubscribe-from-event-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition unsupported-feature-exception
     (inspector-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unsupported-feature-exception-message)
      (can-retry :initarg :can-retry :initform common-lisp:nil :reader
       unsupported-feature-exception-can-retry)))
 (common-lisp:export
  (common-lisp:list 'unsupported-feature-exception
                    'unsupported-feature-exception-message
                    'unsupported-feature-exception-can-retry)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-assessment-target-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-assessment-target-request-"))
   (assessment-target-arn
    (common-lisp:error ":assessmenttargetarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (assessment-target-name
    (common-lisp:error ":assessmenttargetname is required") :type
    (common-lisp:or assessment-target-name common-lisp:null))
   (resource-group-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-assessment-target-request
                    'make-update-assessment-target-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-target-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-target-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-target-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentTargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-target-name))
      (common-lisp:list
       (common-lisp:cons "assessmentTargetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-arn))
      (common-lisp:list
       (common-lisp:cons "resourceGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-target-request))
   common-lisp:nil))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype user-attribute-key-list ()
   '(trivial-types:proper-list attribute-key))
 (common-lisp:defun |make-user-attribute-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype user-attribute-list ()
   '(trivial-types:proper-list attribute))
 (common-lisp:defun |make-user-attribute-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun add-attributes-to-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-arns attributes)
   (common-lisp:declare (common-lisp:ignorable finding-arns attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-attributes-to-findings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AddAttributesToFindings"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-attributes-to-findings))
(common-lisp:progn
 (common-lisp:defun create-assessment-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-target-name
                     resource-group-arn)
   (common-lisp:declare
    (common-lisp:ignorable assessment-target-name resource-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-assessment-target-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAssessmentTarget"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-assessment-target))
(common-lisp:progn
 (common-lisp:defun create-assessment-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-target-arn
                     assessment-template-name duration-in-seconds
                     rules-package-arns user-attributes-for-findings)
   (common-lisp:declare
    (common-lisp:ignorable assessment-target-arn assessment-template-name
     duration-in-seconds rules-package-arns user-attributes-for-findings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-assessment-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAssessmentTemplate"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-assessment-template))
(common-lisp:progn
 (common-lisp:defun create-exclusions-preview
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-template-arn)
   (common-lisp:declare (common-lisp:ignorable assessment-template-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-exclusions-preview-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateExclusionsPreview"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-exclusions-preview))
(common-lisp:progn
 (common-lisp:defun create-resource-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-tags)
   (common-lisp:declare (common-lisp:ignorable resource-group-tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-resource-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateResourceGroup"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-resource-group))
(common-lisp:progn
 (common-lisp:defun delete-assessment-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-run-arn)
   (common-lisp:declare (common-lisp:ignorable assessment-run-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-assessment-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAssessmentRun"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-assessment-run))
(common-lisp:progn
 (common-lisp:defun delete-assessment-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-target-arn)
   (common-lisp:declare (common-lisp:ignorable assessment-target-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-assessment-target-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAssessmentTarget"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-assessment-target))
(common-lisp:progn
 (common-lisp:defun delete-assessment-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-template-arn)
   (common-lisp:declare (common-lisp:ignorable assessment-template-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-assessment-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAssessmentTemplate"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-assessment-template))
(common-lisp:progn
 (common-lisp:defun describe-assessment-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-run-arns)
   (common-lisp:declare (common-lisp:ignorable assessment-run-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-assessment-runs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAssessmentRuns"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-assessment-runs))
(common-lisp:progn
 (common-lisp:defun describe-assessment-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-target-arns)
   (common-lisp:declare (common-lisp:ignorable assessment-target-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-assessment-targets-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAssessmentTargets"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-assessment-targets))
(common-lisp:progn
 (common-lisp:defun describe-assessment-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-template-arns)
   (common-lisp:declare (common-lisp:ignorable assessment-template-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-assessment-templates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAssessmentTemplates"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-assessment-templates))
(common-lisp:progn
 (common-lisp:defun describe-cross-account-access-role ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'inspector-request :method "POST" :path "/"
                                :params
                                `(("Action" ,@"DescribeCrossAccountAccessRole")
                                  ("Version" ,@"2016-02-16"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-cross-account-access-role))
(common-lisp:progn
 (common-lisp:defun describe-exclusions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key exclusion-arns locale)
   (common-lisp:declare (common-lisp:ignorable exclusion-arns locale))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-exclusions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeExclusions"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-exclusions))
(common-lisp:progn
 (common-lisp:defun describe-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-arns locale)
   (common-lisp:declare (common-lisp:ignorable finding-arns locale))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeFindings"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-findings))
(common-lisp:progn
 (common-lisp:defun describe-resource-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-arns)
   (common-lisp:declare (common-lisp:ignorable resource-group-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-resource-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeResourceGroups"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-resource-groups))
(common-lisp:progn
 (common-lisp:defun describe-rules-packages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rules-package-arns locale)
   (common-lisp:declare (common-lisp:ignorable rules-package-arns locale))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-rules-packages-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeRulesPackages"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-rules-packages))
(common-lisp:progn
 (common-lisp:defun get-assessment-report
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-run-arn report-file-format
                     report-type)
   (common-lisp:declare
    (common-lisp:ignorable assessment-run-arn report-file-format report-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-assessment-report-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetAssessmentReport"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-assessment-report))
(common-lisp:progn
 (common-lisp:defun get-exclusions-preview
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-template-arn preview-token
                     next-token max-results locale)
   (common-lisp:declare
    (common-lisp:ignorable assessment-template-arn preview-token next-token
     max-results locale))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-exclusions-preview-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetExclusionsPreview"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-exclusions-preview))
(common-lisp:progn
 (common-lisp:defun get-telemetry-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-run-arn)
   (common-lisp:declare (common-lisp:ignorable assessment-run-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-telemetry-metadata-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetTelemetryMetadata"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-telemetry-metadata))
(common-lisp:progn
 (common-lisp:defun list-assessment-run-agents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-run-arn filter next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable assessment-run-arn filter next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-assessment-run-agents-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAssessmentRunAgents"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-assessment-run-agents))
(common-lisp:progn
 (common-lisp:defun list-assessment-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-template-arns filter
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable assessment-template-arns filter next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-assessment-runs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAssessmentRuns"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-assessment-runs))
(common-lisp:progn
 (common-lisp:defun list-assessment-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filter next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-assessment-targets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAssessmentTargets"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-assessment-targets))
(common-lisp:progn
 (common-lisp:defun list-assessment-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-target-arns filter next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable assessment-target-arns filter next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-assessment-templates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAssessmentTemplates"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-assessment-templates))
(common-lisp:progn
 (common-lisp:defun list-event-subscriptions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-event-subscriptions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListEventSubscriptions"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-event-subscriptions))
(common-lisp:progn
 (common-lisp:defun list-exclusions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-run-arn next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable assessment-run-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-exclusions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListExclusions"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-exclusions))
(common-lisp:progn
 (common-lisp:defun list-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-run-arns filter next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable assessment-run-arns filter next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListFindings"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-findings))
(common-lisp:progn
 (common-lisp:defun list-rules-packages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-rules-packages-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListRulesPackages"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-rules-packages))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun preview-agents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key preview-agents-arn next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable preview-agents-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-preview-agents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PreviewAgents"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'preview-agents))
(common-lisp:progn
 (common-lisp:defun register-cross-account-access-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-arn)
   (common-lisp:declare (common-lisp:ignorable role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-register-cross-account-access-role-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RegisterCrossAccountAccessRole"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-cross-account-access-role))
(common-lisp:progn
 (common-lisp:defun remove-attributes-from-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-arns attribute-keys)
   (common-lisp:declare (common-lisp:ignorable finding-arns attribute-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-attributes-from-findings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveAttributesFromFindings"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-attributes-from-findings))
(common-lisp:progn
 (common-lisp:defun set-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetTagsForResource"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'set-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun start-assessment-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-template-arn
                     assessment-run-name)
   (common-lisp:declare
    (common-lisp:ignorable assessment-template-arn assessment-run-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-assessment-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartAssessmentRun"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-assessment-run))
(common-lisp:progn
 (common-lisp:defun stop-assessment-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-run-arn stop-action)
   (common-lisp:declare (common-lisp:ignorable assessment-run-arn stop-action))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-assessment-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StopAssessmentRun"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-assessment-run))
(common-lisp:progn
 (common-lisp:defun subscribe-to-event
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn event topic-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn event topic-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-subscribe-to-event-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SubscribeToEvent"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'subscribe-to-event))
(common-lisp:progn
 (common-lisp:defun unsubscribe-from-event
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn event topic-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn event topic-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-unsubscribe-from-event-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UnsubscribeFromEvent"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'unsubscribe-from-event))
(common-lisp:progn
 (common-lisp:defun update-assessment-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-target-arn
                     assessment-target-name resource-group-arn)
   (common-lisp:declare
    (common-lisp:ignorable assessment-target-arn assessment-target-name
     resource-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-assessment-target-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateAssessmentTarget"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-assessment-target))
