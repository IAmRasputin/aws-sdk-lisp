;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/inspector/api
  (:use)
  (:nicknames #:aws/inspector)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/inspector/api)
(common-lisp:progn
 (common-lisp:defclass inspector-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "inspector" :protocol
                        :json))
 (common-lisp:export 'inspector-request))
(common-lisp:progn
 (common-lisp:define-condition inspector-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'inspector-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("AgentsAlreadyRunningAssessmentException"
     . agents-already-running-assessment-exception)
    ("AssessmentRunInProgressException" . assessment-run-in-progress-exception)
    ("InternalException" . internal-exception)
    ("InvalidCrossAccountRoleException" . invalid-cross-account-role-exception)
    ("InvalidInputException" . invalid-input-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("NoSuchEntityException" . no-such-entity-exception)
    ("PreviewGenerationInProgressException"
     . preview-generation-in-progress-exception)
    ("ServiceTemporarilyUnavailableException"
     . service-temporarily-unavailable-exception)
    ("UnsupportedFeatureException" . unsupported-feature-exception)))
(common-lisp:deftype access-denied-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (inspector-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       access-denied-exception-message)
      (error-code :initarg :|errorCode| :initform common-lisp:nil :reader
       access-denied-exception-error-code)
      (can-retry :initarg :|canRetry| :initform common-lisp:nil :reader
       access-denied-exception-can-retry)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message
                    'access-denied-exception-error-code
                    'access-denied-exception-can-retry)))
(common-lisp:progn
 (common-lisp:defclass add-attributes-to-findings-request common-lisp:nil
                       ((attributes :initarg :|attributes| :type
                         (common-lisp:or user-attribute-list common-lisp:null)
                         :accessor
                         %add-attributes-to-findings-request-attributes
                         :initform
                         (common-lisp:error ":attributes is required"))
                        (finding-arns :initarg :|findingArns| :type
                         (common-lisp:or add-remove-attributes-finding-arn-list
                                         common-lisp:null)
                         :accessor
                         %add-attributes-to-findings-request-finding-arns
                         :initform
                         (common-lisp:error ":findingarns is required"))))
 (common-lisp:export
  (common-lisp:list 'add-attributes-to-findings-request
                    'make-add-attributes-to-findings-request))
 (common-lisp:defun make-add-attributes-to-findings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attributes finding-arns)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-attributes-to-findings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-attributes-to-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-attributes-to-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-arns))
      (common-lisp:list
       (common-lisp:cons "findingArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-attributes-to-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass add-attributes-to-findings-response common-lisp:nil
                       ((failed-items :initarg :|failedItems| :type
                         (common-lisp:or failed-items common-lisp:null)
                         :accessor
                         %add-attributes-to-findings-response-failed-items
                         :initform
                         (common-lisp:error ":faileditems is required"))))
 (common-lisp:export
  (common-lisp:list 'add-attributes-to-findings-response
                    'make-add-attributes-to-findings-response))
 (common-lisp:defun make-add-attributes-to-findings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-items)
   (common-lisp:apply #'common-lisp:make-instance
                      'add-attributes-to-findings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-attributes-to-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-attributes-to-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-items))
      (common-lisp:list
       (common-lisp:cons "failedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-attributes-to-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype add-remove-attributes-finding-arn-list ()
   '(trivial-types:proper-list arn))
 (common-lisp:defun |make-add-remove-attributes-finding-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass agent-already-running-assessment common-lisp:nil
                       ((assessment-run-arn :initarg :|assessmentRunArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %agent-already-running-assessment-assessment-run-arn
                         :initform
                         (common-lisp:error ":assessmentrunarn is required"))
                        (agent-id :initarg :|agentId| :type
                         (common-lisp:or agent-id common-lisp:null) :accessor
                         %agent-already-running-assessment-agent-id :initform
                         (common-lisp:error ":agentid is required"))))
 (common-lisp:export
  (common-lisp:list 'agent-already-running-assessment
                    'make-agent-already-running-assessment))
 (common-lisp:defun make-agent-already-running-assessment
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key assessment-run-arn agent-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'agent-already-running-assessment
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          agent-already-running-assessment))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          agent-already-running-assessment))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          agent-already-running-assessment))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype agent-already-running-assessment-list ()
   '(trivial-types:proper-list agent-already-running-assessment))
 (common-lisp:defun |make-agent-already-running-assessment-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            agent-already-running-assessment))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass agent-filter common-lisp:nil
                       ((agent-health-codes :initarg :|agentHealthCodes| :type
                         (common-lisp:or agent-health-code-list
                                         common-lisp:null)
                         :accessor %agent-filter-agent-health-codes :initform
                         (common-lisp:error ":agenthealthcodes is required"))
                        (agent-healths :initarg :|agentHealths| :type
                         (common-lisp:or agent-health-list common-lisp:null)
                         :accessor %agent-filter-agent-healths :initform
                         (common-lisp:error ":agenthealths is required"))))
 (common-lisp:export (common-lisp:list 'agent-filter 'make-agent-filter))
 (common-lisp:defun make-agent-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key agent-health-codes agent-healths)
   (common-lisp:apply #'common-lisp:make-instance 'agent-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input agent-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input agent-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-healths))
      (common-lisp:list
       (common-lisp:cons "agentHealths"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-health-codes))
      (common-lisp:list
       (common-lisp:cons "agentHealthCodes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input agent-filter))
   common-lisp:nil))
(common-lisp:deftype agent-health () 'common-lisp:string)
(common-lisp:deftype agent-health-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype agent-health-code-list ()
   '(trivial-types:proper-list agent-health-code))
 (common-lisp:defun |make-agent-health-code-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list agent-health-code))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype agent-health-list ()
   '(trivial-types:proper-list agent-health))
 (common-lisp:defun |make-agent-health-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list agent-health))
   aws-sdk/generator/shape::members))
(common-lisp:deftype agent-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype agent-id-list () '(trivial-types:proper-list agent-id))
 (common-lisp:defun |make-agent-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list agent-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass agent-preview common-lisp:nil
                       ((ipv4address :initarg :|ipv4Address| :type
                         (common-lisp:or ipv4address common-lisp:null)
                         :accessor %agent-preview-ipv4address :initform
                         common-lisp:nil)
                        (kernel-version :initarg :|kernelVersion| :type
                         (common-lisp:or kernel-version common-lisp:null)
                         :accessor %agent-preview-kernel-version :initform
                         common-lisp:nil)
                        (operating-system :initarg :|operatingSystem| :type
                         (common-lisp:or operating-system common-lisp:null)
                         :accessor %agent-preview-operating-system :initform
                         common-lisp:nil)
                        (agent-version :initarg :|agentVersion| :type
                         (common-lisp:or agent-version common-lisp:null)
                         :accessor %agent-preview-agent-version :initform
                         common-lisp:nil)
                        (agent-health :initarg :|agentHealth| :type
                         (common-lisp:or agent-health common-lisp:null)
                         :accessor %agent-preview-agent-health :initform
                         common-lisp:nil)
                        (auto-scaling-group :initarg :|autoScalingGroup| :type
                         (common-lisp:or auto-scaling-group common-lisp:null)
                         :accessor %agent-preview-auto-scaling-group :initform
                         common-lisp:nil)
                        (agent-id :initarg :|agentId| :type
                         (common-lisp:or agent-id common-lisp:null) :accessor
                         %agent-preview-agent-id :initform
                         (common-lisp:error ":agentid is required"))
                        (hostname :initarg :|hostname| :type
                         (common-lisp:or hostname common-lisp:null) :accessor
                         %agent-preview-hostname :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'agent-preview 'make-agent-preview))
 (common-lisp:defun make-agent-preview
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ipv4address kernel-version
                     operating-system agent-version agent-health
                     auto-scaling-group agent-id hostname)
   (common-lisp:apply #'common-lisp:make-instance 'agent-preview
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input agent-preview))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input agent-preview))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-group))
      (common-lisp:list
       (common-lisp:cons "autoScalingGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-health))
      (common-lisp:list
       (common-lisp:cons "agentHealth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-version))
      (common-lisp:list
       (common-lisp:cons "agentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operating-system))
      (common-lisp:list
       (common-lisp:cons "operatingSystem"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kernel-version))
      (common-lisp:list
       (common-lisp:cons "kernelVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv4address))
      (common-lisp:list
       (common-lisp:cons "ipv4Address"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input agent-preview))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype agent-preview-list ()
   '(trivial-types:proper-list agent-preview))
 (common-lisp:defun |make-agent-preview-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list agent-preview))
   aws-sdk/generator/shape::members))
(common-lisp:deftype agent-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition agents-already-running-assessment-exception
     (inspector-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       agents-already-running-assessment-exception-message)
      (agents :initarg :|agents| :initform common-lisp:nil :reader
       agents-already-running-assessment-exception-agents)
      (agents-truncated :initarg :|agentsTruncated| :initform common-lisp:nil
       :reader agents-already-running-assessment-exception-agents-truncated)
      (can-retry :initarg :|canRetry| :initform common-lisp:nil :reader
       agents-already-running-assessment-exception-can-retry)))
 (common-lisp:export
  (common-lisp:list 'agents-already-running-assessment-exception
                    'agents-already-running-assessment-exception-message
                    'agents-already-running-assessment-exception-agents
                    'agents-already-running-assessment-exception-agents-truncated
                    'agents-already-running-assessment-exception-can-retry)))
(common-lisp:deftype ami-id () 'common-lisp:string)
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype arn-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype assessment-rules-package-arn-list ()
   '(trivial-types:proper-list arn))
 (common-lisp:defun |make-assessment-rules-package-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass assessment-run common-lisp:nil
                       ((finding-counts :initarg :|findingCounts| :type
                         (common-lisp:or assessment-run-finding-counts
                                         common-lisp:null)
                         :accessor %assessment-run-finding-counts :initform
                         (common-lisp:error ":findingcounts is required"))
                        (notifications :initarg :|notifications| :type
                         (common-lisp:or assessment-run-notification-list
                                         common-lisp:null)
                         :accessor %assessment-run-notifications :initform
                         (common-lisp:error ":notifications is required"))
                        (state-changes :initarg :|stateChanges| :type
                         (common-lisp:or assessment-run-state-change-list
                                         common-lisp:null)
                         :accessor %assessment-run-state-changes :initform
                         (common-lisp:error ":statechanges is required"))
                        (data-collected :initarg :|dataCollected| :type
                         (common-lisp:or bool common-lisp:null) :accessor
                         %assessment-run-data-collected :initform
                         (common-lisp:error ":datacollected is required"))
                        (state-changed-at :initarg :|stateChangedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %assessment-run-state-changed-at :initform
                         (common-lisp:error ":statechangedat is required"))
                        (completed-at :initarg :|completedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %assessment-run-completed-at :initform
                         common-lisp:nil)
                        (started-at :initarg :|startedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %assessment-run-started-at :initform common-lisp:nil)
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %assessment-run-created-at :initform
                         (common-lisp:error ":createdat is required"))
                        (user-attributes-for-findings :initarg
                         :|userAttributesForFindings| :type
                         (common-lisp:or user-attribute-list common-lisp:null)
                         :accessor %assessment-run-user-attributes-for-findings
                         :initform
                         (common-lisp:error
                          ":userattributesforfindings is required"))
                        (rules-package-arns :initarg :|rulesPackageArns| :type
                         (common-lisp:or assessment-rules-package-arn-list
                                         common-lisp:null)
                         :accessor %assessment-run-rules-package-arns :initform
                         (common-lisp:error ":rulespackagearns is required"))
                        (duration-in-seconds :initarg :|durationInSeconds|
                         :type
                         (common-lisp:or assessment-run-duration
                                         common-lisp:null)
                         :accessor %assessment-run-duration-in-seconds
                         :initform
                         (common-lisp:error ":durationinseconds is required"))
                        (state :initarg :|state| :type
                         (common-lisp:or assessment-run-state common-lisp:null)
                         :accessor %assessment-run-state :initform
                         (common-lisp:error ":state is required"))
                        (assessment-template-arn :initarg
                         :|assessmentTemplateArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %assessment-run-assessment-template-arn :initform
                         (common-lisp:error
                          ":assessmenttemplatearn is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or assessment-run-name common-lisp:null)
                         :accessor %assessment-run-name :initform
                         (common-lisp:error ":name is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %assessment-run-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export (common-lisp:list 'assessment-run 'make-assessment-run))
 (common-lisp:defun make-assessment-run
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key finding-counts notifications
                     state-changes data-collected state-changed-at completed-at
                     started-at created-at user-attributes-for-findings
                     rules-package-arns duration-in-seconds state
                     assessment-template-arn name arn)
   (common-lisp:apply #'common-lisp:make-instance 'assessment-run
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assessment-run))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assessment-run))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-template-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentTemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "durationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules-package-arns))
      (common-lisp:list
       (common-lisp:cons "rulesPackageArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-attributes-for-findings))
      (common-lisp:list
       (common-lisp:cons "userAttributesForFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "startedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completed-at))
      (common-lisp:list
       (common-lisp:cons "completedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-changed-at))
      (common-lisp:list
       (common-lisp:cons "stateChangedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-collected))
      (common-lisp:list
       (common-lisp:cons "dataCollected"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-changes))
      (common-lisp:list
       (common-lisp:cons "stateChanges"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notifications))
      (common-lisp:list
       (common-lisp:cons "notifications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-counts))
      (common-lisp:list
       (common-lisp:cons "findingCounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assessment-run))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass assessment-run-agent common-lisp:nil
                       ((telemetry-metadata :initarg :|telemetryMetadata| :type
                         (common-lisp:or telemetry-metadata-list
                                         common-lisp:null)
                         :accessor %assessment-run-agent-telemetry-metadata
                         :initform
                         (common-lisp:error ":telemetrymetadata is required"))
                        (auto-scaling-group :initarg :|autoScalingGroup| :type
                         (common-lisp:or auto-scaling-group common-lisp:null)
                         :accessor %assessment-run-agent-auto-scaling-group
                         :initform common-lisp:nil)
                        (agent-health-details :initarg :|agentHealthDetails|
                         :type (common-lisp:or message common-lisp:null)
                         :accessor %assessment-run-agent-agent-health-details
                         :initform common-lisp:nil)
                        (agent-health-code :initarg :|agentHealthCode| :type
                         (common-lisp:or agent-health-code common-lisp:null)
                         :accessor %assessment-run-agent-agent-health-code
                         :initform
                         (common-lisp:error ":agenthealthcode is required"))
                        (agent-health :initarg :|agentHealth| :type
                         (common-lisp:or agent-health common-lisp:null)
                         :accessor %assessment-run-agent-agent-health :initform
                         (common-lisp:error ":agenthealth is required"))
                        (assessment-run-arn :initarg :|assessmentRunArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %assessment-run-agent-assessment-run-arn :initform
                         (common-lisp:error ":assessmentrunarn is required"))
                        (agent-id :initarg :|agentId| :type
                         (common-lisp:or agent-id common-lisp:null) :accessor
                         %assessment-run-agent-agent-id :initform
                         (common-lisp:error ":agentid is required"))))
 (common-lisp:export
  (common-lisp:list 'assessment-run-agent 'make-assessment-run-agent))
 (common-lisp:defun make-assessment-run-agent
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key telemetry-metadata auto-scaling-group
                     agent-health-details agent-health-code agent-health
                     assessment-run-arn agent-id)
   (common-lisp:apply #'common-lisp:make-instance 'assessment-run-agent
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assessment-run-agent))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assessment-run-agent))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-health))
      (common-lisp:list
       (common-lisp:cons "agentHealth"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-health-code))
      (common-lisp:list
       (common-lisp:cons "agentHealthCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'agent-health-details))
      (common-lisp:list
       (common-lisp:cons "agentHealthDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-group))
      (common-lisp:list
       (common-lisp:cons "autoScalingGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'telemetry-metadata))
      (common-lisp:list
       (common-lisp:cons "telemetryMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assessment-run-agent))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assessment-run-agent-list ()
   '(trivial-types:proper-list assessment-run-agent))
 (common-lisp:defun |make-assessment-run-agent-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list assessment-run-agent))
   aws-sdk/generator/shape::members))
(common-lisp:deftype assessment-run-duration () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass assessment-run-filter common-lisp:nil
                       ((state-change-time-range :initarg
                         :|stateChangeTimeRange| :type
                         (common-lisp:or timestamp-range common-lisp:null)
                         :accessor
                         %assessment-run-filter-state-change-time-range
                         :initform common-lisp:nil)
                        (completion-time-range :initarg :|completionTimeRange|
                         :type
                         (common-lisp:or timestamp-range common-lisp:null)
                         :accessor %assessment-run-filter-completion-time-range
                         :initform common-lisp:nil)
                        (start-time-range :initarg :|startTimeRange| :type
                         (common-lisp:or timestamp-range common-lisp:null)
                         :accessor %assessment-run-filter-start-time-range
                         :initform common-lisp:nil)
                        (rules-package-arns :initarg :|rulesPackageArns| :type
                         (common-lisp:or filter-rules-package-arn-list
                                         common-lisp:null)
                         :accessor %assessment-run-filter-rules-package-arns
                         :initform common-lisp:nil)
                        (duration-range :initarg :|durationRange| :type
                         (common-lisp:or duration-range common-lisp:null)
                         :accessor %assessment-run-filter-duration-range
                         :initform common-lisp:nil)
                        (states :initarg :|states| :type
                         (common-lisp:or assessment-run-state-list
                                         common-lisp:null)
                         :accessor %assessment-run-filter-states :initform
                         common-lisp:nil)
                        (name-pattern :initarg :|namePattern| :type
                         (common-lisp:or name-pattern common-lisp:null)
                         :accessor %assessment-run-filter-name-pattern
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'assessment-run-filter 'make-assessment-run-filter))
 (common-lisp:defun make-assessment-run-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state-change-time-range
                     completion-time-range start-time-range rules-package-arns
                     duration-range states name-pattern)
   (common-lisp:apply #'common-lisp:make-instance 'assessment-run-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assessment-run-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assessment-run-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-pattern))
      (common-lisp:list
       (common-lisp:cons "namePattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'states))
      (common-lisp:list
       (common-lisp:cons "states"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-range))
      (common-lisp:list
       (common-lisp:cons "durationRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules-package-arns))
      (common-lisp:list
       (common-lisp:cons "rulesPackageArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time-range))
      (common-lisp:list
       (common-lisp:cons "startTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'completion-time-range))
      (common-lisp:list
       (common-lisp:cons "completionTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'state-change-time-range))
      (common-lisp:list
       (common-lisp:cons "stateChangeTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assessment-run-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assessment-run-finding-counts () 'common-lisp:hash-table)
 (common-lisp:defun |make-assessment-run-finding-counts|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype assessment-run-in-progress-arn-list ()
   '(trivial-types:proper-list arn))
 (common-lisp:defun |make-assessment-run-in-progress-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition assessment-run-in-progress-exception
     (inspector-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       assessment-run-in-progress-exception-message)
      (assessment-run-arns :initarg :|assessmentRunArns| :initform
       common-lisp:nil :reader
       assessment-run-in-progress-exception-assessment-run-arns)
      (assessment-run-arns-truncated :initarg :|assessmentRunArnsTruncated|
       :initform common-lisp:nil :reader
       assessment-run-in-progress-exception-assessment-run-arns-truncated)
      (can-retry :initarg :|canRetry| :initform common-lisp:nil :reader
       assessment-run-in-progress-exception-can-retry)))
 (common-lisp:export
  (common-lisp:list 'assessment-run-in-progress-exception
                    'assessment-run-in-progress-exception-message
                    'assessment-run-in-progress-exception-assessment-run-arns
                    'assessment-run-in-progress-exception-assessment-run-arns-truncated
                    'assessment-run-in-progress-exception-can-retry)))
(common-lisp:progn
 (common-lisp:deftype assessment-run-list ()
   '(trivial-types:proper-list assessment-run))
 (common-lisp:defun |make-assessment-run-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list assessment-run))
   aws-sdk/generator/shape::members))
(common-lisp:deftype assessment-run-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass assessment-run-notification common-lisp:nil
                       ((sns-publish-status-code :initarg
                         :|snsPublishStatusCode| :type
                         (common-lisp:or
                          assessment-run-notification-sns-status-code
                          common-lisp:null)
                         :accessor
                         %assessment-run-notification-sns-publish-status-code
                         :initform common-lisp:nil)
                        (sns-topic-arn :initarg :|snsTopicArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %assessment-run-notification-sns-topic-arn :initform
                         common-lisp:nil)
                        (error :initarg :|error| :type
                         (common-lisp:or bool common-lisp:null) :accessor
                         %assessment-run-notification-error :initform
                         (common-lisp:error ":error is required"))
                        (message :initarg :|message| :type
                         (common-lisp:or message common-lisp:null) :accessor
                         %assessment-run-notification-message :initform
                         common-lisp:nil)
                        (event :initarg :|event| :type
                         (common-lisp:or inspector-event common-lisp:null)
                         :accessor %assessment-run-notification-event :initform
                         (common-lisp:error ":event is required"))
                        (date :initarg :|date| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %assessment-run-notification-date :initform
                         (common-lisp:error ":date is required"))))
 (common-lisp:export
  (common-lisp:list 'assessment-run-notification
                    'make-assessment-run-notification))
 (common-lisp:defun make-assessment-run-notification
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sns-publish-status-code sns-topic-arn
                     error message event date)
   (common-lisp:apply #'common-lisp:make-instance 'assessment-run-notification
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assessment-run-notification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assessment-run-notification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date))
      (common-lisp:list
       (common-lisp:cons "date"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sns-topic-arn))
      (common-lisp:list
       (common-lisp:cons "snsTopicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sns-publish-status-code))
      (common-lisp:list
       (common-lisp:cons "snsPublishStatusCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assessment-run-notification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assessment-run-notification-list ()
   '(trivial-types:proper-list assessment-run-notification))
 (common-lisp:defun |make-assessment-run-notification-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            assessment-run-notification))
   aws-sdk/generator/shape::members))
(common-lisp:deftype assessment-run-notification-sns-status-code ()
  'common-lisp:string)
(common-lisp:deftype assessment-run-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass assessment-run-state-change common-lisp:nil
                       ((state :initarg :|state| :type
                         (common-lisp:or assessment-run-state common-lisp:null)
                         :accessor %assessment-run-state-change-state :initform
                         (common-lisp:error ":state is required"))
                        (state-changed-at :initarg :|stateChangedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %assessment-run-state-change-state-changed-at
                         :initform
                         (common-lisp:error ":statechangedat is required"))))
 (common-lisp:export
  (common-lisp:list 'assessment-run-state-change
                    'make-assessment-run-state-change))
 (common-lisp:defun make-assessment-run-state-change
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state state-changed-at)
   (common-lisp:apply #'common-lisp:make-instance 'assessment-run-state-change
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assessment-run-state-change))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assessment-run-state-change))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state-changed-at))
      (common-lisp:list
       (common-lisp:cons "stateChangedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assessment-run-state-change))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assessment-run-state-change-list ()
   '(trivial-types:proper-list assessment-run-state-change))
 (common-lisp:defun |make-assessment-run-state-change-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            assessment-run-state-change))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype assessment-run-state-list ()
   '(trivial-types:proper-list assessment-run-state))
 (common-lisp:defun |make-assessment-run-state-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list assessment-run-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass assessment-target common-lisp:nil
                       ((updated-at :initarg :|updatedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %assessment-target-updated-at :initform
                         (common-lisp:error ":updatedat is required"))
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %assessment-target-created-at :initform
                         (common-lisp:error ":createdat is required"))
                        (resource-group-arn :initarg :|resourceGroupArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %assessment-target-resource-group-arn :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or assessment-target-name
                                         common-lisp:null)
                         :accessor %assessment-target-name :initform
                         (common-lisp:error ":name is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %assessment-target-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'assessment-target 'make-assessment-target))
 (common-lisp:defun make-assessment-target
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at created-at resource-group-arn
                     name arn)
   (common-lisp:apply #'common-lisp:make-instance 'assessment-target
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assessment-target))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assessment-target))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-arn))
      (common-lisp:list
       (common-lisp:cons "resourceGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assessment-target))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass assessment-target-filter common-lisp:nil
                       ((assessment-target-name-pattern :initarg
                         :|assessmentTargetNamePattern| :type
                         (common-lisp:or name-pattern common-lisp:null)
                         :accessor
                         %assessment-target-filter-assessment-target-name-pattern
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'assessment-target-filter 'make-assessment-target-filter))
 (common-lisp:defun make-assessment-target-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key assessment-target-name-pattern)
   (common-lisp:apply #'common-lisp:make-instance 'assessment-target-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assessment-target-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assessment-target-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-target-name-pattern))
      (common-lisp:list
       (common-lisp:cons "assessmentTargetNamePattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assessment-target-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assessment-target-list ()
   '(trivial-types:proper-list assessment-target))
 (common-lisp:defun |make-assessment-target-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list assessment-target))
   aws-sdk/generator/shape::members))
(common-lisp:deftype assessment-target-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass assessment-template common-lisp:nil
                       ((created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %assessment-template-created-at :initform
                         (common-lisp:error ":createdat is required"))
                        (assessment-run-count :initarg :|assessmentRunCount|
                         :type (common-lisp:or arn-count common-lisp:null)
                         :accessor %assessment-template-assessment-run-count
                         :initform
                         (common-lisp:error ":assessmentruncount is required"))
                        (last-assessment-run-arn :initarg
                         :|lastAssessmentRunArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %assessment-template-last-assessment-run-arn :initform
                         common-lisp:nil)
                        (user-attributes-for-findings :initarg
                         :|userAttributesForFindings| :type
                         (common-lisp:or user-attribute-list common-lisp:null)
                         :accessor
                         %assessment-template-user-attributes-for-findings
                         :initform
                         (common-lisp:error
                          ":userattributesforfindings is required"))
                        (rules-package-arns :initarg :|rulesPackageArns| :type
                         (common-lisp:or
                          assessment-template-rules-package-arn-list
                          common-lisp:null)
                         :accessor %assessment-template-rules-package-arns
                         :initform
                         (common-lisp:error ":rulespackagearns is required"))
                        (duration-in-seconds :initarg :|durationInSeconds|
                         :type
                         (common-lisp:or assessment-run-duration
                                         common-lisp:null)
                         :accessor %assessment-template-duration-in-seconds
                         :initform
                         (common-lisp:error ":durationinseconds is required"))
                        (assessment-target-arn :initarg :|assessmentTargetArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %assessment-template-assessment-target-arn :initform
                         (common-lisp:error
                          ":assessmenttargetarn is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or assessment-template-name
                                         common-lisp:null)
                         :accessor %assessment-template-name :initform
                         (common-lisp:error ":name is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %assessment-template-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export
  (common-lisp:list 'assessment-template 'make-assessment-template))
 (common-lisp:defun make-assessment-template
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-at assessment-run-count
                     last-assessment-run-arn user-attributes-for-findings
                     rules-package-arns duration-in-seconds
                     assessment-target-arn name arn)
   (common-lisp:apply #'common-lisp:make-instance 'assessment-template
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input assessment-template))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input assessment-template))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-target-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentTargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "durationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules-package-arns))
      (common-lisp:list
       (common-lisp:cons "rulesPackageArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-attributes-for-findings))
      (common-lisp:list
       (common-lisp:cons "userAttributesForFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-assessment-run-arn))
      (common-lisp:list
       (common-lisp:cons "lastAssessmentRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-run-count))
      (common-lisp:list
       (common-lisp:cons "assessmentRunCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input assessment-template))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass assessment-template-filter common-lisp:nil
                       ((rules-package-arns :initarg :|rulesPackageArns| :type
                         (common-lisp:or filter-rules-package-arn-list
                                         common-lisp:null)
                         :accessor
                         %assessment-template-filter-rules-package-arns
                         :initform common-lisp:nil)
                        (duration-range :initarg :|durationRange| :type
                         (common-lisp:or duration-range common-lisp:null)
                         :accessor %assessment-template-filter-duration-range
                         :initform common-lisp:nil)
                        (name-pattern :initarg :|namePattern| :type
                         (common-lisp:or name-pattern common-lisp:null)
                         :accessor %assessment-template-filter-name-pattern
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'assessment-template-filter
                    'make-assessment-template-filter))
 (common-lisp:defun make-assessment-template-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rules-package-arns duration-range
                     name-pattern)
   (common-lisp:apply #'common-lisp:make-instance 'assessment-template-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          assessment-template-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          assessment-template-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name-pattern))
      (common-lisp:list
       (common-lisp:cons "namePattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-range))
      (common-lisp:list
       (common-lisp:cons "durationRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules-package-arns))
      (common-lisp:list
       (common-lisp:cons "rulesPackageArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          assessment-template-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype assessment-template-list ()
   '(trivial-types:proper-list assessment-template))
 (common-lisp:defun |make-assessment-template-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list assessment-template))
   aws-sdk/generator/shape::members))
(common-lisp:deftype assessment-template-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype assessment-template-rules-package-arn-list ()
   '(trivial-types:proper-list arn))
 (common-lisp:defun |make-assessment-template-rules-package-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass asset-attributes common-lisp:nil
                       ((network-interfaces :initarg :|networkInterfaces| :type
                         (common-lisp:or network-interfaces common-lisp:null)
                         :accessor %asset-attributes-network-interfaces
                         :initform common-lisp:nil)
                        (tags :initarg :|tags| :type
                         (common-lisp:or tags common-lisp:null) :accessor
                         %asset-attributes-tags :initform common-lisp:nil)
                        (ipv4addresses :initarg :|ipv4Addresses| :type
                         (common-lisp:or ipv4address-list common-lisp:null)
                         :accessor %asset-attributes-ipv4addresses :initform
                         common-lisp:nil)
                        (hostname :initarg :|hostname| :type
                         (common-lisp:or hostname common-lisp:null) :accessor
                         %asset-attributes-hostname :initform common-lisp:nil)
                        (ami-id :initarg :|amiId| :type
                         (common-lisp:or ami-id common-lisp:null) :accessor
                         %asset-attributes-ami-id :initform common-lisp:nil)
                        (auto-scaling-group :initarg :|autoScalingGroup| :type
                         (common-lisp:or auto-scaling-group common-lisp:null)
                         :accessor %asset-attributes-auto-scaling-group
                         :initform common-lisp:nil)
                        (agent-id :initarg :|agentId| :type
                         (common-lisp:or agent-id common-lisp:null) :accessor
                         %asset-attributes-agent-id :initform common-lisp:nil)
                        (schema-version :initarg :|schemaVersion| :type
                         (common-lisp:or numeric-version common-lisp:null)
                         :accessor %asset-attributes-schema-version :initform
                         (common-lisp:error ":schemaversion is required"))))
 (common-lisp:export
  (common-lisp:list 'asset-attributes 'make-asset-attributes))
 (common-lisp:defun make-asset-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key network-interfaces tags ipv4addresses
                     hostname ami-id auto-scaling-group agent-id
                     schema-version)
   (common-lisp:apply #'common-lisp:make-instance 'asset-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version))
      (common-lisp:list
       (common-lisp:cons "schemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-id))
      (common-lisp:list
       (common-lisp:cons "agentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-group))
      (common-lisp:list
       (common-lisp:cons "autoScalingGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-id))
      (common-lisp:list
       (common-lisp:cons "amiId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hostname))
      (common-lisp:list
       (common-lisp:cons "hostname"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv4addresses))
      (common-lisp:list
       (common-lisp:cons "ipv4Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-interfaces))
      (common-lisp:list
       (common-lisp:cons "networkInterfaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-attributes))
   common-lisp:nil))
(common-lisp:deftype asset-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass attribute common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or attribute-value common-lisp:null)
                         :accessor %attribute-value :initform common-lisp:nil)
                        (key :initarg :|key| :type
                         (common-lisp:or attribute-key common-lisp:null)
                         :accessor %attribute-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'attribute 'make-attribute))
 (common-lisp:defun make-attribute
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'attribute
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute))
   common-lisp:nil))
(common-lisp:deftype attribute-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attribute-list () '(trivial-types:proper-list attribute))
 (common-lisp:defun |make-attribute-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype attribute-value () 'common-lisp:string)
(common-lisp:deftype auto-scaling-group () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype auto-scaling-group-list ()
   '(trivial-types:proper-list auto-scaling-group))
 (common-lisp:defun |make-auto-scaling-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list auto-scaling-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype batch-describe-arn-list ()
   '(trivial-types:proper-list arn))
 (common-lisp:defun |make-batch-describe-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype batch-describe-exclusions-arn-list ()
   '(trivial-types:proper-list arn))
 (common-lisp:defun |make-batch-describe-exclusions-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bool () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass create-assessment-target-request common-lisp:nil
                       ((resource-group-arn :initarg :|resourceGroupArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-assessment-target-request-resource-group-arn
                         :initform common-lisp:nil)
                        (assessment-target-name :initarg
                         :|assessmentTargetName| :type
                         (common-lisp:or assessment-target-name
                                         common-lisp:null)
                         :accessor
                         %create-assessment-target-request-assessment-target-name
                         :initform
                         (common-lisp:error
                          ":assessmenttargetname is required"))))
 (common-lisp:export
  (common-lisp:list 'create-assessment-target-request
                    'make-create-assessment-target-request))
 (common-lisp:defun make-create-assessment-target-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-group-arn
                     assessment-target-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-assessment-target-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-target-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-target-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-target-name))
      (common-lisp:list
       (common-lisp:cons "assessmentTargetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-arn))
      (common-lisp:list
       (common-lisp:cons "resourceGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-target-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-assessment-target-response common-lisp:nil
                       ((assessment-target-arn :initarg :|assessmentTargetArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %create-assessment-target-response-assessment-target-arn
                         :initform
                         (common-lisp:error
                          ":assessmenttargetarn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-assessment-target-response
                    'make-create-assessment-target-response))
 (common-lisp:defun make-create-assessment-target-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key assessment-target-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-assessment-target-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-target-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-target-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-target-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentTargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-target-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-assessment-template-request common-lisp:nil
                       ((user-attributes-for-findings :initarg
                         :|userAttributesForFindings| :type
                         (common-lisp:or user-attribute-list common-lisp:null)
                         :accessor
                         %create-assessment-template-request-user-attributes-for-findings
                         :initform common-lisp:nil)
                        (rules-package-arns :initarg :|rulesPackageArns| :type
                         (common-lisp:or
                          assessment-template-rules-package-arn-list
                          common-lisp:null)
                         :accessor
                         %create-assessment-template-request-rules-package-arns
                         :initform
                         (common-lisp:error ":rulespackagearns is required"))
                        (duration-in-seconds :initarg :|durationInSeconds|
                         :type
                         (common-lisp:or assessment-run-duration
                                         common-lisp:null)
                         :accessor
                         %create-assessment-template-request-duration-in-seconds
                         :initform
                         (common-lisp:error ":durationinseconds is required"))
                        (assessment-template-name :initarg
                         :|assessmentTemplateName| :type
                         (common-lisp:or assessment-template-name
                                         common-lisp:null)
                         :accessor
                         %create-assessment-template-request-assessment-template-name
                         :initform
                         (common-lisp:error
                          ":assessmenttemplatename is required"))
                        (assessment-target-arn :initarg :|assessmentTargetArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %create-assessment-template-request-assessment-target-arn
                         :initform
                         (common-lisp:error
                          ":assessmenttargetarn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-assessment-template-request
                    'make-create-assessment-template-request))
 (common-lisp:defun make-create-assessment-template-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-attributes-for-findings
                     rules-package-arns duration-in-seconds
                     assessment-template-name assessment-target-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-assessment-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-target-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentTargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-template-name))
      (common-lisp:list
       (common-lisp:cons "assessmentTemplateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'duration-in-seconds))
      (common-lisp:list
       (common-lisp:cons "durationInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules-package-arns))
      (common-lisp:list
       (common-lisp:cons "rulesPackageArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'user-attributes-for-findings))
      (common-lisp:list
       (common-lisp:cons "userAttributesForFindings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-assessment-template-response common-lisp:nil
                       ((assessment-template-arn :initarg
                         :|assessmentTemplateArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-assessment-template-response-assessment-template-arn
                         :initform
                         (common-lisp:error
                          ":assessmenttemplatearn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-assessment-template-response
                    'make-create-assessment-template-response))
 (common-lisp:defun make-create-assessment-template-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key assessment-template-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-assessment-template-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-template-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-template-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-template-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentTemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-assessment-template-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-exclusions-preview-request common-lisp:nil
                       ((assessment-template-arn :initarg
                         :|assessmentTemplateArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-exclusions-preview-request-assessment-template-arn
                         :initform
                         (common-lisp:error
                          ":assessmenttemplatearn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-exclusions-preview-request
                    'make-create-exclusions-preview-request))
 (common-lisp:defun make-create-exclusions-preview-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key assessment-template-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-exclusions-preview-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-exclusions-preview-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-exclusions-preview-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-template-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentTemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-exclusions-preview-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-exclusions-preview-response common-lisp:nil
                       ((preview-token :initarg :|previewToken| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %create-exclusions-preview-response-preview-token
                         :initform
                         (common-lisp:error ":previewtoken is required"))))
 (common-lisp:export
  (common-lisp:list 'create-exclusions-preview-response
                    'make-create-exclusions-preview-response))
 (common-lisp:defun make-create-exclusions-preview-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key preview-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-exclusions-preview-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-exclusions-preview-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-exclusions-preview-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preview-token))
      (common-lisp:list
       (common-lisp:cons "previewToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-exclusions-preview-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-resource-group-request common-lisp:nil
                       ((resource-group-tags :initarg :|resourceGroupTags|
                         :type
                         (common-lisp:or resource-group-tags common-lisp:null)
                         :accessor
                         %create-resource-group-request-resource-group-tags
                         :initform
                         (common-lisp:error
                          ":resourcegrouptags is required"))))
 (common-lisp:export
  (common-lisp:list 'create-resource-group-request
                    'make-create-resource-group-request))
 (common-lisp:defun make-create-resource-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-group-tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-resource-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-tags))
      (common-lisp:list
       (common-lisp:cons "resourceGroupTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-resource-group-response common-lisp:nil
                       ((resource-group-arn :initarg :|resourceGroupArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %create-resource-group-response-resource-group-arn
                         :initform
                         (common-lisp:error ":resourcegrouparn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-resource-group-response
                    'make-create-resource-group-response))
 (common-lisp:defun make-create-resource-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-group-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-resource-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-arn))
      (common-lisp:list
       (common-lisp:cons "resourceGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-resource-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-assessment-run-request common-lisp:nil
                       ((assessment-run-arn :initarg :|assessmentRunArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %delete-assessment-run-request-assessment-run-arn
                         :initform
                         (common-lisp:error ":assessmentrunarn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-assessment-run-request
                    'make-delete-assessment-run-request))
 (common-lisp:defun make-delete-assessment-run-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key assessment-run-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-assessment-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-assessment-target-request common-lisp:nil
                       ((assessment-target-arn :initarg :|assessmentTargetArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %delete-assessment-target-request-assessment-target-arn
                         :initform
                         (common-lisp:error
                          ":assessmenttargetarn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-assessment-target-request
                    'make-delete-assessment-target-request))
 (common-lisp:defun make-delete-assessment-target-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key assessment-target-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-assessment-target-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-target-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-target-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-target-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentTargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-target-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-assessment-template-request common-lisp:nil
                       ((assessment-template-arn :initarg
                         :|assessmentTemplateArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %delete-assessment-template-request-assessment-template-arn
                         :initform
                         (common-lisp:error
                          ":assessmenttemplatearn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-assessment-template-request
                    'make-delete-assessment-template-request))
 (common-lisp:defun make-delete-assessment-template-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key assessment-template-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-assessment-template-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-template-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-template-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-template-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentTemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-assessment-template-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-assessment-runs-request common-lisp:nil
                       ((assessment-run-arns :initarg :|assessmentRunArns|
                         :type
                         (common-lisp:or batch-describe-arn-list
                                         common-lisp:null)
                         :accessor
                         %describe-assessment-runs-request-assessment-run-arns
                         :initform
                         (common-lisp:error
                          ":assessmentrunarns is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-assessment-runs-request
                    'make-describe-assessment-runs-request))
 (common-lisp:defun make-describe-assessment-runs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key assessment-run-arns)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-assessment-runs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-runs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-arns))
      (common-lisp:list
       (common-lisp:cons "assessmentRunArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-runs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-assessment-runs-response common-lisp:nil
                       ((failed-items :initarg :|failedItems| :type
                         (common-lisp:or failed-items common-lisp:null)
                         :accessor
                         %describe-assessment-runs-response-failed-items
                         :initform
                         (common-lisp:error ":faileditems is required"))
                        (assessment-runs :initarg :|assessmentRuns| :type
                         (common-lisp:or assessment-run-list common-lisp:null)
                         :accessor
                         %describe-assessment-runs-response-assessment-runs
                         :initform
                         (common-lisp:error ":assessmentruns is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-assessment-runs-response
                    'make-describe-assessment-runs-response))
 (common-lisp:defun make-describe-assessment-runs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-items assessment-runs)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-assessment-runs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-runs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-runs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-runs))
      (common-lisp:list
       (common-lisp:cons "assessmentRuns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-items))
      (common-lisp:list
       (common-lisp:cons "failedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-runs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-assessment-targets-request common-lisp:nil
                       ((assessment-target-arns :initarg
                         :|assessmentTargetArns| :type
                         (common-lisp:or batch-describe-arn-list
                                         common-lisp:null)
                         :accessor
                         %describe-assessment-targets-request-assessment-target-arns
                         :initform
                         (common-lisp:error
                          ":assessmenttargetarns is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-assessment-targets-request
                    'make-describe-assessment-targets-request))
 (common-lisp:defun make-describe-assessment-targets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key assessment-target-arns)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-assessment-targets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-targets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-targets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-target-arns))
      (common-lisp:list
       (common-lisp:cons "assessmentTargetArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-targets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-assessment-targets-response common-lisp:nil
                       ((failed-items :initarg :|failedItems| :type
                         (common-lisp:or failed-items common-lisp:null)
                         :accessor
                         %describe-assessment-targets-response-failed-items
                         :initform
                         (common-lisp:error ":faileditems is required"))
                        (assessment-targets :initarg :|assessmentTargets| :type
                         (common-lisp:or assessment-target-list
                                         common-lisp:null)
                         :accessor
                         %describe-assessment-targets-response-assessment-targets
                         :initform
                         (common-lisp:error
                          ":assessmenttargets is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-assessment-targets-response
                    'make-describe-assessment-targets-response))
 (common-lisp:defun make-describe-assessment-targets-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-items assessment-targets)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-assessment-targets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-targets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-targets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-targets))
      (common-lisp:list
       (common-lisp:cons "assessmentTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-items))
      (common-lisp:list
       (common-lisp:cons "failedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-targets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-assessment-templates-request common-lisp:nil
                       ((assessment-template-arns :initarg
                         :|assessmentTemplateArns| :type
                         (common-lisp:or batch-describe-arn-list
                                         common-lisp:null)
                         :accessor
                         %describe-assessment-templates-request-assessment-template-arns
                         :initform
                         (common-lisp:error
                          ":assessmenttemplatearns is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-assessment-templates-request
                    'make-describe-assessment-templates-request))
 (common-lisp:defun make-describe-assessment-templates-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key assessment-template-arns)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-assessment-templates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-templates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-template-arns))
      (common-lisp:list
       (common-lisp:cons "assessmentTemplateArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-assessment-templates-response common-lisp:nil
                       ((failed-items :initarg :|failedItems| :type
                         (common-lisp:or failed-items common-lisp:null)
                         :accessor
                         %describe-assessment-templates-response-failed-items
                         :initform
                         (common-lisp:error ":faileditems is required"))
                        (assessment-templates :initarg :|assessmentTemplates|
                         :type
                         (common-lisp:or assessment-template-list
                                         common-lisp:null)
                         :accessor
                         %describe-assessment-templates-response-assessment-templates
                         :initform
                         (common-lisp:error
                          ":assessmenttemplates is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-assessment-templates-response
                    'make-describe-assessment-templates-response))
 (common-lisp:defun make-describe-assessment-templates-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-items assessment-templates)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-assessment-templates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-templates))
      (common-lisp:list
       (common-lisp:cons "assessmentTemplates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-items))
      (common-lisp:list
       (common-lisp:cons "failedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-assessment-templates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-cross-account-access-role-response
                       common-lisp:nil
                       ((registered-at :initarg :|registeredAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %describe-cross-account-access-role-response-registered-at
                         :initform
                         (common-lisp:error ":registeredat is required"))
                        (valid :initarg :|valid| :type
                         (common-lisp:or bool common-lisp:null) :accessor
                         %describe-cross-account-access-role-response-valid
                         :initform (common-lisp:error ":valid is required"))
                        (role-arn :initarg :|roleArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-cross-account-access-role-response-role-arn
                         :initform
                         (common-lisp:error ":rolearn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-cross-account-access-role-response
                    'make-describe-cross-account-access-role-response))
 (common-lisp:defun make-describe-cross-account-access-role-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key registered-at valid role-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-cross-account-access-role-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-cross-account-access-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-cross-account-access-role-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid))
      (common-lisp:list
       (common-lisp:cons "valid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registered-at))
      (common-lisp:list
       (common-lisp:cons "registeredAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-cross-account-access-role-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-exclusions-request common-lisp:nil
                       ((locale :initarg :|locale| :type
                         (common-lisp:or locale common-lisp:null) :accessor
                         %describe-exclusions-request-locale :initform
                         common-lisp:nil)
                        (exclusion-arns :initarg :|exclusionArns| :type
                         (common-lisp:or batch-describe-exclusions-arn-list
                                         common-lisp:null)
                         :accessor %describe-exclusions-request-exclusion-arns
                         :initform
                         (common-lisp:error ":exclusionarns is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-exclusions-request
                    'make-describe-exclusions-request))
 (common-lisp:defun make-describe-exclusions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key locale exclusion-arns)
   (common-lisp:apply #'common-lisp:make-instance 'describe-exclusions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-exclusions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-exclusions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusion-arns))
      (common-lisp:list
       (common-lisp:cons "exclusionArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-exclusions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-exclusions-response common-lisp:nil
                       ((failed-items :initarg :|failedItems| :type
                         (common-lisp:or failed-items common-lisp:null)
                         :accessor %describe-exclusions-response-failed-items
                         :initform
                         (common-lisp:error ":faileditems is required"))
                        (exclusions :initarg :|exclusions| :type
                         (common-lisp:or exclusion-map common-lisp:null)
                         :accessor %describe-exclusions-response-exclusions
                         :initform
                         (common-lisp:error ":exclusions is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-exclusions-response
                    'make-describe-exclusions-response))
 (common-lisp:defun make-describe-exclusions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-items exclusions)
   (common-lisp:apply #'common-lisp:make-instance 'describe-exclusions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-exclusions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-exclusions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusions))
      (common-lisp:list
       (common-lisp:cons "exclusions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-items))
      (common-lisp:list
       (common-lisp:cons "failedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-exclusions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-findings-request common-lisp:nil
                       ((locale :initarg :|locale| :type
                         (common-lisp:or locale common-lisp:null) :accessor
                         %describe-findings-request-locale :initform
                         common-lisp:nil)
                        (finding-arns :initarg :|findingArns| :type
                         (common-lisp:or batch-describe-arn-list
                                         common-lisp:null)
                         :accessor %describe-findings-request-finding-arns
                         :initform
                         (common-lisp:error ":findingarns is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-findings-request
                    'make-describe-findings-request))
 (common-lisp:defun make-describe-findings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key locale finding-arns)
   (common-lisp:apply #'common-lisp:make-instance 'describe-findings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-arns))
      (common-lisp:list
       (common-lisp:cons "findingArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-findings-response common-lisp:nil
                       ((failed-items :initarg :|failedItems| :type
                         (common-lisp:or failed-items common-lisp:null)
                         :accessor %describe-findings-response-failed-items
                         :initform
                         (common-lisp:error ":faileditems is required"))
                        (findings :initarg :|findings| :type
                         (common-lisp:or finding-list common-lisp:null)
                         :accessor %describe-findings-response-findings
                         :initform
                         (common-lisp:error ":findings is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-findings-response
                    'make-describe-findings-response))
 (common-lisp:defun make-describe-findings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-items findings)
   (common-lisp:apply #'common-lisp:make-instance 'describe-findings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'findings))
      (common-lisp:list
       (common-lisp:cons "findings"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-items))
      (common-lisp:list
       (common-lisp:cons "failedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-findings-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-resource-groups-request common-lisp:nil
                       ((resource-group-arns :initarg :|resourceGroupArns|
                         :type
                         (common-lisp:or batch-describe-arn-list
                                         common-lisp:null)
                         :accessor
                         %describe-resource-groups-request-resource-group-arns
                         :initform
                         (common-lisp:error
                          ":resourcegrouparns is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-resource-groups-request
                    'make-describe-resource-groups-request))
 (common-lisp:defun make-describe-resource-groups-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-group-arns)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-resource-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-arns))
      (common-lisp:list
       (common-lisp:cons "resourceGroupArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-resource-groups-response common-lisp:nil
                       ((failed-items :initarg :|failedItems| :type
                         (common-lisp:or failed-items common-lisp:null)
                         :accessor
                         %describe-resource-groups-response-failed-items
                         :initform
                         (common-lisp:error ":faileditems is required"))
                        (resource-groups :initarg :|resourceGroups| :type
                         (common-lisp:or resource-group-list common-lisp:null)
                         :accessor
                         %describe-resource-groups-response-resource-groups
                         :initform
                         (common-lisp:error ":resourcegroups is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-resource-groups-response
                    'make-describe-resource-groups-response))
 (common-lisp:defun make-describe-resource-groups-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-items resource-groups)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-resource-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-groups))
      (common-lisp:list
       (common-lisp:cons "resourceGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-items))
      (common-lisp:list
       (common-lisp:cons "failedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-resource-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-rules-packages-request common-lisp:nil
                       ((locale :initarg :|locale| :type
                         (common-lisp:or locale common-lisp:null) :accessor
                         %describe-rules-packages-request-locale :initform
                         common-lisp:nil)
                        (rules-package-arns :initarg :|rulesPackageArns| :type
                         (common-lisp:or batch-describe-arn-list
                                         common-lisp:null)
                         :accessor
                         %describe-rules-packages-request-rules-package-arns
                         :initform
                         (common-lisp:error ":rulespackagearns is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-rules-packages-request
                    'make-describe-rules-packages-request))
 (common-lisp:defun make-describe-rules-packages-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key locale rules-package-arns)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-rules-packages-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-rules-packages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-rules-packages-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules-package-arns))
      (common-lisp:list
       (common-lisp:cons "rulesPackageArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-rules-packages-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-rules-packages-response common-lisp:nil
                       ((failed-items :initarg :|failedItems| :type
                         (common-lisp:or failed-items common-lisp:null)
                         :accessor
                         %describe-rules-packages-response-failed-items
                         :initform
                         (common-lisp:error ":faileditems is required"))
                        (rules-packages :initarg :|rulesPackages| :type
                         (common-lisp:or rules-package-list common-lisp:null)
                         :accessor
                         %describe-rules-packages-response-rules-packages
                         :initform
                         (common-lisp:error ":rulespackages is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-rules-packages-response
                    'make-describe-rules-packages-response))
 (common-lisp:defun make-describe-rules-packages-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-items rules-packages)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-rules-packages-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-rules-packages-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-rules-packages-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules-packages))
      (common-lisp:list
       (common-lisp:cons "rulesPackages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-items))
      (common-lisp:list
       (common-lisp:cons "failedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-rules-packages-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass duration-range common-lisp:nil
                       ((max-seconds :initarg :|maxSeconds| :type
                         (common-lisp:or assessment-run-duration
                                         common-lisp:null)
                         :accessor %duration-range-max-seconds :initform
                         common-lisp:nil)
                        (min-seconds :initarg :|minSeconds| :type
                         (common-lisp:or assessment-run-duration
                                         common-lisp:null)
                         :accessor %duration-range-min-seconds :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'duration-range 'make-duration-range))
 (common-lisp:defun make-duration-range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-seconds min-seconds)
   (common-lisp:apply #'common-lisp:make-instance 'duration-range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input duration-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input duration-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-seconds))
      (common-lisp:list
       (common-lisp:cons "minSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-seconds))
      (common-lisp:list
       (common-lisp:cons "maxSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input duration-range))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass event-subscription common-lisp:nil
                       ((subscribed-at :initarg :|subscribedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %event-subscription-subscribed-at :initform
                         (common-lisp:error ":subscribedat is required"))
                        (event :initarg :|event| :type
                         (common-lisp:or inspector-event common-lisp:null)
                         :accessor %event-subscription-event :initform
                         (common-lisp:error ":event is required"))))
 (common-lisp:export
  (common-lisp:list 'event-subscription 'make-event-subscription))
 (common-lisp:defun make-event-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key subscribed-at event)
   (common-lisp:apply #'common-lisp:make-instance 'event-subscription
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input event-subscription))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input event-subscription))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscribed-at))
      (common-lisp:list
       (common-lisp:cons "subscribedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input event-subscription))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-subscription-list ()
   '(trivial-types:proper-list event-subscription))
 (common-lisp:defun |make-event-subscription-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-subscription))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass exclusion common-lisp:nil
                       ((attributes :initarg :|attributes| :type
                         (common-lisp:or attribute-list common-lisp:null)
                         :accessor %exclusion-attributes :initform
                         common-lisp:nil)
                        (scopes :initarg :|scopes| :type
                         (common-lisp:or scope-list common-lisp:null) :accessor
                         %exclusion-scopes :initform
                         (common-lisp:error ":scopes is required"))
                        (recommendation :initarg :|recommendation| :type
                         (common-lisp:or text common-lisp:null) :accessor
                         %exclusion-recommendation :initform
                         (common-lisp:error ":recommendation is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or text common-lisp:null) :accessor
                         %exclusion-description :initform
                         (common-lisp:error ":description is required"))
                        (title :initarg :|title| :type
                         (common-lisp:or text common-lisp:null) :accessor
                         %exclusion-title :initform
                         (common-lisp:error ":title is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %exclusion-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export (common-lisp:list 'exclusion 'make-exclusion))
 (common-lisp:defun make-exclusion
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attributes scopes recommendation
                     description title arn)
   (common-lisp:apply #'common-lisp:make-instance 'exclusion
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input exclusion))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input exclusion))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation))
      (common-lisp:list
       (common-lisp:cons "recommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scopes))
      (common-lisp:list
       (common-lisp:cons "scopes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input exclusion))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype exclusion-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-exclusion-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass exclusion-preview common-lisp:nil
                       ((attributes :initarg :|attributes| :type
                         (common-lisp:or attribute-list common-lisp:null)
                         :accessor %exclusion-preview-attributes :initform
                         common-lisp:nil)
                        (scopes :initarg :|scopes| :type
                         (common-lisp:or scope-list common-lisp:null) :accessor
                         %exclusion-preview-scopes :initform
                         (common-lisp:error ":scopes is required"))
                        (recommendation :initarg :|recommendation| :type
                         (common-lisp:or text common-lisp:null) :accessor
                         %exclusion-preview-recommendation :initform
                         (common-lisp:error ":recommendation is required"))
                        (description :initarg :|description| :type
                         (common-lisp:or text common-lisp:null) :accessor
                         %exclusion-preview-description :initform
                         (common-lisp:error ":description is required"))
                        (title :initarg :|title| :type
                         (common-lisp:or text common-lisp:null) :accessor
                         %exclusion-preview-title :initform
                         (common-lisp:error ":title is required"))))
 (common-lisp:export
  (common-lisp:list 'exclusion-preview 'make-exclusion-preview))
 (common-lisp:defun make-exclusion-preview
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attributes scopes recommendation
                     description title)
   (common-lisp:apply #'common-lisp:make-instance 'exclusion-preview
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input exclusion-preview))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input exclusion-preview))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation))
      (common-lisp:list
       (common-lisp:cons "recommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scopes))
      (common-lisp:list
       (common-lisp:cons "scopes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input exclusion-preview))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype exclusion-preview-list ()
   '(trivial-types:proper-list exclusion-preview))
 (common-lisp:defun |make-exclusion-preview-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list exclusion-preview))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass failed-item-details common-lisp:nil
                       ((retryable :initarg :|retryable| :type
                         (common-lisp:or bool common-lisp:null) :accessor
                         %failed-item-details-retryable :initform
                         (common-lisp:error ":retryable is required"))
                        (failure-code :initarg :|failureCode| :type
                         (common-lisp:or failed-item-error-code
                                         common-lisp:null)
                         :accessor %failed-item-details-failure-code :initform
                         (common-lisp:error ":failurecode is required"))))
 (common-lisp:export
  (common-lisp:list 'failed-item-details 'make-failed-item-details))
 (common-lisp:defun make-failed-item-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key retryable failure-code)
   (common-lisp:apply #'common-lisp:make-instance 'failed-item-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input failed-item-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input failed-item-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "failureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retryable))
      (common-lisp:list
       (common-lisp:cons "retryable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input failed-item-details))
   common-lisp:nil))
(common-lisp:deftype failed-item-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype failed-items () 'common-lisp:hash-table)
 (common-lisp:defun |make-failed-items| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype filter-rules-package-arn-list ()
   '(trivial-types:proper-list arn))
 (common-lisp:defun |make-filter-rules-package-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass finding common-lisp:nil
                       ((updated-at :initarg :|updatedAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %finding-updated-at :initform
                         (common-lisp:error ":updatedat is required"))
                        (created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %finding-created-at :initform
                         (common-lisp:error ":createdat is required"))
                        (user-attributes :initarg :|userAttributes| :type
                         (common-lisp:or user-attribute-list common-lisp:null)
                         :accessor %finding-user-attributes :initform
                         (common-lisp:error ":userattributes is required"))
                        (attributes :initarg :|attributes| :type
                         (common-lisp:or attribute-list common-lisp:null)
                         :accessor %finding-attributes :initform
                         (common-lisp:error ":attributes is required"))
                        (indicator-of-compromise :initarg
                         :|indicatorOfCompromise| :type
                         (common-lisp:or bool common-lisp:null) :accessor
                         %finding-indicator-of-compromise :initform
                         common-lisp:nil)
                        (confidence :initarg :|confidence| :type
                         (common-lisp:or ioc-confidence common-lisp:null)
                         :accessor %finding-confidence :initform
                         common-lisp:nil)
                        (numeric-severity :initarg :|numericSeverity| :type
                         (common-lisp:or numeric-severity common-lisp:null)
                         :accessor %finding-numeric-severity :initform
                         common-lisp:nil)
                        (severity :initarg :|severity| :type
                         (common-lisp:or severity common-lisp:null) :accessor
                         %finding-severity :initform common-lisp:nil)
                        (recommendation :initarg :|recommendation| :type
                         (common-lisp:or text common-lisp:null) :accessor
                         %finding-recommendation :initform common-lisp:nil)
                        (description :initarg :|description| :type
                         (common-lisp:or text common-lisp:null) :accessor
                         %finding-description :initform common-lisp:nil)
                        (title :initarg :|title| :type
                         (common-lisp:or text common-lisp:null) :accessor
                         %finding-title :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or finding-id common-lisp:null) :accessor
                         %finding-id :initform common-lisp:nil)
                        (asset-attributes :initarg :|assetAttributes| :type
                         (common-lisp:or asset-attributes common-lisp:null)
                         :accessor %finding-asset-attributes :initform
                         common-lisp:nil)
                        (asset-type :initarg :|assetType| :type
                         (common-lisp:or asset-type common-lisp:null) :accessor
                         %finding-asset-type :initform common-lisp:nil)
                        (service-attributes :initarg :|serviceAttributes| :type
                         (common-lisp:or inspector-service-attributes
                                         common-lisp:null)
                         :accessor %finding-service-attributes :initform
                         common-lisp:nil)
                        (service :initarg :|service| :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor %finding-service :initform common-lisp:nil)
                        (schema-version :initarg :|schemaVersion| :type
                         (common-lisp:or numeric-version common-lisp:null)
                         :accessor %finding-schema-version :initform
                         common-lisp:nil)
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %finding-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export (common-lisp:list 'finding 'make-finding))
 (common-lisp:defun make-finding
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at created-at user-attributes
                     attributes indicator-of-compromise confidence
                     numeric-severity severity recommendation description title
                     id asset-attributes asset-type service-attributes service
                     schema-version arn)
   (common-lisp:apply #'common-lisp:make-instance 'finding
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version))
      (common-lisp:list
       (common-lisp:cons "schemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-attributes))
      (common-lisp:list
       (common-lisp:cons "serviceAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-type))
      (common-lisp:list
       (common-lisp:cons "assetType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-attributes))
      (common-lisp:list
       (common-lisp:cons "assetAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'recommendation))
      (common-lisp:list
       (common-lisp:cons "recommendation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severity))
      (common-lisp:list
       (common-lisp:cons "severity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'numeric-severity))
      (common-lisp:list
       (common-lisp:cons "numericSeverity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confidence))
      (common-lisp:list
       (common-lisp:cons "confidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'indicator-of-compromise))
      (common-lisp:list
       (common-lisp:cons "indicatorOfCompromise"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-attributes))
      (common-lisp:list
       (common-lisp:cons "userAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "updatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding))
   common-lisp:nil))
(common-lisp:deftype finding-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass finding-filter common-lisp:nil
                       ((creation-time-range :initarg :|creationTimeRange|
                         :type
                         (common-lisp:or timestamp-range common-lisp:null)
                         :accessor %finding-filter-creation-time-range
                         :initform common-lisp:nil)
                        (user-attributes :initarg :|userAttributes| :type
                         (common-lisp:or attribute-list common-lisp:null)
                         :accessor %finding-filter-user-attributes :initform
                         common-lisp:nil)
                        (attributes :initarg :|attributes| :type
                         (common-lisp:or attribute-list common-lisp:null)
                         :accessor %finding-filter-attributes :initform
                         common-lisp:nil)
                        (rules-package-arns :initarg :|rulesPackageArns| :type
                         (common-lisp:or filter-rules-package-arn-list
                                         common-lisp:null)
                         :accessor %finding-filter-rules-package-arns :initform
                         common-lisp:nil)
                        (severities :initarg :|severities| :type
                         (common-lisp:or severity-list common-lisp:null)
                         :accessor %finding-filter-severities :initform
                         common-lisp:nil)
                        (rule-names :initarg :|ruleNames| :type
                         (common-lisp:or rule-name-list common-lisp:null)
                         :accessor %finding-filter-rule-names :initform
                         common-lisp:nil)
                        (auto-scaling-groups :initarg :|autoScalingGroups|
                         :type
                         (common-lisp:or auto-scaling-group-list
                                         common-lisp:null)
                         :accessor %finding-filter-auto-scaling-groups
                         :initform common-lisp:nil)
                        (agent-ids :initarg :|agentIds| :type
                         (common-lisp:or agent-id-list common-lisp:null)
                         :accessor %finding-filter-agent-ids :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'finding-filter 'make-finding-filter))
 (common-lisp:defun make-finding-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key creation-time-range user-attributes
                     attributes rules-package-arns severities rule-names
                     auto-scaling-groups agent-ids)
   (common-lisp:apply #'common-lisp:make-instance 'finding-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input finding-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input finding-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-ids))
      (common-lisp:list
       (common-lisp:cons "agentIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-scaling-groups))
      (common-lisp:list
       (common-lisp:cons "autoScalingGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rule-names))
      (common-lisp:list
       (common-lisp:cons "ruleNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'severities))
      (common-lisp:list
       (common-lisp:cons "severities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules-package-arns))
      (common-lisp:list
       (common-lisp:cons "rulesPackageArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attributes))
      (common-lisp:list
       (common-lisp:cons "attributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-attributes))
      (common-lisp:list
       (common-lisp:cons "userAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time-range))
      (common-lisp:list
       (common-lisp:cons "creationTimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input finding-filter))
   common-lisp:nil))
(common-lisp:deftype finding-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype finding-list () '(trivial-types:proper-list finding))
 (common-lisp:defun |make-finding-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list finding))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-assessment-report-request common-lisp:nil
                       ((report-type :initarg :|reportType| :type
                         (common-lisp:or report-type common-lisp:null)
                         :accessor %get-assessment-report-request-report-type
                         :initform
                         (common-lisp:error ":reporttype is required"))
                        (report-file-format :initarg :|reportFileFormat| :type
                         (common-lisp:or report-file-format common-lisp:null)
                         :accessor
                         %get-assessment-report-request-report-file-format
                         :initform
                         (common-lisp:error ":reportfileformat is required"))
                        (assessment-run-arn :initarg :|assessmentRunArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-assessment-report-request-assessment-run-arn
                         :initform
                         (common-lisp:error ":assessmentrunarn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-assessment-report-request
                    'make-get-assessment-report-request))
 (common-lisp:defun make-get-assessment-report-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key report-type report-file-format
                     assessment-run-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-assessment-report-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-report-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-report-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-file-format))
      (common-lisp:list
       (common-lisp:cons "reportFileFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-type))
      (common-lisp:list
       (common-lisp:cons "reportType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-report-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-assessment-report-response common-lisp:nil
                       ((url :initarg :|url| :type
                         (common-lisp:or url common-lisp:null) :accessor
                         %get-assessment-report-response-url :initform
                         common-lisp:nil)
                        (status :initarg :|status| :type
                         (common-lisp:or report-status common-lisp:null)
                         :accessor %get-assessment-report-response-status
                         :initform (common-lisp:error ":status is required"))))
 (common-lisp:export
  (common-lisp:list 'get-assessment-report-response
                    'make-get-assessment-report-response))
 (common-lisp:defun make-get-assessment-report-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key url status)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-assessment-report-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-report-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-report-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-assessment-report-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-exclusions-preview-request common-lisp:nil
                       ((locale :initarg :|locale| :type
                         (common-lisp:or locale common-lisp:null) :accessor
                         %get-exclusions-preview-request-locale :initform
                         common-lisp:nil)
                        (max-results :initarg :|maxResults| :type
                         (common-lisp:or list-max-results common-lisp:null)
                         :accessor %get-exclusions-preview-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %get-exclusions-preview-request-next-token
                         :initform common-lisp:nil)
                        (preview-token :initarg :|previewToken| :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %get-exclusions-preview-request-preview-token
                         :initform
                         (common-lisp:error ":previewtoken is required"))
                        (assessment-template-arn :initarg
                         :|assessmentTemplateArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-exclusions-preview-request-assessment-template-arn
                         :initform
                         (common-lisp:error
                          ":assessmenttemplatearn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-exclusions-preview-request
                    'make-get-exclusions-preview-request))
 (common-lisp:defun make-get-exclusions-preview-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key locale max-results next-token
                     preview-token assessment-template-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-exclusions-preview-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-exclusions-preview-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-exclusions-preview-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-template-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentTemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preview-token))
      (common-lisp:list
       (common-lisp:cons "previewToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale))
      (common-lisp:list
       (common-lisp:cons "locale"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-exclusions-preview-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-exclusions-preview-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %get-exclusions-preview-response-next-token
                         :initform common-lisp:nil)
                        (exclusion-previews :initarg :|exclusionPreviews| :type
                         (common-lisp:or exclusion-preview-list
                                         common-lisp:null)
                         :accessor
                         %get-exclusions-preview-response-exclusion-previews
                         :initform common-lisp:nil)
                        (preview-status :initarg :|previewStatus| :type
                         (common-lisp:or preview-status common-lisp:null)
                         :accessor
                         %get-exclusions-preview-response-preview-status
                         :initform
                         (common-lisp:error ":previewstatus is required"))))
 (common-lisp:export
  (common-lisp:list 'get-exclusions-preview-response
                    'make-get-exclusions-preview-response))
 (common-lisp:defun make-get-exclusions-preview-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token exclusion-previews
                     preview-status)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-exclusions-preview-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-exclusions-preview-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-exclusions-preview-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preview-status))
      (common-lisp:list
       (common-lisp:cons "previewStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusion-previews))
      (common-lisp:list
       (common-lisp:cons "exclusionPreviews"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-exclusions-preview-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-telemetry-metadata-request common-lisp:nil
                       ((assessment-run-arn :initarg :|assessmentRunArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %get-telemetry-metadata-request-assessment-run-arn
                         :initform
                         (common-lisp:error ":assessmentrunarn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-telemetry-metadata-request
                    'make-get-telemetry-metadata-request))
 (common-lisp:defun make-get-telemetry-metadata-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key assessment-run-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-telemetry-metadata-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-telemetry-metadata-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-telemetry-metadata-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-telemetry-metadata-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-telemetry-metadata-response common-lisp:nil
                       ((telemetry-metadata :initarg :|telemetryMetadata| :type
                         (common-lisp:or telemetry-metadata-list
                                         common-lisp:null)
                         :accessor
                         %get-telemetry-metadata-response-telemetry-metadata
                         :initform
                         (common-lisp:error
                          ":telemetrymetadata is required"))))
 (common-lisp:export
  (common-lisp:list 'get-telemetry-metadata-response
                    'make-get-telemetry-metadata-response))
 (common-lisp:defun make-get-telemetry-metadata-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key telemetry-metadata)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-telemetry-metadata-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-telemetry-metadata-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-telemetry-metadata-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'telemetry-metadata))
      (common-lisp:list
       (common-lisp:cons "telemetryMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-telemetry-metadata-response))
   common-lisp:nil))
(common-lisp:deftype hostname () 'common-lisp:string)
(common-lisp:deftype inspector-event () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass inspector-service-attributes common-lisp:nil
                       ((rules-package-arn :initarg :|rulesPackageArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %inspector-service-attributes-rules-package-arn
                         :initform common-lisp:nil)
                        (assessment-run-arn :initarg :|assessmentRunArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %inspector-service-attributes-assessment-run-arn
                         :initform common-lisp:nil)
                        (schema-version :initarg :|schemaVersion| :type
                         (common-lisp:or numeric-version common-lisp:null)
                         :accessor %inspector-service-attributes-schema-version
                         :initform
                         (common-lisp:error ":schemaversion is required"))))
 (common-lisp:export
  (common-lisp:list 'inspector-service-attributes
                    'make-inspector-service-attributes))
 (common-lisp:defun make-inspector-service-attributes
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rules-package-arn assessment-run-arn
                     schema-version)
   (common-lisp:apply #'common-lisp:make-instance 'inspector-service-attributes
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          inspector-service-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          inspector-service-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'schema-version))
      (common-lisp:list
       (common-lisp:cons "schemaVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules-package-arn))
      (common-lisp:list
       (common-lisp:cons "rulesPackageArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          inspector-service-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-exception
     (inspector-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-exception-message)
      (can-retry :initarg :|canRetry| :initform common-lisp:nil :reader
       internal-exception-can-retry)))
 (common-lisp:export
  (common-lisp:list 'internal-exception 'internal-exception-message
                    'internal-exception-can-retry)))
(common-lisp:deftype invalid-cross-account-role-error-code ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition invalid-cross-account-role-exception
     (inspector-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-cross-account-role-exception-message)
      (error-code :initarg :|errorCode| :initform common-lisp:nil :reader
       invalid-cross-account-role-exception-error-code)
      (can-retry :initarg :|canRetry| :initform common-lisp:nil :reader
       invalid-cross-account-role-exception-can-retry)))
 (common-lisp:export
  (common-lisp:list 'invalid-cross-account-role-exception
                    'invalid-cross-account-role-exception-message
                    'invalid-cross-account-role-exception-error-code
                    'invalid-cross-account-role-exception-can-retry)))
(common-lisp:deftype invalid-input-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition invalid-input-exception
     (inspector-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       invalid-input-exception-message)
      (error-code :initarg :|errorCode| :initform common-lisp:nil :reader
       invalid-input-exception-error-code)
      (can-retry :initarg :|canRetry| :initform common-lisp:nil :reader
       invalid-input-exception-can-retry)))
 (common-lisp:export
  (common-lisp:list 'invalid-input-exception 'invalid-input-exception-message
                    'invalid-input-exception-error-code
                    'invalid-input-exception-can-retry)))
(common-lisp:deftype ioc-confidence () 'common-lisp:integer)
(common-lisp:deftype ipv4address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ipv4address-list ()
   '(trivial-types:proper-list ipv4address))
 (common-lisp:defun |make-ipv4address-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ipv4address))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype ipv6addresses () '(trivial-types:proper-list text))
 (common-lisp:defun |make-ipv6addresses|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list text))
   aws-sdk/generator/shape::members))
(common-lisp:deftype kernel-version () 'common-lisp:string)
(common-lisp:deftype limit-exceeded-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (inspector-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       limit-exceeded-exception-message)
      (error-code :initarg :|errorCode| :initform common-lisp:nil :reader
       limit-exceeded-exception-error-code)
      (can-retry :initarg :|canRetry| :initform common-lisp:nil :reader
       limit-exceeded-exception-can-retry)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception 'limit-exceeded-exception-message
                    'limit-exceeded-exception-error-code
                    'limit-exceeded-exception-can-retry)))
(common-lisp:progn
 (common-lisp:defclass list-assessment-run-agents-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or list-max-results common-lisp:null)
                         :accessor
                         %list-assessment-run-agents-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-assessment-run-agents-request-next-token
                         :initform common-lisp:nil)
                        (filter :initarg :|filter| :type
                         (common-lisp:or agent-filter common-lisp:null)
                         :accessor %list-assessment-run-agents-request-filter
                         :initform common-lisp:nil)
                        (assessment-run-arn :initarg :|assessmentRunArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-assessment-run-agents-request-assessment-run-arn
                         :initform
                         (common-lisp:error ":assessmentrunarn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-assessment-run-agents-request
                    'make-list-assessment-run-agents-request))
 (common-lisp:defun make-list-assessment-run-agents-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filter
                     assessment-run-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-assessment-run-agents-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-run-agents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-run-agents-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-run-agents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-assessment-run-agents-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-assessment-run-agents-response-next-token
                         :initform common-lisp:nil)
                        (assessment-run-agents :initarg :|assessmentRunAgents|
                         :type
                         (common-lisp:or assessment-run-agent-list
                                         common-lisp:null)
                         :accessor
                         %list-assessment-run-agents-response-assessment-run-agents
                         :initform
                         (common-lisp:error
                          ":assessmentrunagents is required"))))
 (common-lisp:export
  (common-lisp:list 'list-assessment-run-agents-response
                    'make-list-assessment-run-agents-response))
 (common-lisp:defun make-list-assessment-run-agents-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token assessment-run-agents)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-assessment-run-agents-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-run-agents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-run-agents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-run-agents))
      (common-lisp:list
       (common-lisp:cons "assessmentRunAgents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-run-agents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-assessment-runs-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or list-max-results common-lisp:null)
                         :accessor %list-assessment-runs-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-assessment-runs-request-next-token
                         :initform common-lisp:nil)
                        (filter :initarg :|filter| :type
                         (common-lisp:or assessment-run-filter
                                         common-lisp:null)
                         :accessor %list-assessment-runs-request-filter
                         :initform common-lisp:nil)
                        (assessment-template-arns :initarg
                         :|assessmentTemplateArns| :type
                         (common-lisp:or list-parent-arn-list common-lisp:null)
                         :accessor
                         %list-assessment-runs-request-assessment-template-arns
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-assessment-runs-request
                    'make-list-assessment-runs-request))
 (common-lisp:defun make-list-assessment-runs-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filter
                     assessment-template-arns)
   (common-lisp:apply #'common-lisp:make-instance 'list-assessment-runs-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-runs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-runs-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-template-arns))
      (common-lisp:list
       (common-lisp:cons "assessmentTemplateArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-runs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-assessment-runs-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-assessment-runs-response-next-token
                         :initform common-lisp:nil)
                        (assessment-run-arns :initarg :|assessmentRunArns|
                         :type
                         (common-lisp:or list-returned-arn-list
                                         common-lisp:null)
                         :accessor
                         %list-assessment-runs-response-assessment-run-arns
                         :initform
                         (common-lisp:error
                          ":assessmentrunarns is required"))))
 (common-lisp:export
  (common-lisp:list 'list-assessment-runs-response
                    'make-list-assessment-runs-response))
 (common-lisp:defun make-list-assessment-runs-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token assessment-run-arns)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-assessment-runs-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-runs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-runs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-arns))
      (common-lisp:list
       (common-lisp:cons "assessmentRunArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-runs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-assessment-targets-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or list-max-results common-lisp:null)
                         :accessor %list-assessment-targets-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-assessment-targets-request-next-token
                         :initform common-lisp:nil)
                        (filter :initarg :|filter| :type
                         (common-lisp:or assessment-target-filter
                                         common-lisp:null)
                         :accessor %list-assessment-targets-request-filter
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-assessment-targets-request
                    'make-list-assessment-targets-request))
 (common-lisp:defun make-list-assessment-targets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filter)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-assessment-targets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-targets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-targets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-targets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-assessment-targets-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-assessment-targets-response-next-token
                         :initform common-lisp:nil)
                        (assessment-target-arns :initarg
                         :|assessmentTargetArns| :type
                         (common-lisp:or list-returned-arn-list
                                         common-lisp:null)
                         :accessor
                         %list-assessment-targets-response-assessment-target-arns
                         :initform
                         (common-lisp:error
                          ":assessmenttargetarns is required"))))
 (common-lisp:export
  (common-lisp:list 'list-assessment-targets-response
                    'make-list-assessment-targets-response))
 (common-lisp:defun make-list-assessment-targets-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token assessment-target-arns)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-assessment-targets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-targets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-targets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-target-arns))
      (common-lisp:list
       (common-lisp:cons "assessmentTargetArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-targets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-assessment-templates-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or list-max-results common-lisp:null)
                         :accessor
                         %list-assessment-templates-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-assessment-templates-request-next-token
                         :initform common-lisp:nil)
                        (filter :initarg :|filter| :type
                         (common-lisp:or assessment-template-filter
                                         common-lisp:null)
                         :accessor %list-assessment-templates-request-filter
                         :initform common-lisp:nil)
                        (assessment-target-arns :initarg
                         :|assessmentTargetArns| :type
                         (common-lisp:or list-parent-arn-list common-lisp:null)
                         :accessor
                         %list-assessment-templates-request-assessment-target-arns
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-assessment-templates-request
                    'make-list-assessment-templates-request))
 (common-lisp:defun make-list-assessment-templates-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filter
                     assessment-target-arns)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-assessment-templates-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-templates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-templates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-target-arns))
      (common-lisp:list
       (common-lisp:cons "assessmentTargetArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-templates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-assessment-templates-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-assessment-templates-response-next-token
                         :initform common-lisp:nil)
                        (assessment-template-arns :initarg
                         :|assessmentTemplateArns| :type
                         (common-lisp:or list-returned-arn-list
                                         common-lisp:null)
                         :accessor
                         %list-assessment-templates-response-assessment-template-arns
                         :initform
                         (common-lisp:error
                          ":assessmenttemplatearns is required"))))
 (common-lisp:export
  (common-lisp:list 'list-assessment-templates-response
                    'make-list-assessment-templates-response))
 (common-lisp:defun make-list-assessment-templates-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token assessment-template-arns)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-assessment-templates-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-templates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-templates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-template-arns))
      (common-lisp:list
       (common-lisp:cons "assessmentTemplateArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-assessment-templates-response))
   common-lisp:nil))
(common-lisp:deftype list-event-subscriptions-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-event-subscriptions-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or list-event-subscriptions-max-results
                                         common-lisp:null)
                         :accessor
                         %list-event-subscriptions-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-event-subscriptions-request-next-token
                         :initform common-lisp:nil)
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-event-subscriptions-request-resource-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-event-subscriptions-request
                    'make-list-event-subscriptions-request))
 (common-lisp:defun make-list-event-subscriptions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-event-subscriptions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-subscriptions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-subscriptions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-subscriptions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-event-subscriptions-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor
                         %list-event-subscriptions-response-next-token
                         :initform common-lisp:nil)
                        (subscriptions :initarg :|subscriptions| :type
                         (common-lisp:or subscription-list common-lisp:null)
                         :accessor
                         %list-event-subscriptions-response-subscriptions
                         :initform
                         (common-lisp:error ":subscriptions is required"))))
 (common-lisp:export
  (common-lisp:list 'list-event-subscriptions-response
                    'make-list-event-subscriptions-response))
 (common-lisp:defun make-list-event-subscriptions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token subscriptions)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-event-subscriptions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-subscriptions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-subscriptions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subscriptions))
      (common-lisp:list
       (common-lisp:cons "subscriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-subscriptions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-exclusions-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or list-max-results common-lisp:null)
                         :accessor %list-exclusions-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-exclusions-request-next-token
                         :initform common-lisp:nil)
                        (assessment-run-arn :initarg :|assessmentRunArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-exclusions-request-assessment-run-arn :initform
                         (common-lisp:error ":assessmentrunarn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-exclusions-request 'make-list-exclusions-request))
 (common-lisp:defun make-list-exclusions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token
                     assessment-run-arn)
   (common-lisp:apply #'common-lisp:make-instance 'list-exclusions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-exclusions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-exclusions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-exclusions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-exclusions-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-exclusions-response-next-token
                         :initform common-lisp:nil)
                        (exclusion-arns :initarg :|exclusionArns| :type
                         (common-lisp:or list-returned-arn-list
                                         common-lisp:null)
                         :accessor %list-exclusions-response-exclusion-arns
                         :initform
                         (common-lisp:error ":exclusionarns is required"))))
 (common-lisp:export
  (common-lisp:list 'list-exclusions-response 'make-list-exclusions-response))
 (common-lisp:defun make-list-exclusions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token exclusion-arns)
   (common-lisp:apply #'common-lisp:make-instance 'list-exclusions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-exclusions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-exclusions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusion-arns))
      (common-lisp:list
       (common-lisp:cons "exclusionArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-exclusions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-findings-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or list-max-results common-lisp:null)
                         :accessor %list-findings-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-findings-request-next-token :initform
                         common-lisp:nil)
                        (filter :initarg :|filter| :type
                         (common-lisp:or finding-filter common-lisp:null)
                         :accessor %list-findings-request-filter :initform
                         common-lisp:nil)
                        (assessment-run-arns :initarg :|assessmentRunArns|
                         :type
                         (common-lisp:or list-parent-arn-list common-lisp:null)
                         :accessor %list-findings-request-assessment-run-arns
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-findings-request 'make-list-findings-request))
 (common-lisp:defun make-list-findings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token filter
                     assessment-run-arns)
   (common-lisp:apply #'common-lisp:make-instance 'list-findings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-arns))
      (common-lisp:list
       (common-lisp:cons "assessmentRunArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-findings-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-findings-response-next-token :initform
                         common-lisp:nil)
                        (finding-arns :initarg :|findingArns| :type
                         (common-lisp:or list-returned-arn-list
                                         common-lisp:null)
                         :accessor %list-findings-response-finding-arns
                         :initform
                         (common-lisp:error ":findingarns is required"))))
 (common-lisp:export
  (common-lisp:list 'list-findings-response 'make-list-findings-response))
 (common-lisp:defun make-list-findings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token finding-arns)
   (common-lisp:apply #'common-lisp:make-instance 'list-findings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-arns))
      (common-lisp:list
       (common-lisp:cons "findingArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-findings-response))
   common-lisp:nil))
(common-lisp:deftype list-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype list-parent-arn-list () '(trivial-types:proper-list arn))
 (common-lisp:defun |make-list-parent-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype list-returned-arn-list ()
   '(trivial-types:proper-list arn))
 (common-lisp:defun |make-list-returned-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass list-rules-packages-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or list-max-results common-lisp:null)
                         :accessor %list-rules-packages-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-rules-packages-request-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-rules-packages-request
                    'make-list-rules-packages-request))
 (common-lisp:defun make-list-rules-packages-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-rules-packages-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-rules-packages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-rules-packages-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-rules-packages-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-rules-packages-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %list-rules-packages-response-next-token
                         :initform common-lisp:nil)
                        (rules-package-arns :initarg :|rulesPackageArns| :type
                         (common-lisp:or list-returned-arn-list
                                         common-lisp:null)
                         :accessor
                         %list-rules-packages-response-rules-package-arns
                         :initform
                         (common-lisp:error ":rulespackagearns is required"))))
 (common-lisp:export
  (common-lisp:list 'list-rules-packages-response
                    'make-list-rules-packages-response))
 (common-lisp:defun make-list-rules-packages-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token rules-package-arns)
   (common-lisp:apply #'common-lisp:make-instance 'list-rules-packages-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-rules-packages-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-rules-packages-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rules-package-arns))
      (common-lisp:list
       (common-lisp:cons "rulesPackageArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-rules-packages-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-tags-for-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         (common-lisp:error ":tags is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype locale () 'common-lisp:string)
(common-lisp:deftype long () 'common-lisp:integer)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:deftype message-type () 'common-lisp:string)
(common-lisp:deftype name-pattern () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass network-interface common-lisp:nil
                       ((security-groups :initarg :|securityGroups| :type
                         (common-lisp:or security-groups common-lisp:null)
                         :accessor %network-interface-security-groups :initform
                         common-lisp:nil)
                        (ipv6addresses :initarg :|ipv6Addresses| :type
                         (common-lisp:or ipv6addresses common-lisp:null)
                         :accessor %network-interface-ipv6addresses :initform
                         common-lisp:nil)
                        (public-ip :initarg :|publicIp| :type
                         (common-lisp:or text common-lisp:null) :accessor
                         %network-interface-public-ip :initform
                         common-lisp:nil)
                        (public-dns-name :initarg :|publicDnsName| :type
                         (common-lisp:or text common-lisp:null) :accessor
                         %network-interface-public-dns-name :initform
                         common-lisp:nil)
                        (private-ip-addresses :initarg :|privateIpAddresses|
                         :type
                         (common-lisp:or private-ip-addresses common-lisp:null)
                         :accessor %network-interface-private-ip-addresses
                         :initform common-lisp:nil)
                        (private-ip-address :initarg :|privateIpAddress| :type
                         (common-lisp:or text common-lisp:null) :accessor
                         %network-interface-private-ip-address :initform
                         common-lisp:nil)
                        (private-dns-name :initarg :|privateDnsName| :type
                         (common-lisp:or text common-lisp:null) :accessor
                         %network-interface-private-dns-name :initform
                         common-lisp:nil)
                        (vpc-id :initarg :|vpcId| :type
                         (common-lisp:or text common-lisp:null) :accessor
                         %network-interface-vpc-id :initform common-lisp:nil)
                        (subnet-id :initarg :|subnetId| :type
                         (common-lisp:or text common-lisp:null) :accessor
                         %network-interface-subnet-id :initform
                         common-lisp:nil)
                        (network-interface-id :initarg :|networkInterfaceId|
                         :type (common-lisp:or text common-lisp:null) :accessor
                         %network-interface-network-interface-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-interface 'make-network-interface))
 (common-lisp:defun make-network-interface
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key security-groups ipv6addresses public-ip
                     public-dns-name private-ip-addresses private-ip-address
                     private-dns-name vpc-id subnet-id network-interface-id)
   (common-lisp:apply #'common-lisp:make-instance 'network-interface
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input network-interface))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input network-interface))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-interface-id))
      (common-lisp:list
       (common-lisp:cons "networkInterfaceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnet-id))
      (common-lisp:list
       (common-lisp:cons "subnetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "vpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-dns-name))
      (common-lisp:list
       (common-lisp:cons "privateDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "privateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'private-ip-addresses))
      (common-lisp:list
       (common-lisp:cons "privateIpAddresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-dns-name))
      (common-lisp:list
       (common-lisp:cons "publicDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'public-ip))
      (common-lisp:list
       (common-lisp:cons "publicIp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ipv6addresses))
      (common-lisp:list
       (common-lisp:cons "ipv6Addresses"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "securityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input network-interface))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype network-interfaces ()
   '(trivial-types:proper-list network-interface))
 (common-lisp:defun |make-network-interfaces|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list network-interface))
   aws-sdk/generator/shape::members))
(common-lisp:deftype no-such-entity-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition no-such-entity-exception
     (inspector-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       no-such-entity-exception-message)
      (error-code :initarg :|errorCode| :initform common-lisp:nil :reader
       no-such-entity-exception-error-code)
      (can-retry :initarg :|canRetry| :initform common-lisp:nil :reader
       no-such-entity-exception-can-retry)))
 (common-lisp:export
  (common-lisp:list 'no-such-entity-exception 'no-such-entity-exception-message
                    'no-such-entity-exception-error-code
                    'no-such-entity-exception-can-retry)))
(common-lisp:deftype numeric-severity () 'common-lisp:double-float)
(common-lisp:deftype numeric-version () 'common-lisp:integer)
(common-lisp:deftype operating-system () 'common-lisp:string)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:deftype preview-agents-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass preview-agents-request common-lisp:nil
                       ((max-results :initarg :|maxResults| :type
                         (common-lisp:or preview-agents-max-results
                                         common-lisp:null)
                         :accessor %preview-agents-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %preview-agents-request-next-token :initform
                         common-lisp:nil)
                        (preview-agents-arn :initarg :|previewAgentsArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %preview-agents-request-preview-agents-arn :initform
                         (common-lisp:error ":previewagentsarn is required"))))
 (common-lisp:export
  (common-lisp:list 'preview-agents-request 'make-preview-agents-request))
 (common-lisp:defun make-preview-agents-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token
                     preview-agents-arn)
   (common-lisp:apply #'common-lisp:make-instance 'preview-agents-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          preview-agents-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          preview-agents-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'preview-agents-arn))
      (common-lisp:list
       (common-lisp:cons "previewAgentsArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          preview-agents-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass preview-agents-response common-lisp:nil
                       ((next-token :initarg :|nextToken| :type
                         (common-lisp:or pagination-token common-lisp:null)
                         :accessor %preview-agents-response-next-token
                         :initform common-lisp:nil)
                        (agent-previews :initarg :|agentPreviews| :type
                         (common-lisp:or agent-preview-list common-lisp:null)
                         :accessor %preview-agents-response-agent-previews
                         :initform
                         (common-lisp:error ":agentpreviews is required"))))
 (common-lisp:export
  (common-lisp:list 'preview-agents-response 'make-preview-agents-response))
 (common-lisp:defun make-preview-agents-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token agent-previews)
   (common-lisp:apply #'common-lisp:make-instance 'preview-agents-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          preview-agents-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          preview-agents-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'agent-previews))
      (common-lisp:list
       (common-lisp:cons "agentPreviews"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          preview-agents-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition preview-generation-in-progress-exception
     (inspector-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       preview-generation-in-progress-exception-message)))
 (common-lisp:export
  (common-lisp:list 'preview-generation-in-progress-exception
                    'preview-generation-in-progress-exception-message)))
(common-lisp:deftype preview-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass private-ip common-lisp:nil
                       ((private-ip-address :initarg :|privateIpAddress| :type
                         (common-lisp:or text common-lisp:null) :accessor
                         %private-ip-private-ip-address :initform
                         common-lisp:nil)
                        (private-dns-name :initarg :|privateDnsName| :type
                         (common-lisp:or text common-lisp:null) :accessor
                         %private-ip-private-dns-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'private-ip 'make-private-ip))
 (common-lisp:defun make-private-ip
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key private-ip-address private-dns-name)
   (common-lisp:apply #'common-lisp:make-instance 'private-ip
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input private-ip))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input private-ip))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-dns-name))
      (common-lisp:list
       (common-lisp:cons "privateDnsName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-ip-address))
      (common-lisp:list
       (common-lisp:cons "privateIpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input private-ip))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype private-ip-addresses ()
   '(trivial-types:proper-list private-ip))
 (common-lisp:defun |make-private-ip-addresses|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list private-ip))
   aws-sdk/generator/shape::members))
(common-lisp:deftype provider-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass register-cross-account-access-role-request
                       common-lisp:nil
                       ((role-arn :initarg :|roleArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %register-cross-account-access-role-request-role-arn
                         :initform
                         (common-lisp:error ":rolearn is required"))))
 (common-lisp:export
  (common-lisp:list 'register-cross-account-access-role-request
                    'make-register-cross-account-access-role-request))
 (common-lisp:defun make-register-cross-account-access-role-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'register-cross-account-access-role-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          register-cross-account-access-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          register-cross-account-access-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          register-cross-account-access-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-attributes-from-findings-request common-lisp:nil
                       ((attribute-keys :initarg :|attributeKeys| :type
                         (common-lisp:or user-attribute-key-list
                                         common-lisp:null)
                         :accessor
                         %remove-attributes-from-findings-request-attribute-keys
                         :initform
                         (common-lisp:error ":attributekeys is required"))
                        (finding-arns :initarg :|findingArns| :type
                         (common-lisp:or add-remove-attributes-finding-arn-list
                                         common-lisp:null)
                         :accessor
                         %remove-attributes-from-findings-request-finding-arns
                         :initform
                         (common-lisp:error ":findingarns is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-attributes-from-findings-request
                    'make-remove-attributes-from-findings-request))
 (common-lisp:defun make-remove-attributes-from-findings-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key attribute-keys finding-arns)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-attributes-from-findings-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-attributes-from-findings-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-attributes-from-findings-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'finding-arns))
      (common-lisp:list
       (common-lisp:cons "findingArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute-keys))
      (common-lisp:list
       (common-lisp:cons "attributeKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-attributes-from-findings-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass remove-attributes-from-findings-response common-lisp:nil
                       ((failed-items :initarg :|failedItems| :type
                         (common-lisp:or failed-items common-lisp:null)
                         :accessor
                         %remove-attributes-from-findings-response-failed-items
                         :initform
                         (common-lisp:error ":faileditems is required"))))
 (common-lisp:export
  (common-lisp:list 'remove-attributes-from-findings-response
                    'make-remove-attributes-from-findings-response))
 (common-lisp:defun make-remove-attributes-from-findings-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-items)
   (common-lisp:apply #'common-lisp:make-instance
                      'remove-attributes-from-findings-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-attributes-from-findings-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-attributes-from-findings-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failed-items))
      (common-lisp:list
       (common-lisp:cons "failedItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-attributes-from-findings-response))
   common-lisp:nil))
(common-lisp:deftype report-file-format () 'common-lisp:string)
(common-lisp:deftype report-status () 'common-lisp:string)
(common-lisp:deftype report-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass resource-group common-lisp:nil
                       ((created-at :initarg :|createdAt| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %resource-group-created-at :initform
                         (common-lisp:error ":createdat is required"))
                        (tags :initarg :|tags| :type
                         (common-lisp:or resource-group-tags common-lisp:null)
                         :accessor %resource-group-tags :initform
                         (common-lisp:error ":tags is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %resource-group-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export (common-lisp:list 'resource-group 'make-resource-group))
 (common-lisp:defun make-resource-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-at tags arn)
   (common-lisp:apply #'common-lisp:make-instance 'resource-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "createdAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-group-list ()
   '(trivial-types:proper-list resource-group))
 (common-lisp:defun |make-resource-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass resource-group-tag common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %resource-group-tag-value :initform common-lisp:nil)
                        (key :initarg :|key| :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %resource-group-tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export
  (common-lisp:list 'resource-group-tag 'make-resource-group-tag))
 (common-lisp:defun make-resource-group-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'resource-group-tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource-group-tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource-group-tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource-group-tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-group-tags ()
   '(trivial-types:proper-list resource-group-tag))
 (common-lisp:defun |make-resource-group-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-group-tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype rule-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype rule-name-list () '(trivial-types:proper-list rule-name))
 (common-lisp:defun |make-rule-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rule-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass rules-package common-lisp:nil
                       ((description :initarg :|description| :type
                         (common-lisp:or text common-lisp:null) :accessor
                         %rules-package-description :initform common-lisp:nil)
                        (provider :initarg :|provider| :type
                         (common-lisp:or provider-name common-lisp:null)
                         :accessor %rules-package-provider :initform
                         (common-lisp:error ":provider is required"))
                        (version :initarg :|version| :type
                         (common-lisp:or version common-lisp:null) :accessor
                         %rules-package-version :initform
                         (common-lisp:error ":version is required"))
                        (name :initarg :|name| :type
                         (common-lisp:or rules-package-name common-lisp:null)
                         :accessor %rules-package-name :initform
                         (common-lisp:error ":name is required"))
                        (arn :initarg :|arn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %rules-package-arn :initform
                         (common-lisp:error ":arn is required"))))
 (common-lisp:export (common-lisp:list 'rules-package 'make-rules-package))
 (common-lisp:defun make-rules-package
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description provider version name arn)
   (common-lisp:apply #'common-lisp:make-instance 'rules-package
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rules-package))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rules-package))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rules-package))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype rules-package-list ()
   '(trivial-types:proper-list rules-package))
 (common-lisp:defun |make-rules-package-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rules-package))
   aws-sdk/generator/shape::members))
(common-lisp:deftype rules-package-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass scope common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or scope-value common-lisp:null)
                         :accessor %scope-value :initform common-lisp:nil)
                        (key :initarg :|key| :type
                         (common-lisp:or scope-type common-lisp:null) :accessor
                         %scope-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'scope 'make-scope))
 (common-lisp:defun make-scope
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'scope
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input scope))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input scope))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input scope))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype scope-list () '(trivial-types:proper-list scope))
 (common-lisp:defun |make-scope-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list scope))
   aws-sdk/generator/shape::members))
(common-lisp:deftype scope-type () 'common-lisp:string)
(common-lisp:deftype scope-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass security-group common-lisp:nil
                       ((group-id :initarg :|groupId| :type
                         (common-lisp:or text common-lisp:null) :accessor
                         %security-group-group-id :initform common-lisp:nil)
                        (group-name :initarg :|groupName| :type
                         (common-lisp:or text common-lisp:null) :accessor
                         %security-group-group-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'security-group 'make-security-group))
 (common-lisp:defun make-security-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key group-id group-name)
   (common-lisp:apply #'common-lisp:make-instance 'security-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input security-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input security-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "groupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "groupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input security-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype security-groups ()
   '(trivial-types:proper-list security-group))
 (common-lisp:defun |make-security-groups|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list security-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype service-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-temporarily-unavailable-exception
     (inspector-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-temporarily-unavailable-exception-message)
      (can-retry :initarg :|canRetry| :initform common-lisp:nil :reader
       service-temporarily-unavailable-exception-can-retry)))
 (common-lisp:export
  (common-lisp:list 'service-temporarily-unavailable-exception
                    'service-temporarily-unavailable-exception-message
                    'service-temporarily-unavailable-exception-can-retry)))
(common-lisp:progn
 (common-lisp:defclass set-tags-for-resource-request common-lisp:nil
                       ((tags :initarg :|tags| :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %set-tags-for-resource-request-tags :initform
                         common-lisp:nil)
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %set-tags-for-resource-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'set-tags-for-resource-request
                    'make-set-tags-for-resource-request))
 (common-lisp:defun make-set-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'set-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:deftype severity () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype severity-list () '(trivial-types:proper-list severity))
 (common-lisp:defun |make-severity-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list severity))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass start-assessment-run-request common-lisp:nil
                       ((assessment-run-name :initarg :|assessmentRunName|
                         :type
                         (common-lisp:or assessment-run-name common-lisp:null)
                         :accessor
                         %start-assessment-run-request-assessment-run-name
                         :initform common-lisp:nil)
                        (assessment-template-arn :initarg
                         :|assessmentTemplateArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %start-assessment-run-request-assessment-template-arn
                         :initform
                         (common-lisp:error
                          ":assessmenttemplatearn is required"))))
 (common-lisp:export
  (common-lisp:list 'start-assessment-run-request
                    'make-start-assessment-run-request))
 (common-lisp:defun make-start-assessment-run-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key assessment-run-name
                     assessment-template-arn)
   (common-lisp:apply #'common-lisp:make-instance 'start-assessment-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-template-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentTemplateArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-name))
      (common-lisp:list
       (common-lisp:cons "assessmentRunName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-assessment-run-response common-lisp:nil
                       ((assessment-run-arn :initarg :|assessmentRunArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %start-assessment-run-response-assessment-run-arn
                         :initform
                         (common-lisp:error ":assessmentrunarn is required"))))
 (common-lisp:export
  (common-lisp:list 'start-assessment-run-response
                    'make-start-assessment-run-response))
 (common-lisp:defun make-start-assessment-run-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key assessment-run-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-assessment-run-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-run-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-run-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-assessment-run-response))
   common-lisp:nil))
(common-lisp:deftype stop-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass stop-assessment-run-request common-lisp:nil
                       ((stop-action :initarg :|stopAction| :type
                         (common-lisp:or stop-action common-lisp:null)
                         :accessor %stop-assessment-run-request-stop-action
                         :initform common-lisp:nil)
                        (assessment-run-arn :initarg :|assessmentRunArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %stop-assessment-run-request-assessment-run-arn
                         :initform
                         (common-lisp:error ":assessmentrunarn is required"))))
 (common-lisp:export
  (common-lisp:list 'stop-assessment-run-request
                    'make-stop-assessment-run-request))
 (common-lisp:defun make-stop-assessment-run-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key stop-action assessment-run-arn)
   (common-lisp:apply #'common-lisp:make-instance 'stop-assessment-run-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stop-assessment-run-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stop-assessment-run-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assessment-run-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentRunArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stop-action))
      (common-lisp:list
       (common-lisp:cons "stopAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stop-assessment-run-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass subscribe-to-event-request common-lisp:nil
                       ((topic-arn :initarg :|topicArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %subscribe-to-event-request-topic-arn :initform
                         (common-lisp:error ":topicarn is required"))
                        (event :initarg :|event| :type
                         (common-lisp:or inspector-event common-lisp:null)
                         :accessor %subscribe-to-event-request-event :initform
                         (common-lisp:error ":event is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %subscribe-to-event-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'subscribe-to-event-request
                    'make-subscribe-to-event-request))
 (common-lisp:defun make-subscribe-to-event-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key topic-arn event resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'subscribe-to-event-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          subscribe-to-event-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          subscribe-to-event-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "topicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          subscribe-to-event-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass subscription common-lisp:nil
                       ((event-subscriptions :initarg :|eventSubscriptions|
                         :type
                         (common-lisp:or event-subscription-list
                                         common-lisp:null)
                         :accessor %subscription-event-subscriptions :initform
                         (common-lisp:error ":eventsubscriptions is required"))
                        (topic-arn :initarg :|topicArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %subscription-topic-arn :initform
                         (common-lisp:error ":topicarn is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %subscription-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export (common-lisp:list 'subscription 'make-subscription))
 (common-lisp:defun make-subscription
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-subscriptions topic-arn
                     resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'subscription
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input subscription))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input subscription))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "topicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-subscriptions))
      (common-lisp:list
       (common-lisp:cons "eventSubscriptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input subscription))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype subscription-list ()
   '(trivial-types:proper-list subscription))
 (common-lisp:defun |make-subscription-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list subscription))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :|value| :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform common-lisp:nil)
                        (key :initarg :|key| :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tags|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass telemetry-metadata common-lisp:nil
                       ((data-size :initarg :|dataSize| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %telemetry-metadata-data-size :initform
                         common-lisp:nil)
                        (count :initarg :|count| :type
                         (common-lisp:or long common-lisp:null) :accessor
                         %telemetry-metadata-count :initform
                         (common-lisp:error ":count is required"))
                        (message-type :initarg :|messageType| :type
                         (common-lisp:or message-type common-lisp:null)
                         :accessor %telemetry-metadata-message-type :initform
                         (common-lisp:error ":messagetype is required"))))
 (common-lisp:export
  (common-lisp:list 'telemetry-metadata 'make-telemetry-metadata))
 (common-lisp:defun make-telemetry-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key data-size count message-type)
   (common-lisp:apply #'common-lisp:make-instance 'telemetry-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input telemetry-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input telemetry-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "messageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-size))
      (common-lisp:list
       (common-lisp:cons "dataSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input telemetry-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype telemetry-metadata-list ()
   '(trivial-types:proper-list telemetry-metadata))
 (common-lisp:defun |make-telemetry-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list telemetry-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype text () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass timestamp-range common-lisp:nil
                       ((end-date :initarg :|endDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %timestamp-range-end-date :initform common-lisp:nil)
                        (begin-date :initarg :|beginDate| :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %timestamp-range-begin-date :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'timestamp-range 'make-timestamp-range))
 (common-lisp:defun make-timestamp-range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key end-date begin-date)
   (common-lisp:apply #'common-lisp:make-instance 'timestamp-range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input timestamp-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input timestamp-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'begin-date))
      (common-lisp:list
       (common-lisp:cons "beginDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date))
      (common-lisp:list
       (common-lisp:cons "endDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input timestamp-range))
   common-lisp:nil))
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass unsubscribe-from-event-request common-lisp:nil
                       ((topic-arn :initarg :|topicArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %unsubscribe-from-event-request-topic-arn :initform
                         (common-lisp:error ":topicarn is required"))
                        (event :initarg :|event| :type
                         (common-lisp:or inspector-event common-lisp:null)
                         :accessor %unsubscribe-from-event-request-event
                         :initform (common-lisp:error ":event is required"))
                        (resource-arn :initarg :|resourceArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %unsubscribe-from-event-request-resource-arn :initform
                         (common-lisp:error ":resourcearn is required"))))
 (common-lisp:export
  (common-lisp:list 'unsubscribe-from-event-request
                    'make-unsubscribe-from-event-request))
 (common-lisp:defun make-unsubscribe-from-event-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key topic-arn event resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'unsubscribe-from-event-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          unsubscribe-from-event-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          unsubscribe-from-event-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "resourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic-arn))
      (common-lisp:list
       (common-lisp:cons "topicArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          unsubscribe-from-event-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition unsupported-feature-exception
     (inspector-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       unsupported-feature-exception-message)
      (can-retry :initarg :|canRetry| :initform common-lisp:nil :reader
       unsupported-feature-exception-can-retry)))
 (common-lisp:export
  (common-lisp:list 'unsupported-feature-exception
                    'unsupported-feature-exception-message
                    'unsupported-feature-exception-can-retry)))
(common-lisp:progn
 (common-lisp:defclass update-assessment-target-request common-lisp:nil
                       ((resource-group-arn :initarg :|resourceGroupArn| :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %update-assessment-target-request-resource-group-arn
                         :initform common-lisp:nil)
                        (assessment-target-name :initarg
                         :|assessmentTargetName| :type
                         (common-lisp:or assessment-target-name
                                         common-lisp:null)
                         :accessor
                         %update-assessment-target-request-assessment-target-name
                         :initform
                         (common-lisp:error
                          ":assessmenttargetname is required"))
                        (assessment-target-arn :initarg :|assessmentTargetArn|
                         :type (common-lisp:or arn common-lisp:null) :accessor
                         %update-assessment-target-request-assessment-target-arn
                         :initform
                         (common-lisp:error
                          ":assessmenttargetarn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-assessment-target-request
                    'make-update-assessment-target-request))
 (common-lisp:defun make-update-assessment-target-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-group-arn assessment-target-name
                     assessment-target-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-assessment-target-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-target-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-target-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-target-arn))
      (common-lisp:list
       (common-lisp:cons "assessmentTargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assessment-target-name))
      (common-lisp:list
       (common-lisp:cons "assessmentTargetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-group-arn))
      (common-lisp:list
       (common-lisp:cons "resourceGroupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assessment-target-request))
   common-lisp:nil))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype user-attribute-key-list ()
   '(trivial-types:proper-list attribute-key))
 (common-lisp:defun |make-user-attribute-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype user-attribute-list ()
   '(trivial-types:proper-list attribute))
 (common-lisp:defun |make-user-attribute-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun add-attributes-to-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-arns attributes)
   (common-lisp:declare (common-lisp:ignorable finding-arns attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-attributes-to-findings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AddAttributesToFindings"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-attributes-to-findings))
(common-lisp:progn
 (common-lisp:defun create-assessment-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-target-name
                     resource-group-arn)
   (common-lisp:declare
    (common-lisp:ignorable assessment-target-name resource-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-assessment-target-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateAssessmentTarget"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-assessment-target))
(common-lisp:progn
 (common-lisp:defun create-assessment-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-target-arn
                     assessment-template-name duration-in-seconds
                     rules-package-arns user-attributes-for-findings)
   (common-lisp:declare
    (common-lisp:ignorable assessment-target-arn assessment-template-name
     duration-in-seconds rules-package-arns user-attributes-for-findings))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-assessment-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateAssessmentTemplate"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-assessment-template))
(common-lisp:progn
 (common-lisp:defun create-exclusions-preview
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-template-arn)
   (common-lisp:declare (common-lisp:ignorable assessment-template-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-exclusions-preview-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateExclusionsPreview"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-exclusions-preview))
(common-lisp:progn
 (common-lisp:defun create-resource-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-tags)
   (common-lisp:declare (common-lisp:ignorable resource-group-tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-resource-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateResourceGroup"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-resource-group))
(common-lisp:progn
 (common-lisp:defun delete-assessment-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-run-arn)
   (common-lisp:declare (common-lisp:ignorable assessment-run-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-assessment-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteAssessmentRun"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-assessment-run))
(common-lisp:progn
 (common-lisp:defun delete-assessment-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-target-arn)
   (common-lisp:declare (common-lisp:ignorable assessment-target-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-assessment-target-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteAssessmentTarget"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-assessment-target))
(common-lisp:progn
 (common-lisp:defun delete-assessment-template
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-template-arn)
   (common-lisp:declare (common-lisp:ignorable assessment-template-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-assessment-template-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteAssessmentTemplate"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-assessment-template))
(common-lisp:progn
 (common-lisp:defun describe-assessment-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-run-arns)
   (common-lisp:declare (common-lisp:ignorable assessment-run-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-assessment-runs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeAssessmentRuns"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-assessment-runs))
(common-lisp:progn
 (common-lisp:defun describe-assessment-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-target-arns)
   (common-lisp:declare (common-lisp:ignorable assessment-target-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-assessment-targets-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeAssessmentTargets"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-assessment-targets))
(common-lisp:progn
 (common-lisp:defun describe-assessment-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-template-arns)
   (common-lisp:declare (common-lisp:ignorable assessment-template-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-assessment-templates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeAssessmentTemplates"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-assessment-templates))
(common-lisp:progn
 (common-lisp:defun describe-cross-account-access-role ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'inspector-request :method "POST" :path "/"
                                :protocol :json :operation
                                "DescribeCrossAccountAccessRole" :params
                                `(("Action" ,@"DescribeCrossAccountAccessRole")
                                  ("Version" ,@"2016-02-16"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-cross-account-access-role))
(common-lisp:progn
 (common-lisp:defun describe-exclusions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key exclusion-arns locale)
   (common-lisp:declare (common-lisp:ignorable exclusion-arns locale))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-exclusions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeExclusions"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-exclusions))
(common-lisp:progn
 (common-lisp:defun describe-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-arns locale)
   (common-lisp:declare (common-lisp:ignorable finding-arns locale))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeFindings"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-findings))
(common-lisp:progn
 (common-lisp:defun describe-resource-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-group-arns)
   (common-lisp:declare (common-lisp:ignorable resource-group-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-resource-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeResourceGroups"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-resource-groups))
(common-lisp:progn
 (common-lisp:defun describe-rules-packages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rules-package-arns locale)
   (common-lisp:declare (common-lisp:ignorable rules-package-arns locale))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-rules-packages-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeRulesPackages"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-rules-packages))
(common-lisp:progn
 (common-lisp:defun get-assessment-report
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-run-arn report-file-format
                     report-type)
   (common-lisp:declare
    (common-lisp:ignorable assessment-run-arn report-file-format report-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-assessment-report-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetAssessmentReport"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-assessment-report))
(common-lisp:progn
 (common-lisp:defun get-exclusions-preview
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-template-arn preview-token
                     next-token max-results locale)
   (common-lisp:declare
    (common-lisp:ignorable assessment-template-arn preview-token next-token
     max-results locale))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-exclusions-preview-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetExclusionsPreview"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-exclusions-preview))
(common-lisp:progn
 (common-lisp:defun get-telemetry-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-run-arn)
   (common-lisp:declare (common-lisp:ignorable assessment-run-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-telemetry-metadata-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "GetTelemetryMetadata"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-telemetry-metadata))
(common-lisp:progn
 (common-lisp:defun list-assessment-run-agents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-run-arn filter next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable assessment-run-arn filter next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-assessment-run-agents-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListAssessmentRunAgents"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-assessment-run-agents))
(common-lisp:progn
 (common-lisp:defun list-assessment-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-template-arns filter
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable assessment-template-arns filter next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-assessment-runs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListAssessmentRuns"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-assessment-runs))
(common-lisp:progn
 (common-lisp:defun list-assessment-targets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter next-token max-results)
   (common-lisp:declare (common-lisp:ignorable filter next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-assessment-targets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListAssessmentTargets"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-assessment-targets))
(common-lisp:progn
 (common-lisp:defun list-assessment-templates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-target-arns filter next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable assessment-target-arns filter next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-assessment-templates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListAssessmentTemplates"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-assessment-templates))
(common-lisp:progn
 (common-lisp:defun list-event-subscriptions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable resource-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-event-subscriptions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListEventSubscriptions"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-event-subscriptions))
(common-lisp:progn
 (common-lisp:defun list-exclusions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-run-arn next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable assessment-run-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-exclusions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListExclusions"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-exclusions))
(common-lisp:progn
 (common-lisp:defun list-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-run-arns filter next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable assessment-run-arns filter next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-findings-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListFindings"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-findings))
(common-lisp:progn
 (common-lisp:defun list-rules-packages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-rules-packages-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListRulesPackages"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-rules-packages))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTagsForResource"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun preview-agents
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key preview-agents-arn next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable preview-agents-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-preview-agents-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PreviewAgents"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'preview-agents))
(common-lisp:progn
 (common-lisp:defun register-cross-account-access-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-arn)
   (common-lisp:declare (common-lisp:ignorable role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-register-cross-account-access-role-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RegisterCrossAccountAccessRole"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'register-cross-account-access-role))
(common-lisp:progn
 (common-lisp:defun remove-attributes-from-findings
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key finding-arns attribute-keys)
   (common-lisp:declare (common-lisp:ignorable finding-arns attribute-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-attributes-from-findings-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "RemoveAttributesFromFindings"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-attributes-from-findings))
(common-lisp:progn
 (common-lisp:defun set-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "SetTagsForResource"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'set-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun start-assessment-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-template-arn
                     assessment-run-name)
   (common-lisp:declare
    (common-lisp:ignorable assessment-template-arn assessment-run-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-assessment-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartAssessmentRun"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-assessment-run))
(common-lisp:progn
 (common-lisp:defun stop-assessment-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-run-arn stop-action)
   (common-lisp:declare (common-lisp:ignorable assessment-run-arn stop-action))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-assessment-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StopAssessmentRun"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stop-assessment-run))
(common-lisp:progn
 (common-lisp:defun subscribe-to-event
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn event topic-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn event topic-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-subscribe-to-event-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "SubscribeToEvent"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'subscribe-to-event))
(common-lisp:progn
 (common-lisp:defun unsubscribe-from-event
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn event topic-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn event topic-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-unsubscribe-from-event-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UnsubscribeFromEvent"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'unsubscribe-from-event))
(common-lisp:progn
 (common-lisp:defun update-assessment-target
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assessment-target-arn
                     assessment-target-name resource-group-arn)
   (common-lisp:declare
    (common-lisp:ignorable assessment-target-arn assessment-target-name
     resource-group-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-assessment-target-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'inspector-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateAssessmentTarget"
                                                        "2016-02-16"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-assessment-target))
