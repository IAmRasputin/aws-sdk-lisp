;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/lexv2-runtime/api
  (:use)
  (:nicknames #:aws/lexv2-runtime)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/lexv2-runtime/api)
(common-lisp:progn
 (common-lisp:defclass lexv2-runtime-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "lexv2-runtime" :protocol
                        :rest-json))
 (common-lisp:export 'lexv2-runtime-request))
(common-lisp:progn
 (common-lisp:define-condition lexv2-runtime-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'lexv2-runtime-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("BadGatewayException" . bad-gateway-exception)
    ("ConflictException" . conflict-exception)
    ("DependencyFailedException" . dependency-failed-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (lexv2-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (active-context (:copier common-lisp:nil)
      (:conc-name "struct-shape-active-context-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or active-context-name common-lisp:null))
   (time-to-live (common-lisp:error ":timetolive is required") :type
    (common-lisp:or active-context-time-to-live common-lisp:null))
   (context-attributes (common-lisp:error ":contextattributes is required")
    :type (common-lisp:or active-context-parameters-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'active-context 'make-active-context))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input active-context))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input active-context))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-to-live))
      (common-lisp:list
       (common-lisp:cons "timeToLive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-attributes))
      (common-lisp:list
       (common-lisp:cons "contextAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input active-context))
   common-lisp:nil))
(common-lisp:deftype active-context-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype active-context-parameters-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-active-context-parameters-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (active-context-time-to-live (:copier common-lisp:nil)
      (:conc-name "struct-shape-active-context-time-to-live-"))
   (time-to-live-in-seconds
    (common-lisp:error ":timetoliveinseconds is required") :type
    (common-lisp:or active-context-time-to-live-in-seconds common-lisp:null))
   (turns-to-live (common-lisp:error ":turnstolive is required") :type
    (common-lisp:or active-context-turns-to-live common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'active-context-time-to-live
                    'make-active-context-time-to-live))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          active-context-time-to-live))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          active-context-time-to-live))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-to-live-in-seconds))
      (common-lisp:list
       (common-lisp:cons "timeToLiveInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'turns-to-live))
      (common-lisp:list
       (common-lisp:cons "turnsToLive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          active-context-time-to-live))
   common-lisp:nil))
(common-lisp:deftype active-context-time-to-live-in-seconds ()
  'common-lisp:integer)
(common-lisp:deftype active-context-turns-to-live () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype active-contexts-list ()
   '(trivial-types:proper-list active-context))
 (common-lisp:defun |make-active-contexts-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list active-context))
   aws-sdk/generator/shape::members))
(common-lisp:deftype attachment-title () 'common-lisp:string)
(common-lisp:deftype attachment-url () 'common-lisp:string)
(common-lisp:deftype audio-chunk ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defstruct
     (audio-input-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-audio-input-event-"))
   (audio-chunk common-lisp:nil :type
    (common-lisp:or audio-chunk common-lisp:null))
   (content-type (common-lisp:error ":contenttype is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (event-id common-lisp:nil :type (common-lisp:or event-id common-lisp:null))
   (client-timestamp-millis common-lisp:nil :type
    (common-lisp:or epoch-millis common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'audio-input-event 'make-audio-input-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-input-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-input-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-chunk))
      (common-lisp:list
       (common-lisp:cons "audioChunk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-timestamp-millis))
      (common-lisp:list
       (common-lisp:cons "clientTimestampMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-input-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (audio-response-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-audio-response-event-"))
   (audio-chunk common-lisp:nil :type
    (common-lisp:or audio-chunk common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (event-id common-lisp:nil :type (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'audio-response-event 'make-audio-response-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input audio-response-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input audio-response-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-chunk))
      (common-lisp:list
       (common-lisp:cons "audioChunk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input audio-response-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition bad-gateway-exception
     (lexv2-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       bad-gateway-exception-message)))
 (common-lisp:export
  (common-lisp:list 'bad-gateway-exception 'bad-gateway-exception-message)))
(common-lisp:deftype blob-stream ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype bot-alias-identifier () 'common-lisp:string)
(common-lisp:deftype bot-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (button (:copier common-lisp:nil) (:conc-name "struct-shape-button-"))
   (text (common-lisp:error ":text is required") :type
    (common-lisp:or button-text common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or button-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'button 'make-button))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input button))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input button))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input button))
   common-lisp:nil))
(common-lisp:deftype button-text () 'common-lisp:string)
(common-lisp:deftype button-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype buttons-list () '(trivial-types:proper-list button))
 (common-lisp:defun |make-buttons-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list button))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (confidence-score (:copier common-lisp:nil)
      (:conc-name "struct-shape-confidence-score-"))
   (score common-lisp:nil :type (common-lisp:or double common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'confidence-score 'make-confidence-score))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input confidence-score))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input confidence-score))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'score))
      (common-lisp:list
       (common-lisp:cons "score"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input confidence-score))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (configuration-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-configuration-event-"))
   (request-attributes common-lisp:nil :type
    (common-lisp:or string-map common-lisp:null))
   (response-content-type
    (common-lisp:error ":responsecontenttype is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (session-state common-lisp:nil :type
    (common-lisp:or session-state common-lisp:null))
   (welcome-messages common-lisp:nil :type
    (common-lisp:or messages common-lisp:null))
   (disable-playback common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (event-id common-lisp:nil :type (common-lisp:or event-id common-lisp:null))
   (client-timestamp-millis common-lisp:nil :type
    (common-lisp:or epoch-millis common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'configuration-event 'make-configuration-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configuration-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configuration-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-attributes))
      (common-lisp:list
       (common-lisp:cons "requestAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-content-type))
      (common-lisp:list
       (common-lisp:cons "responseContentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-state))
      (common-lisp:list
       (common-lisp:cons "sessionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'welcome-messages))
      (common-lisp:list
       (common-lisp:cons "welcomeMessages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disable-playback))
      (common-lisp:list
       (common-lisp:cons "disablePlayback"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-timestamp-millis))
      (common-lisp:list
       (common-lisp:cons "clientTimestampMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configuration-event))
   common-lisp:nil))
(common-lisp:deftype confirmation-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (lexv2-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message)))
(common-lisp:deftype conversation-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (dtmfinput-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-dtmfinput-event-"))
   (input-character (common-lisp:error ":inputcharacter is required") :type
    (common-lisp:or dtmfregex common-lisp:null))
   (event-id common-lisp:nil :type (common-lisp:or event-id common-lisp:null))
   (client-timestamp-millis common-lisp:nil :type
    (common-lisp:or epoch-millis common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dtmfinput-event 'make-dtmfinput-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dtmfinput-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dtmfinput-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-character))
      (common-lisp:list
       (common-lisp:cons "inputCharacter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-timestamp-millis))
      (common-lisp:list
       (common-lisp:cons "clientTimestampMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dtmfinput-event))
   common-lisp:nil))
(common-lisp:deftype dtmfregex () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-session-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-session-request-"))
   (bot-id (common-lisp:error ":botid is required") :type
    (common-lisp:or bot-identifier common-lisp:null))
   (bot-alias-id (common-lisp:error ":botaliasid is required") :type
    (common-lisp:or bot-alias-identifier common-lisp:null))
   (locale-id (common-lisp:error ":localeid is required") :type
    (common-lisp:or locale-id common-lisp:null))
   (session-id (common-lisp:error ":sessionid is required") :type
    (common-lisp:or session-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-session-request 'make-delete-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-session-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-session-response-"))
   (bot-id common-lisp:nil :type
    (common-lisp:or bot-identifier common-lisp:null))
   (bot-alias-id common-lisp:nil :type
    (common-lisp:or bot-alias-identifier common-lisp:null))
   (locale-id common-lisp:nil :type
    (common-lisp:or locale-id common-lisp:null))
   (session-id common-lisp:nil :type
    (common-lisp:or session-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-session-response 'make-delete-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-alias-id))
      (common-lisp:list
       (common-lisp:cons "botAliasId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'locale-id))
      (common-lisp:list
       (common-lisp:cons "localeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition dependency-failed-exception
     (lexv2-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       dependency-failed-exception-message)))
 (common-lisp:export
  (common-lisp:list 'dependency-failed-exception
                    'dependency-failed-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (dialog-action (:copier common-lisp:nil)
      (:conc-name "struct-shape-dialog-action-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or dialog-action-type common-lisp:null))
   (slot-to-elicit common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (slot-elicitation-style common-lisp:nil :type
    (common-lisp:or style-type common-lisp:null))
   (sub-slot-to-elicit common-lisp:nil :type
    (common-lisp:or elicit-sub-slot common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dialog-action 'make-dialog-action))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dialog-action))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dialog-action))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-to-elicit))
      (common-lisp:list
       (common-lisp:cons "slotToElicit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'slot-elicitation-style))
      (common-lisp:list
       (common-lisp:cons "slotElicitationStyle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-slot-to-elicit))
      (common-lisp:list
       (common-lisp:cons "subSlotToElicit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dialog-action))
   common-lisp:nil))
(common-lisp:deftype dialog-action-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (disconnection-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-disconnection-event-"))
   (event-id common-lisp:nil :type (common-lisp:or event-id common-lisp:null))
   (client-timestamp-millis common-lisp:nil :type
    (common-lisp:or epoch-millis common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disconnection-event 'make-disconnection-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input disconnection-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input disconnection-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-timestamp-millis))
      (common-lisp:list
       (common-lisp:cons "clientTimestampMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input disconnection-event))
   common-lisp:nil))
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (elicit-sub-slot (:copier common-lisp:nil)
      (:conc-name "struct-shape-elicit-sub-slot-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (sub-slot-to-elicit common-lisp:nil :type
    (common-lisp:or elicit-sub-slot common-lisp:null)))
 (common-lisp:export (common-lisp:list 'elicit-sub-slot 'make-elicit-sub-slot))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input elicit-sub-slot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input elicit-sub-slot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-slot-to-elicit))
      (common-lisp:list
       (common-lisp:cons "subSlotToElicit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input elicit-sub-slot))
   common-lisp:nil))
(common-lisp:deftype epoch-millis () 'common-lisp:integer)
(common-lisp:deftype event-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-session-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-session-request-"))
   (bot-id (common-lisp:error ":botid is required") :type
    (common-lisp:or bot-identifier common-lisp:null))
   (bot-alias-id (common-lisp:error ":botaliasid is required") :type
    (common-lisp:or bot-alias-identifier common-lisp:null))
   (locale-id (common-lisp:error ":localeid is required") :type
    (common-lisp:or locale-id common-lisp:null))
   (session-id (common-lisp:error ":sessionid is required") :type
    (common-lisp:or session-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-session-request 'make-get-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-session-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-session-response-"))
   (session-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (messages common-lisp:nil :type (common-lisp:or messages common-lisp:null))
   (interpretations common-lisp:nil :type
    (common-lisp:or interpretations common-lisp:null))
   (session-state common-lisp:nil :type
    (common-lisp:or session-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-session-response 'make-get-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'messages))
      (common-lisp:list
       (common-lisp:cons "messages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interpretations))
      (common-lisp:list
       (common-lisp:cons "interpretations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-state))
      (common-lisp:list
       (common-lisp:cons "sessionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (heartbeat-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-heartbeat-event-"))
   (event-id common-lisp:nil :type (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'heartbeat-event 'make-heartbeat-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input heartbeat-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input heartbeat-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input heartbeat-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (image-response-card (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-response-card-"))
   (title (common-lisp:error ":title is required") :type
    (common-lisp:or attachment-title common-lisp:null))
   (subtitle common-lisp:nil :type
    (common-lisp:or attachment-title common-lisp:null))
   (image-url common-lisp:nil :type
    (common-lisp:or attachment-url common-lisp:null))
   (buttons common-lisp:nil :type
    (common-lisp:or buttons-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'image-response-card 'make-image-response-card))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-response-card))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-response-card))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'title))
      (common-lisp:list
       (common-lisp:cons "title"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subtitle))
      (common-lisp:list
       (common-lisp:cons "subtitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-url))
      (common-lisp:list
       (common-lisp:cons "imageUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buttons))
      (common-lisp:list
       (common-lisp:cons "buttons"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-response-card))
   common-lisp:nil))
(common-lisp:deftype input-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (intent (:copier common-lisp:nil) (:conc-name "struct-shape-intent-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (slots common-lisp:nil :type (common-lisp:or slots common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or intent-state common-lisp:null))
   (confirmation-state common-lisp:nil :type
    (common-lisp:or confirmation-state common-lisp:null)))
 (common-lisp:export (common-lisp:list 'intent 'make-intent))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input intent))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input intent))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slots))
      (common-lisp:list
       (common-lisp:cons "slots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'confirmation-state))
      (common-lisp:list
       (common-lisp:cons "confirmationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input intent))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (intent-result-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-intent-result-event-"))
   (input-mode common-lisp:nil :type
    (common-lisp:or input-mode common-lisp:null))
   (interpretations common-lisp:nil :type
    (common-lisp:or interpretations common-lisp:null))
   (session-state common-lisp:nil :type
    (common-lisp:or session-state common-lisp:null))
   (request-attributes common-lisp:nil :type
    (common-lisp:or string-map common-lisp:null))
   (session-id common-lisp:nil :type
    (common-lisp:or session-id common-lisp:null))
   (event-id common-lisp:nil :type (common-lisp:or event-id common-lisp:null))
   (recognized-bot-member common-lisp:nil :type
    (common-lisp:or recognized-bot-member common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'intent-result-event 'make-intent-result-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input intent-result-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input intent-result-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-mode))
      (common-lisp:list
       (common-lisp:cons "inputMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interpretations))
      (common-lisp:list
       (common-lisp:cons "interpretations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-state))
      (common-lisp:list
       (common-lisp:cons "sessionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-attributes))
      (common-lisp:list
       (common-lisp:cons "requestAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recognized-bot-member))
      (common-lisp:list
       (common-lisp:cons "recognizedBotMember"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input intent-result-event))
   common-lisp:nil))
(common-lisp:deftype intent-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (lexv2-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (interpretation (:copier common-lisp:nil)
      (:conc-name "struct-shape-interpretation-"))
   (nlu-confidence common-lisp:nil :type
    (common-lisp:or confidence-score common-lisp:null))
   (sentiment-response common-lisp:nil :type
    (common-lisp:or sentiment-response common-lisp:null))
   (intent common-lisp:nil :type (common-lisp:or intent common-lisp:null)))
 (common-lisp:export (common-lisp:list 'interpretation 'make-interpretation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input interpretation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input interpretation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nlu-confidence))
      (common-lisp:list
       (common-lisp:cons "nluConfidence"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sentiment-response))
      (common-lisp:list
       (common-lisp:cons "sentimentResponse"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent))
      (common-lisp:list
       (common-lisp:cons "intent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input interpretation))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype interpretations ()
   '(trivial-types:proper-list interpretation))
 (common-lisp:defun |make-interpretations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list interpretation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype locale-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (message (:copier common-lisp:nil) (:conc-name "struct-shape-message-"))
   (content common-lisp:nil :type (common-lisp:or text common-lisp:null))
   (content-type (common-lisp:error ":contenttype is required") :type
    (common-lisp:or message-content-type common-lisp:null))
   (image-response-card common-lisp:nil :type
    (common-lisp:or image-response-card common-lisp:null)))
 (common-lisp:export (common-lisp:list 'message 'make-message))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:list
       (common-lisp:cons "contentType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-response-card))
      (common-lisp:list
       (common-lisp:cons "imageResponseCard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input message))
   common-lisp:nil))
(common-lisp:deftype message-content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype messages () '(trivial-types:proper-list message))
 (common-lisp:defun |make-messages|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list message))
   aws-sdk/generator/shape::members))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype non-empty-string () 'common-lisp:string)
(common-lisp:deftype parameter-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (playback-completion-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-playback-completion-event-"))
   (event-id common-lisp:nil :type (common-lisp:or event-id common-lisp:null))
   (client-timestamp-millis common-lisp:nil :type
    (common-lisp:or epoch-millis common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'playback-completion-event
                    'make-playback-completion-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          playback-completion-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          playback-completion-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-timestamp-millis))
      (common-lisp:list
       (common-lisp:cons "clientTimestampMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          playback-completion-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (playback-interruption-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-playback-interruption-event-"))
   (event-reason common-lisp:nil :type
    (common-lisp:or playback-interruption-reason common-lisp:null))
   (caused-by-event-id common-lisp:nil :type
    (common-lisp:or event-id common-lisp:null))
   (event-id common-lisp:nil :type (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'playback-interruption-event
                    'make-playback-interruption-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          playback-interruption-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          playback-interruption-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-reason))
      (common-lisp:list
       (common-lisp:cons "eventReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caused-by-event-id))
      (common-lisp:list
       (common-lisp:cons "causedByEventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          playback-interruption-event))
   common-lisp:nil))
(common-lisp:deftype playback-interruption-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (put-session-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-session-request-"))
   (bot-id (common-lisp:error ":botid is required") :type
    (common-lisp:or bot-identifier common-lisp:null))
   (bot-alias-id (common-lisp:error ":botaliasid is required") :type
    (common-lisp:or bot-alias-identifier common-lisp:null))
   (locale-id (common-lisp:error ":localeid is required") :type
    (common-lisp:or locale-id common-lisp:null))
   (session-id (common-lisp:error ":sessionid is required") :type
    (common-lisp:or session-id common-lisp:null))
   (messages common-lisp:nil :type (common-lisp:or messages common-lisp:null))
   (session-state (common-lisp:error ":sessionstate is required") :type
    (common-lisp:or session-state common-lisp:null))
   (request-attributes common-lisp:nil :type
    (common-lisp:or string-map common-lisp:null))
   (response-content-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-session-request 'make-put-session-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-content-type))
      (common-lisp:cons "ResponseContentType"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'messages))
      (common-lisp:list
       (common-lisp:cons "messages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-state))
      (common-lisp:list
       (common-lisp:cons "sessionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-attributes))
      (common-lisp:list
       (common-lisp:cons "requestAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-session-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-session-response-"))
   (content-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (messages common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (session-state common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (request-attributes common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (session-id common-lisp:nil :type
    (common-lisp:or session-id common-lisp:null))
   (audio-stream common-lisp:nil :type
    (common-lisp:or blob-stream common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-session-response 'make-put-session-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input put-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'messages))
      (common-lisp:cons "x-amz-lex-messages" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-state))
      (common-lisp:cons "x-amz-lex-session-state"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-attributes))
      (common-lisp:cons "x-amz-lex-request-attributes"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:cons "x-amz-lex-session-id"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input put-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-stream))
      (common-lisp:list
       (common-lisp:cons "audioStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input put-session-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'audio-stream)))
(common-lisp:progn
 (common-lisp:defstruct
     (recognize-text-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-recognize-text-request-"))
   (bot-id (common-lisp:error ":botid is required") :type
    (common-lisp:or bot-identifier common-lisp:null))
   (bot-alias-id (common-lisp:error ":botaliasid is required") :type
    (common-lisp:or bot-alias-identifier common-lisp:null))
   (locale-id (common-lisp:error ":localeid is required") :type
    (common-lisp:or locale-id common-lisp:null))
   (session-id (common-lisp:error ":sessionid is required") :type
    (common-lisp:or session-id common-lisp:null))
   (text (common-lisp:error ":text is required") :type
    (common-lisp:or text common-lisp:null))
   (session-state common-lisp:nil :type
    (common-lisp:or session-state common-lisp:null))
   (request-attributes common-lisp:nil :type
    (common-lisp:or string-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recognize-text-request 'make-recognize-text-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recognize-text-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recognize-text-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-state))
      (common-lisp:list
       (common-lisp:cons "sessionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-attributes))
      (common-lisp:list
       (common-lisp:cons "requestAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recognize-text-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (recognize-text-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-recognize-text-response-"))
   (messages common-lisp:nil :type (common-lisp:or messages common-lisp:null))
   (session-state common-lisp:nil :type
    (common-lisp:or session-state common-lisp:null))
   (interpretations common-lisp:nil :type
    (common-lisp:or interpretations common-lisp:null))
   (request-attributes common-lisp:nil :type
    (common-lisp:or string-map common-lisp:null))
   (session-id common-lisp:nil :type
    (common-lisp:or session-id common-lisp:null))
   (recognized-bot-member common-lisp:nil :type
    (common-lisp:or recognized-bot-member common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recognize-text-response 'make-recognize-text-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recognize-text-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recognize-text-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'messages))
      (common-lisp:list
       (common-lisp:cons "messages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-state))
      (common-lisp:list
       (common-lisp:cons "sessionState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interpretations))
      (common-lisp:list
       (common-lisp:cons "interpretations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-attributes))
      (common-lisp:list
       (common-lisp:cons "requestAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recognized-bot-member))
      (common-lisp:list
       (common-lisp:cons "recognizedBotMember"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recognize-text-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (recognize-utterance-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-recognize-utterance-request-"))
   (bot-id (common-lisp:error ":botid is required") :type
    (common-lisp:or bot-identifier common-lisp:null))
   (bot-alias-id (common-lisp:error ":botaliasid is required") :type
    (common-lisp:or bot-alias-identifier common-lisp:null))
   (locale-id (common-lisp:error ":localeid is required") :type
    (common-lisp:or locale-id common-lisp:null))
   (session-id (common-lisp:error ":sessionid is required") :type
    (common-lisp:or session-id common-lisp:null))
   (session-state common-lisp:nil :type
    (common-lisp:or sensitive-non-empty-string common-lisp:null))
   (request-attributes common-lisp:nil :type
    (common-lisp:or sensitive-non-empty-string common-lisp:null))
   (request-content-type (common-lisp:error ":requestcontenttype is required")
    :type (common-lisp:or non-empty-string common-lisp:null))
   (response-content-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (input-stream common-lisp:nil :type
    (common-lisp:or blob-stream common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recognize-utterance-request
                    'make-recognize-utterance-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recognize-utterance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-state))
      (common-lisp:cons "x-amz-lex-session-state"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-attributes))
      (common-lisp:cons "x-amz-lex-request-attributes"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-content-type))
      (common-lisp:cons "Response-Content-Type"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recognize-utterance-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-stream))
      (common-lisp:list
       (common-lisp:cons "inputStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recognize-utterance-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'input-stream)))
(common-lisp:progn
 (common-lisp:defstruct
     (recognize-utterance-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-recognize-utterance-response-"))
   (input-mode common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (messages common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (interpretations common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (session-state common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (request-attributes common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (session-id common-lisp:nil :type
    (common-lisp:or session-id common-lisp:null))
   (input-transcript common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (audio-stream common-lisp:nil :type
    (common-lisp:or blob-stream common-lisp:null))
   (recognized-bot-member common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recognize-utterance-response
                    'make-recognize-utterance-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recognize-utterance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-mode))
      (common-lisp:cons "x-amz-lex-input-mode" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content-type))
      (common-lisp:cons "Content-Type" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'messages))
      (common-lisp:cons "x-amz-lex-messages" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interpretations))
      (common-lisp:cons "x-amz-lex-interpretations"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-state))
      (common-lisp:cons "x-amz-lex-session-state"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'request-attributes))
      (common-lisp:cons "x-amz-lex-request-attributes"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:cons "x-amz-lex-session-id" aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'input-transcript))
      (common-lisp:cons "x-amz-lex-input-transcript"
                        aws-sdk/generator/shape::value))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'recognized-bot-member))
      (common-lisp:cons "x-amz-lex-recognized-bot-member"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recognize-utterance-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-stream))
      (common-lisp:list
       (common-lisp:cons "audioStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recognize-utterance-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input 'audio-stream)))
(common-lisp:progn
 (common-lisp:defstruct
     (recognized-bot-member (:copier common-lisp:nil)
      (:conc-name "struct-shape-recognized-bot-member-"))
   (bot-id (common-lisp:error ":botid is required") :type
    (common-lisp:or bot-identifier common-lisp:null))
   (bot-name common-lisp:nil :type (common-lisp:or name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recognized-bot-member 'make-recognized-bot-member))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          recognized-bot-member))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          recognized-bot-member))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-id))
      (common-lisp:list
       (common-lisp:cons "botId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bot-name))
      (common-lisp:list
       (common-lisp:cons "botName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          recognized-bot-member))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (lexv2-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (runtime-hint-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-runtime-hint-details-"))
   (runtime-hint-values common-lisp:nil :type
    (common-lisp:or runtime-hint-values-list common-lisp:null))
   (sub-slot-hints common-lisp:nil :type
    (common-lisp:or slot-hints-slot-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'runtime-hint-details 'make-runtime-hint-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input runtime-hint-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input runtime-hint-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-hint-values))
      (common-lisp:list
       (common-lisp:cons "runtimeHintValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-slot-hints))
      (common-lisp:list
       (common-lisp:cons "subSlotHints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input runtime-hint-details))
   common-lisp:nil))
(common-lisp:deftype runtime-hint-phrase () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (runtime-hint-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-runtime-hint-value-"))
   (phrase (common-lisp:error ":phrase is required") :type
    (common-lisp:or runtime-hint-phrase common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'runtime-hint-value 'make-runtime-hint-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input runtime-hint-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input runtime-hint-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'phrase))
      (common-lisp:list
       (common-lisp:cons "phrase"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input runtime-hint-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype runtime-hint-values-list ()
   '(trivial-types:proper-list runtime-hint-value))
 (common-lisp:defun |make-runtime-hint-values-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list runtime-hint-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (runtime-hints (:copier common-lisp:nil)
      (:conc-name "struct-shape-runtime-hints-"))
   (slot-hints common-lisp:nil :type
    (common-lisp:or slot-hints-intent-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'runtime-hints 'make-runtime-hints))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input runtime-hints))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input runtime-hints))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'slot-hints))
      (common-lisp:list
       (common-lisp:cons "slotHints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input runtime-hints))
   common-lisp:nil))
(common-lisp:deftype sensitive-non-empty-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (sentiment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-sentiment-response-"))
   (sentiment common-lisp:nil :type
    (common-lisp:or sentiment-type common-lisp:null))
   (sentiment-score common-lisp:nil :type
    (common-lisp:or sentiment-score common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sentiment-response 'make-sentiment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sentiment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sentiment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sentiment))
      (common-lisp:list
       (common-lisp:cons "sentiment"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sentiment-score))
      (common-lisp:list
       (common-lisp:cons "sentimentScore"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sentiment-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (sentiment-score (:copier common-lisp:nil)
      (:conc-name "struct-shape-sentiment-score-"))
   (positive common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (negative common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (neutral common-lisp:nil :type (common-lisp:or double common-lisp:null))
   (mixed common-lisp:nil :type (common-lisp:or double common-lisp:null)))
 (common-lisp:export (common-lisp:list 'sentiment-score 'make-sentiment-score))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sentiment-score))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sentiment-score))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'positive))
      (common-lisp:list
       (common-lisp:cons "positive"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'negative))
      (common-lisp:list
       (common-lisp:cons "negative"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'neutral))
      (common-lisp:list
       (common-lisp:cons "neutral"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mixed))
      (common-lisp:list
       (common-lisp:cons "mixed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sentiment-score))
   common-lisp:nil))
(common-lisp:deftype sentiment-type () 'common-lisp:string)
(common-lisp:deftype session-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (session-state (:copier common-lisp:nil)
      (:conc-name "struct-shape-session-state-"))
   (dialog-action common-lisp:nil :type
    (common-lisp:or dialog-action common-lisp:null))
   (intent common-lisp:nil :type (common-lisp:or intent common-lisp:null))
   (active-contexts common-lisp:nil :type
    (common-lisp:or active-contexts-list common-lisp:null))
   (session-attributes common-lisp:nil :type
    (common-lisp:or string-map common-lisp:null))
   (originating-request-id common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (runtime-hints common-lisp:nil :type
    (common-lisp:or runtime-hints common-lisp:null)))
 (common-lisp:export (common-lisp:list 'session-state 'make-session-state))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session-state))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session-state))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dialog-action))
      (common-lisp:list
       (common-lisp:cons "dialogAction"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent))
      (common-lisp:list
       (common-lisp:cons "intent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'active-contexts))
      (common-lisp:list
       (common-lisp:cons "activeContexts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-attributes))
      (common-lisp:list
       (common-lisp:cons "sessionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'originating-request-id))
      (common-lisp:list
       (common-lisp:cons "originatingRequestId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime-hints))
      (common-lisp:list
       (common-lisp:cons "runtimeHints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session-state))
   common-lisp:nil))
(common-lisp:deftype shape () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (slot (:copier common-lisp:nil) (:conc-name "struct-shape-slot-"))
   (value common-lisp:nil :type (common-lisp:or value common-lisp:null))
   (shape common-lisp:nil :type (common-lisp:or shape common-lisp:null))
   (values common-lisp:nil :type (common-lisp:or values common-lisp:null))
   (sub-slots common-lisp:nil :type (common-lisp:or slots common-lisp:null)))
 (common-lisp:export (common-lisp:list 'slot 'make-slot))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input slot))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input slot))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'shape))
      (common-lisp:list
       (common-lisp:cons "shape"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-slots))
      (common-lisp:list
       (common-lisp:cons "subSlots"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input slot))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype slot-hints-intent-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-slot-hints-intent-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype slot-hints-slot-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-slot-hints-slot-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:deftype slots () 'common-lisp:hash-table)
 (common-lisp:defun |make-slots| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (start-conversation-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-conversation-request-"))
   (bot-id (common-lisp:error ":botid is required") :type
    (common-lisp:or bot-identifier common-lisp:null))
   (bot-alias-id (common-lisp:error ":botaliasid is required") :type
    (common-lisp:or bot-alias-identifier common-lisp:null))
   (locale-id (common-lisp:error ":localeid is required") :type
    (common-lisp:or locale-id common-lisp:null))
   (session-id (common-lisp:error ":sessionid is required") :type
    (common-lisp:or session-id common-lisp:null))
   (conversation-mode common-lisp:nil :type
    (common-lisp:or conversation-mode common-lisp:null))
   (request-event-stream (common-lisp:error ":requesteventstream is required")
    :type
    (common-lisp:or start-conversation-request-event-stream common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-conversation-request
                    'make-start-conversation-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-conversation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conversation-mode))
      (common-lisp:cons "x-amz-lex-conversation-mode"
                        aws-sdk/generator/shape::value))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-conversation-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'request-event-stream))
      (common-lisp:list
       (common-lisp:cons "requestEventStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-conversation-request))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'request-event-stream)))
(common-lisp:progn
 (common-lisp:defstruct
     (start-conversation-request-event-stream (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-conversation-request-event-stream-"))
   (configuration-event common-lisp:nil :type
    (common-lisp:or configuration-event common-lisp:null))
   (audio-input-event common-lisp:nil :type
    (common-lisp:or audio-input-event common-lisp:null))
   (dtmfinput-event common-lisp:nil :type
    (common-lisp:or dtmfinput-event common-lisp:null))
   (text-input-event common-lisp:nil :type
    (common-lisp:or text-input-event common-lisp:null))
   (playback-completion-event common-lisp:nil :type
    (common-lisp:or playback-completion-event common-lisp:null))
   (disconnection-event common-lisp:nil :type
    (common-lisp:or disconnection-event common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-conversation-request-event-stream
                    'make-start-conversation-request-event-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-conversation-request-event-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-conversation-request-event-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'configuration-event))
      (common-lisp:list
       (common-lisp:cons "ConfigurationEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'audio-input-event))
      (common-lisp:list
       (common-lisp:cons "AudioInputEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dtmfinput-event))
      (common-lisp:list
       (common-lisp:cons "DTMFInputEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-input-event))
      (common-lisp:list
       (common-lisp:cons "TextInputEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'playback-completion-event))
      (common-lisp:list
       (common-lisp:cons "PlaybackCompletionEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'disconnection-event))
      (common-lisp:list
       (common-lisp:cons "DisconnectionEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-conversation-request-event-stream))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-conversation-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-conversation-response-"))
   (response-event-stream common-lisp:nil :type
    (common-lisp:or start-conversation-response-event-stream
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-conversation-response
                    'make-start-conversation-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-conversation-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-conversation-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'response-event-stream))
      (common-lisp:list
       (common-lisp:cons "responseEventStream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-conversation-response))
   (common-lisp:slot-value aws-sdk/generator/shape::input
                           'response-event-stream)))
(common-lisp:progn
 (common-lisp:defstruct
     (start-conversation-response-event-stream (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-conversation-response-event-stream-"))
   (playback-interruption-event common-lisp:nil :type
    (common-lisp:or playback-interruption-event common-lisp:null))
   (transcript-event common-lisp:nil :type
    (common-lisp:or transcript-event common-lisp:null))
   (intent-result-event common-lisp:nil :type
    (common-lisp:or intent-result-event common-lisp:null))
   (text-response-event common-lisp:nil :type
    (common-lisp:or text-response-event common-lisp:null))
   (audio-response-event common-lisp:nil :type
    (common-lisp:or audio-response-event common-lisp:null))
   (heartbeat-event common-lisp:nil :type
    (common-lisp:or heartbeat-event common-lisp:null))
   (access-denied-exception common-lisp:nil :type
    (common-lisp:or access-denied-exception common-lisp:null))
   (resource-not-found-exception common-lisp:nil :type
    (common-lisp:or resource-not-found-exception common-lisp:null))
   (validation-exception common-lisp:nil :type
    (common-lisp:or validation-exception common-lisp:null))
   (throttling-exception common-lisp:nil :type
    (common-lisp:or throttling-exception common-lisp:null))
   (internal-server-exception common-lisp:nil :type
    (common-lisp:or internal-server-exception common-lisp:null))
   (conflict-exception common-lisp:nil :type
    (common-lisp:or conflict-exception common-lisp:null))
   (dependency-failed-exception common-lisp:nil :type
    (common-lisp:or dependency-failed-exception common-lisp:null))
   (bad-gateway-exception common-lisp:nil :type
    (common-lisp:or bad-gateway-exception common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-conversation-response-event-stream
                    'make-start-conversation-response-event-stream))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-conversation-response-event-stream))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-conversation-response-event-stream))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'playback-interruption-event))
      (common-lisp:list
       (common-lisp:cons "PlaybackInterruptionEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript-event))
      (common-lisp:list
       (common-lisp:cons "TranscriptEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent-result-event))
      (common-lisp:list
       (common-lisp:cons "IntentResultEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text-response-event))
      (common-lisp:list
       (common-lisp:cons "TextResponseEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'audio-response-event))
      (common-lisp:list
       (common-lisp:cons "AudioResponseEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'heartbeat-event))
      (common-lisp:list
       (common-lisp:cons "HeartbeatEvent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-denied-exception))
      (common-lisp:list
       (common-lisp:cons "AccessDeniedException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-not-found-exception))
      (common-lisp:list
       (common-lisp:cons "ResourceNotFoundException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'validation-exception))
      (common-lisp:list
       (common-lisp:cons "ValidationException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'throttling-exception))
      (common-lisp:list
       (common-lisp:cons "ThrottlingException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'internal-server-exception))
      (common-lisp:list
       (common-lisp:cons "InternalServerException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'conflict-exception))
      (common-lisp:list
       (common-lisp:cons "ConflictException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dependency-failed-exception))
      (common-lisp:list
       (common-lisp:cons "DependencyFailedException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'bad-gateway-exception))
      (common-lisp:list
       (common-lisp:cons "BadGatewayException"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-conversation-response-event-stream))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list ()
   '(trivial-types:proper-list non-empty-string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list non-empty-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype string-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-string-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype style-type () 'common-lisp:string)
(common-lisp:deftype text () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (text-input-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-text-input-event-"))
   (text (common-lisp:error ":text is required") :type
    (common-lisp:or text common-lisp:null))
   (event-id common-lisp:nil :type (common-lisp:or event-id common-lisp:null))
   (client-timestamp-millis common-lisp:nil :type
    (common-lisp:or epoch-millis common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'text-input-event 'make-text-input-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input text-input-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input text-input-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'text))
      (common-lisp:list
       (common-lisp:cons "text"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-timestamp-millis))
      (common-lisp:list
       (common-lisp:cons "clientTimestampMillis"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input text-input-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (text-response-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-text-response-event-"))
   (messages common-lisp:nil :type (common-lisp:or messages common-lisp:null))
   (event-id common-lisp:nil :type (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'text-response-event 'make-text-response-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input text-response-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input text-response-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'messages))
      (common-lisp:list
       (common-lisp:cons "messages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input text-response-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (lexv2-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (transcript-event (:copier common-lisp:nil)
      (:conc-name "struct-shape-transcript-event-"))
   (transcript common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (event-id common-lisp:nil :type (common-lisp:or event-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transcript-event 'make-transcript-event))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transcript-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transcript-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transcript))
      (common-lisp:list
       (common-lisp:cons "transcript"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-id))
      (common-lisp:list
       (common-lisp:cons "eventId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transcript-event))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (lexv2-runtime-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (value (:copier common-lisp:nil) (:conc-name "struct-shape-value-"))
   (original-value common-lisp:nil :type
    (common-lisp:or non-empty-string common-lisp:null))
   (interpreted-value (common-lisp:error ":interpretedvalue is required") :type
    (common-lisp:or non-empty-string common-lisp:null))
   (resolved-values common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'value 'make-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'original-value))
      (common-lisp:list
       (common-lisp:cons "originalValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interpreted-value))
      (common-lisp:list
       (common-lisp:cons "interpretedValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolved-values))
      (common-lisp:list
       (common-lisp:cons "resolvedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype values () '(trivial-types:proper-list slot))
 (common-lisp:defun |make-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list slot))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun delete-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-alias-id locale-id session-id)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-alias-id locale-id session-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-runtime-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botAliases/~A/botLocales/~A/sessions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-alias-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "DeleteSession"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-session))
(common-lisp:progn
 (common-lisp:defun get-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-alias-id locale-id session-id)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-alias-id locale-id session-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-runtime-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botAliases/~A/botLocales/~A/sessions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-alias-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "GetSession"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-session))
(common-lisp:progn
 (common-lisp:defun put-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-alias-id locale-id session-id
                     messages session-state request-attributes
                     response-content-type)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-alias-id locale-id session-id messages
     session-state request-attributes response-content-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-session-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-runtime-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botAliases/~A/botLocales/~A/sessions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-alias-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "PutSession"
                                                        "2020-08-07")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'put-session))
(common-lisp:progn
 (common-lisp:defun recognize-text
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-alias-id locale-id session-id
                     text session-state request-attributes)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-alias-id locale-id session-id text
     session-state request-attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-recognize-text-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-runtime-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botAliases/~A/botLocales/~A/sessions/~A/text"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-alias-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "RecognizeText"
                                                        "2020-08-07"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'recognize-text))
(common-lisp:progn
 (common-lisp:defun recognize-utterance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-alias-id locale-id session-id
                     session-state request-attributes request-content-type
                     response-content-type input-stream)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-alias-id locale-id session-id
     session-state request-attributes request-content-type
     response-content-type input-stream))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-recognize-utterance-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-runtime-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botAliases/~A/botLocales/~A/sessions/~A/utterance"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-alias-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "RecognizeUtterance"
                                                        "2020-08-07")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'recognize-utterance))
(common-lisp:progn
 (common-lisp:defun start-conversation
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bot-id bot-alias-id locale-id session-id
                     conversation-mode request-event-stream)
   (common-lisp:declare
    (common-lisp:ignorable bot-id bot-alias-id locale-id session-id
     conversation-mode request-event-stream))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-conversation-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'lexv2-runtime-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/bots/~A/botAliases/~A/botLocales/~A/sessions/~A/conversation"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'bot-alias-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'locale-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'session-id))))
                                                        "StartConversation"
                                                        "2020-08-07"))
      "structure" common-lisp:nil *error-map*)))
 (common-lisp:export 'start-conversation))
