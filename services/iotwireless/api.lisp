;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/iotwireless/api
  (:use)
  (:nicknames #:aws/iotwireless)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/iotwireless/api)
(common-lisp:progn
 (common-lisp:defclass iotwireless-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "iotwireless" :protocol
                        :rest-json))
 (common-lisp:export 'iotwireless-request))
(common-lisp:progn
 (common-lisp:define-condition iotwireless-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'iotwireless-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ThrottlingException" . throttling-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:defclass abp-v1-0-x common-lisp:nil
                       ((fcnt-start :initarg :fcnt-start :type
                         (common-lisp:or fcnt-start common-lisp:null) :accessor
                         %abp-v1-0-x-fcnt-start :initform common-lisp:nil)
                        (session-keys :initarg :session-keys :type
                         (common-lisp:or session-keys-abp-v1-0-x
                                         common-lisp:null)
                         :accessor %abp-v1-0-x-session-keys :initform
                         common-lisp:nil)
                        (dev-addr :initarg :dev-addr :type
                         (common-lisp:or dev-addr common-lisp:null) :accessor
                         %abp-v1-0-x-dev-addr :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'abp-v1-0-x 'make-abp-v1-0-x))
 (common-lisp:defun make-abp-v1-0-x
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fcnt-start session-keys dev-addr)
   (common-lisp:apply #'common-lisp:make-instance 'abp-v1-0-x
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input abp-v1-0-x))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input abp-v1-0-x))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dev-addr))
      (common-lisp:list
       (common-lisp:cons "DevAddr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-keys))
      (common-lisp:list
       (common-lisp:cons "SessionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fcnt-start))
      (common-lisp:list
       (common-lisp:cons "FCntStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input abp-v1-0-x))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass abp-v1-1 common-lisp:nil
                       ((fcnt-start :initarg :fcnt-start :type
                         (common-lisp:or fcnt-start common-lisp:null) :accessor
                         %abp-v1-1-fcnt-start :initform common-lisp:nil)
                        (session-keys :initarg :session-keys :type
                         (common-lisp:or session-keys-abp-v1-1
                                         common-lisp:null)
                         :accessor %abp-v1-1-session-keys :initform
                         common-lisp:nil)
                        (dev-addr :initarg :dev-addr :type
                         (common-lisp:or dev-addr common-lisp:null) :accessor
                         %abp-v1-1-dev-addr :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'abp-v1-1 'make-abp-v1-1))
 (common-lisp:defun make-abp-v1-1
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fcnt-start session-keys dev-addr)
   (common-lisp:apply #'common-lisp:make-instance 'abp-v1-1
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input abp-v1-1))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input abp-v1-1))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dev-addr))
      (common-lisp:list
       (common-lisp:cons "DevAddr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-keys))
      (common-lisp:list
       (common-lisp:cons "SessionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fcnt-start))
      (common-lisp:list
       (common-lisp:cons "FCntStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input abp-v1-1))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (iotwireless-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:deftype account-linked () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass accuracy common-lisp:nil
                       ((vertical-accuracy :initarg :vertical-accuracy :type
                         (common-lisp:or vertical-accuracy common-lisp:null)
                         :accessor %accuracy-vertical-accuracy :initform
                         common-lisp:nil)
                        (horizontal-accuracy :initarg :horizontal-accuracy
                         :type
                         (common-lisp:or horizontal-accuracy common-lisp:null)
                         :accessor %accuracy-horizontal-accuracy :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'accuracy 'make-accuracy))
 (common-lisp:defun make-accuracy
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vertical-accuracy horizontal-accuracy)
   (common-lisp:apply #'common-lisp:make-instance 'accuracy
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input accuracy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input accuracy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'horizontal-accuracy))
      (common-lisp:list
       (common-lisp:cons "HorizontalAccuracy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vertical-accuracy))
      (common-lisp:list
       (common-lisp:cons "VerticalAccuracy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input accuracy))
   common-lisp:nil))
(common-lisp:deftype ack-mode-retry-duration-secs () 'common-lisp:integer)
(common-lisp:deftype add-gw-metadata () 'common-lisp:boolean)
(common-lisp:deftype amazon-id () 'common-lisp:string)
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:deftype ap-id () 'common-lisp:string)
(common-lisp:deftype app-eui () 'common-lisp:string)
(common-lisp:deftype app-key () 'common-lisp:string)
(common-lisp:deftype app-skey () 'common-lisp:string)
(common-lisp:deftype app-server-private-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass application-config common-lisp:nil
                       ((destination-name :initarg :destination-name :type
                         (common-lisp:or destination-name common-lisp:null)
                         :accessor %application-config-destination-name
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or application-config-type
                                         common-lisp:null)
                         :accessor %application-config-type :initform
                         common-lisp:nil)
                        (fport :initarg :fport :type
                         (common-lisp:or fport common-lisp:null) :accessor
                         %application-config-fport :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'application-config 'make-application-config))
 (common-lisp:defun make-application-config
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination-name type fport)
   (common-lisp:apply #'common-lisp:make-instance 'application-config
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input application-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input application-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fport))
      (common-lisp:list
       (common-lisp:cons "FPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-name))
      (common-lisp:list
       (common-lisp:cons "DestinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input application-config))
   common-lisp:nil))
(common-lisp:deftype application-config-type () 'common-lisp:string)
(common-lisp:deftype application-server-public-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype applications ()
   '(trivial-types:proper-list application-config))
 (common-lisp:defun |make-applications|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list application-config))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype assist-position ()
   '(trivial-types:proper-list coordinate))
 (common-lisp:defun |make-assist-position|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list coordinate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass associate-aws-account-with-partner-account-request
                       common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %associate-aws-account-with-partner-account-request-tags
                         :initform common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %associate-aws-account-with-partner-account-request-client-request-token
                         :initform common-lisp:nil)
                        (sidewalk :initarg :sidewalk :type
                         (common-lisp:or sidewalk-account-info
                                         common-lisp:null)
                         :accessor
                         %associate-aws-account-with-partner-account-request-sidewalk
                         :initform
                         (common-lisp:error ":sidewalk is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-aws-account-with-partner-account-request
                    'make-associate-aws-account-with-partner-account-request))
 (common-lisp:defun make-associate-aws-account-with-partner-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags client-request-token sidewalk)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-aws-account-with-partner-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-aws-account-with-partner-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-aws-account-with-partner-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sidewalk))
      (common-lisp:list
       (common-lisp:cons "Sidewalk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-aws-account-with-partner-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-aws-account-with-partner-account-response
                       common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or partner-account-arn common-lisp:null)
                         :accessor
                         %associate-aws-account-with-partner-account-response-arn
                         :initform common-lisp:nil)
                        (sidewalk :initarg :sidewalk :type
                         (common-lisp:or sidewalk-account-info
                                         common-lisp:null)
                         :accessor
                         %associate-aws-account-with-partner-account-response-sidewalk
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'associate-aws-account-with-partner-account-response
                    'make-associate-aws-account-with-partner-account-response))
 (common-lisp:defun make-associate-aws-account-with-partner-account-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn sidewalk)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-aws-account-with-partner-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-aws-account-with-partner-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-aws-account-with-partner-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sidewalk))
      (common-lisp:list
       (common-lisp:cons "Sidewalk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-aws-account-with-partner-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-multicast-group-with-fuota-task-request
                       common-lisp:nil
                       ((multicast-group-id :initarg :multicast-group-id :type
                         (common-lisp:or multicast-group-id common-lisp:null)
                         :accessor
                         %associate-multicast-group-with-fuota-task-request-multicast-group-id
                         :initform
                         (common-lisp:error ":multicast-group-id is required"))
                        (id :initarg :id :type
                         (common-lisp:or fuota-task-id common-lisp:null)
                         :accessor
                         %associate-multicast-group-with-fuota-task-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-multicast-group-with-fuota-task-request
                    'make-associate-multicast-group-with-fuota-task-request))
 (common-lisp:defun make-associate-multicast-group-with-fuota-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key multicast-group-id id)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-multicast-group-with-fuota-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-multicast-group-with-fuota-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-multicast-group-with-fuota-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multicast-group-id))
      (common-lisp:list
       (common-lisp:cons "MulticastGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-multicast-group-with-fuota-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-multicast-group-with-fuota-task-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'associate-multicast-group-with-fuota-task-response
                    'make-associate-multicast-group-with-fuota-task-response))
 (common-lisp:defun make-associate-multicast-group-with-fuota-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-multicast-group-with-fuota-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-multicast-group-with-fuota-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-multicast-group-with-fuota-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-multicast-group-with-fuota-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-wireless-device-with-fuota-task-request
                       common-lisp:nil
                       ((wireless-device-id :initarg :wireless-device-id :type
                         (common-lisp:or wireless-device-id common-lisp:null)
                         :accessor
                         %associate-wireless-device-with-fuota-task-request-wireless-device-id
                         :initform
                         (common-lisp:error ":wireless-device-id is required"))
                        (id :initarg :id :type
                         (common-lisp:or fuota-task-id common-lisp:null)
                         :accessor
                         %associate-wireless-device-with-fuota-task-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-wireless-device-with-fuota-task-request
                    'make-associate-wireless-device-with-fuota-task-request))
 (common-lisp:defun make-associate-wireless-device-with-fuota-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wireless-device-id id)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-wireless-device-with-fuota-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-device-with-fuota-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-device-with-fuota-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wireless-device-id))
      (common-lisp:list
       (common-lisp:cons "WirelessDeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-device-with-fuota-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-wireless-device-with-fuota-task-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'associate-wireless-device-with-fuota-task-response
                    'make-associate-wireless-device-with-fuota-task-response))
 (common-lisp:defun make-associate-wireless-device-with-fuota-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-wireless-device-with-fuota-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-device-with-fuota-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-device-with-fuota-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-device-with-fuota-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-wireless-device-with-multicast-group-request
                       common-lisp:nil
                       ((wireless-device-id :initarg :wireless-device-id :type
                         (common-lisp:or wireless-device-id common-lisp:null)
                         :accessor
                         %associate-wireless-device-with-multicast-group-request-wireless-device-id
                         :initform
                         (common-lisp:error ":wireless-device-id is required"))
                        (id :initarg :id :type
                         (common-lisp:or multicast-group-id common-lisp:null)
                         :accessor
                         %associate-wireless-device-with-multicast-group-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-wireless-device-with-multicast-group-request
                    'make-associate-wireless-device-with-multicast-group-request))
 (common-lisp:defun make-associate-wireless-device-with-multicast-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wireless-device-id id)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-wireless-device-with-multicast-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-device-with-multicast-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-device-with-multicast-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wireless-device-id))
      (common-lisp:list
       (common-lisp:cons "WirelessDeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-device-with-multicast-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-wireless-device-with-multicast-group-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'associate-wireless-device-with-multicast-group-response
                    'make-associate-wireless-device-with-multicast-group-response))
 (common-lisp:defun make-associate-wireless-device-with-multicast-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-wireless-device-with-multicast-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-device-with-multicast-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-device-with-multicast-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-device-with-multicast-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-wireless-device-with-thing-request
                       common-lisp:nil
                       ((thing-arn :initarg :thing-arn :type
                         (common-lisp:or thing-arn common-lisp:null) :accessor
                         %associate-wireless-device-with-thing-request-thing-arn
                         :initform
                         (common-lisp:error ":thing-arn is required"))
                        (id :initarg :id :type
                         (common-lisp:or wireless-device-id common-lisp:null)
                         :accessor
                         %associate-wireless-device-with-thing-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-wireless-device-with-thing-request
                    'make-associate-wireless-device-with-thing-request))
 (common-lisp:defun make-associate-wireless-device-with-thing-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key thing-arn id)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-wireless-device-with-thing-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-device-with-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-device-with-thing-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-arn))
      (common-lisp:list
       (common-lisp:cons "ThingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-device-with-thing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-wireless-device-with-thing-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'associate-wireless-device-with-thing-response
                    'make-associate-wireless-device-with-thing-response))
 (common-lisp:defun make-associate-wireless-device-with-thing-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-wireless-device-with-thing-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-device-with-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-device-with-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-device-with-thing-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-wireless-gateway-with-certificate-request
                       common-lisp:nil
                       ((iot-certificate-id :initarg :iot-certificate-id :type
                         (common-lisp:or iot-certificate-id common-lisp:null)
                         :accessor
                         %associate-wireless-gateway-with-certificate-request-iot-certificate-id
                         :initform
                         (common-lisp:error ":iot-certificate-id is required"))
                        (id :initarg :id :type
                         (common-lisp:or wireless-gateway-id common-lisp:null)
                         :accessor
                         %associate-wireless-gateway-with-certificate-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-wireless-gateway-with-certificate-request
                    'make-associate-wireless-gateway-with-certificate-request))
 (common-lisp:defun make-associate-wireless-gateway-with-certificate-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key iot-certificate-id id)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-wireless-gateway-with-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-gateway-with-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-gateway-with-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iot-certificate-id))
      (common-lisp:list
       (common-lisp:cons "IotCertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-gateway-with-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-wireless-gateway-with-certificate-response
                       common-lisp:nil
                       ((iot-certificate-id :initarg :iot-certificate-id :type
                         (common-lisp:or iot-certificate-id common-lisp:null)
                         :accessor
                         %associate-wireless-gateway-with-certificate-response-iot-certificate-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'associate-wireless-gateway-with-certificate-response
                    'make-associate-wireless-gateway-with-certificate-response))
 (common-lisp:defun make-associate-wireless-gateway-with-certificate-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key iot-certificate-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-wireless-gateway-with-certificate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-gateway-with-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-gateway-with-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iot-certificate-id))
      (common-lisp:list
       (common-lisp:cons "IotCertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-gateway-with-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-wireless-gateway-with-thing-request
                       common-lisp:nil
                       ((thing-arn :initarg :thing-arn :type
                         (common-lisp:or thing-arn common-lisp:null) :accessor
                         %associate-wireless-gateway-with-thing-request-thing-arn
                         :initform
                         (common-lisp:error ":thing-arn is required"))
                        (id :initarg :id :type
                         (common-lisp:or wireless-gateway-id common-lisp:null)
                         :accessor
                         %associate-wireless-gateway-with-thing-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-wireless-gateway-with-thing-request
                    'make-associate-wireless-gateway-with-thing-request))
 (common-lisp:defun make-associate-wireless-gateway-with-thing-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key thing-arn id)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-wireless-gateway-with-thing-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-gateway-with-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-gateway-with-thing-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-arn))
      (common-lisp:list
       (common-lisp:cons "ThingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-gateway-with-thing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-wireless-gateway-with-thing-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'associate-wireless-gateway-with-thing-response
                    'make-associate-wireless-gateway-with-thing-response))
 (common-lisp:defun make-associate-wireless-gateway-with-thing-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-wireless-gateway-with-thing-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-gateway-with-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-gateway-with-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-wireless-gateway-with-thing-response))
   common-lisp:nil))
(common-lisp:deftype auto-create-tasks () 'common-lisp:boolean)
(common-lisp:deftype bcch () 'common-lisp:integer)
(common-lisp:deftype bsic () 'common-lisp:integer)
(common-lisp:deftype base-lat () 'common-lisp:single-float)
(common-lisp:deftype base-lng () 'common-lisp:single-float)
(common-lisp:deftype base-station-id () 'common-lisp:integer)
(common-lisp:deftype battery-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass beaconing common-lisp:nil
                       ((frequencies :initarg :frequencies :type
                         (common-lisp:or beaconing-frequencies
                                         common-lisp:null)
                         :accessor %beaconing-frequencies :initform
                         common-lisp:nil)
                        (data-rate :initarg :data-rate :type
                         (common-lisp:or beaconing-data-rate common-lisp:null)
                         :accessor %beaconing-data-rate :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'beaconing 'make-beaconing))
 (common-lisp:defun make-beaconing
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key frequencies data-rate)
   (common-lisp:apply #'common-lisp:make-instance 'beaconing
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input beaconing))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input beaconing))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-rate))
      (common-lisp:list
       (common-lisp:cons "DataRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequencies))
      (common-lisp:list
       (common-lisp:cons "Frequencies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input beaconing))
   common-lisp:nil))
(common-lisp:deftype beaconing-data-rate () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype beaconing-frequencies ()
   '(trivial-types:proper-list beaconing-frequency))
 (common-lisp:defun |make-beaconing-frequencies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list beaconing-frequency))
   aws-sdk/generator/shape::members))
(common-lisp:deftype beaconing-frequency () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass cancel-multicast-group-session-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or multicast-group-id common-lisp:null)
                         :accessor %cancel-multicast-group-session-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-multicast-group-session-request
                    'make-cancel-multicast-group-session-request))
 (common-lisp:defun make-cancel-multicast-group-session-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-multicast-group-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-multicast-group-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-multicast-group-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-multicast-group-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-multicast-group-session-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'cancel-multicast-group-session-response
                    'make-cancel-multicast-group-session-response))
 (common-lisp:defun make-cancel-multicast-group-session-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'cancel-multicast-group-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-multicast-group-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-multicast-group-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-multicast-group-session-response))
   common-lisp:nil))
(common-lisp:deftype capture-time-accuracy () 'common-lisp:single-float)
(common-lisp:deftype cdma-channel () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype cdma-list () '(trivial-types:proper-list cdma-obj))
 (common-lisp:defun |make-cdma-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cdma-obj))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cdma-local-id common-lisp:nil
                       ((cdma-channel :initarg :cdma-channel :type
                         (common-lisp:or cdma-channel common-lisp:null)
                         :accessor %cdma-local-id-cdma-channel :initform
                         (common-lisp:error ":cdma-channel is required"))
                        (pn-offset :initarg :pn-offset :type
                         (common-lisp:or pn-offset common-lisp:null) :accessor
                         %cdma-local-id-pn-offset :initform
                         (common-lisp:error ":pn-offset is required"))))
 (common-lisp:export (common-lisp:list 'cdma-local-id 'make-cdma-local-id))
 (common-lisp:defun make-cdma-local-id
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cdma-channel pn-offset)
   (common-lisp:apply #'common-lisp:make-instance 'cdma-local-id
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cdma-local-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cdma-local-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pn-offset))
      (common-lisp:list
       (common-lisp:cons "PnOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cdma-channel))
      (common-lisp:list
       (common-lisp:cons "CdmaChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cdma-local-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype cdma-nmr-list ()
   '(trivial-types:proper-list cdma-nmr-obj))
 (common-lisp:defun |make-cdma-nmr-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cdma-nmr-obj))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass cdma-nmr-obj common-lisp:nil
                       ((base-station-id :initarg :base-station-id :type
                         (common-lisp:or base-station-id common-lisp:null)
                         :accessor %cdma-nmr-obj-base-station-id :initform
                         common-lisp:nil)
                        (pilot-power :initarg :pilot-power :type
                         (common-lisp:or pilot-power common-lisp:null)
                         :accessor %cdma-nmr-obj-pilot-power :initform
                         common-lisp:nil)
                        (cdma-channel :initarg :cdma-channel :type
                         (common-lisp:or cdma-channel common-lisp:null)
                         :accessor %cdma-nmr-obj-cdma-channel :initform
                         (common-lisp:error ":cdma-channel is required"))
                        (pn-offset :initarg :pn-offset :type
                         (common-lisp:or pn-offset common-lisp:null) :accessor
                         %cdma-nmr-obj-pn-offset :initform
                         (common-lisp:error ":pn-offset is required"))))
 (common-lisp:export (common-lisp:list 'cdma-nmr-obj 'make-cdma-nmr-obj))
 (common-lisp:defun make-cdma-nmr-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key base-station-id pilot-power cdma-channel
                     pn-offset)
   (common-lisp:apply #'common-lisp:make-instance 'cdma-nmr-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cdma-nmr-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cdma-nmr-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pn-offset))
      (common-lisp:list
       (common-lisp:cons "PnOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cdma-channel))
      (common-lisp:list
       (common-lisp:cons "CdmaChannel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pilot-power))
      (common-lisp:list
       (common-lisp:cons "PilotPower"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-station-id))
      (common-lisp:list
       (common-lisp:cons "BaseStationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cdma-nmr-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cdma-obj common-lisp:nil
                       ((cdma-nmr :initarg :cdma-nmr :type
                         (common-lisp:or cdma-nmr-list common-lisp:null)
                         :accessor %cdma-obj-cdma-nmr :initform
                         common-lisp:nil)
                        (base-lng :initarg :base-lng :type
                         (common-lisp:or base-lng common-lisp:null) :accessor
                         %cdma-obj-base-lng :initform common-lisp:nil)
                        (base-lat :initarg :base-lat :type
                         (common-lisp:or base-lat common-lisp:null) :accessor
                         %cdma-obj-base-lat :initform common-lisp:nil)
                        (pilot-power :initarg :pilot-power :type
                         (common-lisp:or pilot-power common-lisp:null)
                         :accessor %cdma-obj-pilot-power :initform
                         common-lisp:nil)
                        (cdma-local-id :initarg :cdma-local-id :type
                         (common-lisp:or cdma-local-id common-lisp:null)
                         :accessor %cdma-obj-cdma-local-id :initform
                         common-lisp:nil)
                        (registration-zone :initarg :registration-zone :type
                         (common-lisp:or registration-zone common-lisp:null)
                         :accessor %cdma-obj-registration-zone :initform
                         common-lisp:nil)
                        (base-station-id :initarg :base-station-id :type
                         (common-lisp:or base-station-id common-lisp:null)
                         :accessor %cdma-obj-base-station-id :initform
                         (common-lisp:error ":base-station-id is required"))
                        (network-id :initarg :network-id :type
                         (common-lisp:or network-id common-lisp:null) :accessor
                         %cdma-obj-network-id :initform
                         (common-lisp:error ":network-id is required"))
                        (system-id :initarg :system-id :type
                         (common-lisp:or system-id common-lisp:null) :accessor
                         %cdma-obj-system-id :initform
                         (common-lisp:error ":system-id is required"))))
 (common-lisp:export (common-lisp:list 'cdma-obj 'make-cdma-obj))
 (common-lisp:defun make-cdma-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cdma-nmr base-lng base-lat pilot-power
                     cdma-local-id registration-zone base-station-id network-id
                     system-id)
   (common-lisp:apply #'common-lisp:make-instance 'cdma-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cdma-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cdma-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'system-id))
      (common-lisp:list
       (common-lisp:cons "SystemId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'network-id))
      (common-lisp:list
       (common-lisp:cons "NetworkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-station-id))
      (common-lisp:list
       (common-lisp:cons "BaseStationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'registration-zone))
      (common-lisp:list
       (common-lisp:cons "RegistrationZone"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cdma-local-id))
      (common-lisp:list
       (common-lisp:cons "CdmaLocalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pilot-power))
      (common-lisp:list
       (common-lisp:cons "PilotPower"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-lat))
      (common-lisp:list
       (common-lisp:cons "BaseLat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base-lng))
      (common-lisp:list
       (common-lisp:cons "BaseLng"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cdma-nmr))
      (common-lisp:list
       (common-lisp:cons "CdmaNmr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cdma-obj))
   common-lisp:nil))
(common-lisp:deftype cell-params () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass cell-towers common-lisp:nil
                       ((cdma :initarg :cdma :type
                         (common-lisp:or cdma-list common-lisp:null) :accessor
                         %cell-towers-cdma :initform common-lisp:nil)
                        (lte :initarg :lte :type
                         (common-lisp:or lte-list common-lisp:null) :accessor
                         %cell-towers-lte :initform common-lisp:nil)
                        (tdscdma :initarg :tdscdma :type
                         (common-lisp:or tdscdma-list common-lisp:null)
                         :accessor %cell-towers-tdscdma :initform
                         common-lisp:nil)
                        (wcdma :initarg :wcdma :type
                         (common-lisp:or wcdma-list common-lisp:null) :accessor
                         %cell-towers-wcdma :initform common-lisp:nil)
                        (gsm :initarg :gsm :type
                         (common-lisp:or gsm-list common-lisp:null) :accessor
                         %cell-towers-gsm :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'cell-towers 'make-cell-towers))
 (common-lisp:defun make-cell-towers
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cdma lte tdscdma wcdma gsm)
   (common-lisp:apply #'common-lisp:make-instance 'cell-towers
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cell-towers))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cell-towers))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gsm))
      (common-lisp:list
       (common-lisp:cons "Gsm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wcdma))
      (common-lisp:list
       (common-lisp:cons "Wcdma"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tdscdma))
      (common-lisp:list
       (common-lisp:cons "Tdscdma"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lte))
      (common-lisp:list
       (common-lisp:cons "Lte"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cdma))
      (common-lisp:list
       (common-lisp:cons "Cdma"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cell-towers))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass certificate-list common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or certificate-value common-lisp:null)
                         :accessor %certificate-list-value :initform
                         (common-lisp:error ":value is required"))
                        (signing-alg :initarg :signing-alg :type
                         (common-lisp:or signing-alg common-lisp:null)
                         :accessor %certificate-list-signing-alg :initform
                         (common-lisp:error ":signing-alg is required"))))
 (common-lisp:export
  (common-lisp:list 'certificate-list 'make-certificate-list))
 (common-lisp:defun make-certificate-list
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value signing-alg)
   (common-lisp:apply #'common-lisp:make-instance 'certificate-list
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input certificate-list))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input certificate-list))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'signing-alg))
      (common-lisp:list
       (common-lisp:cons "SigningAlg"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input certificate-list))
   common-lisp:nil))
(common-lisp:deftype certificate-pem () 'common-lisp:string)
(common-lisp:deftype certificate-value () 'common-lisp:string)
(common-lisp:deftype channel-mask () 'common-lisp:string)
(common-lisp:deftype class-btimeout () 'common-lisp:integer)
(common-lisp:deftype class-ctimeout () 'common-lisp:integer)
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (iotwireless-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflict-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-id
                    'conflict-exception-resource-type)))
(common-lisp:deftype connection-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass connection-status-event-configuration common-lisp:nil
                       ((wireless-gateway-id-event-topic :initarg
                         :wireless-gateway-id-event-topic :type
                         (common-lisp:or event-notification-topic-status
                                         common-lisp:null)
                         :accessor
                         %connection-status-event-configuration-wireless-gateway-id-event-topic
                         :initform common-lisp:nil)
                        (lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or
                          lo-ra-wanconnection-status-event-notification-configurations
                          common-lisp:null)
                         :accessor
                         %connection-status-event-configuration-lo-ra-wan
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'connection-status-event-configuration
                    'make-connection-status-event-configuration))
 (common-lisp:defun make-connection-status-event-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wireless-gateway-id-event-topic
                     lo-ra-wan)
   (common-lisp:apply #'common-lisp:make-instance
                      'connection-status-event-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connection-status-event-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connection-status-event-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wireless-gateway-id-event-topic))
      (common-lisp:list
       (common-lisp:cons "WirelessGatewayIdEventTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connection-status-event-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass connection-status-resource-type-event-configuration
                       common-lisp:nil
                       ((lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or
                          lo-ra-wanconnection-status-resource-type-event-configuration
                          common-lisp:null)
                         :accessor
                         %connection-status-resource-type-event-configuration-lo-ra-wan
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'connection-status-resource-type-event-configuration
                    'make-connection-status-resource-type-event-configuration))
 (common-lisp:defun make-connection-status-resource-type-event-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lo-ra-wan)
   (common-lisp:apply #'common-lisp:make-instance
                      'connection-status-resource-type-event-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          connection-status-resource-type-event-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          connection-status-resource-type-event-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          connection-status-resource-type-event-configuration))
   common-lisp:nil))
(common-lisp:deftype coordinate () 'common-lisp:single-float)
(common-lisp:deftype crc () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass create-destination-request common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %create-destination-request-client-request-token
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-destination-request-tags :initform
                         common-lisp:nil)
                        (role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %create-destination-request-role-arn :initform
                         (common-lisp:error ":role-arn is required"))
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-destination-request-description
                         :initform common-lisp:nil)
                        (expression :initarg :expression :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         %create-destination-request-expression :initform
                         (common-lisp:error ":expression is required"))
                        (expression-type :initarg :expression-type :type
                         (common-lisp:or expression-type common-lisp:null)
                         :accessor %create-destination-request-expression-type
                         :initform
                         (common-lisp:error ":expression-type is required"))
                        (name :initarg :name :type
                         (common-lisp:or destination-name common-lisp:null)
                         :accessor %create-destination-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-destination-request
                    'make-create-destination-request))
 (common-lisp:defun make-create-destination-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-request-token tags role-arn
                     description expression expression-type name)
   (common-lisp:apply #'common-lisp:make-instance 'create-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression-type))
      (common-lisp:list
       (common-lisp:cons "ExpressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-destination-response common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or destination-name common-lisp:null)
                         :accessor %create-destination-response-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or destination-arn common-lisp:null)
                         :accessor %create-destination-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-destination-response
                    'make-create-destination-response))
 (common-lisp:defun make-create-destination-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-destination-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-destination-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-destination-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-device-profile-request common-lisp:nil
                       ((sidewalk :initarg :sidewalk :type
                         (common-lisp:or sidewalk-create-device-profile
                                         common-lisp:null)
                         :accessor %create-device-profile-request-sidewalk
                         :initform common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %create-device-profile-request-client-request-token
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-device-profile-request-tags :initform
                         common-lisp:nil)
                        (lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or lo-ra-wandevice-profile
                                         common-lisp:null)
                         :accessor %create-device-profile-request-lo-ra-wan
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or device-profile-name common-lisp:null)
                         :accessor %create-device-profile-request-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-device-profile-request
                    'make-create-device-profile-request))
 (common-lisp:defun make-create-device-profile-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sidewalk client-request-token tags
                     lo-ra-wan name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-device-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-device-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-device-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sidewalk))
      (common-lisp:list
       (common-lisp:cons "Sidewalk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-device-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-device-profile-response common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or device-profile-id common-lisp:null)
                         :accessor %create-device-profile-response-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or device-profile-arn common-lisp:null)
                         :accessor %create-device-profile-response-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-device-profile-response
                    'make-create-device-profile-response))
 (common-lisp:defun make-create-device-profile-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-device-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-device-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-device-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-device-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-fuota-task-request common-lisp:nil
                       ((fragment-interval-ms :initarg :fragment-interval-ms
                         :type
                         (common-lisp:or fragment-interval-ms common-lisp:null)
                         :accessor
                         %create-fuota-task-request-fragment-interval-ms
                         :initform common-lisp:nil)
                        (fragment-size-bytes :initarg :fragment-size-bytes
                         :type
                         (common-lisp:or fragment-size-bytes common-lisp:null)
                         :accessor
                         %create-fuota-task-request-fragment-size-bytes
                         :initform common-lisp:nil)
                        (redundancy-percent :initarg :redundancy-percent :type
                         (common-lisp:or redundancy-percent common-lisp:null)
                         :accessor
                         %create-fuota-task-request-redundancy-percent
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-fuota-task-request-tags :initform
                         common-lisp:nil)
                        (firmware-update-role :initarg :firmware-update-role
                         :type
                         (common-lisp:or firmware-update-role common-lisp:null)
                         :accessor
                         %create-fuota-task-request-firmware-update-role
                         :initform
                         (common-lisp:error
                          ":firmware-update-role is required"))
                        (firmware-update-image :initarg :firmware-update-image
                         :type
                         (common-lisp:or firmware-update-image
                                         common-lisp:null)
                         :accessor
                         %create-fuota-task-request-firmware-update-image
                         :initform
                         (common-lisp:error
                          ":firmware-update-image is required"))
                        (lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or lo-ra-wanfuota-task common-lisp:null)
                         :accessor %create-fuota-task-request-lo-ra-wan
                         :initform common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %create-fuota-task-request-client-request-token
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-fuota-task-request-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or fuota-task-name common-lisp:null)
                         :accessor %create-fuota-task-request-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-fuota-task-request
                    'make-create-fuota-task-request))
 (common-lisp:defun make-create-fuota-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fragment-interval-ms fragment-size-bytes
                     redundancy-percent tags firmware-update-role
                     firmware-update-image lo-ra-wan client-request-token
                     description name)
   (common-lisp:apply #'common-lisp:make-instance 'create-fuota-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-fuota-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-fuota-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firmware-update-image))
      (common-lisp:list
       (common-lisp:cons "FirmwareUpdateImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firmware-update-role))
      (common-lisp:list
       (common-lisp:cons "FirmwareUpdateRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redundancy-percent))
      (common-lisp:list
       (common-lisp:cons "RedundancyPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fragment-size-bytes))
      (common-lisp:list
       (common-lisp:cons "FragmentSizeBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fragment-interval-ms))
      (common-lisp:list
       (common-lisp:cons "FragmentIntervalMS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-fuota-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-fuota-task-response common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or fuota-task-id common-lisp:null)
                         :accessor %create-fuota-task-response-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or fuota-task-arn common-lisp:null)
                         :accessor %create-fuota-task-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-fuota-task-response
                    'make-create-fuota-task-response))
 (common-lisp:defun make-create-fuota-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id arn)
   (common-lisp:apply #'common-lisp:make-instance 'create-fuota-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-fuota-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-fuota-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-fuota-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-multicast-group-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-multicast-group-request-tags :initform
                         common-lisp:nil)
                        (lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or lo-ra-wanmulticast common-lisp:null)
                         :accessor %create-multicast-group-request-lo-ra-wan
                         :initform
                         (common-lisp:error ":lo-ra-wan is required"))
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %create-multicast-group-request-client-request-token
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-multicast-group-request-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or multicast-group-name common-lisp:null)
                         :accessor %create-multicast-group-request-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-multicast-group-request
                    'make-create-multicast-group-request))
 (common-lisp:defun make-create-multicast-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags lo-ra-wan client-request-token
                     description name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-multicast-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multicast-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multicast-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multicast-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-multicast-group-response common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or multicast-group-id common-lisp:null)
                         :accessor %create-multicast-group-response-id
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or multicast-group-arn common-lisp:null)
                         :accessor %create-multicast-group-response-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-multicast-group-response
                    'make-create-multicast-group-response))
 (common-lisp:defun make-create-multicast-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-multicast-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-multicast-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-multicast-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-multicast-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-network-analyzer-configuration-request
                       common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %create-network-analyzer-configuration-request-client-request-token
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-network-analyzer-configuration-request-tags
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         %create-network-analyzer-configuration-request-description
                         :initform common-lisp:nil)
                        (wireless-gateways :initarg :wireless-gateways :type
                         (common-lisp:or wireless-gateway-list
                                         common-lisp:null)
                         :accessor
                         %create-network-analyzer-configuration-request-wireless-gateways
                         :initform common-lisp:nil)
                        (wireless-devices :initarg :wireless-devices :type
                         (common-lisp:or wireless-device-list common-lisp:null)
                         :accessor
                         %create-network-analyzer-configuration-request-wireless-devices
                         :initform common-lisp:nil)
                        (trace-content :initarg :trace-content :type
                         (common-lisp:or trace-content common-lisp:null)
                         :accessor
                         %create-network-analyzer-configuration-request-trace-content
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or network-analyzer-configuration-name
                                         common-lisp:null)
                         :accessor
                         %create-network-analyzer-configuration-request-name
                         :initform (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-network-analyzer-configuration-request
                    'make-create-network-analyzer-configuration-request))
 (common-lisp:defun make-create-network-analyzer-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-request-token tags description
                     wireless-gateways wireless-devices trace-content name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-network-analyzer-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-network-analyzer-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-network-analyzer-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trace-content))
      (common-lisp:list
       (common-lisp:cons "TraceContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wireless-devices))
      (common-lisp:list
       (common-lisp:cons "WirelessDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wireless-gateways))
      (common-lisp:list
       (common-lisp:cons "WirelessGateways"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-network-analyzer-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-network-analyzer-configuration-response
                       common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or network-analyzer-configuration-name
                                         common-lisp:null)
                         :accessor
                         %create-network-analyzer-configuration-response-name
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or network-analyzer-configuration-arn
                                         common-lisp:null)
                         :accessor
                         %create-network-analyzer-configuration-response-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-network-analyzer-configuration-response
                    'make-create-network-analyzer-configuration-response))
 (common-lisp:defun make-create-network-analyzer-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-network-analyzer-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-network-analyzer-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-network-analyzer-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-network-analyzer-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-service-profile-request common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %create-service-profile-request-client-request-token
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-service-profile-request-tags :initform
                         common-lisp:nil)
                        (lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or lo-ra-wanservice-profile
                                         common-lisp:null)
                         :accessor %create-service-profile-request-lo-ra-wan
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or service-profile-name common-lisp:null)
                         :accessor %create-service-profile-request-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-service-profile-request
                    'make-create-service-profile-request))
 (common-lisp:defun make-create-service-profile-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-request-token tags lo-ra-wan name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-service-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-service-profile-response common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or service-profile-id common-lisp:null)
                         :accessor %create-service-profile-response-id
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or service-profile-arn common-lisp:null)
                         :accessor %create-service-profile-response-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-service-profile-response
                    'make-create-service-profile-response))
 (common-lisp:defun make-create-service-profile-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-service-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-wireless-device-request common-lisp:nil
                       ((sidewalk :initarg :sidewalk :type
                         (common-lisp:or sidewalk-create-wireless-device
                                         common-lisp:null)
                         :accessor %create-wireless-device-request-sidewalk
                         :initform common-lisp:nil)
                        (positioning :initarg :positioning :type
                         (common-lisp:or positioning-config-status
                                         common-lisp:null)
                         :accessor %create-wireless-device-request-positioning
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-wireless-device-request-tags :initform
                         common-lisp:nil)
                        (lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or lo-ra-wandevice common-lisp:null)
                         :accessor %create-wireless-device-request-lo-ra-wan
                         :initform common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %create-wireless-device-request-client-request-token
                         :initform common-lisp:nil)
                        (destination-name :initarg :destination-name :type
                         (common-lisp:or destination-name common-lisp:null)
                         :accessor
                         %create-wireless-device-request-destination-name
                         :initform
                         (common-lisp:error ":destination-name is required"))
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-wireless-device-request-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or wireless-device-name common-lisp:null)
                         :accessor %create-wireless-device-request-name
                         :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or wireless-device-type common-lisp:null)
                         :accessor %create-wireless-device-request-type
                         :initform (common-lisp:error ":type is required"))))
 (common-lisp:export
  (common-lisp:list 'create-wireless-device-request
                    'make-create-wireless-device-request))
 (common-lisp:defun make-create-wireless-device-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sidewalk positioning tags lo-ra-wan
                     client-request-token destination-name description name
                     type)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-wireless-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-wireless-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-wireless-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-name))
      (common-lisp:list
       (common-lisp:cons "DestinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'positioning))
      (common-lisp:list
       (common-lisp:cons "Positioning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sidewalk))
      (common-lisp:list
       (common-lisp:cons "Sidewalk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-wireless-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-wireless-device-response common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or wireless-device-id common-lisp:null)
                         :accessor %create-wireless-device-response-id
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or wireless-device-arn common-lisp:null)
                         :accessor %create-wireless-device-response-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-wireless-device-response
                    'make-create-wireless-device-response))
 (common-lisp:defun make-create-wireless-device-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-wireless-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-wireless-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-wireless-device-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-wireless-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-wireless-gateway-request common-lisp:nil
                       ((client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %create-wireless-gateway-request-client-request-token
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-wireless-gateway-request-tags :initform
                         common-lisp:nil)
                        (lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or lo-ra-wangateway common-lisp:null)
                         :accessor %create-wireless-gateway-request-lo-ra-wan
                         :initform
                         (common-lisp:error ":lo-ra-wan is required"))
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %create-wireless-gateway-request-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or wireless-gateway-name
                                         common-lisp:null)
                         :accessor %create-wireless-gateway-request-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-wireless-gateway-request
                    'make-create-wireless-gateway-request))
 (common-lisp:defun make-create-wireless-gateway-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key client-request-token tags lo-ra-wan
                     description name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-wireless-gateway-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-wireless-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-wireless-gateway-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-wireless-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-wireless-gateway-response common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or wireless-device-id common-lisp:null)
                         :accessor %create-wireless-gateway-response-id
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or wireless-gateway-arn common-lisp:null)
                         :accessor %create-wireless-gateway-response-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-wireless-gateway-response
                    'make-create-wireless-gateway-response))
 (common-lisp:defun make-create-wireless-gateway-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-wireless-gateway-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-wireless-gateway-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-wireless-gateway-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-wireless-gateway-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-wireless-gateway-task-definition-request
                       common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-wireless-gateway-task-definition-request-tags
                         :initform common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %create-wireless-gateway-task-definition-request-client-request-token
                         :initform common-lisp:nil)
                        (update :initarg :update :type
                         (common-lisp:or update-wireless-gateway-task-create
                                         common-lisp:null)
                         :accessor
                         %create-wireless-gateway-task-definition-request-update
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or wireless-gateway-task-name
                                         common-lisp:null)
                         :accessor
                         %create-wireless-gateway-task-definition-request-name
                         :initform common-lisp:nil)
                        (auto-create-tasks :initarg :auto-create-tasks :type
                         (common-lisp:or auto-create-tasks common-lisp:null)
                         :accessor
                         %create-wireless-gateway-task-definition-request-auto-create-tasks
                         :initform
                         (common-lisp:error
                          ":auto-create-tasks is required"))))
 (common-lisp:export
  (common-lisp:list 'create-wireless-gateway-task-definition-request
                    'make-create-wireless-gateway-task-definition-request))
 (common-lisp:defun make-create-wireless-gateway-task-definition-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags client-request-token update name
                     auto-create-tasks)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-wireless-gateway-task-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-wireless-gateway-task-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-wireless-gateway-task-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-create-tasks))
      (common-lisp:list
       (common-lisp:cons "AutoCreateTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "Update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-wireless-gateway-task-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-wireless-gateway-task-definition-response
                       common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or wireless-gateway-task-definition-arn
                                         common-lisp:null)
                         :accessor
                         %create-wireless-gateway-task-definition-response-arn
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or wireless-gateway-task-definition-id
                                         common-lisp:null)
                         :accessor
                         %create-wireless-gateway-task-definition-response-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-wireless-gateway-task-definition-response
                    'make-create-wireless-gateway-task-definition-response))
 (common-lisp:defun make-create-wireless-gateway-task-definition-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-wireless-gateway-task-definition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-wireless-gateway-task-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-wireless-gateway-task-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-wireless-gateway-task-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-wireless-gateway-task-request common-lisp:nil
                       ((wireless-gateway-task-definition-id :initarg
                         :wireless-gateway-task-definition-id :type
                         (common-lisp:or wireless-gateway-task-definition-id
                                         common-lisp:null)
                         :accessor
                         %create-wireless-gateway-task-request-wireless-gateway-task-definition-id
                         :initform
                         (common-lisp:error
                          ":wireless-gateway-task-definition-id is required"))
                        (id :initarg :id :type
                         (common-lisp:or wireless-gateway-id common-lisp:null)
                         :accessor %create-wireless-gateway-task-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'create-wireless-gateway-task-request
                    'make-create-wireless-gateway-task-request))
 (common-lisp:defun make-create-wireless-gateway-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wireless-gateway-task-definition-id id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-wireless-gateway-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-wireless-gateway-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-wireless-gateway-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wireless-gateway-task-definition-id))
      (common-lisp:list
       (common-lisp:cons "WirelessGatewayTaskDefinitionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-wireless-gateway-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-wireless-gateway-task-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or wireless-gateway-task-status
                                         common-lisp:null)
                         :accessor
                         %create-wireless-gateway-task-response-status
                         :initform common-lisp:nil)
                        (wireless-gateway-task-definition-id :initarg
                         :wireless-gateway-task-definition-id :type
                         (common-lisp:or wireless-gateway-task-definition-id
                                         common-lisp:null)
                         :accessor
                         %create-wireless-gateway-task-response-wireless-gateway-task-definition-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-wireless-gateway-task-response
                    'make-create-wireless-gateway-task-response))
 (common-lisp:defun make-create-wireless-gateway-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status
                     wireless-gateway-task-definition-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-wireless-gateway-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-wireless-gateway-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-wireless-gateway-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wireless-gateway-task-definition-id))
      (common-lisp:list
       (common-lisp:cons "WirelessGatewayTaskDefinitionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-wireless-gateway-task-response))
   common-lisp:nil))
(common-lisp:deftype created-at () 'common-lisp:string)
(common-lisp:deftype creation-date () 'common-lisp:string)
(common-lisp:deftype creation-time () 'common-lisp:string)
(common-lisp:deftype dak-certificate-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass dak-certificate-metadata common-lisp:nil
                       ((device-type-id :initarg :device-type-id :type
                         (common-lisp:or device-type-id common-lisp:null)
                         :accessor %dak-certificate-metadata-device-type-id
                         :initform common-lisp:nil)
                        (ap-id :initarg :ap-id :type
                         (common-lisp:or ap-id common-lisp:null) :accessor
                         %dak-certificate-metadata-ap-id :initform
                         common-lisp:nil)
                        (factory-support :initarg :factory-support :type
                         (common-lisp:or factory-support common-lisp:null)
                         :accessor %dak-certificate-metadata-factory-support
                         :initform common-lisp:nil)
                        (max-allowed-signature :initarg :max-allowed-signature
                         :type
                         (common-lisp:or max-allowed-signature
                                         common-lisp:null)
                         :accessor
                         %dak-certificate-metadata-max-allowed-signature
                         :initform common-lisp:nil)
                        (certificate-id :initarg :certificate-id :type
                         (common-lisp:or dak-certificate-id common-lisp:null)
                         :accessor %dak-certificate-metadata-certificate-id
                         :initform
                         (common-lisp:error ":certificate-id is required"))))
 (common-lisp:export
  (common-lisp:list 'dak-certificate-metadata 'make-dak-certificate-metadata))
 (common-lisp:defun make-dak-certificate-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device-type-id ap-id factory-support
                     max-allowed-signature certificate-id)
   (common-lisp:apply #'common-lisp:make-instance 'dak-certificate-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dak-certificate-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dak-certificate-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "CertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-allowed-signature))
      (common-lisp:list
       (common-lisp:cons "MaxAllowedSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'factory-support))
      (common-lisp:list
       (common-lisp:cons "FactorySupport"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ap-id))
      (common-lisp:list
       (common-lisp:cons "ApId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-type-id))
      (common-lisp:list
       (common-lisp:cons "DeviceTypeId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dak-certificate-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype dak-certificate-metadata-list ()
   '(trivial-types:proper-list dak-certificate-metadata))
 (common-lisp:defun |make-dak-certificate-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            dak-certificate-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass delete-destination-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or destination-name common-lisp:null)
                         :accessor %delete-destination-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-destination-request
                    'make-delete-destination-request))
 (common-lisp:defun make-delete-destination-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-destination-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-destination-response
                    'make-delete-destination-response))
 (common-lisp:defun make-delete-destination-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-destination-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-destination-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-device-profile-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or device-profile-id common-lisp:null)
                         :accessor %delete-device-profile-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-device-profile-request
                    'make-delete-device-profile-request))
 (common-lisp:defun make-delete-device-profile-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-device-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-device-profile-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-device-profile-response
                    'make-delete-device-profile-response))
 (common-lisp:defun make-delete-device-profile-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-device-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-device-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-fuota-task-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or fuota-task-id common-lisp:null)
                         :accessor %delete-fuota-task-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-fuota-task-request
                    'make-delete-fuota-task-request))
 (common-lisp:defun make-delete-fuota-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'delete-fuota-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-fuota-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-fuota-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-fuota-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-fuota-task-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-fuota-task-response
                    'make-delete-fuota-task-response))
 (common-lisp:defun make-delete-fuota-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-fuota-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-fuota-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-fuota-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-fuota-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-multicast-group-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or multicast-group-id common-lisp:null)
                         :accessor %delete-multicast-group-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-multicast-group-request
                    'make-delete-multicast-group-request))
 (common-lisp:defun make-delete-multicast-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-multicast-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-multicast-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-multicast-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-multicast-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-multicast-group-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-multicast-group-response
                    'make-delete-multicast-group-response))
 (common-lisp:defun make-delete-multicast-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-multicast-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-multicast-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-multicast-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-multicast-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-network-analyzer-configuration-request
                       common-lisp:nil
                       ((configuration-name :initarg :configuration-name :type
                         (common-lisp:or network-analyzer-configuration-name
                                         common-lisp:null)
                         :accessor
                         %delete-network-analyzer-configuration-request-configuration-name
                         :initform
                         (common-lisp:error
                          ":configuration-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-network-analyzer-configuration-request
                    'make-delete-network-analyzer-configuration-request))
 (common-lisp:defun make-delete-network-analyzer-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-network-analyzer-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-analyzer-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-analyzer-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-analyzer-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-network-analyzer-configuration-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-network-analyzer-configuration-response
                    'make-delete-network-analyzer-configuration-response))
 (common-lisp:defun make-delete-network-analyzer-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-network-analyzer-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-analyzer-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-analyzer-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-network-analyzer-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-queued-messages-request common-lisp:nil
                       ((wireless-device-type :initarg :wireless-device-type
                         :type
                         (common-lisp:or wireless-device-type common-lisp:null)
                         :accessor
                         %delete-queued-messages-request-wireless-device-type
                         :initform common-lisp:nil)
                        (message-id :initarg :message-id :type
                         (common-lisp:or message-id common-lisp:null) :accessor
                         %delete-queued-messages-request-message-id :initform
                         (common-lisp:error ":message-id is required"))
                        (id :initarg :id :type
                         (common-lisp:or wireless-device-id common-lisp:null)
                         :accessor %delete-queued-messages-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-queued-messages-request
                    'make-delete-queued-messages-request))
 (common-lisp:defun make-delete-queued-messages-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wireless-device-type message-id id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-queued-messages-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-queued-messages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-queued-messages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-queued-messages-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-queued-messages-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-queued-messages-response
                    'make-delete-queued-messages-response))
 (common-lisp:defun make-delete-queued-messages-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-queued-messages-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-queued-messages-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-queued-messages-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-queued-messages-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-service-profile-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or service-profile-id common-lisp:null)
                         :accessor %delete-service-profile-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-service-profile-request
                    'make-delete-service-profile-request))
 (common-lisp:defun make-delete-service-profile-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-service-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-service-profile-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-service-profile-response
                    'make-delete-service-profile-response))
 (common-lisp:defun make-delete-service-profile-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-service-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-wireless-device-import-task-request
                       common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or import-task-id common-lisp:null)
                         :accessor
                         %delete-wireless-device-import-task-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-wireless-device-import-task-request
                    'make-delete-wireless-device-import-task-request))
 (common-lisp:defun make-delete-wireless-device-import-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-wireless-device-import-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-device-import-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-device-import-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-device-import-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-wireless-device-import-task-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-wireless-device-import-task-response
                    'make-delete-wireless-device-import-task-response))
 (common-lisp:defun make-delete-wireless-device-import-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-wireless-device-import-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-device-import-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-device-import-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-device-import-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-wireless-device-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or wireless-device-id common-lisp:null)
                         :accessor %delete-wireless-device-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-wireless-device-request
                    'make-delete-wireless-device-request))
 (common-lisp:defun make-delete-wireless-device-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-wireless-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-wireless-device-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-wireless-device-response
                    'make-delete-wireless-device-response))
 (common-lisp:defun make-delete-wireless-device-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-wireless-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-wireless-gateway-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or wireless-gateway-id common-lisp:null)
                         :accessor %delete-wireless-gateway-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-wireless-gateway-request
                    'make-delete-wireless-gateway-request))
 (common-lisp:defun make-delete-wireless-gateway-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-wireless-gateway-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-wireless-gateway-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-wireless-gateway-response
                    'make-delete-wireless-gateway-response))
 (common-lisp:defun make-delete-wireless-gateway-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-wireless-gateway-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-gateway-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-gateway-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-gateway-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-wireless-gateway-task-definition-request
                       common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or wireless-gateway-task-definition-id
                                         common-lisp:null)
                         :accessor
                         %delete-wireless-gateway-task-definition-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-wireless-gateway-task-definition-request
                    'make-delete-wireless-gateway-task-definition-request))
 (common-lisp:defun make-delete-wireless-gateway-task-definition-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-wireless-gateway-task-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-gateway-task-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-gateway-task-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-gateway-task-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-wireless-gateway-task-definition-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-wireless-gateway-task-definition-response
                    'make-delete-wireless-gateway-task-definition-response))
 (common-lisp:defun make-delete-wireless-gateway-task-definition-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-wireless-gateway-task-definition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-gateway-task-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-gateway-task-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-gateway-task-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-wireless-gateway-task-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or wireless-gateway-id common-lisp:null)
                         :accessor %delete-wireless-gateway-task-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-wireless-gateway-task-request
                    'make-delete-wireless-gateway-task-request))
 (common-lisp:defun make-delete-wireless-gateway-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-wireless-gateway-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-gateway-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-gateway-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-gateway-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-wireless-gateway-task-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-wireless-gateway-task-response
                    'make-delete-wireless-gateway-task-response))
 (common-lisp:defun make-delete-wireless-gateway-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-wireless-gateway-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-gateway-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-gateway-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-wireless-gateway-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-wireless-device-request common-lisp:nil
                       ((wireless-device-type :initarg :wireless-device-type
                         :type
                         (common-lisp:or wireless-device-type common-lisp:null)
                         :accessor
                         %deregister-wireless-device-request-wireless-device-type
                         :initform common-lisp:nil)
                        (identifier :initarg :identifier :type
                         (common-lisp:or identifier common-lisp:null) :accessor
                         %deregister-wireless-device-request-identifier
                         :initform
                         (common-lisp:error ":identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'deregister-wireless-device-request
                    'make-deregister-wireless-device-request))
 (common-lisp:defun make-deregister-wireless-device-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wireless-device-type identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-wireless-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-wireless-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-wireless-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-wireless-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass deregister-wireless-device-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'deregister-wireless-device-response
                    'make-deregister-wireless-device-response))
 (common-lisp:defun make-deregister-wireless-device-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'deregister-wireless-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deregister-wireless-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deregister-wireless-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deregister-wireless-device-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:deftype destination-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype destination-list ()
   '(trivial-types:proper-list destinations))
 (common-lisp:defun |make-destination-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list destinations))
   aws-sdk/generator/shape::members))
(common-lisp:deftype destination-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass destinations common-lisp:nil
                       ((role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %destinations-role-arn :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %destinations-description :initform
                         common-lisp:nil)
                        (expression :initarg :expression :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         %destinations-expression :initform common-lisp:nil)
                        (expression-type :initarg :expression-type :type
                         (common-lisp:or expression-type common-lisp:null)
                         :accessor %destinations-expression-type :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or destination-name common-lisp:null)
                         :accessor %destinations-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or destination-arn common-lisp:null)
                         :accessor %destinations-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'destinations 'make-destinations))
 (common-lisp:defun make-destinations
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn description expression
                     expression-type name arn)
   (common-lisp:apply #'common-lisp:make-instance 'destinations
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input destinations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input destinations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression-type))
      (common-lisp:list
       (common-lisp:cons "ExpressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input destinations))
   common-lisp:nil))
(common-lisp:deftype dev-addr () 'common-lisp:string)
(common-lisp:deftype dev-eui () 'common-lisp:string)
(common-lisp:deftype dev-status-req-freq () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype device-certificate-list ()
   '(trivial-types:proper-list certificate-list))
 (common-lisp:defun |make-device-certificate-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list certificate-list))
   aws-sdk/generator/shape::members))
(common-lisp:deftype device-creation-file () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype device-creation-file-list ()
   '(trivial-types:proper-list device-creation-file))
 (common-lisp:defun |make-device-creation-file-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-creation-file))
   aws-sdk/generator/shape::members))
(common-lisp:deftype device-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass device-profile common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or device-profile-id common-lisp:null)
                         :accessor %device-profile-id :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or device-profile-name common-lisp:null)
                         :accessor %device-profile-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or device-profile-arn common-lisp:null)
                         :accessor %device-profile-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'device-profile 'make-device-profile))
 (common-lisp:defun make-device-profile
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id name arn)
   (common-lisp:apply #'common-lisp:make-instance 'device-profile
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input device-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input device-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input device-profile))
   common-lisp:nil))
(common-lisp:deftype device-profile-arn () 'common-lisp:string)
(common-lisp:deftype device-profile-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype device-profile-list ()
   '(trivial-types:proper-list device-profile))
 (common-lisp:defun |make-device-profile-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list device-profile))
   aws-sdk/generator/shape::members))
(common-lisp:deftype device-profile-name () 'common-lisp:string)
(common-lisp:deftype device-profile-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass device-registration-state-event-configuration
                       common-lisp:nil
                       ((wireless-device-id-event-topic :initarg
                         :wireless-device-id-event-topic :type
                         (common-lisp:or event-notification-topic-status
                                         common-lisp:null)
                         :accessor
                         %device-registration-state-event-configuration-wireless-device-id-event-topic
                         :initform common-lisp:nil)
                        (sidewalk :initarg :sidewalk :type
                         (common-lisp:or
                          sidewalk-event-notification-configurations
                          common-lisp:null)
                         :accessor
                         %device-registration-state-event-configuration-sidewalk
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'device-registration-state-event-configuration
                    'make-device-registration-state-event-configuration))
 (common-lisp:defun make-device-registration-state-event-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wireless-device-id-event-topic sidewalk)
   (common-lisp:apply #'common-lisp:make-instance
                      'device-registration-state-event-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          device-registration-state-event-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          device-registration-state-event-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sidewalk))
      (common-lisp:list
       (common-lisp:cons "Sidewalk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wireless-device-id-event-topic))
      (common-lisp:list
       (common-lisp:cons "WirelessDeviceIdEventTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          device-registration-state-event-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  device-registration-state-resource-type-event-configuration common-lisp:nil
  ((sidewalk :initarg :sidewalk :type
    (common-lisp:or sidewalk-resource-type-event-configuration
                    common-lisp:null)
    :accessor
    %device-registration-state-resource-type-event-configuration-sidewalk
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'device-registration-state-resource-type-event-configuration
   'make-device-registration-state-resource-type-event-configuration))
 (common-lisp:defun make-device-registration-state-resource-type-event-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sidewalk)
   (common-lisp:apply #'common-lisp:make-instance
                      'device-registration-state-resource-type-event-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          device-registration-state-resource-type-event-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          device-registration-state-resource-type-event-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sidewalk))
      (common-lisp:list
       (common-lisp:cons "Sidewalk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          device-registration-state-resource-type-event-configuration))
   common-lisp:nil))
(common-lisp:deftype device-state () 'common-lisp:string)
(common-lisp:deftype device-type-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass disassociate-aws-account-from-partner-account-request
                       common-lisp:nil
                       ((partner-type :initarg :partner-type :type
                         (common-lisp:or partner-type common-lisp:null)
                         :accessor
                         %disassociate-aws-account-from-partner-account-request-partner-type
                         :initform
                         (common-lisp:error ":partner-type is required"))
                        (partner-account-id :initarg :partner-account-id :type
                         (common-lisp:or partner-account-id common-lisp:null)
                         :accessor
                         %disassociate-aws-account-from-partner-account-request-partner-account-id
                         :initform
                         (common-lisp:error
                          ":partner-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-aws-account-from-partner-account-request
                    'make-disassociate-aws-account-from-partner-account-request))
 (common-lisp:defun make-disassociate-aws-account-from-partner-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key partner-type partner-account-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-aws-account-from-partner-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-aws-account-from-partner-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-aws-account-from-partner-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-aws-account-from-partner-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-aws-account-from-partner-account-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-aws-account-from-partner-account-response
                    'make-disassociate-aws-account-from-partner-account-response))
 (common-lisp:defun make-disassociate-aws-account-from-partner-account-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-aws-account-from-partner-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-aws-account-from-partner-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-aws-account-from-partner-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-aws-account-from-partner-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-multicast-group-from-fuota-task-request
                       common-lisp:nil
                       ((multicast-group-id :initarg :multicast-group-id :type
                         (common-lisp:or multicast-group-id common-lisp:null)
                         :accessor
                         %disassociate-multicast-group-from-fuota-task-request-multicast-group-id
                         :initform
                         (common-lisp:error ":multicast-group-id is required"))
                        (id :initarg :id :type
                         (common-lisp:or fuota-task-id common-lisp:null)
                         :accessor
                         %disassociate-multicast-group-from-fuota-task-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-multicast-group-from-fuota-task-request
                    'make-disassociate-multicast-group-from-fuota-task-request))
 (common-lisp:defun make-disassociate-multicast-group-from-fuota-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key multicast-group-id id)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-multicast-group-from-fuota-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-multicast-group-from-fuota-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-multicast-group-from-fuota-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-multicast-group-from-fuota-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-multicast-group-from-fuota-task-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-multicast-group-from-fuota-task-response
                    'make-disassociate-multicast-group-from-fuota-task-response))
 (common-lisp:defun make-disassociate-multicast-group-from-fuota-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-multicast-group-from-fuota-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-multicast-group-from-fuota-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-multicast-group-from-fuota-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-multicast-group-from-fuota-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-wireless-device-from-fuota-task-request
                       common-lisp:nil
                       ((wireless-device-id :initarg :wireless-device-id :type
                         (common-lisp:or wireless-device-id common-lisp:null)
                         :accessor
                         %disassociate-wireless-device-from-fuota-task-request-wireless-device-id
                         :initform
                         (common-lisp:error ":wireless-device-id is required"))
                        (id :initarg :id :type
                         (common-lisp:or fuota-task-id common-lisp:null)
                         :accessor
                         %disassociate-wireless-device-from-fuota-task-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-wireless-device-from-fuota-task-request
                    'make-disassociate-wireless-device-from-fuota-task-request))
 (common-lisp:defun make-disassociate-wireless-device-from-fuota-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wireless-device-id id)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-wireless-device-from-fuota-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-device-from-fuota-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-device-from-fuota-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-device-from-fuota-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-wireless-device-from-fuota-task-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-wireless-device-from-fuota-task-response
                    'make-disassociate-wireless-device-from-fuota-task-response))
 (common-lisp:defun make-disassociate-wireless-device-from-fuota-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-wireless-device-from-fuota-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-device-from-fuota-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-device-from-fuota-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-device-from-fuota-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  disassociate-wireless-device-from-multicast-group-request common-lisp:nil
  ((wireless-device-id :initarg :wireless-device-id :type
    (common-lisp:or wireless-device-id common-lisp:null) :accessor
    %disassociate-wireless-device-from-multicast-group-request-wireless-device-id
    :initform (common-lisp:error ":wireless-device-id is required"))
   (id :initarg :id :type (common-lisp:or multicast-group-id common-lisp:null)
    :accessor %disassociate-wireless-device-from-multicast-group-request-id
    :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-wireless-device-from-multicast-group-request
                    'make-disassociate-wireless-device-from-multicast-group-request))
 (common-lisp:defun make-disassociate-wireless-device-from-multicast-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wireless-device-id id)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-wireless-device-from-multicast-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-device-from-multicast-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-device-from-multicast-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-device-from-multicast-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  disassociate-wireless-device-from-multicast-group-response common-lisp:nil
  common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-wireless-device-from-multicast-group-response
                    'make-disassociate-wireless-device-from-multicast-group-response))
 (common-lisp:defun make-disassociate-wireless-device-from-multicast-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-wireless-device-from-multicast-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-device-from-multicast-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-device-from-multicast-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-device-from-multicast-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-wireless-device-from-thing-request
                       common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or wireless-device-id common-lisp:null)
                         :accessor
                         %disassociate-wireless-device-from-thing-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-wireless-device-from-thing-request
                    'make-disassociate-wireless-device-from-thing-request))
 (common-lisp:defun make-disassociate-wireless-device-from-thing-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-wireless-device-from-thing-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-device-from-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-device-from-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-device-from-thing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-wireless-device-from-thing-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-wireless-device-from-thing-response
                    'make-disassociate-wireless-device-from-thing-response))
 (common-lisp:defun make-disassociate-wireless-device-from-thing-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-wireless-device-from-thing-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-device-from-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-device-from-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-device-from-thing-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-wireless-gateway-from-certificate-request
                       common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or wireless-gateway-id common-lisp:null)
                         :accessor
                         %disassociate-wireless-gateway-from-certificate-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-wireless-gateway-from-certificate-request
                    'make-disassociate-wireless-gateway-from-certificate-request))
 (common-lisp:defun make-disassociate-wireless-gateway-from-certificate-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-wireless-gateway-from-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-gateway-from-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-gateway-from-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-gateway-from-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-wireless-gateway-from-certificate-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-wireless-gateway-from-certificate-response
                    'make-disassociate-wireless-gateway-from-certificate-response))
 (common-lisp:defun make-disassociate-wireless-gateway-from-certificate-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-wireless-gateway-from-certificate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-gateway-from-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-gateway-from-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-gateway-from-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-wireless-gateway-from-thing-request
                       common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or wireless-gateway-id common-lisp:null)
                         :accessor
                         %disassociate-wireless-gateway-from-thing-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-wireless-gateway-from-thing-request
                    'make-disassociate-wireless-gateway-from-thing-request))
 (common-lisp:defun make-disassociate-wireless-gateway-from-thing-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-wireless-gateway-from-thing-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-gateway-from-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-gateway-from-thing-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-gateway-from-thing-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-wireless-gateway-from-thing-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'disassociate-wireless-gateway-from-thing-response
                    'make-disassociate-wireless-gateway-from-thing-response))
 (common-lisp:defun make-disassociate-wireless-gateway-from-thing-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-wireless-gateway-from-thing-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-gateway-from-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-gateway-from-thing-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-wireless-gateway-from-thing-response))
   common-lisp:nil))
(common-lisp:deftype dl-bucket-size () 'common-lisp:integer)
(common-lisp:deftype dl-class () 'common-lisp:string)
(common-lisp:deftype dl-dr () 'common-lisp:integer)
(common-lisp:deftype dl-freq () 'common-lisp:integer)
(common-lisp:deftype dl-rate () 'common-lisp:integer)
(common-lisp:deftype dl-rate-policy () 'common-lisp:string)
(common-lisp:deftype double () 'common-lisp:double-float)
(common-lisp:deftype downlink-frequency () 'common-lisp:integer)
(common-lisp:deftype downlink-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass downlink-queue-message common-lisp:nil
                       ((lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or lo-ra-wansend-data-to-device
                                         common-lisp:null)
                         :accessor %downlink-queue-message-lo-ra-wan :initform
                         common-lisp:nil)
                        (received-at :initarg :received-at :type
                         (common-lisp:or isodate-time-string common-lisp:null)
                         :accessor %downlink-queue-message-received-at
                         :initform common-lisp:nil)
                        (transmit-mode :initarg :transmit-mode :type
                         (common-lisp:or transmit-mode common-lisp:null)
                         :accessor %downlink-queue-message-transmit-mode
                         :initform common-lisp:nil)
                        (message-id :initarg :message-id :type
                         (common-lisp:or message-id common-lisp:null) :accessor
                         %downlink-queue-message-message-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'downlink-queue-message 'make-downlink-queue-message))
 (common-lisp:defun make-downlink-queue-message
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lo-ra-wan received-at transmit-mode
                     message-id)
   (common-lisp:apply #'common-lisp:make-instance 'downlink-queue-message
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          downlink-queue-message))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          downlink-queue-message))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "MessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transmit-mode))
      (common-lisp:list
       (common-lisp:cons "TransmitMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'received-at))
      (common-lisp:list
       (common-lisp:cons "ReceivedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          downlink-queue-message))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype downlink-queue-messages-list ()
   '(trivial-types:proper-list downlink-queue-message))
 (common-lisp:defun |make-downlink-queue-messages-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list downlink-queue-message))
   aws-sdk/generator/shape::members))
(common-lisp:deftype dr-max () 'common-lisp:integer)
(common-lisp:deftype dr-max-box () 'common-lisp:integer)
(common-lisp:deftype dr-min () 'common-lisp:integer)
(common-lisp:deftype dr-min-box () 'common-lisp:integer)
(common-lisp:deftype earfcn () 'common-lisp:integer)
(common-lisp:deftype end-point () 'common-lisp:string)
(common-lisp:deftype eutran-cid () 'common-lisp:integer)
(common-lisp:deftype event () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass event-configuration-item common-lisp:nil
                       ((events :initarg :events :type
                         (common-lisp:or event-notification-item-configurations
                                         common-lisp:null)
                         :accessor %event-configuration-item-events :initform
                         common-lisp:nil)
                        (partner-type :initarg :partner-type :type
                         (common-lisp:or event-notification-partner-type
                                         common-lisp:null)
                         :accessor %event-configuration-item-partner-type
                         :initform common-lisp:nil)
                        (identifier-type :initarg :identifier-type :type
                         (common-lisp:or identifier-type common-lisp:null)
                         :accessor %event-configuration-item-identifier-type
                         :initform common-lisp:nil)
                        (identifier :initarg :identifier :type
                         (common-lisp:or identifier common-lisp:null) :accessor
                         %event-configuration-item-identifier :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'event-configuration-item 'make-event-configuration-item))
 (common-lisp:defun make-event-configuration-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key events partner-type identifier-type
                     identifier)
   (common-lisp:apply #'common-lisp:make-instance 'event-configuration-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-configuration-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-configuration-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier-type))
      (common-lisp:list
       (common-lisp:cons "IdentifierType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'partner-type))
      (common-lisp:list
       (common-lisp:cons "PartnerType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-configuration-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype event-configurations-list ()
   '(trivial-types:proper-list event-configuration-item))
 (common-lisp:defun |make-event-configurations-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            event-configuration-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass event-notification-item-configurations common-lisp:nil
                       ((message-delivery-status :initarg
                         :message-delivery-status :type
                         (common-lisp:or
                          message-delivery-status-event-configuration
                          common-lisp:null)
                         :accessor
                         %event-notification-item-configurations-message-delivery-status
                         :initform common-lisp:nil)
                        (connection-status :initarg :connection-status :type
                         (common-lisp:or connection-status-event-configuration
                                         common-lisp:null)
                         :accessor
                         %event-notification-item-configurations-connection-status
                         :initform common-lisp:nil)
                        (join :initarg :join :type
                         (common-lisp:or join-event-configuration
                                         common-lisp:null)
                         :accessor %event-notification-item-configurations-join
                         :initform common-lisp:nil)
                        (proximity :initarg :proximity :type
                         (common-lisp:or proximity-event-configuration
                                         common-lisp:null)
                         :accessor
                         %event-notification-item-configurations-proximity
                         :initform common-lisp:nil)
                        (device-registration-state :initarg
                         :device-registration-state :type
                         (common-lisp:or
                          device-registration-state-event-configuration
                          common-lisp:null)
                         :accessor
                         %event-notification-item-configurations-device-registration-state
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'event-notification-item-configurations
                    'make-event-notification-item-configurations))
 (common-lisp:defun make-event-notification-item-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message-delivery-status connection-status
                     join proximity device-registration-state)
   (common-lisp:apply #'common-lisp:make-instance
                      'event-notification-item-configurations
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          event-notification-item-configurations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          event-notification-item-configurations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-registration-state))
      (common-lisp:list
       (common-lisp:cons "DeviceRegistrationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proximity))
      (common-lisp:list
       (common-lisp:cons "Proximity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'join))
      (common-lisp:list
       (common-lisp:cons "Join"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-status))
      (common-lisp:list
       (common-lisp:cons "ConnectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'message-delivery-status))
      (common-lisp:list
       (common-lisp:cons "MessageDeliveryStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          event-notification-item-configurations))
   common-lisp:nil))
(common-lisp:deftype event-notification-partner-type () 'common-lisp:string)
(common-lisp:deftype event-notification-resource-type () 'common-lisp:string)
(common-lisp:deftype event-notification-topic-status () 'common-lisp:string)
(common-lisp:deftype expression () 'common-lisp:string)
(common-lisp:deftype expression-type () 'common-lisp:string)
(common-lisp:deftype fcnt-start () 'common-lisp:integer)
(common-lisp:deftype fnwk-sint-key () 'common-lisp:string)
(common-lisp:deftype fport () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass fports common-lisp:nil
                       ((applications :initarg :applications :type
                         (common-lisp:or applications common-lisp:null)
                         :accessor %fports-applications :initform
                         common-lisp:nil)
                        (positioning :initarg :positioning :type
                         (common-lisp:or positioning common-lisp:null)
                         :accessor %fports-positioning :initform
                         common-lisp:nil)
                        (clock-sync :initarg :clock-sync :type
                         (common-lisp:or fport common-lisp:null) :accessor
                         %fports-clock-sync :initform common-lisp:nil)
                        (multicast :initarg :multicast :type
                         (common-lisp:or fport common-lisp:null) :accessor
                         %fports-multicast :initform common-lisp:nil)
                        (fuota :initarg :fuota :type
                         (common-lisp:or fport common-lisp:null) :accessor
                         %fports-fuota :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'fports 'make-fports))
 (common-lisp:defun make-fports
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key applications positioning clock-sync
                     multicast fuota)
   (common-lisp:apply #'common-lisp:make-instance 'fports
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fports))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fports))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fuota))
      (common-lisp:list
       (common-lisp:cons "Fuota"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multicast))
      (common-lisp:list
       (common-lisp:cons "Multicast"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clock-sync))
      (common-lisp:list
       (common-lisp:cons "ClockSync"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'positioning))
      (common-lisp:list
       (common-lisp:cons "Positioning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications))
      (common-lisp:list
       (common-lisp:cons "Applications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fports))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype factory-preset-freqs-list ()
   '(trivial-types:proper-list preset-freq))
 (common-lisp:defun |make-factory-preset-freqs-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list preset-freq))
   aws-sdk/generator/shape::members))
(common-lisp:deftype factory-support () 'common-lisp:boolean)
(common-lisp:deftype fingerprint () 'common-lisp:string)
(common-lisp:deftype firmware-update-image () 'common-lisp:string)
(common-lisp:deftype firmware-update-role () 'common-lisp:string)
(common-lisp:deftype fragment-interval-ms () 'common-lisp:integer)
(common-lisp:deftype fragment-size-bytes () 'common-lisp:integer)
(common-lisp:deftype fuota-device-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass fuota-task common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or fuota-task-name common-lisp:null)
                         :accessor %fuota-task-name :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or fuota-task-arn common-lisp:null)
                         :accessor %fuota-task-arn :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or fuota-task-id common-lisp:null)
                         :accessor %fuota-task-id :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'fuota-task 'make-fuota-task))
 (common-lisp:defun make-fuota-task
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name arn id)
   (common-lisp:apply #'common-lisp:make-instance 'fuota-task
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input fuota-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input fuota-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input fuota-task))
   common-lisp:nil))
(common-lisp:deftype fuota-task-arn () 'common-lisp:string)
(common-lisp:deftype fuota-task-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype fuota-task-list ()
   '(trivial-types:proper-list fuota-task))
 (common-lisp:defun |make-fuota-task-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list fuota-task))
   aws-sdk/generator/shape::members))
(common-lisp:deftype fuota-task-name () 'common-lisp:string)
(common-lisp:deftype fuota-task-status () 'common-lisp:string)
(common-lisp:deftype gpst () 'common-lisp:single-float)
(common-lisp:deftype gateway-eui () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype gateway-list ()
   '(trivial-types:proper-list gateway-list-item))
 (common-lisp:defun |make-gateway-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list gateway-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass gateway-list-item common-lisp:nil
                       ((downlink-frequency :initarg :downlink-frequency :type
                         (common-lisp:or downlink-frequency common-lisp:null)
                         :accessor %gateway-list-item-downlink-frequency
                         :initform
                         (common-lisp:error ":downlink-frequency is required"))
                        (gateway-id :initarg :gateway-id :type
                         (common-lisp:or wireless-gateway-id common-lisp:null)
                         :accessor %gateway-list-item-gateway-id :initform
                         (common-lisp:error ":gateway-id is required"))))
 (common-lisp:export
  (common-lisp:list 'gateway-list-item 'make-gateway-list-item))
 (common-lisp:defun make-gateway-list-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key downlink-frequency gateway-id)
   (common-lisp:apply #'common-lisp:make-instance 'gateway-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gateway-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gateway-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "GatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'downlink-frequency))
      (common-lisp:list
       (common-lisp:cons "DownlinkFrequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gateway-list-item))
   common-lisp:nil))
(common-lisp:deftype gateway-max-eirp () 'common-lisp:single-float)
(common-lisp:deftype gen-app-key () 'common-lisp:string)
(common-lisp:deftype geo-json-payload ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype geran-cid () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass get-destination-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or destination-name common-lisp:null)
                         :accessor %get-destination-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-destination-request 'make-get-destination-request))
 (common-lisp:defun make-get-destination-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'get-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-destination-response common-lisp:nil
                       ((role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %get-destination-response-role-arn :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %get-destination-response-description
                         :initform common-lisp:nil)
                        (expression-type :initarg :expression-type :type
                         (common-lisp:or expression-type common-lisp:null)
                         :accessor %get-destination-response-expression-type
                         :initform common-lisp:nil)
                        (expression :initarg :expression :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         %get-destination-response-expression :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or destination-name common-lisp:null)
                         :accessor %get-destination-response-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or destination-arn common-lisp:null)
                         :accessor %get-destination-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-destination-response 'make-get-destination-response))
 (common-lisp:defun make-get-destination-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn description expression-type
                     expression name arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-destination-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-destination-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression-type))
      (common-lisp:list
       (common-lisp:cons "ExpressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-destination-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-device-profile-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or device-profile-id common-lisp:null)
                         :accessor %get-device-profile-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-device-profile-request
                    'make-get-device-profile-request))
 (common-lisp:defun make-get-device-profile-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'get-device-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-device-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-device-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-device-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-device-profile-response common-lisp:nil
                       ((sidewalk :initarg :sidewalk :type
                         (common-lisp:or sidewalk-get-device-profile
                                         common-lisp:null)
                         :accessor %get-device-profile-response-sidewalk
                         :initform common-lisp:nil)
                        (lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or lo-ra-wandevice-profile
                                         common-lisp:null)
                         :accessor %get-device-profile-response-lo-ra-wan
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or device-profile-id common-lisp:null)
                         :accessor %get-device-profile-response-id :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or device-profile-name common-lisp:null)
                         :accessor %get-device-profile-response-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or device-profile-arn common-lisp:null)
                         :accessor %get-device-profile-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-device-profile-response
                    'make-get-device-profile-response))
 (common-lisp:defun make-get-device-profile-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sidewalk lo-ra-wan id name arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-device-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-device-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-device-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sidewalk))
      (common-lisp:list
       (common-lisp:cons "Sidewalk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-device-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-event-configuration-by-resource-types-request
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-event-configuration-by-resource-types-request
                    'make-get-event-configuration-by-resource-types-request))
 (common-lisp:defun make-get-event-configuration-by-resource-types-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-event-configuration-by-resource-types-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-event-configuration-by-resource-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-event-configuration-by-resource-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-event-configuration-by-resource-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-event-configuration-by-resource-types-response
                       common-lisp:nil
                       ((message-delivery-status :initarg
                         :message-delivery-status :type
                         (common-lisp:or
                          message-delivery-status-resource-type-event-configuration
                          common-lisp:null)
                         :accessor
                         %get-event-configuration-by-resource-types-response-message-delivery-status
                         :initform common-lisp:nil)
                        (connection-status :initarg :connection-status :type
                         (common-lisp:or
                          connection-status-resource-type-event-configuration
                          common-lisp:null)
                         :accessor
                         %get-event-configuration-by-resource-types-response-connection-status
                         :initform common-lisp:nil)
                        (join :initarg :join :type
                         (common-lisp:or join-resource-type-event-configuration
                                         common-lisp:null)
                         :accessor
                         %get-event-configuration-by-resource-types-response-join
                         :initform common-lisp:nil)
                        (proximity :initarg :proximity :type
                         (common-lisp:or
                          proximity-resource-type-event-configuration
                          common-lisp:null)
                         :accessor
                         %get-event-configuration-by-resource-types-response-proximity
                         :initform common-lisp:nil)
                        (device-registration-state :initarg
                         :device-registration-state :type
                         (common-lisp:or
                          device-registration-state-resource-type-event-configuration
                          common-lisp:null)
                         :accessor
                         %get-event-configuration-by-resource-types-response-device-registration-state
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-event-configuration-by-resource-types-response
                    'make-get-event-configuration-by-resource-types-response))
 (common-lisp:defun make-get-event-configuration-by-resource-types-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message-delivery-status connection-status
                     join proximity device-registration-state)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-event-configuration-by-resource-types-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-event-configuration-by-resource-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-event-configuration-by-resource-types-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-registration-state))
      (common-lisp:list
       (common-lisp:cons "DeviceRegistrationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proximity))
      (common-lisp:list
       (common-lisp:cons "Proximity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'join))
      (common-lisp:list
       (common-lisp:cons "Join"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-status))
      (common-lisp:list
       (common-lisp:cons "ConnectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'message-delivery-status))
      (common-lisp:list
       (common-lisp:cons "MessageDeliveryStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-event-configuration-by-resource-types-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-fuota-task-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or fuota-task-id common-lisp:null)
                         :accessor %get-fuota-task-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-fuota-task-request 'make-get-fuota-task-request))
 (common-lisp:defun make-get-fuota-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'get-fuota-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-fuota-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-fuota-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-fuota-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-fuota-task-response common-lisp:nil
                       ((fragment-interval-ms :initarg :fragment-interval-ms
                         :type
                         (common-lisp:or fragment-interval-ms common-lisp:null)
                         :accessor
                         %get-fuota-task-response-fragment-interval-ms
                         :initform common-lisp:nil)
                        (fragment-size-bytes :initarg :fragment-size-bytes
                         :type
                         (common-lisp:or fragment-size-bytes common-lisp:null)
                         :accessor %get-fuota-task-response-fragment-size-bytes
                         :initform common-lisp:nil)
                        (redundancy-percent :initarg :redundancy-percent :type
                         (common-lisp:or redundancy-percent common-lisp:null)
                         :accessor %get-fuota-task-response-redundancy-percent
                         :initform common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %get-fuota-task-response-created-at :initform
                         common-lisp:nil)
                        (firmware-update-role :initarg :firmware-update-role
                         :type
                         (common-lisp:or firmware-update-role common-lisp:null)
                         :accessor
                         %get-fuota-task-response-firmware-update-role
                         :initform common-lisp:nil)
                        (firmware-update-image :initarg :firmware-update-image
                         :type
                         (common-lisp:or firmware-update-image
                                         common-lisp:null)
                         :accessor
                         %get-fuota-task-response-firmware-update-image
                         :initform common-lisp:nil)
                        (lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or lo-ra-wanfuota-task-get-info
                                         common-lisp:null)
                         :accessor %get-fuota-task-response-lo-ra-wan :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %get-fuota-task-response-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or fuota-task-name common-lisp:null)
                         :accessor %get-fuota-task-response-name :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or fuota-task-status common-lisp:null)
                         :accessor %get-fuota-task-response-status :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or fuota-task-id common-lisp:null)
                         :accessor %get-fuota-task-response-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or fuota-task-arn common-lisp:null)
                         :accessor %get-fuota-task-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-fuota-task-response 'make-get-fuota-task-response))
 (common-lisp:defun make-get-fuota-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fragment-interval-ms fragment-size-bytes
                     redundancy-percent created-at firmware-update-role
                     firmware-update-image lo-ra-wan description name status id
                     arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-fuota-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-fuota-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-fuota-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firmware-update-image))
      (common-lisp:list
       (common-lisp:cons "FirmwareUpdateImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firmware-update-role))
      (common-lisp:list
       (common-lisp:cons "FirmwareUpdateRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redundancy-percent))
      (common-lisp:list
       (common-lisp:cons "RedundancyPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fragment-size-bytes))
      (common-lisp:list
       (common-lisp:cons "FragmentSizeBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fragment-interval-ms))
      (common-lisp:list
       (common-lisp:cons "FragmentIntervalMS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-fuota-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-log-levels-by-resource-types-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'get-log-levels-by-resource-types-request
                    'make-get-log-levels-by-resource-types-request))
 (common-lisp:defun make-get-log-levels-by-resource-types-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-log-levels-by-resource-types-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-log-levels-by-resource-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-log-levels-by-resource-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-log-levels-by-resource-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-log-levels-by-resource-types-response
                       common-lisp:nil
                       ((wireless-device-log-options :initarg
                         :wireless-device-log-options :type
                         (common-lisp:or wireless-device-log-option-list
                                         common-lisp:null)
                         :accessor
                         %get-log-levels-by-resource-types-response-wireless-device-log-options
                         :initform common-lisp:nil)
                        (wireless-gateway-log-options :initarg
                         :wireless-gateway-log-options :type
                         (common-lisp:or wireless-gateway-log-option-list
                                         common-lisp:null)
                         :accessor
                         %get-log-levels-by-resource-types-response-wireless-gateway-log-options
                         :initform common-lisp:nil)
                        (default-log-level :initarg :default-log-level :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         %get-log-levels-by-resource-types-response-default-log-level
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-log-levels-by-resource-types-response
                    'make-get-log-levels-by-resource-types-response))
 (common-lisp:defun make-get-log-levels-by-resource-types-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wireless-device-log-options
                     wireless-gateway-log-options default-log-level)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-log-levels-by-resource-types-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-log-levels-by-resource-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-log-levels-by-resource-types-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-log-level))
      (common-lisp:list
       (common-lisp:cons "DefaultLogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wireless-gateway-log-options))
      (common-lisp:list
       (common-lisp:cons "WirelessGatewayLogOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wireless-device-log-options))
      (common-lisp:list
       (common-lisp:cons "WirelessDeviceLogOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-log-levels-by-resource-types-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-multicast-group-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or multicast-group-id common-lisp:null)
                         :accessor %get-multicast-group-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-multicast-group-request
                    'make-get-multicast-group-request))
 (common-lisp:defun make-get-multicast-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'get-multicast-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-multicast-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-multicast-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-multicast-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-multicast-group-response common-lisp:nil
                       ((created-at :initarg :created-at :type
                         (common-lisp:or created-at common-lisp:null) :accessor
                         %get-multicast-group-response-created-at :initform
                         common-lisp:nil)
                        (lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or lo-ra-wanmulticast-get
                                         common-lisp:null)
                         :accessor %get-multicast-group-response-lo-ra-wan
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or multicast-group-status
                                         common-lisp:null)
                         :accessor %get-multicast-group-response-status
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %get-multicast-group-response-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or multicast-group-name common-lisp:null)
                         :accessor %get-multicast-group-response-name :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or multicast-group-id common-lisp:null)
                         :accessor %get-multicast-group-response-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or multicast-group-arn common-lisp:null)
                         :accessor %get-multicast-group-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-multicast-group-response
                    'make-get-multicast-group-response))
 (common-lisp:defun make-get-multicast-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-at lo-ra-wan status description
                     name id arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-multicast-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-multicast-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-multicast-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-multicast-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-multicast-group-session-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or multicast-group-id common-lisp:null)
                         :accessor %get-multicast-group-session-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-multicast-group-session-request
                    'make-get-multicast-group-session-request))
 (common-lisp:defun make-get-multicast-group-session-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-multicast-group-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-multicast-group-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-multicast-group-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-multicast-group-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-multicast-group-session-response common-lisp:nil
                       ((lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or lo-ra-wanmulticast-session
                                         common-lisp:null)
                         :accessor
                         %get-multicast-group-session-response-lo-ra-wan
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-multicast-group-session-response
                    'make-get-multicast-group-session-response))
 (common-lisp:defun make-get-multicast-group-session-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lo-ra-wan)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-multicast-group-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-multicast-group-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-multicast-group-session-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-multicast-group-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-network-analyzer-configuration-request
                       common-lisp:nil
                       ((configuration-name :initarg :configuration-name :type
                         (common-lisp:or network-analyzer-configuration-name
                                         common-lisp:null)
                         :accessor
                         %get-network-analyzer-configuration-request-configuration-name
                         :initform
                         (common-lisp:error
                          ":configuration-name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-network-analyzer-configuration-request
                    'make-get-network-analyzer-configuration-request))
 (common-lisp:defun make-get-network-analyzer-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key configuration-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-network-analyzer-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-network-analyzer-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-network-analyzer-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-network-analyzer-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-network-analyzer-configuration-response
                       common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or network-analyzer-configuration-name
                                         common-lisp:null)
                         :accessor
                         %get-network-analyzer-configuration-response-name
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or network-analyzer-configuration-arn
                                         common-lisp:null)
                         :accessor
                         %get-network-analyzer-configuration-response-arn
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         %get-network-analyzer-configuration-response-description
                         :initform common-lisp:nil)
                        (wireless-gateways :initarg :wireless-gateways :type
                         (common-lisp:or wireless-gateway-list
                                         common-lisp:null)
                         :accessor
                         %get-network-analyzer-configuration-response-wireless-gateways
                         :initform common-lisp:nil)
                        (wireless-devices :initarg :wireless-devices :type
                         (common-lisp:or wireless-device-list common-lisp:null)
                         :accessor
                         %get-network-analyzer-configuration-response-wireless-devices
                         :initform common-lisp:nil)
                        (trace-content :initarg :trace-content :type
                         (common-lisp:or trace-content common-lisp:null)
                         :accessor
                         %get-network-analyzer-configuration-response-trace-content
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-network-analyzer-configuration-response
                    'make-get-network-analyzer-configuration-response))
 (common-lisp:defun make-get-network-analyzer-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name arn description wireless-gateways
                     wireless-devices trace-content)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-network-analyzer-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-network-analyzer-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-network-analyzer-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trace-content))
      (common-lisp:list
       (common-lisp:cons "TraceContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wireless-devices))
      (common-lisp:list
       (common-lisp:cons "WirelessDevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wireless-gateways))
      (common-lisp:list
       (common-lisp:cons "WirelessGateways"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-network-analyzer-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-partner-account-request common-lisp:nil
                       ((partner-type :initarg :partner-type :type
                         (common-lisp:or partner-type common-lisp:null)
                         :accessor %get-partner-account-request-partner-type
                         :initform
                         (common-lisp:error ":partner-type is required"))
                        (partner-account-id :initarg :partner-account-id :type
                         (common-lisp:or partner-account-id common-lisp:null)
                         :accessor
                         %get-partner-account-request-partner-account-id
                         :initform
                         (common-lisp:error
                          ":partner-account-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-partner-account-request
                    'make-get-partner-account-request))
 (common-lisp:defun make-get-partner-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key partner-type partner-account-id)
   (common-lisp:apply #'common-lisp:make-instance 'get-partner-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-partner-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-partner-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-partner-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-partner-account-response common-lisp:nil
                       ((account-linked :initarg :account-linked :type
                         (common-lisp:or account-linked common-lisp:null)
                         :accessor %get-partner-account-response-account-linked
                         :initform common-lisp:nil)
                        (sidewalk :initarg :sidewalk :type
                         (common-lisp:or sidewalk-account-info-with-fingerprint
                                         common-lisp:null)
                         :accessor %get-partner-account-response-sidewalk
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-partner-account-response
                    'make-get-partner-account-response))
 (common-lisp:defun make-get-partner-account-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key account-linked sidewalk)
   (common-lisp:apply #'common-lisp:make-instance 'get-partner-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-partner-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-partner-account-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sidewalk))
      (common-lisp:list
       (common-lisp:cons "Sidewalk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-linked))
      (common-lisp:list
       (common-lisp:cons "AccountLinked"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-partner-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-position-configuration-request common-lisp:nil
                       ((resource-type :initarg :resource-type :type
                         (common-lisp:or position-resource-type
                                         common-lisp:null)
                         :accessor
                         %get-position-configuration-request-resource-type
                         :initform
                         (common-lisp:error ":resource-type is required"))
                        (resource-identifier :initarg :resource-identifier
                         :type
                         (common-lisp:or position-resource-identifier
                                         common-lisp:null)
                         :accessor
                         %get-position-configuration-request-resource-identifier
                         :initform
                         (common-lisp:error
                          ":resource-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'get-position-configuration-request
                    'make-get-position-configuration-request))
 (common-lisp:defun make-get-position-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-type resource-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-position-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-position-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-position-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-position-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-position-configuration-response common-lisp:nil
                       ((destination :initarg :destination :type
                         (common-lisp:or destination-name common-lisp:null)
                         :accessor
                         %get-position-configuration-response-destination
                         :initform common-lisp:nil)
                        (solvers :initarg :solvers :type
                         (common-lisp:or position-solver-details
                                         common-lisp:null)
                         :accessor %get-position-configuration-response-solvers
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-position-configuration-response
                    'make-get-position-configuration-response))
 (common-lisp:defun make-get-position-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination solvers)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-position-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-position-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-position-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solvers))
      (common-lisp:list
       (common-lisp:cons "Solvers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-position-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-position-estimate-request common-lisp:nil
                       ((timestamp :initarg :timestamp :type
                         (common-lisp:or creation-date common-lisp:null)
                         :accessor %get-position-estimate-request-timestamp
                         :initform common-lisp:nil)
                        (gnss :initarg :gnss :type
                         (common-lisp:or gnss common-lisp:null) :accessor
                         %get-position-estimate-request-gnss :initform
                         common-lisp:nil)
                        (ip :initarg :ip :type
                         (common-lisp:or ip common-lisp:null) :accessor
                         %get-position-estimate-request-ip :initform
                         common-lisp:nil)
                        (cell-towers :initarg :cell-towers :type
                         (common-lisp:or cell-towers common-lisp:null)
                         :accessor %get-position-estimate-request-cell-towers
                         :initform common-lisp:nil)
                        (wi-fi-access-points :initarg :wi-fi-access-points
                         :type
                         (common-lisp:or wi-fi-access-points common-lisp:null)
                         :accessor
                         %get-position-estimate-request-wi-fi-access-points
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-position-estimate-request
                    'make-get-position-estimate-request))
 (common-lisp:defun make-get-position-estimate-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timestamp gnss ip cell-towers
                     wi-fi-access-points)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-position-estimate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-position-estimate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-position-estimate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wi-fi-access-points))
      (common-lisp:list
       (common-lisp:cons "WiFiAccessPoints"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cell-towers))
      (common-lisp:list
       (common-lisp:cons "CellTowers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip))
      (common-lisp:list
       (common-lisp:cons "Ip"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gnss))
      (common-lisp:list
       (common-lisp:cons "Gnss"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-position-estimate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-position-estimate-response common-lisp:nil
                       ((geo-json-payload :initarg :geo-json-payload :type
                         (common-lisp:or geo-json-payload common-lisp:null)
                         :accessor
                         %get-position-estimate-response-geo-json-payload
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-position-estimate-response
                    'make-get-position-estimate-response))
 (common-lisp:defun make-get-position-estimate-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key geo-json-payload)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-position-estimate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-position-estimate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-position-estimate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geo-json-payload))
      (common-lisp:list
       (common-lisp:cons "GeoJsonPayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-position-estimate-response))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'geo-json-payload))))
(common-lisp:progn
 (common-lisp:defclass get-position-request common-lisp:nil
                       ((resource-type :initarg :resource-type :type
                         (common-lisp:or position-resource-type
                                         common-lisp:null)
                         :accessor %get-position-request-resource-type
                         :initform
                         (common-lisp:error ":resource-type is required"))
                        (resource-identifier :initarg :resource-identifier
                         :type
                         (common-lisp:or position-resource-identifier
                                         common-lisp:null)
                         :accessor %get-position-request-resource-identifier
                         :initform
                         (common-lisp:error
                          ":resource-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'get-position-request 'make-get-position-request))
 (common-lisp:defun make-get-position-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-type resource-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'get-position-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-position-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-position-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-position-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-position-response common-lisp:nil
                       ((timestamp :initarg :timestamp :type
                         (common-lisp:or isodate-time-string common-lisp:null)
                         :accessor %get-position-response-timestamp :initform
                         common-lisp:nil)
                        (solver-version :initarg :solver-version :type
                         (common-lisp:or position-solver-version
                                         common-lisp:null)
                         :accessor %get-position-response-solver-version
                         :initform common-lisp:nil)
                        (solver-provider :initarg :solver-provider :type
                         (common-lisp:or position-solver-provider
                                         common-lisp:null)
                         :accessor %get-position-response-solver-provider
                         :initform common-lisp:nil)
                        (solver-type :initarg :solver-type :type
                         (common-lisp:or position-solver-type common-lisp:null)
                         :accessor %get-position-response-solver-type :initform
                         common-lisp:nil)
                        (accuracy :initarg :accuracy :type
                         (common-lisp:or accuracy common-lisp:null) :accessor
                         %get-position-response-accuracy :initform
                         common-lisp:nil)
                        (position :initarg :position :type
                         (common-lisp:or position-coordinate common-lisp:null)
                         :accessor %get-position-response-position :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-position-response 'make-get-position-response))
 (common-lisp:defun make-get-position-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key timestamp solver-version solver-provider
                     solver-type accuracy position)
   (common-lisp:apply #'common-lisp:make-instance 'get-position-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-position-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-position-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "Position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'accuracy))
      (common-lisp:list
       (common-lisp:cons "Accuracy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solver-type))
      (common-lisp:list
       (common-lisp:cons "SolverType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solver-provider))
      (common-lisp:list
       (common-lisp:cons "SolverProvider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solver-version))
      (common-lisp:list
       (common-lisp:cons "SolverVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-position-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-event-configuration-request common-lisp:nil
                       ((partner-type :initarg :partner-type :type
                         (common-lisp:or event-notification-partner-type
                                         common-lisp:null)
                         :accessor
                         %get-resource-event-configuration-request-partner-type
                         :initform common-lisp:nil)
                        (identifier-type :initarg :identifier-type :type
                         (common-lisp:or identifier-type common-lisp:null)
                         :accessor
                         %get-resource-event-configuration-request-identifier-type
                         :initform
                         (common-lisp:error ":identifier-type is required"))
                        (identifier :initarg :identifier :type
                         (common-lisp:or identifier common-lisp:null) :accessor
                         %get-resource-event-configuration-request-identifier
                         :initform
                         (common-lisp:error ":identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'get-resource-event-configuration-request
                    'make-get-resource-event-configuration-request))
 (common-lisp:defun make-get-resource-event-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key partner-type identifier-type identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resource-event-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-event-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-event-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-event-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-event-configuration-response
                       common-lisp:nil
                       ((message-delivery-status :initarg
                         :message-delivery-status :type
                         (common-lisp:or
                          message-delivery-status-event-configuration
                          common-lisp:null)
                         :accessor
                         %get-resource-event-configuration-response-message-delivery-status
                         :initform common-lisp:nil)
                        (connection-status :initarg :connection-status :type
                         (common-lisp:or connection-status-event-configuration
                                         common-lisp:null)
                         :accessor
                         %get-resource-event-configuration-response-connection-status
                         :initform common-lisp:nil)
                        (join :initarg :join :type
                         (common-lisp:or join-event-configuration
                                         common-lisp:null)
                         :accessor
                         %get-resource-event-configuration-response-join
                         :initform common-lisp:nil)
                        (proximity :initarg :proximity :type
                         (common-lisp:or proximity-event-configuration
                                         common-lisp:null)
                         :accessor
                         %get-resource-event-configuration-response-proximity
                         :initform common-lisp:nil)
                        (device-registration-state :initarg
                         :device-registration-state :type
                         (common-lisp:or
                          device-registration-state-event-configuration
                          common-lisp:null)
                         :accessor
                         %get-resource-event-configuration-response-device-registration-state
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-resource-event-configuration-response
                    'make-get-resource-event-configuration-response))
 (common-lisp:defun make-get-resource-event-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message-delivery-status connection-status
                     join proximity device-registration-state)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resource-event-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-event-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-event-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-registration-state))
      (common-lisp:list
       (common-lisp:cons "DeviceRegistrationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proximity))
      (common-lisp:list
       (common-lisp:cons "Proximity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'join))
      (common-lisp:list
       (common-lisp:cons "Join"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-status))
      (common-lisp:list
       (common-lisp:cons "ConnectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'message-delivery-status))
      (common-lisp:list
       (common-lisp:cons "MessageDeliveryStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-event-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-log-level-request common-lisp:nil
                       ((resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         %get-resource-log-level-request-resource-type
                         :initform
                         (common-lisp:error ":resource-type is required"))
                        (resource-identifier :initarg :resource-identifier
                         :type
                         (common-lisp:or resource-identifier common-lisp:null)
                         :accessor
                         %get-resource-log-level-request-resource-identifier
                         :initform
                         (common-lisp:error
                          ":resource-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'get-resource-log-level-request
                    'make-get-resource-log-level-request))
 (common-lisp:defun make-get-resource-log-level-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-type resource-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resource-log-level-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-log-level-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-log-level-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-log-level-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-log-level-response common-lisp:nil
                       ((log-level :initarg :log-level :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         %get-resource-log-level-response-log-level :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-resource-log-level-response
                    'make-get-resource-log-level-response))
 (common-lisp:defun make-get-resource-log-level-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-level)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resource-log-level-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-log-level-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-log-level-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-log-level-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-position-request common-lisp:nil
                       ((resource-type :initarg :resource-type :type
                         (common-lisp:or position-resource-type
                                         common-lisp:null)
                         :accessor %get-resource-position-request-resource-type
                         :initform
                         (common-lisp:error ":resource-type is required"))
                        (resource-identifier :initarg :resource-identifier
                         :type
                         (common-lisp:or position-resource-identifier
                                         common-lisp:null)
                         :accessor
                         %get-resource-position-request-resource-identifier
                         :initform
                         (common-lisp:error
                          ":resource-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'get-resource-position-request
                    'make-get-resource-position-request))
 (common-lisp:defun make-get-resource-position-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-type resource-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resource-position-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-position-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-position-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-position-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-position-response common-lisp:nil
                       ((geo-json-payload :initarg :geo-json-payload :type
                         (common-lisp:or geo-json-payload common-lisp:null)
                         :accessor
                         %get-resource-position-response-geo-json-payload
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-resource-position-response
                    'make-get-resource-position-response))
 (common-lisp:defun make-get-resource-position-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key geo-json-payload)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-resource-position-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-position-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-position-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geo-json-payload))
      (common-lisp:list
       (common-lisp:cons "GeoJsonPayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-position-response))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'geo-json-payload))))
(common-lisp:progn
 (common-lisp:defclass get-service-endpoint-request common-lisp:nil
                       ((service-type :initarg :service-type :type
                         (common-lisp:or wireless-gateway-service-type
                                         common-lisp:null)
                         :accessor %get-service-endpoint-request-service-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-service-endpoint-request
                    'make-get-service-endpoint-request))
 (common-lisp:defun make-get-service-endpoint-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-type)
   (common-lisp:apply #'common-lisp:make-instance 'get-service-endpoint-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-endpoint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-endpoint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-endpoint-response common-lisp:nil
                       ((server-trust :initarg :server-trust :type
                         (common-lisp:or certificate-pem common-lisp:null)
                         :accessor %get-service-endpoint-response-server-trust
                         :initform common-lisp:nil)
                        (service-endpoint :initarg :service-endpoint :type
                         (common-lisp:or end-point common-lisp:null) :accessor
                         %get-service-endpoint-response-service-endpoint
                         :initform common-lisp:nil)
                        (service-type :initarg :service-type :type
                         (common-lisp:or wireless-gateway-service-type
                                         common-lisp:null)
                         :accessor %get-service-endpoint-response-service-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-service-endpoint-response
                    'make-get-service-endpoint-response))
 (common-lisp:defun make-get-service-endpoint-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key server-trust service-endpoint
                     service-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-service-endpoint-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-endpoint-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-endpoint-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-type))
      (common-lisp:list
       (common-lisp:cons "ServiceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-endpoint))
      (common-lisp:list
       (common-lisp:cons "ServiceEndpoint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-trust))
      (common-lisp:list
       (common-lisp:cons "ServerTrust"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-endpoint-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-profile-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or service-profile-id common-lisp:null)
                         :accessor %get-service-profile-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-service-profile-request
                    'make-get-service-profile-request))
 (common-lisp:defun make-get-service-profile-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'get-service-profile-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-service-profile-response common-lisp:nil
                       ((lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or lo-ra-wanget-service-profile-info
                                         common-lisp:null)
                         :accessor %get-service-profile-response-lo-ra-wan
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or service-profile-id common-lisp:null)
                         :accessor %get-service-profile-response-id :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or service-profile-name common-lisp:null)
                         :accessor %get-service-profile-response-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or service-profile-arn common-lisp:null)
                         :accessor %get-service-profile-response-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-service-profile-response
                    'make-get-service-profile-response))
 (common-lisp:defun make-get-service-profile-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lo-ra-wan id name arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-service-profile-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-wireless-device-import-task-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or import-task-id common-lisp:null)
                         :accessor %get-wireless-device-import-task-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-wireless-device-import-task-request
                    'make-get-wireless-device-import-task-request))
 (common-lisp:defun make-get-wireless-device-import-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-wireless-device-import-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-device-import-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-device-import-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-device-import-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-wireless-device-import-task-response common-lisp:nil
                       ((failed-imported-device-count :initarg
                         :failed-imported-device-count :type
                         (common-lisp:or imported-wireless-device-count
                                         common-lisp:null)
                         :accessor
                         %get-wireless-device-import-task-response-failed-imported-device-count
                         :initform common-lisp:nil)
                        (onboarded-imported-device-count :initarg
                         :onboarded-imported-device-count :type
                         (common-lisp:or imported-wireless-device-count
                                         common-lisp:null)
                         :accessor
                         %get-wireless-device-import-task-response-onboarded-imported-device-count
                         :initform common-lisp:nil)
                        (pending-imported-device-count :initarg
                         :pending-imported-device-count :type
                         (common-lisp:or imported-wireless-device-count
                                         common-lisp:null)
                         :accessor
                         %get-wireless-device-import-task-response-pending-imported-device-count
                         :initform common-lisp:nil)
                        (initialized-imported-device-count :initarg
                         :initialized-imported-device-count :type
                         (common-lisp:or imported-wireless-device-count
                                         common-lisp:null)
                         :accessor
                         %get-wireless-device-import-task-response-initialized-imported-device-count
                         :initform common-lisp:nil)
                        (status-reason :initarg :status-reason :type
                         (common-lisp:or status-reason common-lisp:null)
                         :accessor
                         %get-wireless-device-import-task-response-status-reason
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or import-task-status common-lisp:null)
                         :accessor
                         %get-wireless-device-import-task-response-status
                         :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor
                         %get-wireless-device-import-task-response-creation-time
                         :initform common-lisp:nil)
                        (sidewalk :initarg :sidewalk :type
                         (common-lisp:or sidewalk-get-start-import-info
                                         common-lisp:null)
                         :accessor
                         %get-wireless-device-import-task-response-sidewalk
                         :initform common-lisp:nil)
                        (destination-name :initarg :destination-name :type
                         (common-lisp:or destination-name common-lisp:null)
                         :accessor
                         %get-wireless-device-import-task-response-destination-name
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or import-task-arn common-lisp:null)
                         :accessor
                         %get-wireless-device-import-task-response-arn
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or import-task-id common-lisp:null)
                         :accessor %get-wireless-device-import-task-response-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-wireless-device-import-task-response
                    'make-get-wireless-device-import-task-response))
 (common-lisp:defun make-get-wireless-device-import-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-imported-device-count
                     onboarded-imported-device-count
                     pending-imported-device-count
                     initialized-imported-device-count status-reason status
                     creation-time sidewalk destination-name arn id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-wireless-device-import-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-device-import-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-device-import-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-name))
      (common-lisp:list
       (common-lisp:cons "DestinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sidewalk))
      (common-lisp:list
       (common-lisp:cons "Sidewalk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initialized-imported-device-count))
      (common-lisp:list
       (common-lisp:cons "InitializedImportedDeviceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-imported-device-count))
      (common-lisp:list
       (common-lisp:cons "PendingImportedDeviceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'onboarded-imported-device-count))
      (common-lisp:list
       (common-lisp:cons "OnboardedImportedDeviceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failed-imported-device-count))
      (common-lisp:list
       (common-lisp:cons "FailedImportedDeviceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-device-import-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-wireless-device-request common-lisp:nil
                       ((identifier-type :initarg :identifier-type :type
                         (common-lisp:or wireless-device-id-type
                                         common-lisp:null)
                         :accessor %get-wireless-device-request-identifier-type
                         :initform
                         (common-lisp:error ":identifier-type is required"))
                        (identifier :initarg :identifier :type
                         (common-lisp:or identifier common-lisp:null) :accessor
                         %get-wireless-device-request-identifier :initform
                         (common-lisp:error ":identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'get-wireless-device-request
                    'make-get-wireless-device-request))
 (common-lisp:defun make-get-wireless-device-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identifier-type identifier)
   (common-lisp:apply #'common-lisp:make-instance 'get-wireless-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-wireless-device-response common-lisp:nil
                       ((positioning :initarg :positioning :type
                         (common-lisp:or positioning-config-status
                                         common-lisp:null)
                         :accessor %get-wireless-device-response-positioning
                         :initform common-lisp:nil)
                        (sidewalk :initarg :sidewalk :type
                         (common-lisp:or sidewalk-device common-lisp:null)
                         :accessor %get-wireless-device-response-sidewalk
                         :initform common-lisp:nil)
                        (lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or lo-ra-wandevice common-lisp:null)
                         :accessor %get-wireless-device-response-lo-ra-wan
                         :initform common-lisp:nil)
                        (thing-arn :initarg :thing-arn :type
                         (common-lisp:or thing-arn common-lisp:null) :accessor
                         %get-wireless-device-response-thing-arn :initform
                         common-lisp:nil)
                        (thing-name :initarg :thing-name :type
                         (common-lisp:or thing-name common-lisp:null) :accessor
                         %get-wireless-device-response-thing-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or wireless-device-arn common-lisp:null)
                         :accessor %get-wireless-device-response-arn :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or wireless-device-id common-lisp:null)
                         :accessor %get-wireless-device-response-id :initform
                         common-lisp:nil)
                        (destination-name :initarg :destination-name :type
                         (common-lisp:or destination-name common-lisp:null)
                         :accessor
                         %get-wireless-device-response-destination-name
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %get-wireless-device-response-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or wireless-device-name common-lisp:null)
                         :accessor %get-wireless-device-response-name :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or wireless-device-type common-lisp:null)
                         :accessor %get-wireless-device-response-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-wireless-device-response
                    'make-get-wireless-device-response))
 (common-lisp:defun make-get-wireless-device-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key positioning sidewalk lo-ra-wan thing-arn
                     thing-name arn id destination-name description name type)
   (common-lisp:apply #'common-lisp:make-instance 'get-wireless-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-device-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-name))
      (common-lisp:list
       (common-lisp:cons "DestinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "ThingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-arn))
      (common-lisp:list
       (common-lisp:cons "ThingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sidewalk))
      (common-lisp:list
       (common-lisp:cons "Sidewalk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'positioning))
      (common-lisp:list
       (common-lisp:cons "Positioning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-wireless-device-statistics-request common-lisp:nil
                       ((wireless-device-id :initarg :wireless-device-id :type
                         (common-lisp:or wireless-device-id common-lisp:null)
                         :accessor
                         %get-wireless-device-statistics-request-wireless-device-id
                         :initform
                         (common-lisp:error
                          ":wireless-device-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-wireless-device-statistics-request
                    'make-get-wireless-device-statistics-request))
 (common-lisp:defun make-get-wireless-device-statistics-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wireless-device-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-wireless-device-statistics-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-device-statistics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-device-statistics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-device-statistics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-wireless-device-statistics-response common-lisp:nil
                       ((sidewalk :initarg :sidewalk :type
                         (common-lisp:or sidewalk-device-metadata
                                         common-lisp:null)
                         :accessor
                         %get-wireless-device-statistics-response-sidewalk
                         :initform common-lisp:nil)
                        (lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or lo-ra-wandevice-metadata
                                         common-lisp:null)
                         :accessor
                         %get-wireless-device-statistics-response-lo-ra-wan
                         :initform common-lisp:nil)
                        (last-uplink-received-at :initarg
                         :last-uplink-received-at :type
                         (common-lisp:or isodate-time-string common-lisp:null)
                         :accessor
                         %get-wireless-device-statistics-response-last-uplink-received-at
                         :initform common-lisp:nil)
                        (wireless-device-id :initarg :wireless-device-id :type
                         (common-lisp:or wireless-device-id common-lisp:null)
                         :accessor
                         %get-wireless-device-statistics-response-wireless-device-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-wireless-device-statistics-response
                    'make-get-wireless-device-statistics-response))
 (common-lisp:defun make-get-wireless-device-statistics-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sidewalk lo-ra-wan
                     last-uplink-received-at wireless-device-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-wireless-device-statistics-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-device-statistics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-device-statistics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wireless-device-id))
      (common-lisp:list
       (common-lisp:cons "WirelessDeviceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-uplink-received-at))
      (common-lisp:list
       (common-lisp:cons "LastUplinkReceivedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sidewalk))
      (common-lisp:list
       (common-lisp:cons "Sidewalk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-device-statistics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-wireless-gateway-certificate-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or wireless-gateway-id common-lisp:null)
                         :accessor %get-wireless-gateway-certificate-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-wireless-gateway-certificate-request
                    'make-get-wireless-gateway-certificate-request))
 (common-lisp:defun make-get-wireless-gateway-certificate-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-wireless-gateway-certificate-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-wireless-gateway-certificate-response
                       common-lisp:nil
                       ((lo-ra-wannetwork-server-certificate-id :initarg
                         :lo-ra-wannetwork-server-certificate-id :type
                         (common-lisp:or iot-certificate-id common-lisp:null)
                         :accessor
                         %get-wireless-gateway-certificate-response-lo-ra-wannetwork-server-certificate-id
                         :initform common-lisp:nil)
                        (iot-certificate-id :initarg :iot-certificate-id :type
                         (common-lisp:or iot-certificate-id common-lisp:null)
                         :accessor
                         %get-wireless-gateway-certificate-response-iot-certificate-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-wireless-gateway-certificate-response
                    'make-get-wireless-gateway-certificate-response))
 (common-lisp:defun make-get-wireless-gateway-certificate-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lo-ra-wannetwork-server-certificate-id
                     iot-certificate-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-wireless-gateway-certificate-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iot-certificate-id))
      (common-lisp:list
       (common-lisp:cons "IotCertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'lo-ra-wannetwork-server-certificate-id))
      (common-lisp:list
       (common-lisp:cons "LoRaWANNetworkServerCertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-wireless-gateway-firmware-information-request
                       common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or wireless-gateway-id common-lisp:null)
                         :accessor
                         %get-wireless-gateway-firmware-information-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-wireless-gateway-firmware-information-request
                    'make-get-wireless-gateway-firmware-information-request))
 (common-lisp:defun make-get-wireless-gateway-firmware-information-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-wireless-gateway-firmware-information-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-firmware-information-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-firmware-information-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-firmware-information-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-wireless-gateway-firmware-information-response
                       common-lisp:nil
                       ((lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or lo-ra-wangateway-current-version
                                         common-lisp:null)
                         :accessor
                         %get-wireless-gateway-firmware-information-response-lo-ra-wan
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-wireless-gateway-firmware-information-response
                    'make-get-wireless-gateway-firmware-information-response))
 (common-lisp:defun make-get-wireless-gateway-firmware-information-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lo-ra-wan)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-wireless-gateway-firmware-information-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-firmware-information-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-firmware-information-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-firmware-information-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-wireless-gateway-request common-lisp:nil
                       ((identifier-type :initarg :identifier-type :type
                         (common-lisp:or wireless-gateway-id-type
                                         common-lisp:null)
                         :accessor
                         %get-wireless-gateway-request-identifier-type
                         :initform
                         (common-lisp:error ":identifier-type is required"))
                        (identifier :initarg :identifier :type
                         (common-lisp:or identifier common-lisp:null) :accessor
                         %get-wireless-gateway-request-identifier :initform
                         (common-lisp:error ":identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'get-wireless-gateway-request
                    'make-get-wireless-gateway-request))
 (common-lisp:defun make-get-wireless-gateway-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identifier-type identifier)
   (common-lisp:apply #'common-lisp:make-instance 'get-wireless-gateway-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-wireless-gateway-response common-lisp:nil
                       ((thing-arn :initarg :thing-arn :type
                         (common-lisp:or thing-arn common-lisp:null) :accessor
                         %get-wireless-gateway-response-thing-arn :initform
                         common-lisp:nil)
                        (thing-name :initarg :thing-name :type
                         (common-lisp:or thing-name common-lisp:null) :accessor
                         %get-wireless-gateway-response-thing-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or wireless-gateway-arn common-lisp:null)
                         :accessor %get-wireless-gateway-response-arn :initform
                         common-lisp:nil)
                        (lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or lo-ra-wangateway common-lisp:null)
                         :accessor %get-wireless-gateway-response-lo-ra-wan
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %get-wireless-gateway-response-description
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or wireless-gateway-id common-lisp:null)
                         :accessor %get-wireless-gateway-response-id :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or wireless-gateway-name
                                         common-lisp:null)
                         :accessor %get-wireless-gateway-response-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-wireless-gateway-response
                    'make-get-wireless-gateway-response))
 (common-lisp:defun make-get-wireless-gateway-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key thing-arn thing-name arn lo-ra-wan
                     description id name)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-wireless-gateway-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-name))
      (common-lisp:list
       (common-lisp:cons "ThingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thing-arn))
      (common-lisp:list
       (common-lisp:cons "ThingArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-wireless-gateway-statistics-request common-lisp:nil
                       ((wireless-gateway-id :initarg :wireless-gateway-id
                         :type
                         (common-lisp:or wireless-gateway-id common-lisp:null)
                         :accessor
                         %get-wireless-gateway-statistics-request-wireless-gateway-id
                         :initform
                         (common-lisp:error
                          ":wireless-gateway-id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-wireless-gateway-statistics-request
                    'make-get-wireless-gateway-statistics-request))
 (common-lisp:defun make-get-wireless-gateway-statistics-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wireless-gateway-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-wireless-gateway-statistics-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-statistics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-statistics-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-statistics-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-wireless-gateway-statistics-response common-lisp:nil
                       ((connection-status :initarg :connection-status :type
                         (common-lisp:or connection-status common-lisp:null)
                         :accessor
                         %get-wireless-gateway-statistics-response-connection-status
                         :initform common-lisp:nil)
                        (last-uplink-received-at :initarg
                         :last-uplink-received-at :type
                         (common-lisp:or isodate-time-string common-lisp:null)
                         :accessor
                         %get-wireless-gateway-statistics-response-last-uplink-received-at
                         :initform common-lisp:nil)
                        (wireless-gateway-id :initarg :wireless-gateway-id
                         :type
                         (common-lisp:or wireless-gateway-id common-lisp:null)
                         :accessor
                         %get-wireless-gateway-statistics-response-wireless-gateway-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-wireless-gateway-statistics-response
                    'make-get-wireless-gateway-statistics-response))
 (common-lisp:defun make-get-wireless-gateway-statistics-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection-status last-uplink-received-at
                     wireless-gateway-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-wireless-gateway-statistics-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-statistics-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-statistics-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wireless-gateway-id))
      (common-lisp:list
       (common-lisp:cons "WirelessGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-uplink-received-at))
      (common-lisp:list
       (common-lisp:cons "LastUplinkReceivedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-status))
      (common-lisp:list
       (common-lisp:cons "ConnectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-statistics-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-wireless-gateway-task-definition-request
                       common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or wireless-gateway-task-definition-id
                                         common-lisp:null)
                         :accessor
                         %get-wireless-gateway-task-definition-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-wireless-gateway-task-definition-request
                    'make-get-wireless-gateway-task-definition-request))
 (common-lisp:defun make-get-wireless-gateway-task-definition-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-wireless-gateway-task-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-task-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-task-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-task-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-wireless-gateway-task-definition-response
                       common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or wireless-gateway-task-definition-arn
                                         common-lisp:null)
                         :accessor
                         %get-wireless-gateway-task-definition-response-arn
                         :initform common-lisp:nil)
                        (update :initarg :update :type
                         (common-lisp:or update-wireless-gateway-task-create
                                         common-lisp:null)
                         :accessor
                         %get-wireless-gateway-task-definition-response-update
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or wireless-gateway-task-name
                                         common-lisp:null)
                         :accessor
                         %get-wireless-gateway-task-definition-response-name
                         :initform common-lisp:nil)
                        (auto-create-tasks :initarg :auto-create-tasks :type
                         (common-lisp:or auto-create-tasks common-lisp:null)
                         :accessor
                         %get-wireless-gateway-task-definition-response-auto-create-tasks
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-wireless-gateway-task-definition-response
                    'make-get-wireless-gateway-task-definition-response))
 (common-lisp:defun make-get-wireless-gateway-task-definition-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn update name auto-create-tasks)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-wireless-gateway-task-definition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-task-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-task-definition-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auto-create-tasks))
      (common-lisp:list
       (common-lisp:cons "AutoCreateTasks"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update))
      (common-lisp:list
       (common-lisp:cons "Update"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-task-definition-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-wireless-gateway-task-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or wireless-gateway-id common-lisp:null)
                         :accessor %get-wireless-gateway-task-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'get-wireless-gateway-task-request
                    'make-get-wireless-gateway-task-request))
 (common-lisp:defun make-get-wireless-gateway-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-wireless-gateway-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-wireless-gateway-task-response common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or wireless-gateway-task-status
                                         common-lisp:null)
                         :accessor %get-wireless-gateway-task-response-status
                         :initform common-lisp:nil)
                        (task-created-at :initarg :task-created-at :type
                         (common-lisp:or isodate-time-string common-lisp:null)
                         :accessor
                         %get-wireless-gateway-task-response-task-created-at
                         :initform common-lisp:nil)
                        (last-uplink-received-at :initarg
                         :last-uplink-received-at :type
                         (common-lisp:or isodate-time-string common-lisp:null)
                         :accessor
                         %get-wireless-gateway-task-response-last-uplink-received-at
                         :initform common-lisp:nil)
                        (wireless-gateway-task-definition-id :initarg
                         :wireless-gateway-task-definition-id :type
                         (common-lisp:or wireless-gateway-task-definition-id
                                         common-lisp:null)
                         :accessor
                         %get-wireless-gateway-task-response-wireless-gateway-task-definition-id
                         :initform common-lisp:nil)
                        (wireless-gateway-id :initarg :wireless-gateway-id
                         :type
                         (common-lisp:or wireless-gateway-id common-lisp:null)
                         :accessor
                         %get-wireless-gateway-task-response-wireless-gateway-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-wireless-gateway-task-response
                    'make-get-wireless-gateway-task-response))
 (common-lisp:defun make-get-wireless-gateway-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status task-created-at
                     last-uplink-received-at
                     wireless-gateway-task-definition-id wireless-gateway-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-wireless-gateway-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wireless-gateway-id))
      (common-lisp:list
       (common-lisp:cons "WirelessGatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wireless-gateway-task-definition-id))
      (common-lisp:list
       (common-lisp:cons "WirelessGatewayTaskDefinitionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-uplink-received-at))
      (common-lisp:list
       (common-lisp:cons "LastUplinkReceivedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-created-at))
      (common-lisp:list
       (common-lisp:cons "TaskCreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-wireless-gateway-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass global-identity common-lisp:nil
                       ((geran-cid :initarg :geran-cid :type
                         (common-lisp:or geran-cid common-lisp:null) :accessor
                         %global-identity-geran-cid :initform
                         (common-lisp:error ":geran-cid is required"))
                        (lac :initarg :lac :type
                         (common-lisp:or lac common-lisp:null) :accessor
                         %global-identity-lac :initform
                         (common-lisp:error ":lac is required"))))
 (common-lisp:export (common-lisp:list 'global-identity 'make-global-identity))
 (common-lisp:defun make-global-identity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key geran-cid lac)
   (common-lisp:apply #'common-lisp:make-instance 'global-identity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input global-identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input global-identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lac))
      (common-lisp:list
       (common-lisp:cons "Lac"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geran-cid))
      (common-lisp:list
       (common-lisp:cons "GeranCid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input global-identity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gnss common-lisp:nil
                       ((use2dsolver :initarg :use2dsolver :type
                         (common-lisp:or use2dsolver common-lisp:null)
                         :accessor %gnss-use2dsolver :initform common-lisp:nil)
                        (assist-altitude :initarg :assist-altitude :type
                         (common-lisp:or coordinate common-lisp:null) :accessor
                         %gnss-assist-altitude :initform common-lisp:nil)
                        (assist-position :initarg :assist-position :type
                         (common-lisp:or assist-position common-lisp:null)
                         :accessor %gnss-assist-position :initform
                         common-lisp:nil)
                        (capture-time-accuracy :initarg :capture-time-accuracy
                         :type
                         (common-lisp:or capture-time-accuracy
                                         common-lisp:null)
                         :accessor %gnss-capture-time-accuracy :initform
                         common-lisp:nil)
                        (capture-time :initarg :capture-time :type
                         (common-lisp:or gpst common-lisp:null) :accessor
                         %gnss-capture-time :initform common-lisp:nil)
                        (payload :initarg :payload :type
                         (common-lisp:or gnss-nav common-lisp:null) :accessor
                         %gnss-payload :initform
                         (common-lisp:error ":payload is required"))))
 (common-lisp:export (common-lisp:list 'gnss 'make-gnss))
 (common-lisp:defun make-gnss
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key use2dsolver assist-altitude
                     assist-position capture-time-accuracy capture-time
                     payload)
   (common-lisp:apply #'common-lisp:make-instance 'gnss
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gnss))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gnss))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload))
      (common-lisp:list
       (common-lisp:cons "Payload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'capture-time))
      (common-lisp:list
       (common-lisp:cons "CaptureTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capture-time-accuracy))
      (common-lisp:list
       (common-lisp:cons "CaptureTimeAccuracy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assist-position))
      (common-lisp:list
       (common-lisp:cons "AssistPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assist-altitude))
      (common-lisp:list
       (common-lisp:cons "AssistAltitude"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'use2dsolver))
      (common-lisp:list
       (common-lisp:cons "Use2DSolver"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gnss))
   common-lisp:nil))
(common-lisp:deftype gnss-nav () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype gsm-list () '(trivial-types:proper-list gsm-obj))
 (common-lisp:defun |make-gsm-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list gsm-obj))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass gsm-local-id common-lisp:nil
                       ((bcch :initarg :bcch :type
                         (common-lisp:or bcch common-lisp:null) :accessor
                         %gsm-local-id-bcch :initform
                         (common-lisp:error ":bcch is required"))
                        (bsic :initarg :bsic :type
                         (common-lisp:or bsic common-lisp:null) :accessor
                         %gsm-local-id-bsic :initform
                         (common-lisp:error ":bsic is required"))))
 (common-lisp:export (common-lisp:list 'gsm-local-id 'make-gsm-local-id))
 (common-lisp:defun make-gsm-local-id
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key bcch bsic)
   (common-lisp:apply #'common-lisp:make-instance 'gsm-local-id
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gsm-local-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gsm-local-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bsic))
      (common-lisp:list
       (common-lisp:cons "Bsic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bcch))
      (common-lisp:list
       (common-lisp:cons "Bcch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gsm-local-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype gsm-nmr-list () '(trivial-types:proper-list gsm-nmr-obj))
 (common-lisp:defun |make-gsm-nmr-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list gsm-nmr-obj))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass gsm-nmr-obj common-lisp:nil
                       ((global-identity :initarg :global-identity :type
                         (common-lisp:or global-identity common-lisp:null)
                         :accessor %gsm-nmr-obj-global-identity :initform
                         common-lisp:nil)
                        (rx-level :initarg :rx-level :type
                         (common-lisp:or rx-level common-lisp:null) :accessor
                         %gsm-nmr-obj-rx-level :initform common-lisp:nil)
                        (bcch :initarg :bcch :type
                         (common-lisp:or bcch common-lisp:null) :accessor
                         %gsm-nmr-obj-bcch :initform
                         (common-lisp:error ":bcch is required"))
                        (bsic :initarg :bsic :type
                         (common-lisp:or bsic common-lisp:null) :accessor
                         %gsm-nmr-obj-bsic :initform
                         (common-lisp:error ":bsic is required"))))
 (common-lisp:export (common-lisp:list 'gsm-nmr-obj 'make-gsm-nmr-obj))
 (common-lisp:defun make-gsm-nmr-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key global-identity rx-level bcch bsic)
   (common-lisp:apply #'common-lisp:make-instance 'gsm-nmr-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gsm-nmr-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gsm-nmr-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bsic))
      (common-lisp:list
       (common-lisp:cons "Bsic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bcch))
      (common-lisp:list
       (common-lisp:cons "Bcch"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rx-level))
      (common-lisp:list
       (common-lisp:cons "RxLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'global-identity))
      (common-lisp:list
       (common-lisp:cons "GlobalIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gsm-nmr-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass gsm-obj common-lisp:nil
                       ((gsm-nmr :initarg :gsm-nmr :type
                         (common-lisp:or gsm-nmr-list common-lisp:null)
                         :accessor %gsm-obj-gsm-nmr :initform common-lisp:nil)
                        (rx-level :initarg :rx-level :type
                         (common-lisp:or rx-level common-lisp:null) :accessor
                         %gsm-obj-rx-level :initform common-lisp:nil)
                        (gsm-timing-advance :initarg :gsm-timing-advance :type
                         (common-lisp:or gsm-timing-advance common-lisp:null)
                         :accessor %gsm-obj-gsm-timing-advance :initform
                         common-lisp:nil)
                        (gsm-local-id :initarg :gsm-local-id :type
                         (common-lisp:or gsm-local-id common-lisp:null)
                         :accessor %gsm-obj-gsm-local-id :initform
                         common-lisp:nil)
                        (geran-cid :initarg :geran-cid :type
                         (common-lisp:or geran-cid common-lisp:null) :accessor
                         %gsm-obj-geran-cid :initform
                         (common-lisp:error ":geran-cid is required"))
                        (lac :initarg :lac :type
                         (common-lisp:or lac common-lisp:null) :accessor
                         %gsm-obj-lac :initform
                         (common-lisp:error ":lac is required"))
                        (mnc :initarg :mnc :type
                         (common-lisp:or mnc common-lisp:null) :accessor
                         %gsm-obj-mnc :initform
                         (common-lisp:error ":mnc is required"))
                        (mcc :initarg :mcc :type
                         (common-lisp:or mcc common-lisp:null) :accessor
                         %gsm-obj-mcc :initform
                         (common-lisp:error ":mcc is required"))))
 (common-lisp:export (common-lisp:list 'gsm-obj 'make-gsm-obj))
 (common-lisp:defun make-gsm-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key gsm-nmr rx-level gsm-timing-advance
                     gsm-local-id geran-cid lac mnc mcc)
   (common-lisp:apply #'common-lisp:make-instance 'gsm-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gsm-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gsm-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mcc))
      (common-lisp:list
       (common-lisp:cons "Mcc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mnc))
      (common-lisp:list
       (common-lisp:cons "Mnc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lac))
      (common-lisp:list
       (common-lisp:cons "Lac"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geran-cid))
      (common-lisp:list
       (common-lisp:cons "GeranCid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gsm-local-id))
      (common-lisp:list
       (common-lisp:cons "GsmLocalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gsm-timing-advance))
      (common-lisp:list
       (common-lisp:cons "GsmTimingAdvance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rx-level))
      (common-lisp:list
       (common-lisp:cons "RxLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gsm-nmr))
      (common-lisp:list
       (common-lisp:cons "GsmNmr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gsm-obj))
   common-lisp:nil))
(common-lisp:deftype gsm-timing-advance () 'common-lisp:integer)
(common-lisp:deftype horizontal-accuracy () 'common-lisp:single-float)
(common-lisp:deftype hr-allowed () 'common-lisp:boolean)
(common-lisp:deftype ipaddress () 'common-lisp:string)
(common-lisp:deftype isodate-time-string () 'common-lisp:string)
(common-lisp:deftype identifier () 'common-lisp:string)
(common-lisp:deftype identifier-type () 'common-lisp:string)
(common-lisp:deftype import-task-arn () 'common-lisp:string)
(common-lisp:deftype import-task-id () 'common-lisp:string)
(common-lisp:deftype import-task-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass imported-sidewalk-device common-lisp:nil
                       ((last-update-time :initarg :last-update-time :type
                         (common-lisp:or last-update-time common-lisp:null)
                         :accessor %imported-sidewalk-device-last-update-time
                         :initform common-lisp:nil)
                        (onboarding-status-reason :initarg
                         :onboarding-status-reason :type
                         (common-lisp:or onboard-status-reason
                                         common-lisp:null)
                         :accessor
                         %imported-sidewalk-device-onboarding-status-reason
                         :initform common-lisp:nil)
                        (onboarding-status :initarg :onboarding-status :type
                         (common-lisp:or onboard-status common-lisp:null)
                         :accessor %imported-sidewalk-device-onboarding-status
                         :initform common-lisp:nil)
                        (sidewalk-manufacturing-sn :initarg
                         :sidewalk-manufacturing-sn :type
                         (common-lisp:or sidewalk-manufacturing-sn
                                         common-lisp:null)
                         :accessor
                         %imported-sidewalk-device-sidewalk-manufacturing-sn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'imported-sidewalk-device 'make-imported-sidewalk-device))
 (common-lisp:defun make-imported-sidewalk-device
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-update-time onboarding-status-reason
                     onboarding-status sidewalk-manufacturing-sn)
   (common-lisp:apply #'common-lisp:make-instance 'imported-sidewalk-device
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          imported-sidewalk-device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          imported-sidewalk-device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sidewalk-manufacturing-sn))
      (common-lisp:list
       (common-lisp:cons "SidewalkManufacturingSn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'onboarding-status))
      (common-lisp:list
       (common-lisp:cons "OnboardingStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'onboarding-status-reason))
      (common-lisp:list
       (common-lisp:cons "OnboardingStatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-time))
      (common-lisp:list
       (common-lisp:cons "LastUpdateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          imported-sidewalk-device))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass imported-wireless-device common-lisp:nil
                       ((sidewalk :initarg :sidewalk :type
                         (common-lisp:or imported-sidewalk-device
                                         common-lisp:null)
                         :accessor %imported-wireless-device-sidewalk :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'imported-wireless-device 'make-imported-wireless-device))
 (common-lisp:defun make-imported-wireless-device
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sidewalk)
   (common-lisp:apply #'common-lisp:make-instance 'imported-wireless-device
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          imported-wireless-device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          imported-wireless-device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sidewalk))
      (common-lisp:list
       (common-lisp:cons "Sidewalk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          imported-wireless-device))
   common-lisp:nil))
(common-lisp:deftype imported-wireless-device-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype imported-wireless-device-list ()
   '(trivial-types:proper-list imported-wireless-device))
 (common-lisp:defun |make-imported-wireless-device-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            imported-wireless-device))
   aws-sdk/generator/shape::members))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (iotwireless-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype iot-certificate-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ip common-lisp:nil
                       ((ip-address :initarg :ip-address :type
                         (common-lisp:or ipaddress common-lisp:null) :accessor
                         %ip-ip-address :initform
                         (common-lisp:error ":ip-address is required"))))
 (common-lisp:export (common-lisp:list 'ip 'make-ip))
 (common-lisp:defun make-ip
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ip-address)
   (common-lisp:apply #'common-lisp:make-instance 'ip
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ip))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ip))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ip-address))
      (common-lisp:list
       (common-lisp:cons "IpAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ip))
   common-lisp:nil))
(common-lisp:deftype join-eui () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype join-eui-filters ()
   '(trivial-types:proper-list join-eui-range))
 (common-lisp:defun |make-join-eui-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list join-eui-range))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype join-eui-range () '(trivial-types:proper-list join-eui))
 (common-lisp:defun |make-join-eui-range|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list join-eui))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass join-event-configuration common-lisp:nil
                       ((wireless-device-id-event-topic :initarg
                         :wireless-device-id-event-topic :type
                         (common-lisp:or event-notification-topic-status
                                         common-lisp:null)
                         :accessor
                         %join-event-configuration-wireless-device-id-event-topic
                         :initform common-lisp:nil)
                        (lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or
                          lo-ra-wanjoin-event-notification-configurations
                          common-lisp:null)
                         :accessor %join-event-configuration-lo-ra-wan
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'join-event-configuration 'make-join-event-configuration))
 (common-lisp:defun make-join-event-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wireless-device-id-event-topic lo-ra-wan)
   (common-lisp:apply #'common-lisp:make-instance 'join-event-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          join-event-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          join-event-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wireless-device-id-event-topic))
      (common-lisp:list
       (common-lisp:cons "WirelessDeviceIdEventTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          join-event-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass join-resource-type-event-configuration common-lisp:nil
                       ((lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or
                          lo-ra-wanjoin-resource-type-event-configuration
                          common-lisp:null)
                         :accessor
                         %join-resource-type-event-configuration-lo-ra-wan
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'join-resource-type-event-configuration
                    'make-join-resource-type-event-configuration))
 (common-lisp:defun make-join-resource-type-event-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lo-ra-wan)
   (common-lisp:apply #'common-lisp:make-instance
                      'join-resource-type-event-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          join-resource-type-event-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          join-resource-type-event-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          join-resource-type-event-configuration))
   common-lisp:nil))
(common-lisp:deftype lac () 'common-lisp:integer)
(common-lisp:deftype last-update-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-destinations-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-destinations-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-destinations-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-destinations-request
                    'make-list-destinations-request))
 (common-lisp:defun make-list-destinations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-destinations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-destinations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-destinations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-destinations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-destinations-response common-lisp:nil
                       ((destination-list :initarg :destination-list :type
                         (common-lisp:or destination-list common-lisp:null)
                         :accessor %list-destinations-response-destination-list
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-destinations-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-destinations-response
                    'make-list-destinations-response))
 (common-lisp:defun make-list-destinations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination-list next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-destinations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-destinations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-destinations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-list))
      (common-lisp:list
       (common-lisp:cons "DestinationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-destinations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-device-profiles-request common-lisp:nil
                       ((device-profile-type :initarg :device-profile-type
                         :type
                         (common-lisp:or device-profile-type common-lisp:null)
                         :accessor
                         %list-device-profiles-request-device-profile-type
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-device-profiles-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-device-profiles-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-device-profiles-request
                    'make-list-device-profiles-request))
 (common-lisp:defun make-list-device-profiles-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device-profile-type max-results
                     next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-device-profiles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-device-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-device-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-device-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-device-profiles-response common-lisp:nil
                       ((device-profile-list :initarg :device-profile-list
                         :type
                         (common-lisp:or device-profile-list common-lisp:null)
                         :accessor
                         %list-device-profiles-response-device-profile-list
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-device-profiles-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-device-profiles-response
                    'make-list-device-profiles-response))
 (common-lisp:defun make-list-device-profiles-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device-profile-list next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-device-profiles-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-device-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-device-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-profile-list))
      (common-lisp:list
       (common-lisp:cons "DeviceProfileList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-device-profiles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-devices-for-wireless-device-import-task-request
                       common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or onboard-status common-lisp:null)
                         :accessor
                         %list-devices-for-wireless-device-import-task-request-status
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-devices-for-wireless-device-import-task-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-devices-for-wireless-device-import-task-request-max-results
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or import-task-id common-lisp:null)
                         :accessor
                         %list-devices-for-wireless-device-import-task-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-devices-for-wireless-device-import-task-request
                    'make-list-devices-for-wireless-device-import-task-request))
 (common-lisp:defun make-list-devices-for-wireless-device-import-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status next-token max-results id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-devices-for-wireless-device-import-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-for-wireless-device-import-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-for-wireless-device-import-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-for-wireless-device-import-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-devices-for-wireless-device-import-task-response
                       common-lisp:nil
                       ((imported-wireless-device-list :initarg
                         :imported-wireless-device-list :type
                         (common-lisp:or imported-wireless-device-list
                                         common-lisp:null)
                         :accessor
                         %list-devices-for-wireless-device-import-task-response-imported-wireless-device-list
                         :initform common-lisp:nil)
                        (destination-name :initarg :destination-name :type
                         (common-lisp:or destination-name common-lisp:null)
                         :accessor
                         %list-devices-for-wireless-device-import-task-response-destination-name
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-devices-for-wireless-device-import-task-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-devices-for-wireless-device-import-task-response
                    'make-list-devices-for-wireless-device-import-task-response))
 (common-lisp:defun make-list-devices-for-wireless-device-import-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key imported-wireless-device-list
                     destination-name next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-devices-for-wireless-device-import-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-for-wireless-device-import-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-for-wireless-device-import-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-name))
      (common-lisp:list
       (common-lisp:cons "DestinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'imported-wireless-device-list))
      (common-lisp:list
       (common-lisp:cons "ImportedWirelessDeviceList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-devices-for-wireless-device-import-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-event-configurations-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-event-configurations-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-event-configurations-request-max-results
                         :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or event-notification-resource-type
                                         common-lisp:null)
                         :accessor
                         %list-event-configurations-request-resource-type
                         :initform
                         (common-lisp:error ":resource-type is required"))))
 (common-lisp:export
  (common-lisp:list 'list-event-configurations-request
                    'make-list-event-configurations-request))
 (common-lisp:defun make-list-event-configurations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results resource-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-event-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-event-configurations-response common-lisp:nil
                       ((event-configurations-list :initarg
                         :event-configurations-list :type
                         (common-lisp:or event-configurations-list
                                         common-lisp:null)
                         :accessor
                         %list-event-configurations-response-event-configurations-list
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-event-configurations-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-event-configurations-response
                    'make-list-event-configurations-response))
 (common-lisp:defun make-list-event-configurations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key event-configurations-list next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-event-configurations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-event-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-event-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'event-configurations-list))
      (common-lisp:list
       (common-lisp:cons "EventConfigurationsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-event-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fuota-tasks-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-fuota-tasks-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-fuota-tasks-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-fuota-tasks-request 'make-list-fuota-tasks-request))
 (common-lisp:defun make-list-fuota-tasks-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-fuota-tasks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-fuota-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-fuota-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-fuota-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-fuota-tasks-response common-lisp:nil
                       ((fuota-task-list :initarg :fuota-task-list :type
                         (common-lisp:or fuota-task-list common-lisp:null)
                         :accessor %list-fuota-tasks-response-fuota-task-list
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-fuota-tasks-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-fuota-tasks-response
                    'make-list-fuota-tasks-response))
 (common-lisp:defun make-list-fuota-tasks-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fuota-task-list next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-fuota-tasks-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-fuota-tasks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-fuota-tasks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fuota-task-list))
      (common-lisp:list
       (common-lisp:cons "FuotaTaskList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-fuota-tasks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-multicast-groups-by-fuota-task-request
                       common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-multicast-groups-by-fuota-task-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-multicast-groups-by-fuota-task-request-next-token
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or fuota-task-id common-lisp:null)
                         :accessor
                         %list-multicast-groups-by-fuota-task-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-multicast-groups-by-fuota-task-request
                    'make-list-multicast-groups-by-fuota-task-request))
 (common-lisp:defun make-list-multicast-groups-by-fuota-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token id)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-multicast-groups-by-fuota-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multicast-groups-by-fuota-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multicast-groups-by-fuota-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multicast-groups-by-fuota-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-multicast-groups-by-fuota-task-response
                       common-lisp:nil
                       ((multicast-group-list :initarg :multicast-group-list
                         :type
                         (common-lisp:or multicast-group-list-by-fuota-task
                                         common-lisp:null)
                         :accessor
                         %list-multicast-groups-by-fuota-task-response-multicast-group-list
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-multicast-groups-by-fuota-task-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-multicast-groups-by-fuota-task-response
                    'make-list-multicast-groups-by-fuota-task-response))
 (common-lisp:defun make-list-multicast-groups-by-fuota-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key multicast-group-list next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-multicast-groups-by-fuota-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multicast-groups-by-fuota-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multicast-groups-by-fuota-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multicast-group-list))
      (common-lisp:list
       (common-lisp:cons "MulticastGroupList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multicast-groups-by-fuota-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-multicast-groups-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-multicast-groups-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-multicast-groups-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-multicast-groups-request
                    'make-list-multicast-groups-request))
 (common-lisp:defun make-list-multicast-groups-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-multicast-groups-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multicast-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multicast-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multicast-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-multicast-groups-response common-lisp:nil
                       ((multicast-group-list :initarg :multicast-group-list
                         :type
                         (common-lisp:or multicast-group-list common-lisp:null)
                         :accessor
                         %list-multicast-groups-response-multicast-group-list
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-multicast-groups-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-multicast-groups-response
                    'make-list-multicast-groups-response))
 (common-lisp:defun make-list-multicast-groups-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key multicast-group-list next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-multicast-groups-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-multicast-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-multicast-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multicast-group-list))
      (common-lisp:list
       (common-lisp:cons "MulticastGroupList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-multicast-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-network-analyzer-configurations-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-network-analyzer-configurations-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-network-analyzer-configurations-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-network-analyzer-configurations-request
                    'make-list-network-analyzer-configurations-request))
 (common-lisp:defun make-list-network-analyzer-configurations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-network-analyzer-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-network-analyzer-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-network-analyzer-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-network-analyzer-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-network-analyzer-configurations-response
                       common-lisp:nil
                       ((network-analyzer-configuration-list :initarg
                         :network-analyzer-configuration-list :type
                         (common-lisp:or network-analyzer-configuration-list
                                         common-lisp:null)
                         :accessor
                         %list-network-analyzer-configurations-response-network-analyzer-configuration-list
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-network-analyzer-configurations-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-network-analyzer-configurations-response
                    'make-list-network-analyzer-configurations-response))
 (common-lisp:defun make-list-network-analyzer-configurations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key network-analyzer-configuration-list
                     next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-network-analyzer-configurations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-network-analyzer-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-network-analyzer-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-analyzer-configuration-list))
      (common-lisp:list
       (common-lisp:cons "NetworkAnalyzerConfigurationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-network-analyzer-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-partner-accounts-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-partner-accounts-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-partner-accounts-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-partner-accounts-request
                    'make-list-partner-accounts-request))
 (common-lisp:defun make-list-partner-accounts-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-partner-accounts-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-partner-accounts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-partner-accounts-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-partner-accounts-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-partner-accounts-response common-lisp:nil
                       ((sidewalk :initarg :sidewalk :type
                         (common-lisp:or sidewalk-account-list
                                         common-lisp:null)
                         :accessor %list-partner-accounts-response-sidewalk
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-partner-accounts-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-partner-accounts-response
                    'make-list-partner-accounts-response))
 (common-lisp:defun make-list-partner-accounts-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sidewalk next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-partner-accounts-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-partner-accounts-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-partner-accounts-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sidewalk))
      (common-lisp:list
       (common-lisp:cons "Sidewalk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-partner-accounts-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-position-configurations-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-position-configurations-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-position-configurations-request-max-results
                         :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or position-resource-type
                                         common-lisp:null)
                         :accessor
                         %list-position-configurations-request-resource-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-position-configurations-request
                    'make-list-position-configurations-request))
 (common-lisp:defun make-list-position-configurations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results resource-type)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-position-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-position-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-position-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-position-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-position-configurations-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-position-configurations-response-next-token
                         :initform common-lisp:nil)
                        (position-configuration-list :initarg
                         :position-configuration-list :type
                         (common-lisp:or position-configuration-list
                                         common-lisp:null)
                         :accessor
                         %list-position-configurations-response-position-configuration-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-position-configurations-response
                    'make-list-position-configurations-response))
 (common-lisp:defun make-list-position-configurations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token position-configuration-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-position-configurations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-position-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-position-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'position-configuration-list))
      (common-lisp:list
       (common-lisp:cons "PositionConfigurationList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-position-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-queued-messages-request common-lisp:nil
                       ((wireless-device-type :initarg :wireless-device-type
                         :type
                         (common-lisp:or wireless-device-type common-lisp:null)
                         :accessor
                         %list-queued-messages-request-wireless-device-type
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-queued-messages-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-queued-messages-request-next-token :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or wireless-device-id common-lisp:null)
                         :accessor %list-queued-messages-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'list-queued-messages-request
                    'make-list-queued-messages-request))
 (common-lisp:defun make-list-queued-messages-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wireless-device-type max-results
                     next-token id)
   (common-lisp:apply #'common-lisp:make-instance 'list-queued-messages-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-queued-messages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-queued-messages-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-queued-messages-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-queued-messages-response common-lisp:nil
                       ((downlink-queue-messages-list :initarg
                         :downlink-queue-messages-list :type
                         (common-lisp:or downlink-queue-messages-list
                                         common-lisp:null)
                         :accessor
                         %list-queued-messages-response-downlink-queue-messages-list
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-queued-messages-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-queued-messages-response
                    'make-list-queued-messages-response))
 (common-lisp:defun make-list-queued-messages-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key downlink-queue-messages-list next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-queued-messages-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-queued-messages-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-queued-messages-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'downlink-queue-messages-list))
      (common-lisp:list
       (common-lisp:cons "DownlinkQueueMessagesList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-queued-messages-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-service-profiles-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-service-profiles-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-service-profiles-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-service-profiles-request
                    'make-list-service-profiles-request))
 (common-lisp:defun make-list-service-profiles-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-service-profiles-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-service-profiles-response common-lisp:nil
                       ((service-profile-list :initarg :service-profile-list
                         :type
                         (common-lisp:or service-profile-list common-lisp:null)
                         :accessor
                         %list-service-profiles-response-service-profile-list
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-service-profiles-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-service-profiles-response
                    'make-list-service-profiles-response))
 (common-lisp:defun make-list-service-profiles-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-profile-list next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-service-profiles-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-profile-list))
      (common-lisp:list
       (common-lisp:cons "ServiceProfileList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-profiles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-wireless-device-import-tasks-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-wireless-device-import-tasks-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-wireless-device-import-tasks-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-wireless-device-import-tasks-request
                    'make-list-wireless-device-import-tasks-request))
 (common-lisp:defun make-list-wireless-device-import-tasks-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-wireless-device-import-tasks-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-wireless-device-import-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-wireless-device-import-tasks-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-wireless-device-import-tasks-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-wireless-device-import-tasks-response
                       common-lisp:nil
                       ((wireless-device-import-task-list :initarg
                         :wireless-device-import-task-list :type
                         (common-lisp:or wireless-device-import-task-list
                                         common-lisp:null)
                         :accessor
                         %list-wireless-device-import-tasks-response-wireless-device-import-task-list
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-wireless-device-import-tasks-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-wireless-device-import-tasks-response
                    'make-list-wireless-device-import-tasks-response))
 (common-lisp:defun make-list-wireless-device-import-tasks-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wireless-device-import-task-list
                     next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-wireless-device-import-tasks-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-wireless-device-import-tasks-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-wireless-device-import-tasks-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wireless-device-import-task-list))
      (common-lisp:list
       (common-lisp:cons "WirelessDeviceImportTaskList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-wireless-device-import-tasks-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-wireless-devices-request common-lisp:nil
                       ((multicast-group-id :initarg :multicast-group-id :type
                         (common-lisp:or multicast-group-id common-lisp:null)
                         :accessor
                         %list-wireless-devices-request-multicast-group-id
                         :initform common-lisp:nil)
                        (fuota-task-id :initarg :fuota-task-id :type
                         (common-lisp:or fuota-task-id common-lisp:null)
                         :accessor %list-wireless-devices-request-fuota-task-id
                         :initform common-lisp:nil)
                        (wireless-device-type :initarg :wireless-device-type
                         :type
                         (common-lisp:or wireless-device-type common-lisp:null)
                         :accessor
                         %list-wireless-devices-request-wireless-device-type
                         :initform common-lisp:nil)
                        (service-profile-id :initarg :service-profile-id :type
                         (common-lisp:or service-profile-id common-lisp:null)
                         :accessor
                         %list-wireless-devices-request-service-profile-id
                         :initform common-lisp:nil)
                        (device-profile-id :initarg :device-profile-id :type
                         (common-lisp:or device-profile-id common-lisp:null)
                         :accessor
                         %list-wireless-devices-request-device-profile-id
                         :initform common-lisp:nil)
                        (destination-name :initarg :destination-name :type
                         (common-lisp:or destination-name common-lisp:null)
                         :accessor
                         %list-wireless-devices-request-destination-name
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-wireless-devices-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-wireless-devices-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-wireless-devices-request
                    'make-list-wireless-devices-request))
 (common-lisp:defun make-list-wireless-devices-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key multicast-group-id fuota-task-id
                     wireless-device-type service-profile-id device-profile-id
                     destination-name next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-wireless-devices-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-wireless-devices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-wireless-devices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-wireless-devices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-wireless-devices-response common-lisp:nil
                       ((wireless-device-list :initarg :wireless-device-list
                         :type
                         (common-lisp:or wireless-device-statistics-list
                                         common-lisp:null)
                         :accessor
                         %list-wireless-devices-response-wireless-device-list
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-wireless-devices-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-wireless-devices-response
                    'make-list-wireless-devices-response))
 (common-lisp:defun make-list-wireless-devices-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wireless-device-list next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-wireless-devices-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-wireless-devices-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-wireless-devices-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wireless-device-list))
      (common-lisp:list
       (common-lisp:cons "WirelessDeviceList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-wireless-devices-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-wireless-gateway-task-definitions-request
                       common-lisp:nil
                       ((task-definition-type :initarg :task-definition-type
                         :type
                         (common-lisp:or wireless-gateway-task-definition-type
                                         common-lisp:null)
                         :accessor
                         %list-wireless-gateway-task-definitions-request-task-definition-type
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-wireless-gateway-task-definitions-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-wireless-gateway-task-definitions-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-wireless-gateway-task-definitions-request
                    'make-list-wireless-gateway-task-definitions-request))
 (common-lisp:defun make-list-wireless-gateway-task-definitions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key task-definition-type next-token
                     max-results)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-wireless-gateway-task-definitions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-wireless-gateway-task-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-wireless-gateway-task-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-wireless-gateway-task-definitions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-wireless-gateway-task-definitions-response
                       common-lisp:nil
                       ((task-definitions :initarg :task-definitions :type
                         (common-lisp:or wireless-gateway-task-definition-list
                                         common-lisp:null)
                         :accessor
                         %list-wireless-gateway-task-definitions-response-task-definitions
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-wireless-gateway-task-definitions-response-next-token
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-wireless-gateway-task-definitions-response
                    'make-list-wireless-gateway-task-definitions-response))
 (common-lisp:defun make-list-wireless-gateway-task-definitions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key task-definitions next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-wireless-gateway-task-definitions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-wireless-gateway-task-definitions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-wireless-gateway-task-definitions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'task-definitions))
      (common-lisp:list
       (common-lisp:cons "TaskDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-wireless-gateway-task-definitions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-wireless-gateways-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-wireless-gateways-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-wireless-gateways-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-wireless-gateways-request
                    'make-list-wireless-gateways-request))
 (common-lisp:defun make-list-wireless-gateways-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-wireless-gateways-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-wireless-gateways-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-wireless-gateways-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-wireless-gateways-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-wireless-gateways-response common-lisp:nil
                       ((wireless-gateway-list :initarg :wireless-gateway-list
                         :type
                         (common-lisp:or wireless-gateway-statistics-list
                                         common-lisp:null)
                         :accessor
                         %list-wireless-gateways-response-wireless-gateway-list
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-wireless-gateways-response-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-wireless-gateways-response
                    'make-list-wireless-gateways-response))
 (common-lisp:defun make-list-wireless-gateways-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wireless-gateway-list next-token)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-wireless-gateways-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-wireless-gateways-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-wireless-gateways-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wireless-gateway-list))
      (common-lisp:list
       (common-lisp:cons "WirelessGatewayList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-wireless-gateways-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  lo-ra-wanconnection-status-event-notification-configurations common-lisp:nil
  ((gateway-eui-event-topic :initarg :gateway-eui-event-topic :type
    (common-lisp:or event-notification-topic-status common-lisp:null) :accessor
    %lo-ra-wanconnection-status-event-notification-configurations-gateway-eui-event-topic
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'lo-ra-wanconnection-status-event-notification-configurations
   'make-lo-ra-wanconnection-status-event-notification-configurations))
 (common-lisp:defun make-lo-ra-wanconnection-status-event-notification-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key gateway-eui-event-topic)
   (common-lisp:apply #'common-lisp:make-instance
                      'lo-ra-wanconnection-status-event-notification-configurations
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanconnection-status-event-notification-configurations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanconnection-status-event-notification-configurations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'gateway-eui-event-topic))
      (common-lisp:list
       (common-lisp:cons "GatewayEuiEventTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanconnection-status-event-notification-configurations))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  lo-ra-wanconnection-status-resource-type-event-configuration common-lisp:nil
  ((wireless-gateway-event-topic :initarg :wireless-gateway-event-topic :type
    (common-lisp:or event-notification-topic-status common-lisp:null) :accessor
    %lo-ra-wanconnection-status-resource-type-event-configuration-wireless-gateway-event-topic
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list
   'lo-ra-wanconnection-status-resource-type-event-configuration
   'make-lo-ra-wanconnection-status-resource-type-event-configuration))
 (common-lisp:defun make-lo-ra-wanconnection-status-resource-type-event-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wireless-gateway-event-topic)
   (common-lisp:apply #'common-lisp:make-instance
                      'lo-ra-wanconnection-status-resource-type-event-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanconnection-status-resource-type-event-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanconnection-status-resource-type-event-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wireless-gateway-event-topic))
      (common-lisp:list
       (common-lisp:cons "WirelessGatewayEventTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanconnection-status-resource-type-event-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lo-ra-wandevice common-lisp:nil
                       ((fports :initarg :fports :type
                         (common-lisp:or fports common-lisp:null) :accessor
                         %lo-ra-wandevice-fports :initform common-lisp:nil)
                        (abp-v1-0-x :initarg :abp-v1-0-x :type
                         (common-lisp:or abp-v1-0-x common-lisp:null) :accessor
                         %lo-ra-wandevice-abp-v1-0-x :initform common-lisp:nil)
                        (abp-v1-1 :initarg :abp-v1-1 :type
                         (common-lisp:or abp-v1-1 common-lisp:null) :accessor
                         %lo-ra-wandevice-abp-v1-1 :initform common-lisp:nil)
                        (otaa-v1-0-x :initarg :otaa-v1-0-x :type
                         (common-lisp:or otaa-v1-0-x common-lisp:null)
                         :accessor %lo-ra-wandevice-otaa-v1-0-x :initform
                         common-lisp:nil)
                        (otaa-v1-1 :initarg :otaa-v1-1 :type
                         (common-lisp:or otaa-v1-1 common-lisp:null) :accessor
                         %lo-ra-wandevice-otaa-v1-1 :initform common-lisp:nil)
                        (service-profile-id :initarg :service-profile-id :type
                         (common-lisp:or service-profile-id common-lisp:null)
                         :accessor %lo-ra-wandevice-service-profile-id
                         :initform common-lisp:nil)
                        (device-profile-id :initarg :device-profile-id :type
                         (common-lisp:or device-profile-id common-lisp:null)
                         :accessor %lo-ra-wandevice-device-profile-id :initform
                         common-lisp:nil)
                        (dev-eui :initarg :dev-eui :type
                         (common-lisp:or dev-eui common-lisp:null) :accessor
                         %lo-ra-wandevice-dev-eui :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'lo-ra-wandevice 'make-lo-ra-wandevice))
 (common-lisp:defun make-lo-ra-wandevice
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fports abp-v1-0-x abp-v1-1 otaa-v1-0-x
                     otaa-v1-1 service-profile-id device-profile-id dev-eui)
   (common-lisp:apply #'common-lisp:make-instance 'lo-ra-wandevice
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lo-ra-wandevice))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lo-ra-wandevice))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dev-eui))
      (common-lisp:list
       (common-lisp:cons "DevEui"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-profile-id))
      (common-lisp:list
       (common-lisp:cons "DeviceProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-profile-id))
      (common-lisp:list
       (common-lisp:cons "ServiceProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'otaa-v1-1))
      (common-lisp:list
       (common-lisp:cons "OtaaV1_1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'otaa-v1-0-x))
      (common-lisp:list
       (common-lisp:cons "OtaaV1_0_x"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abp-v1-1))
      (common-lisp:list
       (common-lisp:cons "AbpV1_1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abp-v1-0-x))
      (common-lisp:list
       (common-lisp:cons "AbpV1_0_x"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fports))
      (common-lisp:list
       (common-lisp:cons "FPorts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lo-ra-wandevice))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lo-ra-wandevice-metadata common-lisp:nil
                       ((gateways :initarg :gateways :type
                         (common-lisp:or lo-ra-wangateway-metadata-list
                                         common-lisp:null)
                         :accessor %lo-ra-wandevice-metadata-gateways :initform
                         common-lisp:nil)
                        (timestamp :initarg :timestamp :type
                         (common-lisp:or isodate-time-string common-lisp:null)
                         :accessor %lo-ra-wandevice-metadata-timestamp
                         :initform common-lisp:nil)
                        (frequency :initarg :frequency :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %lo-ra-wandevice-metadata-frequency :initform
                         common-lisp:nil)
                        (data-rate :initarg :data-rate :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %lo-ra-wandevice-metadata-data-rate :initform
                         common-lisp:nil)
                        (fport :initarg :fport :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %lo-ra-wandevice-metadata-fport :initform
                         common-lisp:nil)
                        (dev-eui :initarg :dev-eui :type
                         (common-lisp:or dev-eui common-lisp:null) :accessor
                         %lo-ra-wandevice-metadata-dev-eui :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lo-ra-wandevice-metadata 'make-lo-ra-wandevice-metadata))
 (common-lisp:defun make-lo-ra-wandevice-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key gateways timestamp frequency data-rate
                     fport dev-eui)
   (common-lisp:apply #'common-lisp:make-instance 'lo-ra-wandevice-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wandevice-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wandevice-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dev-eui))
      (common-lisp:list
       (common-lisp:cons "DevEui"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fport))
      (common-lisp:list
       (common-lisp:cons "FPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-rate))
      (common-lisp:list
       (common-lisp:cons "DataRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'frequency))
      (common-lisp:list
       (common-lisp:cons "Frequency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "Timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateways))
      (common-lisp:list
       (common-lisp:cons "Gateways"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wandevice-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lo-ra-wandevice-profile common-lisp:nil
                       ((supports32bit-fcnt :initarg :supports32bit-fcnt :type
                         (common-lisp:or supports32bit-fcnt common-lisp:null)
                         :accessor %lo-ra-wandevice-profile-supports32bit-fcnt
                         :initform common-lisp:nil)
                        (supports-join :initarg :supports-join :type
                         (common-lisp:or supports-join common-lisp:null)
                         :accessor %lo-ra-wandevice-profile-supports-join
                         :initform common-lisp:nil)
                        (rf-region :initarg :rf-region :type
                         (common-lisp:or rf-region common-lisp:null) :accessor
                         %lo-ra-wandevice-profile-rf-region :initform
                         common-lisp:nil)
                        (max-duty-cycle :initarg :max-duty-cycle :type
                         (common-lisp:or max-duty-cycle common-lisp:null)
                         :accessor %lo-ra-wandevice-profile-max-duty-cycle
                         :initform common-lisp:nil)
                        (max-eirp :initarg :max-eirp :type
                         (common-lisp:or max-eirp common-lisp:null) :accessor
                         %lo-ra-wandevice-profile-max-eirp :initform
                         common-lisp:nil)
                        (factory-preset-freqs-list :initarg
                         :factory-preset-freqs-list :type
                         (common-lisp:or factory-preset-freqs-list
                                         common-lisp:null)
                         :accessor
                         %lo-ra-wandevice-profile-factory-preset-freqs-list
                         :initform common-lisp:nil)
                        (rx-freq2 :initarg :rx-freq2 :type
                         (common-lisp:or rx-freq2 common-lisp:null) :accessor
                         %lo-ra-wandevice-profile-rx-freq2 :initform
                         common-lisp:nil)
                        (rx-data-rate2 :initarg :rx-data-rate2 :type
                         (common-lisp:or rx-data-rate2 common-lisp:null)
                         :accessor %lo-ra-wandevice-profile-rx-data-rate2
                         :initform common-lisp:nil)
                        (rx-dr-offset1 :initarg :rx-dr-offset1 :type
                         (common-lisp:or rx-dr-offset1 common-lisp:null)
                         :accessor %lo-ra-wandevice-profile-rx-dr-offset1
                         :initform common-lisp:nil)
                        (rx-delay1 :initarg :rx-delay1 :type
                         (common-lisp:or rx-delay1 common-lisp:null) :accessor
                         %lo-ra-wandevice-profile-rx-delay1 :initform
                         common-lisp:nil)
                        (reg-params-revision :initarg :reg-params-revision
                         :type
                         (common-lisp:or reg-params-revision common-lisp:null)
                         :accessor %lo-ra-wandevice-profile-reg-params-revision
                         :initform common-lisp:nil)
                        (mac-version :initarg :mac-version :type
                         (common-lisp:or mac-version common-lisp:null)
                         :accessor %lo-ra-wandevice-profile-mac-version
                         :initform common-lisp:nil)
                        (class-ctimeout :initarg :class-ctimeout :type
                         (common-lisp:or class-ctimeout common-lisp:null)
                         :accessor %lo-ra-wandevice-profile-class-ctimeout
                         :initform common-lisp:nil)
                        (supports-class-c :initarg :supports-class-c :type
                         (common-lisp:or supports-class-c common-lisp:null)
                         :accessor %lo-ra-wandevice-profile-supports-class-c
                         :initform common-lisp:nil)
                        (ping-slot-freq :initarg :ping-slot-freq :type
                         (common-lisp:or ping-slot-freq common-lisp:null)
                         :accessor %lo-ra-wandevice-profile-ping-slot-freq
                         :initform common-lisp:nil)
                        (ping-slot-dr :initarg :ping-slot-dr :type
                         (common-lisp:or ping-slot-dr common-lisp:null)
                         :accessor %lo-ra-wandevice-profile-ping-slot-dr
                         :initform common-lisp:nil)
                        (ping-slot-period :initarg :ping-slot-period :type
                         (common-lisp:or ping-slot-period common-lisp:null)
                         :accessor %lo-ra-wandevice-profile-ping-slot-period
                         :initform common-lisp:nil)
                        (class-btimeout :initarg :class-btimeout :type
                         (common-lisp:or class-btimeout common-lisp:null)
                         :accessor %lo-ra-wandevice-profile-class-btimeout
                         :initform common-lisp:nil)
                        (supports-class-b :initarg :supports-class-b :type
                         (common-lisp:or supports-class-b common-lisp:null)
                         :accessor %lo-ra-wandevice-profile-supports-class-b
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lo-ra-wandevice-profile 'make-lo-ra-wandevice-profile))
 (common-lisp:defun make-lo-ra-wandevice-profile
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key supports32bit-fcnt supports-join
                     rf-region max-duty-cycle max-eirp
                     factory-preset-freqs-list rx-freq2 rx-data-rate2
                     rx-dr-offset1 rx-delay1 reg-params-revision mac-version
                     class-ctimeout supports-class-c ping-slot-freq
                     ping-slot-dr ping-slot-period class-btimeout
                     supports-class-b)
   (common-lisp:apply #'common-lisp:make-instance 'lo-ra-wandevice-profile
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wandevice-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wandevice-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supports-class-b))
      (common-lisp:list
       (common-lisp:cons "SupportsClassB"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'class-btimeout))
      (common-lisp:list
       (common-lisp:cons "ClassBTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ping-slot-period))
      (common-lisp:list
       (common-lisp:cons "PingSlotPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ping-slot-dr))
      (common-lisp:list
       (common-lisp:cons "PingSlotDr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ping-slot-freq))
      (common-lisp:list
       (common-lisp:cons "PingSlotFreq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supports-class-c))
      (common-lisp:list
       (common-lisp:cons "SupportsClassC"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'class-ctimeout))
      (common-lisp:list
       (common-lisp:cons "ClassCTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-version))
      (common-lisp:list
       (common-lisp:cons "MacVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reg-params-revision))
      (common-lisp:list
       (common-lisp:cons "RegParamsRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rx-delay1))
      (common-lisp:list
       (common-lisp:cons "RxDelay1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rx-dr-offset1))
      (common-lisp:list
       (common-lisp:cons "RxDrOffset1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rx-data-rate2))
      (common-lisp:list
       (common-lisp:cons "RxDataRate2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rx-freq2))
      (common-lisp:list
       (common-lisp:cons "RxFreq2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'factory-preset-freqs-list))
      (common-lisp:list
       (common-lisp:cons "FactoryPresetFreqsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-eirp))
      (common-lisp:list
       (common-lisp:cons "MaxEirp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-duty-cycle))
      (common-lisp:list
       (common-lisp:cons "MaxDutyCycle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rf-region))
      (common-lisp:list
       (common-lisp:cons "RfRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supports-join))
      (common-lisp:list
       (common-lisp:cons "SupportsJoin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'supports32bit-fcnt))
      (common-lisp:list
       (common-lisp:cons "Supports32BitFCnt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wandevice-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lo-ra-wanfuota-task common-lisp:nil
                       ((rf-region :initarg :rf-region :type
                         (common-lisp:or supported-rf-region common-lisp:null)
                         :accessor %lo-ra-wanfuota-task-rf-region :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lo-ra-wanfuota-task 'make-lo-ra-wanfuota-task))
 (common-lisp:defun make-lo-ra-wanfuota-task
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rf-region)
   (common-lisp:apply #'common-lisp:make-instance 'lo-ra-wanfuota-task
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lo-ra-wanfuota-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lo-ra-wanfuota-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rf-region))
      (common-lisp:list
       (common-lisp:cons "RfRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lo-ra-wanfuota-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lo-ra-wanfuota-task-get-info common-lisp:nil
                       ((start-time :initarg :start-time :type
                         (common-lisp:or start-time common-lisp:null) :accessor
                         %lo-ra-wanfuota-task-get-info-start-time :initform
                         common-lisp:nil)
                        (rf-region :initarg :rf-region :type
                         (common-lisp:or rf-region common-lisp:null) :accessor
                         %lo-ra-wanfuota-task-get-info-rf-region :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lo-ra-wanfuota-task-get-info
                    'make-lo-ra-wanfuota-task-get-info))
 (common-lisp:defun make-lo-ra-wanfuota-task-get-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start-time rf-region)
   (common-lisp:apply #'common-lisp:make-instance 'lo-ra-wanfuota-task-get-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanfuota-task-get-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanfuota-task-get-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rf-region))
      (common-lisp:list
       (common-lisp:cons "RfRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanfuota-task-get-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lo-ra-wangateway common-lisp:nil
                       ((max-eirp :initarg :max-eirp :type
                         (common-lisp:or gateway-max-eirp common-lisp:null)
                         :accessor %lo-ra-wangateway-max-eirp :initform
                         common-lisp:nil)
                        (beaconing :initarg :beaconing :type
                         (common-lisp:or beaconing common-lisp:null) :accessor
                         %lo-ra-wangateway-beaconing :initform common-lisp:nil)
                        (sub-bands :initarg :sub-bands :type
                         (common-lisp:or sub-bands common-lisp:null) :accessor
                         %lo-ra-wangateway-sub-bands :initform common-lisp:nil)
                        (net-id-filters :initarg :net-id-filters :type
                         (common-lisp:or net-id-filters common-lisp:null)
                         :accessor %lo-ra-wangateway-net-id-filters :initform
                         common-lisp:nil)
                        (join-eui-filters :initarg :join-eui-filters :type
                         (common-lisp:or join-eui-filters common-lisp:null)
                         :accessor %lo-ra-wangateway-join-eui-filters :initform
                         common-lisp:nil)
                        (rf-region :initarg :rf-region :type
                         (common-lisp:or rf-region common-lisp:null) :accessor
                         %lo-ra-wangateway-rf-region :initform common-lisp:nil)
                        (gateway-eui :initarg :gateway-eui :type
                         (common-lisp:or gateway-eui common-lisp:null)
                         :accessor %lo-ra-wangateway-gateway-eui :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lo-ra-wangateway 'make-lo-ra-wangateway))
 (common-lisp:defun make-lo-ra-wangateway
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-eirp beaconing sub-bands
                     net-id-filters join-eui-filters rf-region gateway-eui)
   (common-lisp:apply #'common-lisp:make-instance 'lo-ra-wangateway
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lo-ra-wangateway))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lo-ra-wangateway))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-eui))
      (common-lisp:list
       (common-lisp:cons "GatewayEui"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rf-region))
      (common-lisp:list
       (common-lisp:cons "RfRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'join-eui-filters))
      (common-lisp:list
       (common-lisp:cons "JoinEuiFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'net-id-filters))
      (common-lisp:list
       (common-lisp:cons "NetIdFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sub-bands))
      (common-lisp:list
       (common-lisp:cons "SubBands"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'beaconing))
      (common-lisp:list
       (common-lisp:cons "Beaconing"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-eirp))
      (common-lisp:list
       (common-lisp:cons "MaxEirp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lo-ra-wangateway))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lo-ra-wangateway-current-version common-lisp:nil
                       ((current-version :initarg :current-version :type
                         (common-lisp:or lo-ra-wangateway-version
                                         common-lisp:null)
                         :accessor
                         %lo-ra-wangateway-current-version-current-version
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lo-ra-wangateway-current-version
                    'make-lo-ra-wangateway-current-version))
 (common-lisp:defun make-lo-ra-wangateway-current-version
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key current-version)
   (common-lisp:apply #'common-lisp:make-instance
                      'lo-ra-wangateway-current-version
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wangateway-current-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wangateway-current-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wangateway-current-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lo-ra-wangateway-metadata common-lisp:nil
                       ((rssi :initarg :rssi :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %lo-ra-wangateway-metadata-rssi :initform
                         common-lisp:nil)
                        (snr :initarg :snr :type
                         (common-lisp:or double common-lisp:null) :accessor
                         %lo-ra-wangateway-metadata-snr :initform
                         common-lisp:nil)
                        (gateway-eui :initarg :gateway-eui :type
                         (common-lisp:or gateway-eui common-lisp:null)
                         :accessor %lo-ra-wangateway-metadata-gateway-eui
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lo-ra-wangateway-metadata
                    'make-lo-ra-wangateway-metadata))
 (common-lisp:defun make-lo-ra-wangateway-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rssi snr gateway-eui)
   (common-lisp:apply #'common-lisp:make-instance 'lo-ra-wangateway-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wangateway-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wangateway-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-eui))
      (common-lisp:list
       (common-lisp:cons "GatewayEui"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snr))
      (common-lisp:list
       (common-lisp:cons "Snr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rssi))
      (common-lisp:list
       (common-lisp:cons "Rssi"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wangateway-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lo-ra-wangateway-metadata-list ()
   '(trivial-types:proper-list lo-ra-wangateway-metadata))
 (common-lisp:defun |make-lo-ra-wangateway-metadata-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            lo-ra-wangateway-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass lo-ra-wangateway-version common-lisp:nil
                       ((station :initarg :station :type
                         (common-lisp:or station common-lisp:null) :accessor
                         %lo-ra-wangateway-version-station :initform
                         common-lisp:nil)
                        (model :initarg :model :type
                         (common-lisp:or model common-lisp:null) :accessor
                         %lo-ra-wangateway-version-model :initform
                         common-lisp:nil)
                        (package-version :initarg :package-version :type
                         (common-lisp:or package-version common-lisp:null)
                         :accessor %lo-ra-wangateway-version-package-version
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lo-ra-wangateway-version 'make-lo-ra-wangateway-version))
 (common-lisp:defun make-lo-ra-wangateway-version
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key station model package-version)
   (common-lisp:apply #'common-lisp:make-instance 'lo-ra-wangateway-version
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wangateway-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wangateway-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'package-version))
      (common-lisp:list
       (common-lisp:cons "PackageVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'model))
      (common-lisp:list
       (common-lisp:cons "Model"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'station))
      (common-lisp:list
       (common-lisp:cons "Station"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wangateway-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lo-ra-wanget-service-profile-info common-lisp:nil
                       ((min-gw-diversity :initarg :min-gw-diversity :type
                         (common-lisp:or min-gw-diversity common-lisp:null)
                         :accessor
                         %lo-ra-wanget-service-profile-info-min-gw-diversity
                         :initform common-lisp:nil)
                        (target-per :initarg :target-per :type
                         (common-lisp:or target-per common-lisp:null) :accessor
                         %lo-ra-wanget-service-profile-info-target-per
                         :initform common-lisp:nil)
                        (nwk-geo-loc :initarg :nwk-geo-loc :type
                         (common-lisp:or nwk-geo-loc common-lisp:null)
                         :accessor
                         %lo-ra-wanget-service-profile-info-nwk-geo-loc
                         :initform common-lisp:nil)
                        (ra-allowed :initarg :ra-allowed :type
                         (common-lisp:or ra-allowed common-lisp:null) :accessor
                         %lo-ra-wanget-service-profile-info-ra-allowed
                         :initform common-lisp:nil)
                        (hr-allowed :initarg :hr-allowed :type
                         (common-lisp:or hr-allowed common-lisp:null) :accessor
                         %lo-ra-wanget-service-profile-info-hr-allowed
                         :initform common-lisp:nil)
                        (pr-allowed :initarg :pr-allowed :type
                         (common-lisp:or pr-allowed common-lisp:null) :accessor
                         %lo-ra-wanget-service-profile-info-pr-allowed
                         :initform common-lisp:nil)
                        (channel-mask :initarg :channel-mask :type
                         (common-lisp:or channel-mask common-lisp:null)
                         :accessor
                         %lo-ra-wanget-service-profile-info-channel-mask
                         :initform common-lisp:nil)
                        (dr-max :initarg :dr-max :type
                         (common-lisp:or dr-max common-lisp:null) :accessor
                         %lo-ra-wanget-service-profile-info-dr-max :initform
                         common-lisp:nil)
                        (dr-min :initarg :dr-min :type
                         (common-lisp:or dr-min common-lisp:null) :accessor
                         %lo-ra-wanget-service-profile-info-dr-min :initform
                         common-lisp:nil)
                        (report-dev-status-margin :initarg
                         :report-dev-status-margin :type
                         (common-lisp:or report-dev-status-margin
                                         common-lisp:null)
                         :accessor
                         %lo-ra-wanget-service-profile-info-report-dev-status-margin
                         :initform common-lisp:nil)
                        (report-dev-status-battery :initarg
                         :report-dev-status-battery :type
                         (common-lisp:or report-dev-status-battery
                                         common-lisp:null)
                         :accessor
                         %lo-ra-wanget-service-profile-info-report-dev-status-battery
                         :initform common-lisp:nil)
                        (dev-status-req-freq :initarg :dev-status-req-freq
                         :type
                         (common-lisp:or dev-status-req-freq common-lisp:null)
                         :accessor
                         %lo-ra-wanget-service-profile-info-dev-status-req-freq
                         :initform common-lisp:nil)
                        (add-gw-metadata :initarg :add-gw-metadata :type
                         (common-lisp:or add-gw-metadata common-lisp:null)
                         :accessor
                         %lo-ra-wanget-service-profile-info-add-gw-metadata
                         :initform common-lisp:nil)
                        (dl-rate-policy :initarg :dl-rate-policy :type
                         (common-lisp:or dl-rate-policy common-lisp:null)
                         :accessor
                         %lo-ra-wanget-service-profile-info-dl-rate-policy
                         :initform common-lisp:nil)
                        (dl-bucket-size :initarg :dl-bucket-size :type
                         (common-lisp:or dl-bucket-size common-lisp:null)
                         :accessor
                         %lo-ra-wanget-service-profile-info-dl-bucket-size
                         :initform common-lisp:nil)
                        (dl-rate :initarg :dl-rate :type
                         (common-lisp:or dl-rate common-lisp:null) :accessor
                         %lo-ra-wanget-service-profile-info-dl-rate :initform
                         common-lisp:nil)
                        (ul-rate-policy :initarg :ul-rate-policy :type
                         (common-lisp:or ul-rate-policy common-lisp:null)
                         :accessor
                         %lo-ra-wanget-service-profile-info-ul-rate-policy
                         :initform common-lisp:nil)
                        (ul-bucket-size :initarg :ul-bucket-size :type
                         (common-lisp:or ul-bucket-size common-lisp:null)
                         :accessor
                         %lo-ra-wanget-service-profile-info-ul-bucket-size
                         :initform common-lisp:nil)
                        (ul-rate :initarg :ul-rate :type
                         (common-lisp:or ul-rate common-lisp:null) :accessor
                         %lo-ra-wanget-service-profile-info-ul-rate :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lo-ra-wanget-service-profile-info
                    'make-lo-ra-wanget-service-profile-info))
 (common-lisp:defun make-lo-ra-wanget-service-profile-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key min-gw-diversity target-per nwk-geo-loc
                     ra-allowed hr-allowed pr-allowed channel-mask dr-max
                     dr-min report-dev-status-margin report-dev-status-battery
                     dev-status-req-freq add-gw-metadata dl-rate-policy
                     dl-bucket-size dl-rate ul-rate-policy ul-bucket-size
                     ul-rate)
   (common-lisp:apply #'common-lisp:make-instance
                      'lo-ra-wanget-service-profile-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanget-service-profile-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanget-service-profile-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ul-rate))
      (common-lisp:list
       (common-lisp:cons "UlRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ul-bucket-size))
      (common-lisp:list
       (common-lisp:cons "UlBucketSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ul-rate-policy))
      (common-lisp:list
       (common-lisp:cons "UlRatePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dl-rate))
      (common-lisp:list
       (common-lisp:cons "DlRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dl-bucket-size))
      (common-lisp:list
       (common-lisp:cons "DlBucketSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dl-rate-policy))
      (common-lisp:list
       (common-lisp:cons "DlRatePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-gw-metadata))
      (common-lisp:list
       (common-lisp:cons "AddGwMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dev-status-req-freq))
      (common-lisp:list
       (common-lisp:cons "DevStatusReqFreq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'report-dev-status-battery))
      (common-lisp:list
       (common-lisp:cons "ReportDevStatusBattery"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'report-dev-status-margin))
      (common-lisp:list
       (common-lisp:cons "ReportDevStatusMargin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dr-min))
      (common-lisp:list
       (common-lisp:cons "DrMin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dr-max))
      (common-lisp:list
       (common-lisp:cons "DrMax"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'channel-mask))
      (common-lisp:list
       (common-lisp:cons "ChannelMask"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pr-allowed))
      (common-lisp:list
       (common-lisp:cons "PrAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hr-allowed))
      (common-lisp:list
       (common-lisp:cons "HrAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ra-allowed))
      (common-lisp:list
       (common-lisp:cons "RaAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nwk-geo-loc))
      (common-lisp:list
       (common-lisp:cons "NwkGeoLoc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-per))
      (common-lisp:list
       (common-lisp:cons "TargetPer"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-gw-diversity))
      (common-lisp:list
       (common-lisp:cons "MinGwDiversity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanget-service-profile-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lo-ra-wanjoin-event-notification-configurations
                       common-lisp:nil
                       ((dev-eui-event-topic :initarg :dev-eui-event-topic
                         :type
                         (common-lisp:or event-notification-topic-status
                                         common-lisp:null)
                         :accessor
                         %lo-ra-wanjoin-event-notification-configurations-dev-eui-event-topic
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lo-ra-wanjoin-event-notification-configurations
                    'make-lo-ra-wanjoin-event-notification-configurations))
 (common-lisp:defun make-lo-ra-wanjoin-event-notification-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dev-eui-event-topic)
   (common-lisp:apply #'common-lisp:make-instance
                      'lo-ra-wanjoin-event-notification-configurations
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanjoin-event-notification-configurations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanjoin-event-notification-configurations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dev-eui-event-topic))
      (common-lisp:list
       (common-lisp:cons "DevEuiEventTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanjoin-event-notification-configurations))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lo-ra-wanjoin-resource-type-event-configuration
                       common-lisp:nil
                       ((wireless-device-event-topic :initarg
                         :wireless-device-event-topic :type
                         (common-lisp:or event-notification-topic-status
                                         common-lisp:null)
                         :accessor
                         %lo-ra-wanjoin-resource-type-event-configuration-wireless-device-event-topic
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lo-ra-wanjoin-resource-type-event-configuration
                    'make-lo-ra-wanjoin-resource-type-event-configuration))
 (common-lisp:defun make-lo-ra-wanjoin-resource-type-event-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wireless-device-event-topic)
   (common-lisp:apply #'common-lisp:make-instance
                      'lo-ra-wanjoin-resource-type-event-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanjoin-resource-type-event-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanjoin-resource-type-event-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wireless-device-event-topic))
      (common-lisp:list
       (common-lisp:cons "WirelessDeviceEventTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanjoin-resource-type-event-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lo-ra-wanlist-device common-lisp:nil
                       ((dev-eui :initarg :dev-eui :type
                         (common-lisp:or dev-eui common-lisp:null) :accessor
                         %lo-ra-wanlist-device-dev-eui :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lo-ra-wanlist-device 'make-lo-ra-wanlist-device))
 (common-lisp:defun make-lo-ra-wanlist-device
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dev-eui)
   (common-lisp:apply #'common-lisp:make-instance 'lo-ra-wanlist-device
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lo-ra-wanlist-device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lo-ra-wanlist-device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dev-eui))
      (common-lisp:list
       (common-lisp:cons "DevEui"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lo-ra-wanlist-device))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lo-ra-wanmulticast common-lisp:nil
                       ((dl-class :initarg :dl-class :type
                         (common-lisp:or dl-class common-lisp:null) :accessor
                         %lo-ra-wanmulticast-dl-class :initform
                         common-lisp:nil)
                        (rf-region :initarg :rf-region :type
                         (common-lisp:or supported-rf-region common-lisp:null)
                         :accessor %lo-ra-wanmulticast-rf-region :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lo-ra-wanmulticast 'make-lo-ra-wanmulticast))
 (common-lisp:defun make-lo-ra-wanmulticast
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dl-class rf-region)
   (common-lisp:apply #'common-lisp:make-instance 'lo-ra-wanmulticast
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lo-ra-wanmulticast))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lo-ra-wanmulticast))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rf-region))
      (common-lisp:list
       (common-lisp:cons "RfRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dl-class))
      (common-lisp:list
       (common-lisp:cons "DlClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lo-ra-wanmulticast))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lo-ra-wanmulticast-get common-lisp:nil
                       ((number-of-devices-in-group :initarg
                         :number-of-devices-in-group :type
                         (common-lisp:or number-of-devices-in-group
                                         common-lisp:null)
                         :accessor
                         %lo-ra-wanmulticast-get-number-of-devices-in-group
                         :initform common-lisp:nil)
                        (number-of-devices-requested :initarg
                         :number-of-devices-requested :type
                         (common-lisp:or number-of-devices-requested
                                         common-lisp:null)
                         :accessor
                         %lo-ra-wanmulticast-get-number-of-devices-requested
                         :initform common-lisp:nil)
                        (dl-class :initarg :dl-class :type
                         (common-lisp:or dl-class common-lisp:null) :accessor
                         %lo-ra-wanmulticast-get-dl-class :initform
                         common-lisp:nil)
                        (rf-region :initarg :rf-region :type
                         (common-lisp:or supported-rf-region common-lisp:null)
                         :accessor %lo-ra-wanmulticast-get-rf-region :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lo-ra-wanmulticast-get 'make-lo-ra-wanmulticast-get))
 (common-lisp:defun make-lo-ra-wanmulticast-get
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key number-of-devices-in-group
                     number-of-devices-requested dl-class rf-region)
   (common-lisp:apply #'common-lisp:make-instance 'lo-ra-wanmulticast-get
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanmulticast-get))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanmulticast-get))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rf-region))
      (common-lisp:list
       (common-lisp:cons "RfRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dl-class))
      (common-lisp:list
       (common-lisp:cons "DlClass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-devices-requested))
      (common-lisp:list
       (common-lisp:cons "NumberOfDevicesRequested"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-devices-in-group))
      (common-lisp:list
       (common-lisp:cons "NumberOfDevicesInGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanmulticast-get))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lo-ra-wanmulticast-metadata common-lisp:nil
                       ((fport :initarg :fport :type
                         (common-lisp:or fport common-lisp:null) :accessor
                         %lo-ra-wanmulticast-metadata-fport :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lo-ra-wanmulticast-metadata
                    'make-lo-ra-wanmulticast-metadata))
 (common-lisp:defun make-lo-ra-wanmulticast-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fport)
   (common-lisp:apply #'common-lisp:make-instance 'lo-ra-wanmulticast-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanmulticast-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanmulticast-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fport))
      (common-lisp:list
       (common-lisp:cons "FPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanmulticast-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lo-ra-wanmulticast-session common-lisp:nil
                       ((ping-slot-period :initarg :ping-slot-period :type
                         (common-lisp:or ping-slot-period common-lisp:null)
                         :accessor %lo-ra-wanmulticast-session-ping-slot-period
                         :initform common-lisp:nil)
                        (session-timeout :initarg :session-timeout :type
                         (common-lisp:or session-timeout common-lisp:null)
                         :accessor %lo-ra-wanmulticast-session-session-timeout
                         :initform common-lisp:nil)
                        (session-start-time :initarg :session-start-time :type
                         (common-lisp:or session-start-time-timestamp
                                         common-lisp:null)
                         :accessor
                         %lo-ra-wanmulticast-session-session-start-time
                         :initform common-lisp:nil)
                        (dl-freq :initarg :dl-freq :type
                         (common-lisp:or dl-freq common-lisp:null) :accessor
                         %lo-ra-wanmulticast-session-dl-freq :initform
                         common-lisp:nil)
                        (dl-dr :initarg :dl-dr :type
                         (common-lisp:or dl-dr common-lisp:null) :accessor
                         %lo-ra-wanmulticast-session-dl-dr :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lo-ra-wanmulticast-session
                    'make-lo-ra-wanmulticast-session))
 (common-lisp:defun make-lo-ra-wanmulticast-session
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ping-slot-period session-timeout
                     session-start-time dl-freq dl-dr)
   (common-lisp:apply #'common-lisp:make-instance 'lo-ra-wanmulticast-session
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanmulticast-session))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanmulticast-session))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dl-dr))
      (common-lisp:list
       (common-lisp:cons "DlDr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dl-freq))
      (common-lisp:list
       (common-lisp:cons "DlFreq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-start-time))
      (common-lisp:list
       (common-lisp:cons "SessionStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-timeout))
      (common-lisp:list
       (common-lisp:cons "SessionTimeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ping-slot-period))
      (common-lisp:list
       (common-lisp:cons "PingSlotPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanmulticast-session))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lo-ra-wansend-data-to-device common-lisp:nil
                       ((participating-gateways :initarg
                         :participating-gateways :type
                         (common-lisp:or participating-gateways
                                         common-lisp:null)
                         :accessor
                         %lo-ra-wansend-data-to-device-participating-gateways
                         :initform common-lisp:nil)
                        (fport :initarg :fport :type
                         (common-lisp:or fport common-lisp:null) :accessor
                         %lo-ra-wansend-data-to-device-fport :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lo-ra-wansend-data-to-device
                    'make-lo-ra-wansend-data-to-device))
 (common-lisp:defun make-lo-ra-wansend-data-to-device
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key participating-gateways fport)
   (common-lisp:apply #'common-lisp:make-instance 'lo-ra-wansend-data-to-device
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wansend-data-to-device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wansend-data-to-device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fport))
      (common-lisp:list
       (common-lisp:cons "FPort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'participating-gateways))
      (common-lisp:list
       (common-lisp:cons "ParticipatingGateways"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wansend-data-to-device))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lo-ra-wanservice-profile common-lisp:nil
                       ((ra-allowed :initarg :ra-allowed :type
                         (common-lisp:or ra-allowed common-lisp:null) :accessor
                         %lo-ra-wanservice-profile-ra-allowed :initform
                         common-lisp:nil)
                        (pr-allowed :initarg :pr-allowed :type
                         (common-lisp:or pr-allowed common-lisp:null) :accessor
                         %lo-ra-wanservice-profile-pr-allowed :initform
                         common-lisp:nil)
                        (dr-max :initarg :dr-max :type
                         (common-lisp:or dr-max-box common-lisp:null) :accessor
                         %lo-ra-wanservice-profile-dr-max :initform
                         common-lisp:nil)
                        (dr-min :initarg :dr-min :type
                         (common-lisp:or dr-min-box common-lisp:null) :accessor
                         %lo-ra-wanservice-profile-dr-min :initform
                         common-lisp:nil)
                        (add-gw-metadata :initarg :add-gw-metadata :type
                         (common-lisp:or add-gw-metadata common-lisp:null)
                         :accessor %lo-ra-wanservice-profile-add-gw-metadata
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lo-ra-wanservice-profile 'make-lo-ra-wanservice-profile))
 (common-lisp:defun make-lo-ra-wanservice-profile
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ra-allowed pr-allowed dr-max dr-min
                     add-gw-metadata)
   (common-lisp:apply #'common-lisp:make-instance 'lo-ra-wanservice-profile
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanservice-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanservice-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'add-gw-metadata))
      (common-lisp:list
       (common-lisp:cons "AddGwMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dr-min))
      (common-lisp:list
       (common-lisp:cons "DrMin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dr-max))
      (common-lisp:list
       (common-lisp:cons "DrMax"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pr-allowed))
      (common-lisp:list
       (common-lisp:cons "PrAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ra-allowed))
      (common-lisp:list
       (common-lisp:cons "RaAllowed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanservice-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lo-ra-wanstart-fuota-task common-lisp:nil
                       ((start-time :initarg :start-time :type
                         (common-lisp:or start-time common-lisp:null) :accessor
                         %lo-ra-wanstart-fuota-task-start-time :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lo-ra-wanstart-fuota-task
                    'make-lo-ra-wanstart-fuota-task))
 (common-lisp:defun make-lo-ra-wanstart-fuota-task
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key start-time)
   (common-lisp:apply #'common-lisp:make-instance 'lo-ra-wanstart-fuota-task
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanstart-fuota-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanstart-fuota-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanstart-fuota-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lo-ra-wanupdate-device common-lisp:nil
                       ((fports :initarg :fports :type
                         (common-lisp:or update-fports common-lisp:null)
                         :accessor %lo-ra-wanupdate-device-fports :initform
                         common-lisp:nil)
                        (abp-v1-0-x :initarg :abp-v1-0-x :type
                         (common-lisp:or update-abp-v1-0-x common-lisp:null)
                         :accessor %lo-ra-wanupdate-device-abp-v1-0-x :initform
                         common-lisp:nil)
                        (abp-v1-1 :initarg :abp-v1-1 :type
                         (common-lisp:or update-abp-v1-1 common-lisp:null)
                         :accessor %lo-ra-wanupdate-device-abp-v1-1 :initform
                         common-lisp:nil)
                        (service-profile-id :initarg :service-profile-id :type
                         (common-lisp:or service-profile-id common-lisp:null)
                         :accessor %lo-ra-wanupdate-device-service-profile-id
                         :initform common-lisp:nil)
                        (device-profile-id :initarg :device-profile-id :type
                         (common-lisp:or device-profile-id common-lisp:null)
                         :accessor %lo-ra-wanupdate-device-device-profile-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lo-ra-wanupdate-device 'make-lo-ra-wanupdate-device))
 (common-lisp:defun make-lo-ra-wanupdate-device
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fports abp-v1-0-x abp-v1-1
                     service-profile-id device-profile-id)
   (common-lisp:apply #'common-lisp:make-instance 'lo-ra-wanupdate-device
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanupdate-device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanupdate-device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-profile-id))
      (common-lisp:list
       (common-lisp:cons "DeviceProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-profile-id))
      (common-lisp:list
       (common-lisp:cons "ServiceProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abp-v1-1))
      (common-lisp:list
       (common-lisp:cons "AbpV1_1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'abp-v1-0-x))
      (common-lisp:list
       (common-lisp:cons "AbpV1_0_x"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fports))
      (common-lisp:list
       (common-lisp:cons "FPorts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanupdate-device))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lo-ra-wanupdate-gateway-task-create common-lisp:nil
                       ((update-version :initarg :update-version :type
                         (common-lisp:or lo-ra-wangateway-version
                                         common-lisp:null)
                         :accessor
                         %lo-ra-wanupdate-gateway-task-create-update-version
                         :initform common-lisp:nil)
                        (current-version :initarg :current-version :type
                         (common-lisp:or lo-ra-wangateway-version
                                         common-lisp:null)
                         :accessor
                         %lo-ra-wanupdate-gateway-task-create-current-version
                         :initform common-lisp:nil)
                        (sig-key-crc :initarg :sig-key-crc :type
                         (common-lisp:or crc common-lisp:null) :accessor
                         %lo-ra-wanupdate-gateway-task-create-sig-key-crc
                         :initform common-lisp:nil)
                        (update-signature :initarg :update-signature :type
                         (common-lisp:or update-signature common-lisp:null)
                         :accessor
                         %lo-ra-wanupdate-gateway-task-create-update-signature
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lo-ra-wanupdate-gateway-task-create
                    'make-lo-ra-wanupdate-gateway-task-create))
 (common-lisp:defun make-lo-ra-wanupdate-gateway-task-create
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-version current-version
                     sig-key-crc update-signature)
   (common-lisp:apply #'common-lisp:make-instance
                      'lo-ra-wanupdate-gateway-task-create
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanupdate-gateway-task-create))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanupdate-gateway-task-create))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-signature))
      (common-lisp:list
       (common-lisp:cons "UpdateSignature"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sig-key-crc))
      (common-lisp:list
       (common-lisp:cons "SigKeyCrc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-version))
      (common-lisp:list
       (common-lisp:cons "UpdateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanupdate-gateway-task-create))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lo-ra-wanupdate-gateway-task-entry common-lisp:nil
                       ((update-version :initarg :update-version :type
                         (common-lisp:or lo-ra-wangateway-version
                                         common-lisp:null)
                         :accessor
                         %lo-ra-wanupdate-gateway-task-entry-update-version
                         :initform common-lisp:nil)
                        (current-version :initarg :current-version :type
                         (common-lisp:or lo-ra-wangateway-version
                                         common-lisp:null)
                         :accessor
                         %lo-ra-wanupdate-gateway-task-entry-current-version
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'lo-ra-wanupdate-gateway-task-entry
                    'make-lo-ra-wanupdate-gateway-task-entry))
 (common-lisp:defun make-lo-ra-wanupdate-gateway-task-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key update-version current-version)
   (common-lisp:apply #'common-lisp:make-instance
                      'lo-ra-wanupdate-gateway-task-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanupdate-gateway-task-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanupdate-gateway-task-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'current-version))
      (common-lisp:list
       (common-lisp:cons "CurrentVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-version))
      (common-lisp:list
       (common-lisp:cons "UpdateVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          lo-ra-wanupdate-gateway-task-entry))
   common-lisp:nil))
(common-lisp:deftype log-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype lte-list () '(trivial-types:proper-list lte-obj))
 (common-lisp:defun |make-lte-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lte-obj))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass lte-local-id common-lisp:nil
                       ((earfcn :initarg :earfcn :type
                         (common-lisp:or earfcn common-lisp:null) :accessor
                         %lte-local-id-earfcn :initform
                         (common-lisp:error ":earfcn is required"))
                        (pci :initarg :pci :type
                         (common-lisp:or pci common-lisp:null) :accessor
                         %lte-local-id-pci :initform
                         (common-lisp:error ":pci is required"))))
 (common-lisp:export (common-lisp:list 'lte-local-id 'make-lte-local-id))
 (common-lisp:defun make-lte-local-id
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key earfcn pci)
   (common-lisp:apply #'common-lisp:make-instance 'lte-local-id
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lte-local-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lte-local-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pci))
      (common-lisp:list
       (common-lisp:cons "Pci"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'earfcn))
      (common-lisp:list
       (common-lisp:cons "Earfcn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lte-local-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype lte-nmr-list () '(trivial-types:proper-list lte-nmr-obj))
 (common-lisp:defun |make-lte-nmr-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lte-nmr-obj))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass lte-nmr-obj common-lisp:nil
                       ((rsrq :initarg :rsrq :type
                         (common-lisp:or rsrq common-lisp:null) :accessor
                         %lte-nmr-obj-rsrq :initform common-lisp:nil)
                        (rsrp :initarg :rsrp :type
                         (common-lisp:or rsrp common-lisp:null) :accessor
                         %lte-nmr-obj-rsrp :initform common-lisp:nil)
                        (eutran-cid :initarg :eutran-cid :type
                         (common-lisp:or eutran-cid common-lisp:null) :accessor
                         %lte-nmr-obj-eutran-cid :initform
                         (common-lisp:error ":eutran-cid is required"))
                        (earfcn :initarg :earfcn :type
                         (common-lisp:or earfcn common-lisp:null) :accessor
                         %lte-nmr-obj-earfcn :initform
                         (common-lisp:error ":earfcn is required"))
                        (pci :initarg :pci :type
                         (common-lisp:or pci common-lisp:null) :accessor
                         %lte-nmr-obj-pci :initform
                         (common-lisp:error ":pci is required"))))
 (common-lisp:export (common-lisp:list 'lte-nmr-obj 'make-lte-nmr-obj))
 (common-lisp:defun make-lte-nmr-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rsrq rsrp eutran-cid earfcn pci)
   (common-lisp:apply #'common-lisp:make-instance 'lte-nmr-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lte-nmr-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lte-nmr-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pci))
      (common-lisp:list
       (common-lisp:cons "Pci"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'earfcn))
      (common-lisp:list
       (common-lisp:cons "Earfcn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eutran-cid))
      (common-lisp:list
       (common-lisp:cons "EutranCid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rsrp))
      (common-lisp:list
       (common-lisp:cons "Rsrp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rsrq))
      (common-lisp:list
       (common-lisp:cons "Rsrq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lte-nmr-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass lte-obj common-lisp:nil
                       ((lte-nmr :initarg :lte-nmr :type
                         (common-lisp:or lte-nmr-list common-lisp:null)
                         :accessor %lte-obj-lte-nmr :initform common-lisp:nil)
                        (nr-capable :initarg :nr-capable :type
                         (common-lisp:or nrcapable common-lisp:null) :accessor
                         %lte-obj-nr-capable :initform common-lisp:nil)
                        (rsrq :initarg :rsrq :type
                         (common-lisp:or rsrq common-lisp:null) :accessor
                         %lte-obj-rsrq :initform common-lisp:nil)
                        (rsrp :initarg :rsrp :type
                         (common-lisp:or rsrp common-lisp:null) :accessor
                         %lte-obj-rsrp :initform common-lisp:nil)
                        (lte-timing-advance :initarg :lte-timing-advance :type
                         (common-lisp:or lte-timing-advance common-lisp:null)
                         :accessor %lte-obj-lte-timing-advance :initform
                         common-lisp:nil)
                        (lte-local-id :initarg :lte-local-id :type
                         (common-lisp:or lte-local-id common-lisp:null)
                         :accessor %lte-obj-lte-local-id :initform
                         common-lisp:nil)
                        (tac :initarg :tac :type
                         (common-lisp:or tac common-lisp:null) :accessor
                         %lte-obj-tac :initform common-lisp:nil)
                        (eutran-cid :initarg :eutran-cid :type
                         (common-lisp:or eutran-cid common-lisp:null) :accessor
                         %lte-obj-eutran-cid :initform
                         (common-lisp:error ":eutran-cid is required"))
                        (mnc :initarg :mnc :type
                         (common-lisp:or mnc common-lisp:null) :accessor
                         %lte-obj-mnc :initform
                         (common-lisp:error ":mnc is required"))
                        (mcc :initarg :mcc :type
                         (common-lisp:or mcc common-lisp:null) :accessor
                         %lte-obj-mcc :initform
                         (common-lisp:error ":mcc is required"))))
 (common-lisp:export (common-lisp:list 'lte-obj 'make-lte-obj))
 (common-lisp:defun make-lte-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lte-nmr nr-capable rsrq rsrp
                     lte-timing-advance lte-local-id tac eutran-cid mnc mcc)
   (common-lisp:apply #'common-lisp:make-instance 'lte-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input lte-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input lte-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mcc))
      (common-lisp:list
       (common-lisp:cons "Mcc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mnc))
      (common-lisp:list
       (common-lisp:cons "Mnc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eutran-cid))
      (common-lisp:list
       (common-lisp:cons "EutranCid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tac))
      (common-lisp:list
       (common-lisp:cons "Tac"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lte-local-id))
      (common-lisp:list
       (common-lisp:cons "LteLocalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lte-timing-advance))
      (common-lisp:list
       (common-lisp:cons "LteTimingAdvance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rsrp))
      (common-lisp:list
       (common-lisp:cons "Rsrp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rsrq))
      (common-lisp:list
       (common-lisp:cons "Rsrq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nr-capable))
      (common-lisp:list
       (common-lisp:cons "NrCapable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lte-nmr))
      (common-lisp:list
       (common-lisp:cons "LteNmr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input lte-obj))
   common-lisp:nil))
(common-lisp:deftype lte-timing-advance () 'common-lisp:integer)
(common-lisp:deftype mcc () 'common-lisp:integer)
(common-lisp:deftype mnc () 'common-lisp:integer)
(common-lisp:deftype mac-address () 'common-lisp:string)
(common-lisp:deftype mac-version () 'common-lisp:string)
(common-lisp:deftype max-allowed-signature () 'common-lisp:integer)
(common-lisp:deftype max-duty-cycle () 'common-lisp:integer)
(common-lisp:deftype max-eirp () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype mc-group-id () 'common-lisp:integer)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass message-delivery-status-event-configuration
                       common-lisp:nil
                       ((wireless-device-id-event-topic :initarg
                         :wireless-device-id-event-topic :type
                         (common-lisp:or event-notification-topic-status
                                         common-lisp:null)
                         :accessor
                         %message-delivery-status-event-configuration-wireless-device-id-event-topic
                         :initform common-lisp:nil)
                        (sidewalk :initarg :sidewalk :type
                         (common-lisp:or
                          sidewalk-event-notification-configurations
                          common-lisp:null)
                         :accessor
                         %message-delivery-status-event-configuration-sidewalk
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'message-delivery-status-event-configuration
                    'make-message-delivery-status-event-configuration))
 (common-lisp:defun make-message-delivery-status-event-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wireless-device-id-event-topic sidewalk)
   (common-lisp:apply #'common-lisp:make-instance
                      'message-delivery-status-event-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          message-delivery-status-event-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          message-delivery-status-event-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sidewalk))
      (common-lisp:list
       (common-lisp:cons "Sidewalk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wireless-device-id-event-topic))
      (common-lisp:list
       (common-lisp:cons "WirelessDeviceIdEventTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          message-delivery-status-event-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  message-delivery-status-resource-type-event-configuration common-lisp:nil
  ((sidewalk :initarg :sidewalk :type
    (common-lisp:or sidewalk-resource-type-event-configuration
                    common-lisp:null)
    :accessor
    %message-delivery-status-resource-type-event-configuration-sidewalk
    :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'message-delivery-status-resource-type-event-configuration
                    'make-message-delivery-status-resource-type-event-configuration))
 (common-lisp:defun make-message-delivery-status-resource-type-event-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sidewalk)
   (common-lisp:apply #'common-lisp:make-instance
                      'message-delivery-status-resource-type-event-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          message-delivery-status-resource-type-event-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          message-delivery-status-resource-type-event-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sidewalk))
      (common-lisp:list
       (common-lisp:cons "Sidewalk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          message-delivery-status-resource-type-event-configuration))
   common-lisp:nil))
(common-lisp:deftype message-id () 'common-lisp:string)
(common-lisp:deftype message-type () 'common-lisp:string)
(common-lisp:deftype min-gw-diversity () 'common-lisp:integer)
(common-lisp:deftype model () 'common-lisp:string)
(common-lisp:deftype multicast-device-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass multicast-group common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or multicast-group-name common-lisp:null)
                         :accessor %multicast-group-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or multicast-group-arn common-lisp:null)
                         :accessor %multicast-group-arn :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or multicast-group-id common-lisp:null)
                         :accessor %multicast-group-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'multicast-group 'make-multicast-group))
 (common-lisp:defun make-multicast-group
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name arn id)
   (common-lisp:apply #'common-lisp:make-instance 'multicast-group
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input multicast-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input multicast-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input multicast-group))
   common-lisp:nil))
(common-lisp:deftype multicast-group-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass multicast-group-by-fuota-task common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or multicast-group-id common-lisp:null)
                         :accessor %multicast-group-by-fuota-task-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'multicast-group-by-fuota-task
                    'make-multicast-group-by-fuota-task))
 (common-lisp:defun make-multicast-group-by-fuota-task
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance
                      'multicast-group-by-fuota-task
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multicast-group-by-fuota-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multicast-group-by-fuota-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multicast-group-by-fuota-task))
   common-lisp:nil))
(common-lisp:deftype multicast-group-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype multicast-group-list ()
   '(trivial-types:proper-list multicast-group))
 (common-lisp:defun |make-multicast-group-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list multicast-group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype multicast-group-list-by-fuota-task ()
   '(trivial-types:proper-list multicast-group-by-fuota-task))
 (common-lisp:defun |make-multicast-group-list-by-fuota-task|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            multicast-group-by-fuota-task))
   aws-sdk/generator/shape::members))
(common-lisp:deftype multicast-group-message-id () 'common-lisp:string)
(common-lisp:deftype multicast-group-name () 'common-lisp:string)
(common-lisp:deftype multicast-group-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass multicast-wireless-metadata common-lisp:nil
                       ((lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or lo-ra-wanmulticast-metadata
                                         common-lisp:null)
                         :accessor %multicast-wireless-metadata-lo-ra-wan
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'multicast-wireless-metadata
                    'make-multicast-wireless-metadata))
 (common-lisp:defun make-multicast-wireless-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lo-ra-wan)
   (common-lisp:apply #'common-lisp:make-instance 'multicast-wireless-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          multicast-wireless-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          multicast-wireless-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          multicast-wireless-metadata))
   common-lisp:nil))
(common-lisp:deftype nrcapable () 'common-lisp:boolean)
(common-lisp:deftype net-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype net-id-filters () '(trivial-types:proper-list net-id))
 (common-lisp:defun |make-net-id-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list net-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype network-analyzer-configuration-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype network-analyzer-configuration-list ()
   '(trivial-types:proper-list network-analyzer-configurations))
 (common-lisp:defun |make-network-analyzer-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            network-analyzer-configurations))
   aws-sdk/generator/shape::members))
(common-lisp:deftype network-analyzer-configuration-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass network-analyzer-configurations common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or network-analyzer-configuration-name
                                         common-lisp:null)
                         :accessor %network-analyzer-configurations-name
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or network-analyzer-configuration-arn
                                         common-lisp:null)
                         :accessor %network-analyzer-configurations-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-analyzer-configurations
                    'make-network-analyzer-configurations))
 (common-lisp:defun make-network-analyzer-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'network-analyzer-configurations
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-analyzer-configurations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-analyzer-configurations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-analyzer-configurations))
   common-lisp:nil))
(common-lisp:deftype network-id () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype number-of-devices-in-group () 'common-lisp:integer)
(common-lisp:deftype number-of-devices-requested () 'common-lisp:integer)
(common-lisp:deftype nwk-geo-loc () 'common-lisp:boolean)
(common-lisp:deftype nwk-key () 'common-lisp:string)
(common-lisp:deftype nwk-senc-key () 'common-lisp:string)
(common-lisp:deftype nwk-skey () 'common-lisp:string)
(common-lisp:deftype onboard-status () 'common-lisp:string)
(common-lisp:deftype onboard-status-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass otaa-v1-0-x common-lisp:nil
                       ((gen-app-key :initarg :gen-app-key :type
                         (common-lisp:or gen-app-key common-lisp:null)
                         :accessor %otaa-v1-0-x-gen-app-key :initform
                         common-lisp:nil)
                        (app-eui :initarg :app-eui :type
                         (common-lisp:or app-eui common-lisp:null) :accessor
                         %otaa-v1-0-x-app-eui :initform common-lisp:nil)
                        (app-key :initarg :app-key :type
                         (common-lisp:or app-key common-lisp:null) :accessor
                         %otaa-v1-0-x-app-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'otaa-v1-0-x 'make-otaa-v1-0-x))
 (common-lisp:defun make-otaa-v1-0-x
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key gen-app-key app-eui app-key)
   (common-lisp:apply #'common-lisp:make-instance 'otaa-v1-0-x
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input otaa-v1-0-x))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input otaa-v1-0-x))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-key))
      (common-lisp:list
       (common-lisp:cons "AppKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-eui))
      (common-lisp:list
       (common-lisp:cons "AppEui"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gen-app-key))
      (common-lisp:list
       (common-lisp:cons "GenAppKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input otaa-v1-0-x))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass otaa-v1-1 common-lisp:nil
                       ((join-eui :initarg :join-eui :type
                         (common-lisp:or join-eui common-lisp:null) :accessor
                         %otaa-v1-1-join-eui :initform common-lisp:nil)
                        (nwk-key :initarg :nwk-key :type
                         (common-lisp:or nwk-key common-lisp:null) :accessor
                         %otaa-v1-1-nwk-key :initform common-lisp:nil)
                        (app-key :initarg :app-key :type
                         (common-lisp:or app-key common-lisp:null) :accessor
                         %otaa-v1-1-app-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'otaa-v1-1 'make-otaa-v1-1))
 (common-lisp:defun make-otaa-v1-1
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key join-eui nwk-key app-key)
   (common-lisp:apply #'common-lisp:make-instance 'otaa-v1-1
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input otaa-v1-1))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input otaa-v1-1))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-key))
      (common-lisp:list
       (common-lisp:cons "AppKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nwk-key))
      (common-lisp:list
       (common-lisp:cons "NwkKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'join-eui))
      (common-lisp:list
       (common-lisp:cons "JoinEui"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input otaa-v1-1))
   common-lisp:nil))
(common-lisp:deftype pci () 'common-lisp:integer)
(common-lisp:deftype psc () 'common-lisp:integer)
(common-lisp:deftype package-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass participating-gateways common-lisp:nil
                       ((transmission-interval :initarg :transmission-interval
                         :type
                         (common-lisp:or transmission-interval
                                         common-lisp:null)
                         :accessor
                         %participating-gateways-transmission-interval
                         :initform
                         (common-lisp:error
                          ":transmission-interval is required"))
                        (gateway-list :initarg :gateway-list :type
                         (common-lisp:or gateway-list common-lisp:null)
                         :accessor %participating-gateways-gateway-list
                         :initform
                         (common-lisp:error ":gateway-list is required"))
                        (downlink-mode :initarg :downlink-mode :type
                         (common-lisp:or downlink-mode common-lisp:null)
                         :accessor %participating-gateways-downlink-mode
                         :initform
                         (common-lisp:error ":downlink-mode is required"))))
 (common-lisp:export
  (common-lisp:list 'participating-gateways 'make-participating-gateways))
 (common-lisp:defun make-participating-gateways
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key transmission-interval gateway-list
                     downlink-mode)
   (common-lisp:apply #'common-lisp:make-instance 'participating-gateways
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          participating-gateways))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          participating-gateways))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'downlink-mode))
      (common-lisp:list
       (common-lisp:cons "DownlinkMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-list))
      (common-lisp:list
       (common-lisp:cons "GatewayList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'transmission-interval))
      (common-lisp:list
       (common-lisp:cons "TransmissionInterval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          participating-gateways))
   common-lisp:nil))
(common-lisp:deftype partner-account-arn () 'common-lisp:string)
(common-lisp:deftype partner-account-id () 'common-lisp:string)
(common-lisp:deftype partner-type () 'common-lisp:string)
(common-lisp:deftype path-loss () 'common-lisp:integer)
(common-lisp:deftype payload-data () 'common-lisp:string)
(common-lisp:deftype pilot-power () 'common-lisp:integer)
(common-lisp:deftype ping-slot-dr () 'common-lisp:integer)
(common-lisp:deftype ping-slot-freq () 'common-lisp:integer)
(common-lisp:deftype ping-slot-period () 'common-lisp:integer)
(common-lisp:deftype pn-offset () 'common-lisp:integer)
(common-lisp:deftype position-configuration-fec () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass position-configuration-item common-lisp:nil
                       ((destination :initarg :destination :type
                         (common-lisp:or destination-name common-lisp:null)
                         :accessor %position-configuration-item-destination
                         :initform common-lisp:nil)
                        (solvers :initarg :solvers :type
                         (common-lisp:or position-solver-details
                                         common-lisp:null)
                         :accessor %position-configuration-item-solvers
                         :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or position-resource-type
                                         common-lisp:null)
                         :accessor %position-configuration-item-resource-type
                         :initform common-lisp:nil)
                        (resource-identifier :initarg :resource-identifier
                         :type
                         (common-lisp:or position-resource-identifier
                                         common-lisp:null)
                         :accessor
                         %position-configuration-item-resource-identifier
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'position-configuration-item
                    'make-position-configuration-item))
 (common-lisp:defun make-position-configuration-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination solvers resource-type
                     resource-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'position-configuration-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          position-configuration-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          position-configuration-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-identifier))
      (common-lisp:list
       (common-lisp:cons "ResourceIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-type))
      (common-lisp:list
       (common-lisp:cons "ResourceType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solvers))
      (common-lisp:list
       (common-lisp:cons "Solvers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          position-configuration-item))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype position-configuration-list ()
   '(trivial-types:proper-list position-configuration-item))
 (common-lisp:defun |make-position-configuration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            position-configuration-item))
   aws-sdk/generator/shape::members))
(common-lisp:deftype position-configuration-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype position-coordinate ()
   '(trivial-types:proper-list position-coordinate-value))
 (common-lisp:defun |make-position-coordinate|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            position-coordinate-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype position-coordinate-value () 'common-lisp:single-float)
(common-lisp:deftype position-resource-identifier () 'common-lisp:string)
(common-lisp:deftype position-resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass position-solver-configurations common-lisp:nil
                       ((semtech-gnss :initarg :semtech-gnss :type
                         (common-lisp:or semtech-gnss-configuration
                                         common-lisp:null)
                         :accessor %position-solver-configurations-semtech-gnss
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'position-solver-configurations
                    'make-position-solver-configurations))
 (common-lisp:defun make-position-solver-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key semtech-gnss)
   (common-lisp:apply #'common-lisp:make-instance
                      'position-solver-configurations
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          position-solver-configurations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          position-solver-configurations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'semtech-gnss))
      (common-lisp:list
       (common-lisp:cons "SemtechGnss"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          position-solver-configurations))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass position-solver-details common-lisp:nil
                       ((semtech-gnss :initarg :semtech-gnss :type
                         (common-lisp:or semtech-gnss-detail common-lisp:null)
                         :accessor %position-solver-details-semtech-gnss
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'position-solver-details 'make-position-solver-details))
 (common-lisp:defun make-position-solver-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key semtech-gnss)
   (common-lisp:apply #'common-lisp:make-instance 'position-solver-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          position-solver-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          position-solver-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'semtech-gnss))
      (common-lisp:list
       (common-lisp:cons "SemtechGnss"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          position-solver-details))
   common-lisp:nil))
(common-lisp:deftype position-solver-provider () 'common-lisp:string)
(common-lisp:deftype position-solver-type () 'common-lisp:string)
(common-lisp:deftype position-solver-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass positioning common-lisp:nil
                       ((gnss :initarg :gnss :type
                         (common-lisp:or fport common-lisp:null) :accessor
                         %positioning-gnss :initform common-lisp:nil)
                        (stream :initarg :stream :type
                         (common-lisp:or fport common-lisp:null) :accessor
                         %positioning-stream :initform common-lisp:nil)
                        (clock-sync :initarg :clock-sync :type
                         (common-lisp:or fport common-lisp:null) :accessor
                         %positioning-clock-sync :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'positioning 'make-positioning))
 (common-lisp:defun make-positioning
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key gnss stream clock-sync)
   (common-lisp:apply #'common-lisp:make-instance 'positioning
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input positioning))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input positioning))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'clock-sync))
      (common-lisp:list
       (common-lisp:cons "ClockSync"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream))
      (common-lisp:list
       (common-lisp:cons "Stream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gnss))
      (common-lisp:list
       (common-lisp:cons "Gnss"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input positioning))
   common-lisp:nil))
(common-lisp:deftype positioning-config-status () 'common-lisp:string)
(common-lisp:deftype pr-allowed () 'common-lisp:boolean)
(common-lisp:deftype preset-freq () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype private-keys-list ()
   '(trivial-types:proper-list certificate-list))
 (common-lisp:defun |make-private-keys-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list certificate-list))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass proximity-event-configuration common-lisp:nil
                       ((wireless-device-id-event-topic :initarg
                         :wireless-device-id-event-topic :type
                         (common-lisp:or event-notification-topic-status
                                         common-lisp:null)
                         :accessor
                         %proximity-event-configuration-wireless-device-id-event-topic
                         :initform common-lisp:nil)
                        (sidewalk :initarg :sidewalk :type
                         (common-lisp:or
                          sidewalk-event-notification-configurations
                          common-lisp:null)
                         :accessor %proximity-event-configuration-sidewalk
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'proximity-event-configuration
                    'make-proximity-event-configuration))
 (common-lisp:defun make-proximity-event-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wireless-device-id-event-topic sidewalk)
   (common-lisp:apply #'common-lisp:make-instance
                      'proximity-event-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          proximity-event-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          proximity-event-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sidewalk))
      (common-lisp:list
       (common-lisp:cons "Sidewalk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wireless-device-id-event-topic))
      (common-lisp:list
       (common-lisp:cons "WirelessDeviceIdEventTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          proximity-event-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass proximity-resource-type-event-configuration
                       common-lisp:nil
                       ((sidewalk :initarg :sidewalk :type
                         (common-lisp:or
                          sidewalk-resource-type-event-configuration
                          common-lisp:null)
                         :accessor
                         %proximity-resource-type-event-configuration-sidewalk
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'proximity-resource-type-event-configuration
                    'make-proximity-resource-type-event-configuration))
 (common-lisp:defun make-proximity-resource-type-event-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sidewalk)
   (common-lisp:apply #'common-lisp:make-instance
                      'proximity-resource-type-event-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          proximity-resource-type-event-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          proximity-resource-type-event-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sidewalk))
      (common-lisp:list
       (common-lisp:cons "Sidewalk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          proximity-resource-type-event-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-position-configuration-request common-lisp:nil
                       ((destination :initarg :destination :type
                         (common-lisp:or destination-name common-lisp:null)
                         :accessor
                         %put-position-configuration-request-destination
                         :initform common-lisp:nil)
                        (solvers :initarg :solvers :type
                         (common-lisp:or position-solver-configurations
                                         common-lisp:null)
                         :accessor %put-position-configuration-request-solvers
                         :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or position-resource-type
                                         common-lisp:null)
                         :accessor
                         %put-position-configuration-request-resource-type
                         :initform
                         (common-lisp:error ":resource-type is required"))
                        (resource-identifier :initarg :resource-identifier
                         :type
                         (common-lisp:or position-resource-identifier
                                         common-lisp:null)
                         :accessor
                         %put-position-configuration-request-resource-identifier
                         :initform
                         (common-lisp:error
                          ":resource-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'put-position-configuration-request
                    'make-put-position-configuration-request))
 (common-lisp:defun make-put-position-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination solvers resource-type
                     resource-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-position-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-position-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-position-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'solvers))
      (common-lisp:list
       (common-lisp:cons "Solvers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-position-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-position-configuration-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'put-position-configuration-response
                    'make-put-position-configuration-response))
 (common-lisp:defun make-put-position-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-position-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-position-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-position-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-position-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-resource-log-level-request common-lisp:nil
                       ((log-level :initarg :log-level :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         %put-resource-log-level-request-log-level :initform
                         (common-lisp:error ":log-level is required"))
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         %put-resource-log-level-request-resource-type
                         :initform
                         (common-lisp:error ":resource-type is required"))
                        (resource-identifier :initarg :resource-identifier
                         :type
                         (common-lisp:or resource-identifier common-lisp:null)
                         :accessor
                         %put-resource-log-level-request-resource-identifier
                         :initform
                         (common-lisp:error
                          ":resource-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'put-resource-log-level-request
                    'make-put-resource-log-level-request))
 (common-lisp:defun make-put-resource-log-level-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-level resource-type
                     resource-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-resource-log-level-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-log-level-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-log-level-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-log-level-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-resource-log-level-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'put-resource-log-level-response
                    'make-put-resource-log-level-response))
 (common-lisp:defun make-put-resource-log-level-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-resource-log-level-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-log-level-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-log-level-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-log-level-response))
   common-lisp:nil))
(common-lisp:deftype qualification-status () 'common-lisp:boolean)
(common-lisp:deftype query-string () 'common-lisp:string)
(common-lisp:deftype rscp () 'common-lisp:integer)
(common-lisp:deftype rsrp () 'common-lisp:integer)
(common-lisp:deftype rsrq () 'common-lisp:single-float)
(common-lisp:deftype rss () 'common-lisp:integer)
(common-lisp:deftype ra-allowed () 'common-lisp:boolean)
(common-lisp:deftype redundancy-percent () 'common-lisp:integer)
(common-lisp:deftype reg-params-revision () 'common-lisp:string)
(common-lisp:deftype registration-zone () 'common-lisp:integer)
(common-lisp:deftype report-dev-status-battery () 'common-lisp:boolean)
(common-lisp:deftype report-dev-status-margin () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass reset-all-resource-log-levels-request common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'reset-all-resource-log-levels-request
                    'make-reset-all-resource-log-levels-request))
 (common-lisp:defun make-reset-all-resource-log-levels-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'reset-all-resource-log-levels-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-all-resource-log-levels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-all-resource-log-levels-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-all-resource-log-levels-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reset-all-resource-log-levels-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'reset-all-resource-log-levels-response
                    'make-reset-all-resource-log-levels-response))
 (common-lisp:defun make-reset-all-resource-log-levels-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'reset-all-resource-log-levels-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-all-resource-log-levels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-all-resource-log-levels-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-all-resource-log-levels-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reset-resource-log-level-request common-lisp:nil
                       ((resource-type :initarg :resource-type :type
                         (common-lisp:or resource-type common-lisp:null)
                         :accessor
                         %reset-resource-log-level-request-resource-type
                         :initform
                         (common-lisp:error ":resource-type is required"))
                        (resource-identifier :initarg :resource-identifier
                         :type
                         (common-lisp:or resource-identifier common-lisp:null)
                         :accessor
                         %reset-resource-log-level-request-resource-identifier
                         :initform
                         (common-lisp:error
                          ":resource-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'reset-resource-log-level-request
                    'make-reset-resource-log-level-request))
 (common-lisp:defun make-reset-resource-log-level-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-type resource-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'reset-resource-log-level-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-resource-log-level-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-resource-log-level-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-resource-log-level-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass reset-resource-log-level-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'reset-resource-log-level-response
                    'make-reset-resource-log-level-response))
 (common-lisp:defun make-reset-resource-log-level-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'reset-resource-log-level-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-resource-log-level-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-resource-log-level-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-resource-log-level-response))
   common-lisp:nil))
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:deftype resource-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (iotwireless-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-id
                    'resource-not-found-exception-resource-type)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype result () 'common-lisp:string)
(common-lisp:deftype rf-region () 'common-lisp:string)
(common-lisp:deftype role () 'common-lisp:string)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype rx-data-rate2 () 'common-lisp:integer)
(common-lisp:deftype rx-delay1 () 'common-lisp:integer)
(common-lisp:deftype rx-dr-offset1 () 'common-lisp:integer)
(common-lisp:deftype rx-freq2 () 'common-lisp:integer)
(common-lisp:deftype rx-level () 'common-lisp:integer)
(common-lisp:deftype snwk-sint-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass semtech-gnss-configuration common-lisp:nil
                       ((fec :initarg :fec :type
                         (common-lisp:or position-configuration-fec
                                         common-lisp:null)
                         :accessor %semtech-gnss-configuration-fec :initform
                         (common-lisp:error ":fec is required"))
                        (status :initarg :status :type
                         (common-lisp:or position-configuration-status
                                         common-lisp:null)
                         :accessor %semtech-gnss-configuration-status :initform
                         (common-lisp:error ":status is required"))))
 (common-lisp:export
  (common-lisp:list 'semtech-gnss-configuration
                    'make-semtech-gnss-configuration))
 (common-lisp:defun make-semtech-gnss-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fec status)
   (common-lisp:apply #'common-lisp:make-instance 'semtech-gnss-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          semtech-gnss-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          semtech-gnss-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fec))
      (common-lisp:list
       (common-lisp:cons "Fec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          semtech-gnss-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass semtech-gnss-detail common-lisp:nil
                       ((fec :initarg :fec :type
                         (common-lisp:or position-configuration-fec
                                         common-lisp:null)
                         :accessor %semtech-gnss-detail-fec :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or position-configuration-status
                                         common-lisp:null)
                         :accessor %semtech-gnss-detail-status :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or position-solver-type common-lisp:null)
                         :accessor %semtech-gnss-detail-type :initform
                         common-lisp:nil)
                        (provider :initarg :provider :type
                         (common-lisp:or position-solver-provider
                                         common-lisp:null)
                         :accessor %semtech-gnss-detail-provider :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'semtech-gnss-detail 'make-semtech-gnss-detail))
 (common-lisp:defun make-semtech-gnss-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fec status type provider)
   (common-lisp:apply #'common-lisp:make-instance 'semtech-gnss-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input semtech-gnss-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input semtech-gnss-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider))
      (common-lisp:list
       (common-lisp:cons "Provider"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fec))
      (common-lisp:list
       (common-lisp:cons "Fec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input semtech-gnss-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-data-to-multicast-group-request common-lisp:nil
                       ((wireless-metadata :initarg :wireless-metadata :type
                         (common-lisp:or multicast-wireless-metadata
                                         common-lisp:null)
                         :accessor
                         %send-data-to-multicast-group-request-wireless-metadata
                         :initform
                         (common-lisp:error ":wireless-metadata is required"))
                        (payload-data :initarg :payload-data :type
                         (common-lisp:or payload-data common-lisp:null)
                         :accessor
                         %send-data-to-multicast-group-request-payload-data
                         :initform
                         (common-lisp:error ":payload-data is required"))
                        (id :initarg :id :type
                         (common-lisp:or multicast-group-id common-lisp:null)
                         :accessor %send-data-to-multicast-group-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'send-data-to-multicast-group-request
                    'make-send-data-to-multicast-group-request))
 (common-lisp:defun make-send-data-to-multicast-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wireless-metadata payload-data id)
   (common-lisp:apply #'common-lisp:make-instance
                      'send-data-to-multicast-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-data-to-multicast-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-data-to-multicast-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload-data))
      (common-lisp:list
       (common-lisp:cons "PayloadData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wireless-metadata))
      (common-lisp:list
       (common-lisp:cons "WirelessMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-data-to-multicast-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-data-to-multicast-group-response common-lisp:nil
                       ((message-id :initarg :message-id :type
                         (common-lisp:or multicast-group-message-id
                                         common-lisp:null)
                         :accessor
                         %send-data-to-multicast-group-response-message-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'send-data-to-multicast-group-response
                    'make-send-data-to-multicast-group-response))
 (common-lisp:defun make-send-data-to-multicast-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'send-data-to-multicast-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-data-to-multicast-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-data-to-multicast-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "MessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-data-to-multicast-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-data-to-wireless-device-request common-lisp:nil
                       ((wireless-metadata :initarg :wireless-metadata :type
                         (common-lisp:or wireless-metadata common-lisp:null)
                         :accessor
                         %send-data-to-wireless-device-request-wireless-metadata
                         :initform common-lisp:nil)
                        (payload-data :initarg :payload-data :type
                         (common-lisp:or payload-data common-lisp:null)
                         :accessor
                         %send-data-to-wireless-device-request-payload-data
                         :initform
                         (common-lisp:error ":payload-data is required"))
                        (transmit-mode :initarg :transmit-mode :type
                         (common-lisp:or transmit-mode common-lisp:null)
                         :accessor
                         %send-data-to-wireless-device-request-transmit-mode
                         :initform
                         (common-lisp:error ":transmit-mode is required"))
                        (id :initarg :id :type
                         (common-lisp:or wireless-device-id common-lisp:null)
                         :accessor %send-data-to-wireless-device-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'send-data-to-wireless-device-request
                    'make-send-data-to-wireless-device-request))
 (common-lisp:defun make-send-data-to-wireless-device-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wireless-metadata payload-data
                     transmit-mode id)
   (common-lisp:apply #'common-lisp:make-instance
                      'send-data-to-wireless-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-data-to-wireless-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-data-to-wireless-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transmit-mode))
      (common-lisp:list
       (common-lisp:cons "TransmitMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'payload-data))
      (common-lisp:list
       (common-lisp:cons "PayloadData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wireless-metadata))
      (common-lisp:list
       (common-lisp:cons "WirelessMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-data-to-wireless-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass send-data-to-wireless-device-response common-lisp:nil
                       ((message-id :initarg :message-id :type
                         (common-lisp:or message-id common-lisp:null) :accessor
                         %send-data-to-wireless-device-response-message-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'send-data-to-wireless-device-response
                    'make-send-data-to-wireless-device-response))
 (common-lisp:defun make-send-data-to-wireless-device-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'send-data-to-wireless-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          send-data-to-wireless-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          send-data-to-wireless-device-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-id))
      (common-lisp:list
       (common-lisp:cons "MessageId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          send-data-to-wireless-device-response))
   common-lisp:nil))
(common-lisp:deftype seq () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass service-profile common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or service-profile-id common-lisp:null)
                         :accessor %service-profile-id :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or service-profile-name common-lisp:null)
                         :accessor %service-profile-name :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or service-profile-arn common-lisp:null)
                         :accessor %service-profile-arn :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'service-profile 'make-service-profile))
 (common-lisp:defun make-service-profile
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id name arn)
   (common-lisp:apply #'common-lisp:make-instance 'service-profile
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-profile))
   common-lisp:nil))
(common-lisp:deftype service-profile-arn () 'common-lisp:string)
(common-lisp:deftype service-profile-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype service-profile-list ()
   '(trivial-types:proper-list service-profile))
 (common-lisp:defun |make-service-profile-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-profile))
   aws-sdk/generator/shape::members))
(common-lisp:deftype service-profile-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass session-keys-abp-v1-0-x common-lisp:nil
                       ((app-skey :initarg :app-skey :type
                         (common-lisp:or app-skey common-lisp:null) :accessor
                         %session-keys-abp-v1-0-x-app-skey :initform
                         common-lisp:nil)
                        (nwk-skey :initarg :nwk-skey :type
                         (common-lisp:or nwk-skey common-lisp:null) :accessor
                         %session-keys-abp-v1-0-x-nwk-skey :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'session-keys-abp-v1-0-x 'make-session-keys-abp-v1-0-x))
 (common-lisp:defun make-session-keys-abp-v1-0-x
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key app-skey nwk-skey)
   (common-lisp:apply #'common-lisp:make-instance 'session-keys-abp-v1-0-x
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          session-keys-abp-v1-0-x))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          session-keys-abp-v1-0-x))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nwk-skey))
      (common-lisp:list
       (common-lisp:cons "NwkSKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-skey))
      (common-lisp:list
       (common-lisp:cons "AppSKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          session-keys-abp-v1-0-x))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass session-keys-abp-v1-1 common-lisp:nil
                       ((app-skey :initarg :app-skey :type
                         (common-lisp:or app-skey common-lisp:null) :accessor
                         %session-keys-abp-v1-1-app-skey :initform
                         common-lisp:nil)
                        (nwk-senc-key :initarg :nwk-senc-key :type
                         (common-lisp:or nwk-senc-key common-lisp:null)
                         :accessor %session-keys-abp-v1-1-nwk-senc-key
                         :initform common-lisp:nil)
                        (snwk-sint-key :initarg :snwk-sint-key :type
                         (common-lisp:or snwk-sint-key common-lisp:null)
                         :accessor %session-keys-abp-v1-1-snwk-sint-key
                         :initform common-lisp:nil)
                        (fnwk-sint-key :initarg :fnwk-sint-key :type
                         (common-lisp:or fnwk-sint-key common-lisp:null)
                         :accessor %session-keys-abp-v1-1-fnwk-sint-key
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'session-keys-abp-v1-1 'make-session-keys-abp-v1-1))
 (common-lisp:defun make-session-keys-abp-v1-1
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key app-skey nwk-senc-key snwk-sint-key
                     fnwk-sint-key)
   (common-lisp:apply #'common-lisp:make-instance 'session-keys-abp-v1-1
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          session-keys-abp-v1-1))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          session-keys-abp-v1-1))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fnwk-sint-key))
      (common-lisp:list
       (common-lisp:cons "FNwkSIntKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'snwk-sint-key))
      (common-lisp:list
       (common-lisp:cons "SNwkSIntKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'nwk-senc-key))
      (common-lisp:list
       (common-lisp:cons "NwkSEncKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-skey))
      (common-lisp:list
       (common-lisp:cons "AppSKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          session-keys-abp-v1-1))
   common-lisp:nil))
(common-lisp:deftype session-start-time-timestamp () 'common-lisp:string)
(common-lisp:deftype session-timeout () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass sidewalk-account-info common-lisp:nil
                       ((app-server-private-key :initarg
                         :app-server-private-key :type
                         (common-lisp:or app-server-private-key
                                         common-lisp:null)
                         :accessor
                         %sidewalk-account-info-app-server-private-key
                         :initform common-lisp:nil)
                        (amazon-id :initarg :amazon-id :type
                         (common-lisp:or amazon-id common-lisp:null) :accessor
                         %sidewalk-account-info-amazon-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sidewalk-account-info 'make-sidewalk-account-info))
 (common-lisp:defun make-sidewalk-account-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key app-server-private-key amazon-id)
   (common-lisp:apply #'common-lisp:make-instance 'sidewalk-account-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-account-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-account-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amazon-id))
      (common-lisp:list
       (common-lisp:cons "AmazonId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-server-private-key))
      (common-lisp:list
       (common-lisp:cons "AppServerPrivateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-account-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sidewalk-account-info-with-fingerprint common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or partner-account-arn common-lisp:null)
                         :accessor %sidewalk-account-info-with-fingerprint-arn
                         :initform common-lisp:nil)
                        (fingerprint :initarg :fingerprint :type
                         (common-lisp:or fingerprint common-lisp:null)
                         :accessor
                         %sidewalk-account-info-with-fingerprint-fingerprint
                         :initform common-lisp:nil)
                        (amazon-id :initarg :amazon-id :type
                         (common-lisp:or amazon-id common-lisp:null) :accessor
                         %sidewalk-account-info-with-fingerprint-amazon-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sidewalk-account-info-with-fingerprint
                    'make-sidewalk-account-info-with-fingerprint))
 (common-lisp:defun make-sidewalk-account-info-with-fingerprint
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn fingerprint amazon-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'sidewalk-account-info-with-fingerprint
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-account-info-with-fingerprint))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-account-info-with-fingerprint))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amazon-id))
      (common-lisp:list
       (common-lisp:cons "AmazonId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fingerprint))
      (common-lisp:list
       (common-lisp:cons "Fingerprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-account-info-with-fingerprint))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sidewalk-account-list ()
   '(trivial-types:proper-list sidewalk-account-info-with-fingerprint))
 (common-lisp:defun |make-sidewalk-account-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            sidewalk-account-info-with-fingerprint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass sidewalk-create-device-profile common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'sidewalk-create-device-profile
                    'make-sidewalk-create-device-profile))
 (common-lisp:defun make-sidewalk-create-device-profile
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'sidewalk-create-device-profile
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-create-device-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-create-device-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-create-device-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sidewalk-create-wireless-device common-lisp:nil
                       ((device-profile-id :initarg :device-profile-id :type
                         (common-lisp:or device-profile-id common-lisp:null)
                         :accessor
                         %sidewalk-create-wireless-device-device-profile-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sidewalk-create-wireless-device
                    'make-sidewalk-create-wireless-device))
 (common-lisp:defun make-sidewalk-create-wireless-device
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device-profile-id)
   (common-lisp:apply #'common-lisp:make-instance
                      'sidewalk-create-wireless-device
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-create-wireless-device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-create-wireless-device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-profile-id))
      (common-lisp:list
       (common-lisp:cons "DeviceProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-create-wireless-device))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sidewalk-device common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or wireless-device-sidewalk-status
                                         common-lisp:null)
                         :accessor %sidewalk-device-status :initform
                         common-lisp:nil)
                        (certificate-id :initarg :certificate-id :type
                         (common-lisp:or dak-certificate-id common-lisp:null)
                         :accessor %sidewalk-device-certificate-id :initform
                         common-lisp:nil)
                        (device-profile-id :initarg :device-profile-id :type
                         (common-lisp:or device-profile-id common-lisp:null)
                         :accessor %sidewalk-device-device-profile-id :initform
                         common-lisp:nil)
                        (private-keys :initarg :private-keys :type
                         (common-lisp:or private-keys-list common-lisp:null)
                         :accessor %sidewalk-device-private-keys :initform
                         common-lisp:nil)
                        (device-certificates :initarg :device-certificates
                         :type
                         (common-lisp:or device-certificate-list
                                         common-lisp:null)
                         :accessor %sidewalk-device-device-certificates
                         :initform common-lisp:nil)
                        (sidewalk-manufacturing-sn :initarg
                         :sidewalk-manufacturing-sn :type
                         (common-lisp:or sidewalk-manufacturing-sn
                                         common-lisp:null)
                         :accessor %sidewalk-device-sidewalk-manufacturing-sn
                         :initform common-lisp:nil)
                        (sidewalk-id :initarg :sidewalk-id :type
                         (common-lisp:or sidewalk-id common-lisp:null)
                         :accessor %sidewalk-device-sidewalk-id :initform
                         common-lisp:nil)
                        (amazon-id :initarg :amazon-id :type
                         (common-lisp:or amazon-id common-lisp:null) :accessor
                         %sidewalk-device-amazon-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'sidewalk-device 'make-sidewalk-device))
 (common-lisp:defun make-sidewalk-device
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status certificate-id device-profile-id
                     private-keys device-certificates sidewalk-manufacturing-sn
                     sidewalk-id amazon-id)
   (common-lisp:apply #'common-lisp:make-instance 'sidewalk-device
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sidewalk-device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sidewalk-device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amazon-id))
      (common-lisp:list
       (common-lisp:cons "AmazonId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sidewalk-id))
      (common-lisp:list
       (common-lisp:cons "SidewalkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sidewalk-manufacturing-sn))
      (common-lisp:list
       (common-lisp:cons "SidewalkManufacturingSn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-certificates))
      (common-lisp:list
       (common-lisp:cons "DeviceCertificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-keys))
      (common-lisp:list
       (common-lisp:cons "PrivateKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-profile-id))
      (common-lisp:list
       (common-lisp:cons "DeviceProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "CertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sidewalk-device))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sidewalk-device-metadata common-lisp:nil
                       ((device-state :initarg :device-state :type
                         (common-lisp:or device-state common-lisp:null)
                         :accessor %sidewalk-device-metadata-device-state
                         :initform common-lisp:nil)
                        (event :initarg :event :type
                         (common-lisp:or event common-lisp:null) :accessor
                         %sidewalk-device-metadata-event :initform
                         common-lisp:nil)
                        (battery-level :initarg :battery-level :type
                         (common-lisp:or battery-level common-lisp:null)
                         :accessor %sidewalk-device-metadata-battery-level
                         :initform common-lisp:nil)
                        (rssi :initarg :rssi :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %sidewalk-device-metadata-rssi :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sidewalk-device-metadata 'make-sidewalk-device-metadata))
 (common-lisp:defun make-sidewalk-device-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device-state event battery-level rssi)
   (common-lisp:apply #'common-lisp:make-instance 'sidewalk-device-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-device-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-device-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rssi))
      (common-lisp:list
       (common-lisp:cons "Rssi"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'battery-level))
      (common-lisp:list
       (common-lisp:cons "BatteryLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "Event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-state))
      (common-lisp:list
       (common-lisp:cons "DeviceState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-device-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sidewalk-event-notification-configurations
                       common-lisp:nil
                       ((amazon-id-event-topic :initarg :amazon-id-event-topic
                         :type
                         (common-lisp:or event-notification-topic-status
                                         common-lisp:null)
                         :accessor
                         %sidewalk-event-notification-configurations-amazon-id-event-topic
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sidewalk-event-notification-configurations
                    'make-sidewalk-event-notification-configurations))
 (common-lisp:defun make-sidewalk-event-notification-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key amazon-id-event-topic)
   (common-lisp:apply #'common-lisp:make-instance
                      'sidewalk-event-notification-configurations
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-event-notification-configurations))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-event-notification-configurations))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amazon-id-event-topic))
      (common-lisp:list
       (common-lisp:cons "AmazonIdEventTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-event-notification-configurations))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sidewalk-get-device-profile common-lisp:nil
                       ((dak-certificate-metadata :initarg
                         :dak-certificate-metadata :type
                         (common-lisp:or dak-certificate-metadata-list
                                         common-lisp:null)
                         :accessor
                         %sidewalk-get-device-profile-dak-certificate-metadata
                         :initform common-lisp:nil)
                        (qualification-status :initarg :qualification-status
                         :type
                         (common-lisp:or qualification-status common-lisp:null)
                         :accessor
                         %sidewalk-get-device-profile-qualification-status
                         :initform common-lisp:nil)
                        (application-server-public-key :initarg
                         :application-server-public-key :type
                         (common-lisp:or application-server-public-key
                                         common-lisp:null)
                         :accessor
                         %sidewalk-get-device-profile-application-server-public-key
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sidewalk-get-device-profile
                    'make-sidewalk-get-device-profile))
 (common-lisp:defun make-sidewalk-get-device-profile
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key dak-certificate-metadata
                     qualification-status application-server-public-key)
   (common-lisp:apply #'common-lisp:make-instance 'sidewalk-get-device-profile
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-get-device-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-get-device-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-server-public-key))
      (common-lisp:list
       (common-lisp:cons "ApplicationServerPublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'qualification-status))
      (common-lisp:list
       (common-lisp:cons "QualificationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dak-certificate-metadata))
      (common-lisp:list
       (common-lisp:cons "DakCertificateMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-get-device-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sidewalk-get-start-import-info common-lisp:nil
                       ((role :initarg :role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %sidewalk-get-start-import-info-role :initform
                         common-lisp:nil)
                        (device-creation-file-list :initarg
                         :device-creation-file-list :type
                         (common-lisp:or device-creation-file-list
                                         common-lisp:null)
                         :accessor
                         %sidewalk-get-start-import-info-device-creation-file-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sidewalk-get-start-import-info
                    'make-sidewalk-get-start-import-info))
 (common-lisp:defun make-sidewalk-get-start-import-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role device-creation-file-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'sidewalk-get-start-import-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-get-start-import-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-get-start-import-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-creation-file-list))
      (common-lisp:list
       (common-lisp:cons "DeviceCreationFileList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-get-start-import-info))
   common-lisp:nil))
(common-lisp:deftype sidewalk-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sidewalk-list-device common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or wireless-device-sidewalk-status
                                         common-lisp:null)
                         :accessor %sidewalk-list-device-status :initform
                         common-lisp:nil)
                        (device-profile-id :initarg :device-profile-id :type
                         (common-lisp:or device-profile-id common-lisp:null)
                         :accessor %sidewalk-list-device-device-profile-id
                         :initform common-lisp:nil)
                        (device-certificates :initarg :device-certificates
                         :type
                         (common-lisp:or device-certificate-list
                                         common-lisp:null)
                         :accessor %sidewalk-list-device-device-certificates
                         :initform common-lisp:nil)
                        (sidewalk-manufacturing-sn :initarg
                         :sidewalk-manufacturing-sn :type
                         (common-lisp:or sidewalk-manufacturing-sn
                                         common-lisp:null)
                         :accessor
                         %sidewalk-list-device-sidewalk-manufacturing-sn
                         :initform common-lisp:nil)
                        (sidewalk-id :initarg :sidewalk-id :type
                         (common-lisp:or sidewalk-id common-lisp:null)
                         :accessor %sidewalk-list-device-sidewalk-id :initform
                         common-lisp:nil)
                        (amazon-id :initarg :amazon-id :type
                         (common-lisp:or amazon-id common-lisp:null) :accessor
                         %sidewalk-list-device-amazon-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sidewalk-list-device 'make-sidewalk-list-device))
 (common-lisp:defun make-sidewalk-list-device
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status device-profile-id
                     device-certificates sidewalk-manufacturing-sn sidewalk-id
                     amazon-id)
   (common-lisp:apply #'common-lisp:make-instance 'sidewalk-list-device
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sidewalk-list-device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sidewalk-list-device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amazon-id))
      (common-lisp:list
       (common-lisp:cons "AmazonId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sidewalk-id))
      (common-lisp:list
       (common-lisp:cons "SidewalkId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sidewalk-manufacturing-sn))
      (common-lisp:list
       (common-lisp:cons "SidewalkManufacturingSn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-certificates))
      (common-lisp:list
       (common-lisp:cons "DeviceCertificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-profile-id))
      (common-lisp:list
       (common-lisp:cons "DeviceProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sidewalk-list-device))
   common-lisp:nil))
(common-lisp:deftype sidewalk-manufacturing-sn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass sidewalk-resource-type-event-configuration
                       common-lisp:nil
                       ((wireless-device-event-topic :initarg
                         :wireless-device-event-topic :type
                         (common-lisp:or event-notification-topic-status
                                         common-lisp:null)
                         :accessor
                         %sidewalk-resource-type-event-configuration-wireless-device-event-topic
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sidewalk-resource-type-event-configuration
                    'make-sidewalk-resource-type-event-configuration))
 (common-lisp:defun make-sidewalk-resource-type-event-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wireless-device-event-topic)
   (common-lisp:apply #'common-lisp:make-instance
                      'sidewalk-resource-type-event-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-resource-type-event-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-resource-type-event-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wireless-device-event-topic))
      (common-lisp:list
       (common-lisp:cons "WirelessDeviceEventTopic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-resource-type-event-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sidewalk-send-data-to-device common-lisp:nil
                       ((ack-mode-retry-duration-secs :initarg
                         :ack-mode-retry-duration-secs :type
                         (common-lisp:or ack-mode-retry-duration-secs
                                         common-lisp:null)
                         :accessor
                         %sidewalk-send-data-to-device-ack-mode-retry-duration-secs
                         :initform common-lisp:nil)
                        (message-type :initarg :message-type :type
                         (common-lisp:or message-type common-lisp:null)
                         :accessor %sidewalk-send-data-to-device-message-type
                         :initform common-lisp:nil)
                        (seq :initarg :seq :type
                         (common-lisp:or seq common-lisp:null) :accessor
                         %sidewalk-send-data-to-device-seq :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sidewalk-send-data-to-device
                    'make-sidewalk-send-data-to-device))
 (common-lisp:defun make-sidewalk-send-data-to-device
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ack-mode-retry-duration-secs message-type
                     seq)
   (common-lisp:apply #'common-lisp:make-instance 'sidewalk-send-data-to-device
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-send-data-to-device))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-send-data-to-device))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'seq))
      (common-lisp:list
       (common-lisp:cons "Seq"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-type))
      (common-lisp:list
       (common-lisp:cons "MessageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ack-mode-retry-duration-secs))
      (common-lisp:list
       (common-lisp:cons "AckModeRetryDurationSecs"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-send-data-to-device))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sidewalk-single-start-import-info common-lisp:nil
                       ((sidewalk-manufacturing-sn :initarg
                         :sidewalk-manufacturing-sn :type
                         (common-lisp:or sidewalk-manufacturing-sn
                                         common-lisp:null)
                         :accessor
                         %sidewalk-single-start-import-info-sidewalk-manufacturing-sn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sidewalk-single-start-import-info
                    'make-sidewalk-single-start-import-info))
 (common-lisp:defun make-sidewalk-single-start-import-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sidewalk-manufacturing-sn)
   (common-lisp:apply #'common-lisp:make-instance
                      'sidewalk-single-start-import-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-single-start-import-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-single-start-import-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'sidewalk-manufacturing-sn))
      (common-lisp:list
       (common-lisp:cons "SidewalkManufacturingSn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-single-start-import-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sidewalk-start-import-info common-lisp:nil
                       ((role :initarg :role :type
                         (common-lisp:or role common-lisp:null) :accessor
                         %sidewalk-start-import-info-role :initform
                         common-lisp:nil)
                        (device-creation-file :initarg :device-creation-file
                         :type
                         (common-lisp:or device-creation-file common-lisp:null)
                         :accessor
                         %sidewalk-start-import-info-device-creation-file
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sidewalk-start-import-info
                    'make-sidewalk-start-import-info))
 (common-lisp:defun make-sidewalk-start-import-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role device-creation-file)
   (common-lisp:apply #'common-lisp:make-instance 'sidewalk-start-import-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-start-import-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-start-import-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-creation-file))
      (common-lisp:list
       (common-lisp:cons "DeviceCreationFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-start-import-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sidewalk-update-account common-lisp:nil
                       ((app-server-private-key :initarg
                         :app-server-private-key :type
                         (common-lisp:or app-server-private-key
                                         common-lisp:null)
                         :accessor
                         %sidewalk-update-account-app-server-private-key
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sidewalk-update-account 'make-sidewalk-update-account))
 (common-lisp:defun make-sidewalk-update-account
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key app-server-private-key)
   (common-lisp:apply #'common-lisp:make-instance 'sidewalk-update-account
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-update-account))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-update-account))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-server-private-key))
      (common-lisp:list
       (common-lisp:cons "AppServerPrivateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-update-account))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass sidewalk-update-import-info common-lisp:nil
                       ((device-creation-file :initarg :device-creation-file
                         :type
                         (common-lisp:or device-creation-file common-lisp:null)
                         :accessor
                         %sidewalk-update-import-info-device-creation-file
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'sidewalk-update-import-info
                    'make-sidewalk-update-import-info))
 (common-lisp:defun make-sidewalk-update-import-info
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key device-creation-file)
   (common-lisp:apply #'common-lisp:make-instance 'sidewalk-update-import-info
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-update-import-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-update-import-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-creation-file))
      (common-lisp:list
       (common-lisp:cons "DeviceCreationFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sidewalk-update-import-info))
   common-lisp:nil))
(common-lisp:deftype signing-alg () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass
  start-bulk-associate-wireless-device-with-multicast-group-request
  common-lisp:nil
  ((tags :initarg :tags :type (common-lisp:or tag-list common-lisp:null)
    :accessor
    %start-bulk-associate-wireless-device-with-multicast-group-request-tags
    :initform common-lisp:nil)
   (query-string :initarg :query-string :type
    (common-lisp:or query-string common-lisp:null) :accessor
    %start-bulk-associate-wireless-device-with-multicast-group-request-query-string
    :initform common-lisp:nil)
   (id :initarg :id :type (common-lisp:or multicast-group-id common-lisp:null)
    :accessor
    %start-bulk-associate-wireless-device-with-multicast-group-request-id
    :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list
   'start-bulk-associate-wireless-device-with-multicast-group-request
   'make-start-bulk-associate-wireless-device-with-multicast-group-request))
 (common-lisp:defun make-start-bulk-associate-wireless-device-with-multicast-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags query-string id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-bulk-associate-wireless-device-with-multicast-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-bulk-associate-wireless-device-with-multicast-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-bulk-associate-wireless-device-with-multicast-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "QueryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-bulk-associate-wireless-device-with-multicast-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  start-bulk-associate-wireless-device-with-multicast-group-response
  common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list
   'start-bulk-associate-wireless-device-with-multicast-group-response
   'make-start-bulk-associate-wireless-device-with-multicast-group-response))
 (common-lisp:defun make-start-bulk-associate-wireless-device-with-multicast-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-bulk-associate-wireless-device-with-multicast-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-bulk-associate-wireless-device-with-multicast-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-bulk-associate-wireless-device-with-multicast-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-bulk-associate-wireless-device-with-multicast-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  start-bulk-disassociate-wireless-device-from-multicast-group-request
  common-lisp:nil
  ((tags :initarg :tags :type (common-lisp:or tag-list common-lisp:null)
    :accessor
    %start-bulk-disassociate-wireless-device-from-multicast-group-request-tags
    :initform common-lisp:nil)
   (query-string :initarg :query-string :type
    (common-lisp:or query-string common-lisp:null) :accessor
    %start-bulk-disassociate-wireless-device-from-multicast-group-request-query-string
    :initform common-lisp:nil)
   (id :initarg :id :type (common-lisp:or multicast-group-id common-lisp:null)
    :accessor
    %start-bulk-disassociate-wireless-device-from-multicast-group-request-id
    :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list
   'start-bulk-disassociate-wireless-device-from-multicast-group-request
   'make-start-bulk-disassociate-wireless-device-from-multicast-group-request))
 (common-lisp:defun make-start-bulk-disassociate-wireless-device-from-multicast-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags query-string id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-bulk-disassociate-wireless-device-from-multicast-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-bulk-disassociate-wireless-device-from-multicast-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-bulk-disassociate-wireless-device-from-multicast-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'query-string))
      (common-lisp:list
       (common-lisp:cons "QueryString"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-bulk-disassociate-wireless-device-from-multicast-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass
  start-bulk-disassociate-wireless-device-from-multicast-group-response
  common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list
   'start-bulk-disassociate-wireless-device-from-multicast-group-response
   'make-start-bulk-disassociate-wireless-device-from-multicast-group-response))
 (common-lisp:defun make-start-bulk-disassociate-wireless-device-from-multicast-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-bulk-disassociate-wireless-device-from-multicast-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-bulk-disassociate-wireless-device-from-multicast-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-bulk-disassociate-wireless-device-from-multicast-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-bulk-disassociate-wireless-device-from-multicast-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-fuota-task-request common-lisp:nil
                       ((lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or lo-ra-wanstart-fuota-task
                                         common-lisp:null)
                         :accessor %start-fuota-task-request-lo-ra-wan
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or fuota-task-id common-lisp:null)
                         :accessor %start-fuota-task-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'start-fuota-task-request 'make-start-fuota-task-request))
 (common-lisp:defun make-start-fuota-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lo-ra-wan id)
   (common-lisp:apply #'common-lisp:make-instance 'start-fuota-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-fuota-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-fuota-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-fuota-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-fuota-task-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'start-fuota-task-response
                    'make-start-fuota-task-response))
 (common-lisp:defun make-start-fuota-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'start-fuota-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-fuota-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-fuota-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-fuota-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-multicast-group-session-request common-lisp:nil
                       ((lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or lo-ra-wanmulticast-session
                                         common-lisp:null)
                         :accessor
                         %start-multicast-group-session-request-lo-ra-wan
                         :initform
                         (common-lisp:error ":lo-ra-wan is required"))
                        (id :initarg :id :type
                         (common-lisp:or multicast-group-id common-lisp:null)
                         :accessor %start-multicast-group-session-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'start-multicast-group-session-request
                    'make-start-multicast-group-session-request))
 (common-lisp:defun make-start-multicast-group-session-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lo-ra-wan id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-multicast-group-session-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-multicast-group-session-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-multicast-group-session-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-multicast-group-session-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-multicast-group-session-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'start-multicast-group-session-response
                    'make-start-multicast-group-session-response))
 (common-lisp:defun make-start-multicast-group-session-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-multicast-group-session-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-multicast-group-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-multicast-group-session-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-multicast-group-session-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-single-wireless-device-import-task-request
                       common-lisp:nil
                       ((sidewalk :initarg :sidewalk :type
                         (common-lisp:or sidewalk-single-start-import-info
                                         common-lisp:null)
                         :accessor
                         %start-single-wireless-device-import-task-request-sidewalk
                         :initform (common-lisp:error ":sidewalk is required"))
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %start-single-wireless-device-import-task-request-tags
                         :initform common-lisp:nil)
                        (device-name :initarg :device-name :type
                         (common-lisp:or device-name common-lisp:null)
                         :accessor
                         %start-single-wireless-device-import-task-request-device-name
                         :initform common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %start-single-wireless-device-import-task-request-client-request-token
                         :initform common-lisp:nil)
                        (destination-name :initarg :destination-name :type
                         (common-lisp:or destination-name common-lisp:null)
                         :accessor
                         %start-single-wireless-device-import-task-request-destination-name
                         :initform
                         (common-lisp:error ":destination-name is required"))))
 (common-lisp:export
  (common-lisp:list 'start-single-wireless-device-import-task-request
                    'make-start-single-wireless-device-import-task-request))
 (common-lisp:defun make-start-single-wireless-device-import-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sidewalk tags device-name
                     client-request-token destination-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-single-wireless-device-import-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-single-wireless-device-import-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-single-wireless-device-import-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-name))
      (common-lisp:list
       (common-lisp:cons "DestinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'device-name))
      (common-lisp:list
       (common-lisp:cons "DeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sidewalk))
      (common-lisp:list
       (common-lisp:cons "Sidewalk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-single-wireless-device-import-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-single-wireless-device-import-task-response
                       common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or import-task-arn common-lisp:null)
                         :accessor
                         %start-single-wireless-device-import-task-response-arn
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or import-task-id common-lisp:null)
                         :accessor
                         %start-single-wireless-device-import-task-response-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-single-wireless-device-import-task-response
                    'make-start-single-wireless-device-import-task-response))
 (common-lisp:defun make-start-single-wireless-device-import-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-single-wireless-device-import-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-single-wireless-device-import-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-single-wireless-device-import-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-single-wireless-device-import-task-response))
   common-lisp:nil))
(common-lisp:deftype start-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-wireless-device-import-task-request
                       common-lisp:nil
                       ((sidewalk :initarg :sidewalk :type
                         (common-lisp:or sidewalk-start-import-info
                                         common-lisp:null)
                         :accessor
                         %start-wireless-device-import-task-request-sidewalk
                         :initform (common-lisp:error ":sidewalk is required"))
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %start-wireless-device-import-task-request-tags
                         :initform common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %start-wireless-device-import-task-request-client-request-token
                         :initform common-lisp:nil)
                        (destination-name :initarg :destination-name :type
                         (common-lisp:or destination-name common-lisp:null)
                         :accessor
                         %start-wireless-device-import-task-request-destination-name
                         :initform
                         (common-lisp:error ":destination-name is required"))))
 (common-lisp:export
  (common-lisp:list 'start-wireless-device-import-task-request
                    'make-start-wireless-device-import-task-request))
 (common-lisp:defun make-start-wireless-device-import-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sidewalk tags client-request-token
                     destination-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-wireless-device-import-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-wireless-device-import-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-wireless-device-import-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-name))
      (common-lisp:list
       (common-lisp:cons "DestinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sidewalk))
      (common-lisp:list
       (common-lisp:cons "Sidewalk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-wireless-device-import-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-wireless-device-import-task-response
                       common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or import-task-arn common-lisp:null)
                         :accessor
                         %start-wireless-device-import-task-response-arn
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or import-task-id common-lisp:null)
                         :accessor
                         %start-wireless-device-import-task-response-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-wireless-device-import-task-response
                    'make-start-wireless-device-import-task-response))
 (common-lisp:defun make-start-wireless-device-import-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn id)
   (common-lisp:apply #'common-lisp:make-instance
                      'start-wireless-device-import-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-wireless-device-import-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-wireless-device-import-task-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-wireless-device-import-task-response))
   common-lisp:nil))
(common-lisp:deftype station () 'common-lisp:string)
(common-lisp:deftype status-reason () 'common-lisp:string)
(common-lisp:deftype sub-band () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype sub-bands () '(trivial-types:proper-list sub-band))
 (common-lisp:defun |make-sub-bands|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sub-band))
   aws-sdk/generator/shape::members))
(common-lisp:deftype supported-rf-region () 'common-lisp:string)
(common-lisp:deftype supports32bit-fcnt () 'common-lisp:boolean)
(common-lisp:deftype supports-class-b () 'common-lisp:boolean)
(common-lisp:deftype supports-class-c () 'common-lisp:boolean)
(common-lisp:deftype supports-join () 'common-lisp:boolean)
(common-lisp:deftype system-id () 'common-lisp:integer)
(common-lisp:deftype tac () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype target-per () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype tdscdma-list () '(trivial-types:proper-list tdscdma-obj))
 (common-lisp:defun |make-tdscdma-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tdscdma-obj))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tdscdma-local-id common-lisp:nil
                       ((cell-params :initarg :cell-params :type
                         (common-lisp:or cell-params common-lisp:null)
                         :accessor %tdscdma-local-id-cell-params :initform
                         (common-lisp:error ":cell-params is required"))
                        (uarfcn :initarg :uarfcn :type
                         (common-lisp:or uarfcn common-lisp:null) :accessor
                         %tdscdma-local-id-uarfcn :initform
                         (common-lisp:error ":uarfcn is required"))))
 (common-lisp:export
  (common-lisp:list 'tdscdma-local-id 'make-tdscdma-local-id))
 (common-lisp:defun make-tdscdma-local-id
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cell-params uarfcn)
   (common-lisp:apply #'common-lisp:make-instance 'tdscdma-local-id
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tdscdma-local-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tdscdma-local-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uarfcn))
      (common-lisp:list
       (common-lisp:cons "Uarfcn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cell-params))
      (common-lisp:list
       (common-lisp:cons "CellParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tdscdma-local-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tdscdma-nmr-list ()
   '(trivial-types:proper-list tdscdma-nmr-obj))
 (common-lisp:defun |make-tdscdma-nmr-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tdscdma-nmr-obj))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tdscdma-nmr-obj common-lisp:nil
                       ((path-loss :initarg :path-loss :type
                         (common-lisp:or path-loss common-lisp:null) :accessor
                         %tdscdma-nmr-obj-path-loss :initform common-lisp:nil)
                        (rscp :initarg :rscp :type
                         (common-lisp:or rscp common-lisp:null) :accessor
                         %tdscdma-nmr-obj-rscp :initform common-lisp:nil)
                        (utran-cid :initarg :utran-cid :type
                         (common-lisp:or utran-cid common-lisp:null) :accessor
                         %tdscdma-nmr-obj-utran-cid :initform common-lisp:nil)
                        (cell-params :initarg :cell-params :type
                         (common-lisp:or cell-params common-lisp:null)
                         :accessor %tdscdma-nmr-obj-cell-params :initform
                         (common-lisp:error ":cell-params is required"))
                        (uarfcn :initarg :uarfcn :type
                         (common-lisp:or uarfcn common-lisp:null) :accessor
                         %tdscdma-nmr-obj-uarfcn :initform
                         (common-lisp:error ":uarfcn is required"))))
 (common-lisp:export (common-lisp:list 'tdscdma-nmr-obj 'make-tdscdma-nmr-obj))
 (common-lisp:defun make-tdscdma-nmr-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key path-loss rscp utran-cid cell-params
                     uarfcn)
   (common-lisp:apply #'common-lisp:make-instance 'tdscdma-nmr-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tdscdma-nmr-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tdscdma-nmr-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uarfcn))
      (common-lisp:list
       (common-lisp:cons "Uarfcn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cell-params))
      (common-lisp:list
       (common-lisp:cons "CellParams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'utran-cid))
      (common-lisp:list
       (common-lisp:cons "UtranCid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rscp))
      (common-lisp:list
       (common-lisp:cons "Rscp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-loss))
      (common-lisp:list
       (common-lisp:cons "PathLoss"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tdscdma-nmr-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tdscdma-obj common-lisp:nil
                       ((tdscdma-nmr :initarg :tdscdma-nmr :type
                         (common-lisp:or tdscdma-nmr-list common-lisp:null)
                         :accessor %tdscdma-obj-tdscdma-nmr :initform
                         common-lisp:nil)
                        (path-loss :initarg :path-loss :type
                         (common-lisp:or path-loss common-lisp:null) :accessor
                         %tdscdma-obj-path-loss :initform common-lisp:nil)
                        (rscp :initarg :rscp :type
                         (common-lisp:or rscp common-lisp:null) :accessor
                         %tdscdma-obj-rscp :initform common-lisp:nil)
                        (tdscdma-timing-advance :initarg
                         :tdscdma-timing-advance :type
                         (common-lisp:or tdscdma-timing-advance
                                         common-lisp:null)
                         :accessor %tdscdma-obj-tdscdma-timing-advance
                         :initform common-lisp:nil)
                        (tdscdma-local-id :initarg :tdscdma-local-id :type
                         (common-lisp:or tdscdma-local-id common-lisp:null)
                         :accessor %tdscdma-obj-tdscdma-local-id :initform
                         common-lisp:nil)
                        (utran-cid :initarg :utran-cid :type
                         (common-lisp:or utran-cid common-lisp:null) :accessor
                         %tdscdma-obj-utran-cid :initform
                         (common-lisp:error ":utran-cid is required"))
                        (lac :initarg :lac :type
                         (common-lisp:or lac common-lisp:null) :accessor
                         %tdscdma-obj-lac :initform common-lisp:nil)
                        (mnc :initarg :mnc :type
                         (common-lisp:or mnc common-lisp:null) :accessor
                         %tdscdma-obj-mnc :initform
                         (common-lisp:error ":mnc is required"))
                        (mcc :initarg :mcc :type
                         (common-lisp:or mcc common-lisp:null) :accessor
                         %tdscdma-obj-mcc :initform
                         (common-lisp:error ":mcc is required"))))
 (common-lisp:export (common-lisp:list 'tdscdma-obj 'make-tdscdma-obj))
 (common-lisp:defun make-tdscdma-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tdscdma-nmr path-loss rscp
                     tdscdma-timing-advance tdscdma-local-id utran-cid lac mnc
                     mcc)
   (common-lisp:apply #'common-lisp:make-instance 'tdscdma-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tdscdma-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tdscdma-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mcc))
      (common-lisp:list
       (common-lisp:cons "Mcc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mnc))
      (common-lisp:list
       (common-lisp:cons "Mnc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lac))
      (common-lisp:list
       (common-lisp:cons "Lac"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'utran-cid))
      (common-lisp:list
       (common-lisp:cons "UtranCid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tdscdma-local-id))
      (common-lisp:list
       (common-lisp:cons "TdscdmaLocalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tdscdma-timing-advance))
      (common-lisp:list
       (common-lisp:cons "TdscdmaTimingAdvance"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rscp))
      (common-lisp:list
       (common-lisp:cons "Rscp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-loss))
      (common-lisp:list
       (common-lisp:cons "PathLoss"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tdscdma-nmr))
      (common-lisp:list
       (common-lisp:cons "TdscdmaNmr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tdscdma-obj))
   common-lisp:nil))
(common-lisp:deftype tdscdma-timing-advance () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass test-wireless-device-request common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or wireless-device-id common-lisp:null)
                         :accessor %test-wireless-device-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'test-wireless-device-request
                    'make-test-wireless-device-request))
 (common-lisp:defun make-test-wireless-device-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'test-wireless-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-wireless-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-wireless-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-wireless-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass test-wireless-device-response common-lisp:nil
                       ((result :initarg :result :type
                         (common-lisp:or result common-lisp:null) :accessor
                         %test-wireless-device-response-result :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'test-wireless-device-response
                    'make-test-wireless-device-response))
 (common-lisp:defun make-test-wireless-device-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key result)
   (common-lisp:apply #'common-lisp:make-instance
                      'test-wireless-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          test-wireless-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          test-wireless-device-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'result))
      (common-lisp:list
       (common-lisp:cons "Result"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          test-wireless-device-response))
   common-lisp:nil))
(common-lisp:deftype thing-arn () 'common-lisp:string)
(common-lisp:deftype thing-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (iotwireless-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (iotwireless-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       too-many-tags-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message
                    'too-many-tags-exception-resource-name)))
(common-lisp:progn
 (common-lisp:defclass trace-content common-lisp:nil
                       ((log-level :initarg :log-level :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         %trace-content-log-level :initform common-lisp:nil)
                        (wireless-device-frame-info :initarg
                         :wireless-device-frame-info :type
                         (common-lisp:or wireless-device-frame-info
                                         common-lisp:null)
                         :accessor %trace-content-wireless-device-frame-info
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'trace-content 'make-trace-content))
 (common-lisp:defun make-trace-content
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-level wireless-device-frame-info)
   (common-lisp:apply #'common-lisp:make-instance 'trace-content
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trace-content))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trace-content))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wireless-device-frame-info))
      (common-lisp:list
       (common-lisp:cons "WirelessDeviceFrameInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trace-content))
   common-lisp:nil))
(common-lisp:deftype transmission-interval () 'common-lisp:integer)
(common-lisp:deftype transmit-mode () 'common-lisp:integer)
(common-lisp:deftype uarfcn () 'common-lisp:integer)
(common-lisp:deftype uarfcndl () 'common-lisp:integer)
(common-lisp:deftype ul-bucket-size () 'common-lisp:integer)
(common-lisp:deftype ul-rate () 'common-lisp:integer)
(common-lisp:deftype ul-rate-policy () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or amazon-resource-name common-lisp:null)
                         :accessor %untag-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-abp-v1-0-x common-lisp:nil
                       ((fcnt-start :initarg :fcnt-start :type
                         (common-lisp:or fcnt-start common-lisp:null) :accessor
                         %update-abp-v1-0-x-fcnt-start :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-abp-v1-0-x 'make-update-abp-v1-0-x))
 (common-lisp:defun make-update-abp-v1-0-x
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fcnt-start)
   (common-lisp:apply #'common-lisp:make-instance 'update-abp-v1-0-x
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-abp-v1-0-x))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-abp-v1-0-x))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fcnt-start))
      (common-lisp:list
       (common-lisp:cons "FCntStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-abp-v1-0-x))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-abp-v1-1 common-lisp:nil
                       ((fcnt-start :initarg :fcnt-start :type
                         (common-lisp:or fcnt-start common-lisp:null) :accessor
                         %update-abp-v1-1-fcnt-start :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'update-abp-v1-1 'make-update-abp-v1-1))
 (common-lisp:defun make-update-abp-v1-1
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fcnt-start)
   (common-lisp:apply #'common-lisp:make-instance 'update-abp-v1-1
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-abp-v1-1))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-abp-v1-1))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fcnt-start))
      (common-lisp:list
       (common-lisp:cons "FCntStart"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-abp-v1-1))
   common-lisp:nil))
(common-lisp:deftype update-data-source () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-destination-request common-lisp:nil
                       ((role-arn :initarg :role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %update-destination-request-role-arn :initform
                         common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-destination-request-description
                         :initform common-lisp:nil)
                        (expression :initarg :expression :type
                         (common-lisp:or expression common-lisp:null) :accessor
                         %update-destination-request-expression :initform
                         common-lisp:nil)
                        (expression-type :initarg :expression-type :type
                         (common-lisp:or expression-type common-lisp:null)
                         :accessor %update-destination-request-expression-type
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or destination-name common-lisp:null)
                         :accessor %update-destination-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-destination-request
                    'make-update-destination-request))
 (common-lisp:defun make-update-destination-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key role-arn description expression
                     expression-type name)
   (common-lisp:apply #'common-lisp:make-instance 'update-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression-type))
      (common-lisp:list
       (common-lisp:cons "ExpressionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "Expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-destination-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-destination-response
                    'make-update-destination-response))
 (common-lisp:defun make-update-destination-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'update-destination-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-destination-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-event-configuration-by-resource-types-request
                       common-lisp:nil
                       ((message-delivery-status :initarg
                         :message-delivery-status :type
                         (common-lisp:or
                          message-delivery-status-resource-type-event-configuration
                          common-lisp:null)
                         :accessor
                         %update-event-configuration-by-resource-types-request-message-delivery-status
                         :initform common-lisp:nil)
                        (connection-status :initarg :connection-status :type
                         (common-lisp:or
                          connection-status-resource-type-event-configuration
                          common-lisp:null)
                         :accessor
                         %update-event-configuration-by-resource-types-request-connection-status
                         :initform common-lisp:nil)
                        (join :initarg :join :type
                         (common-lisp:or join-resource-type-event-configuration
                                         common-lisp:null)
                         :accessor
                         %update-event-configuration-by-resource-types-request-join
                         :initform common-lisp:nil)
                        (proximity :initarg :proximity :type
                         (common-lisp:or
                          proximity-resource-type-event-configuration
                          common-lisp:null)
                         :accessor
                         %update-event-configuration-by-resource-types-request-proximity
                         :initform common-lisp:nil)
                        (device-registration-state :initarg
                         :device-registration-state :type
                         (common-lisp:or
                          device-registration-state-resource-type-event-configuration
                          common-lisp:null)
                         :accessor
                         %update-event-configuration-by-resource-types-request-device-registration-state
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-event-configuration-by-resource-types-request
                    'make-update-event-configuration-by-resource-types-request))
 (common-lisp:defun make-update-event-configuration-by-resource-types-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message-delivery-status connection-status
                     join proximity device-registration-state)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-event-configuration-by-resource-types-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-event-configuration-by-resource-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-event-configuration-by-resource-types-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-registration-state))
      (common-lisp:list
       (common-lisp:cons "DeviceRegistrationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proximity))
      (common-lisp:list
       (common-lisp:cons "Proximity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'join))
      (common-lisp:list
       (common-lisp:cons "Join"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-status))
      (common-lisp:list
       (common-lisp:cons "ConnectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'message-delivery-status))
      (common-lisp:list
       (common-lisp:cons "MessageDeliveryStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-event-configuration-by-resource-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-event-configuration-by-resource-types-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-event-configuration-by-resource-types-response
                    'make-update-event-configuration-by-resource-types-response))
 (common-lisp:defun make-update-event-configuration-by-resource-types-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-event-configuration-by-resource-types-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-event-configuration-by-resource-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-event-configuration-by-resource-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-event-configuration-by-resource-types-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-fports common-lisp:nil
                       ((applications :initarg :applications :type
                         (common-lisp:or applications common-lisp:null)
                         :accessor %update-fports-applications :initform
                         common-lisp:nil)
                        (positioning :initarg :positioning :type
                         (common-lisp:or positioning common-lisp:null)
                         :accessor %update-fports-positioning :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'update-fports 'make-update-fports))
 (common-lisp:defun make-update-fports
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key applications positioning)
   (common-lisp:apply #'common-lisp:make-instance 'update-fports
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-fports))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-fports))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'positioning))
      (common-lisp:list
       (common-lisp:cons "Positioning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'applications))
      (common-lisp:list
       (common-lisp:cons "Applications"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-fports))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-fuota-task-request common-lisp:nil
                       ((fragment-interval-ms :initarg :fragment-interval-ms
                         :type
                         (common-lisp:or fragment-interval-ms common-lisp:null)
                         :accessor
                         %update-fuota-task-request-fragment-interval-ms
                         :initform common-lisp:nil)
                        (fragment-size-bytes :initarg :fragment-size-bytes
                         :type
                         (common-lisp:or fragment-size-bytes common-lisp:null)
                         :accessor
                         %update-fuota-task-request-fragment-size-bytes
                         :initform common-lisp:nil)
                        (redundancy-percent :initarg :redundancy-percent :type
                         (common-lisp:or redundancy-percent common-lisp:null)
                         :accessor
                         %update-fuota-task-request-redundancy-percent
                         :initform common-lisp:nil)
                        (firmware-update-role :initarg :firmware-update-role
                         :type
                         (common-lisp:or firmware-update-role common-lisp:null)
                         :accessor
                         %update-fuota-task-request-firmware-update-role
                         :initform common-lisp:nil)
                        (firmware-update-image :initarg :firmware-update-image
                         :type
                         (common-lisp:or firmware-update-image
                                         common-lisp:null)
                         :accessor
                         %update-fuota-task-request-firmware-update-image
                         :initform common-lisp:nil)
                        (lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or lo-ra-wanfuota-task common-lisp:null)
                         :accessor %update-fuota-task-request-lo-ra-wan
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-fuota-task-request-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or fuota-task-name common-lisp:null)
                         :accessor %update-fuota-task-request-name :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or fuota-task-id common-lisp:null)
                         :accessor %update-fuota-task-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-fuota-task-request
                    'make-update-fuota-task-request))
 (common-lisp:defun make-update-fuota-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key fragment-interval-ms fragment-size-bytes
                     redundancy-percent firmware-update-role
                     firmware-update-image lo-ra-wan description name id)
   (common-lisp:apply #'common-lisp:make-instance 'update-fuota-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-fuota-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-fuota-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firmware-update-image))
      (common-lisp:list
       (common-lisp:cons "FirmwareUpdateImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'firmware-update-role))
      (common-lisp:list
       (common-lisp:cons "FirmwareUpdateRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'redundancy-percent))
      (common-lisp:list
       (common-lisp:cons "RedundancyPercent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fragment-size-bytes))
      (common-lisp:list
       (common-lisp:cons "FragmentSizeBytes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'fragment-interval-ms))
      (common-lisp:list
       (common-lisp:cons "FragmentIntervalMS"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-fuota-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-fuota-task-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-fuota-task-response
                    'make-update-fuota-task-response))
 (common-lisp:defun make-update-fuota-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'update-fuota-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-fuota-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-fuota-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-fuota-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-log-levels-by-resource-types-request
                       common-lisp:nil
                       ((wireless-gateway-log-options :initarg
                         :wireless-gateway-log-options :type
                         (common-lisp:or wireless-gateway-log-option-list
                                         common-lisp:null)
                         :accessor
                         %update-log-levels-by-resource-types-request-wireless-gateway-log-options
                         :initform common-lisp:nil)
                        (wireless-device-log-options :initarg
                         :wireless-device-log-options :type
                         (common-lisp:or wireless-device-log-option-list
                                         common-lisp:null)
                         :accessor
                         %update-log-levels-by-resource-types-request-wireless-device-log-options
                         :initform common-lisp:nil)
                        (default-log-level :initarg :default-log-level :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         %update-log-levels-by-resource-types-request-default-log-level
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-log-levels-by-resource-types-request
                    'make-update-log-levels-by-resource-types-request))
 (common-lisp:defun make-update-log-levels-by-resource-types-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wireless-gateway-log-options
                     wireless-device-log-options default-log-level)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-log-levels-by-resource-types-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-log-levels-by-resource-types-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-log-levels-by-resource-types-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-log-level))
      (common-lisp:list
       (common-lisp:cons "DefaultLogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wireless-device-log-options))
      (common-lisp:list
       (common-lisp:cons "WirelessDeviceLogOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wireless-gateway-log-options))
      (common-lisp:list
       (common-lisp:cons "WirelessGatewayLogOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-log-levels-by-resource-types-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-log-levels-by-resource-types-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-log-levels-by-resource-types-response
                    'make-update-log-levels-by-resource-types-response))
 (common-lisp:defun make-update-log-levels-by-resource-types-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-log-levels-by-resource-types-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-log-levels-by-resource-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-log-levels-by-resource-types-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-log-levels-by-resource-types-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-multicast-group-request common-lisp:nil
                       ((lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or lo-ra-wanmulticast common-lisp:null)
                         :accessor %update-multicast-group-request-lo-ra-wan
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-multicast-group-request-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or multicast-group-name common-lisp:null)
                         :accessor %update-multicast-group-request-name
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or multicast-group-id common-lisp:null)
                         :accessor %update-multicast-group-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-multicast-group-request
                    'make-update-multicast-group-request))
 (common-lisp:defun make-update-multicast-group-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lo-ra-wan description name id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-multicast-group-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-multicast-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-multicast-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-multicast-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-multicast-group-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-multicast-group-response
                    'make-update-multicast-group-response))
 (common-lisp:defun make-update-multicast-group-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-multicast-group-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-multicast-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-multicast-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-multicast-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-network-analyzer-configuration-request
                       common-lisp:nil
                       ((description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor
                         %update-network-analyzer-configuration-request-description
                         :initform common-lisp:nil)
                        (wireless-gateways-to-remove :initarg
                         :wireless-gateways-to-remove :type
                         (common-lisp:or wireless-gateway-list
                                         common-lisp:null)
                         :accessor
                         %update-network-analyzer-configuration-request-wireless-gateways-to-remove
                         :initform common-lisp:nil)
                        (wireless-gateways-to-add :initarg
                         :wireless-gateways-to-add :type
                         (common-lisp:or wireless-gateway-list
                                         common-lisp:null)
                         :accessor
                         %update-network-analyzer-configuration-request-wireless-gateways-to-add
                         :initform common-lisp:nil)
                        (wireless-devices-to-remove :initarg
                         :wireless-devices-to-remove :type
                         (common-lisp:or wireless-device-list common-lisp:null)
                         :accessor
                         %update-network-analyzer-configuration-request-wireless-devices-to-remove
                         :initform common-lisp:nil)
                        (wireless-devices-to-add :initarg
                         :wireless-devices-to-add :type
                         (common-lisp:or wireless-device-list common-lisp:null)
                         :accessor
                         %update-network-analyzer-configuration-request-wireless-devices-to-add
                         :initform common-lisp:nil)
                        (trace-content :initarg :trace-content :type
                         (common-lisp:or trace-content common-lisp:null)
                         :accessor
                         %update-network-analyzer-configuration-request-trace-content
                         :initform common-lisp:nil)
                        (configuration-name :initarg :configuration-name :type
                         (common-lisp:or network-analyzer-configuration-name
                                         common-lisp:null)
                         :accessor
                         %update-network-analyzer-configuration-request-configuration-name
                         :initform
                         (common-lisp:error
                          ":configuration-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-network-analyzer-configuration-request
                    'make-update-network-analyzer-configuration-request))
 (common-lisp:defun make-update-network-analyzer-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key description wireless-gateways-to-remove
                     wireless-gateways-to-add wireless-devices-to-remove
                     wireless-devices-to-add trace-content configuration-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-network-analyzer-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-network-analyzer-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-network-analyzer-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trace-content))
      (common-lisp:list
       (common-lisp:cons "TraceContent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wireless-devices-to-add))
      (common-lisp:list
       (common-lisp:cons "WirelessDevicesToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wireless-devices-to-remove))
      (common-lisp:list
       (common-lisp:cons "WirelessDevicesToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wireless-gateways-to-add))
      (common-lisp:list
       (common-lisp:cons "WirelessGatewaysToAdd"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'wireless-gateways-to-remove))
      (common-lisp:list
       (common-lisp:cons "WirelessGatewaysToRemove"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-network-analyzer-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-network-analyzer-configuration-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-network-analyzer-configuration-response
                    'make-update-network-analyzer-configuration-response))
 (common-lisp:defun make-update-network-analyzer-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-network-analyzer-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-network-analyzer-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-network-analyzer-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-network-analyzer-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-partner-account-request common-lisp:nil
                       ((partner-type :initarg :partner-type :type
                         (common-lisp:or partner-type common-lisp:null)
                         :accessor %update-partner-account-request-partner-type
                         :initform
                         (common-lisp:error ":partner-type is required"))
                        (partner-account-id :initarg :partner-account-id :type
                         (common-lisp:or partner-account-id common-lisp:null)
                         :accessor
                         %update-partner-account-request-partner-account-id
                         :initform
                         (common-lisp:error ":partner-account-id is required"))
                        (sidewalk :initarg :sidewalk :type
                         (common-lisp:or sidewalk-update-account
                                         common-lisp:null)
                         :accessor %update-partner-account-request-sidewalk
                         :initform
                         (common-lisp:error ":sidewalk is required"))))
 (common-lisp:export
  (common-lisp:list 'update-partner-account-request
                    'make-update-partner-account-request))
 (common-lisp:defun make-update-partner-account-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key partner-type partner-account-id sidewalk)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-partner-account-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-partner-account-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-partner-account-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sidewalk))
      (common-lisp:list
       (common-lisp:cons "Sidewalk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-partner-account-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-partner-account-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-partner-account-response
                    'make-update-partner-account-response))
 (common-lisp:defun make-update-partner-account-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-partner-account-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-partner-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-partner-account-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-partner-account-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-position-request common-lisp:nil
                       ((position :initarg :position :type
                         (common-lisp:or position-coordinate common-lisp:null)
                         :accessor %update-position-request-position :initform
                         (common-lisp:error ":position is required"))
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or position-resource-type
                                         common-lisp:null)
                         :accessor %update-position-request-resource-type
                         :initform
                         (common-lisp:error ":resource-type is required"))
                        (resource-identifier :initarg :resource-identifier
                         :type
                         (common-lisp:or position-resource-identifier
                                         common-lisp:null)
                         :accessor %update-position-request-resource-identifier
                         :initform
                         (common-lisp:error
                          ":resource-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'update-position-request 'make-update-position-request))
 (common-lisp:defun make-update-position-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key position resource-type
                     resource-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'update-position-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-position-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-position-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'position))
      (common-lisp:list
       (common-lisp:cons "Position"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-position-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-position-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-position-response 'make-update-position-response))
 (common-lisp:defun make-update-position-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'update-position-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-position-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-position-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-position-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resource-event-configuration-request
                       common-lisp:nil
                       ((message-delivery-status :initarg
                         :message-delivery-status :type
                         (common-lisp:or
                          message-delivery-status-event-configuration
                          common-lisp:null)
                         :accessor
                         %update-resource-event-configuration-request-message-delivery-status
                         :initform common-lisp:nil)
                        (connection-status :initarg :connection-status :type
                         (common-lisp:or connection-status-event-configuration
                                         common-lisp:null)
                         :accessor
                         %update-resource-event-configuration-request-connection-status
                         :initform common-lisp:nil)
                        (join :initarg :join :type
                         (common-lisp:or join-event-configuration
                                         common-lisp:null)
                         :accessor
                         %update-resource-event-configuration-request-join
                         :initform common-lisp:nil)
                        (proximity :initarg :proximity :type
                         (common-lisp:or proximity-event-configuration
                                         common-lisp:null)
                         :accessor
                         %update-resource-event-configuration-request-proximity
                         :initform common-lisp:nil)
                        (device-registration-state :initarg
                         :device-registration-state :type
                         (common-lisp:or
                          device-registration-state-event-configuration
                          common-lisp:null)
                         :accessor
                         %update-resource-event-configuration-request-device-registration-state
                         :initform common-lisp:nil)
                        (partner-type :initarg :partner-type :type
                         (common-lisp:or event-notification-partner-type
                                         common-lisp:null)
                         :accessor
                         %update-resource-event-configuration-request-partner-type
                         :initform common-lisp:nil)
                        (identifier-type :initarg :identifier-type :type
                         (common-lisp:or identifier-type common-lisp:null)
                         :accessor
                         %update-resource-event-configuration-request-identifier-type
                         :initform
                         (common-lisp:error ":identifier-type is required"))
                        (identifier :initarg :identifier :type
                         (common-lisp:or identifier common-lisp:null) :accessor
                         %update-resource-event-configuration-request-identifier
                         :initform
                         (common-lisp:error ":identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'update-resource-event-configuration-request
                    'make-update-resource-event-configuration-request))
 (common-lisp:defun make-update-resource-event-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key message-delivery-status connection-status
                     join proximity device-registration-state partner-type
                     identifier-type identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-resource-event-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-event-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-event-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'device-registration-state))
      (common-lisp:list
       (common-lisp:cons "DeviceRegistrationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proximity))
      (common-lisp:list
       (common-lisp:cons "Proximity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'join))
      (common-lisp:list
       (common-lisp:cons "Join"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-status))
      (common-lisp:list
       (common-lisp:cons "ConnectionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'message-delivery-status))
      (common-lisp:list
       (common-lisp:cons "MessageDeliveryStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-event-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resource-event-configuration-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-resource-event-configuration-response
                    'make-update-resource-event-configuration-response))
 (common-lisp:defun make-update-resource-event-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-resource-event-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-event-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-event-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-event-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-resource-position-request common-lisp:nil
                       ((geo-json-payload :initarg :geo-json-payload :type
                         (common-lisp:or geo-json-payload common-lisp:null)
                         :accessor
                         %update-resource-position-request-geo-json-payload
                         :initform common-lisp:nil)
                        (resource-type :initarg :resource-type :type
                         (common-lisp:or position-resource-type
                                         common-lisp:null)
                         :accessor
                         %update-resource-position-request-resource-type
                         :initform
                         (common-lisp:error ":resource-type is required"))
                        (resource-identifier :initarg :resource-identifier
                         :type
                         (common-lisp:or position-resource-identifier
                                         common-lisp:null)
                         :accessor
                         %update-resource-position-request-resource-identifier
                         :initform
                         (common-lisp:error
                          ":resource-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'update-resource-position-request
                    'make-update-resource-position-request))
 (common-lisp:defun make-update-resource-position-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key geo-json-payload resource-type
                     resource-identifier)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-resource-position-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-position-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-position-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'geo-json-payload))
      (common-lisp:list
       (common-lisp:cons "GeoJsonPayload"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-position-request))
   (com.inuoe.jzon:stringify
    (common-lisp:slot-value aws-sdk/generator/shape::input 'geo-json-payload))))
(common-lisp:progn
 (common-lisp:defclass update-resource-position-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-resource-position-response
                    'make-update-resource-position-response))
 (common-lisp:defun make-update-resource-position-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-resource-position-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-position-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-position-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-resource-position-response))
   common-lisp:nil))
(common-lisp:deftype update-signature () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass update-wireless-device-import-task-request
                       common-lisp:nil
                       ((sidewalk :initarg :sidewalk :type
                         (common-lisp:or sidewalk-update-import-info
                                         common-lisp:null)
                         :accessor
                         %update-wireless-device-import-task-request-sidewalk
                         :initform (common-lisp:error ":sidewalk is required"))
                        (id :initarg :id :type
                         (common-lisp:or import-task-id common-lisp:null)
                         :accessor
                         %update-wireless-device-import-task-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-wireless-device-import-task-request
                    'make-update-wireless-device-import-task-request))
 (common-lisp:defun make-update-wireless-device-import-task-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sidewalk id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-wireless-device-import-task-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-wireless-device-import-task-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-wireless-device-import-task-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sidewalk))
      (common-lisp:list
       (common-lisp:cons "Sidewalk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-wireless-device-import-task-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-wireless-device-import-task-response
                       common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-wireless-device-import-task-response
                    'make-update-wireless-device-import-task-response))
 (common-lisp:defun make-update-wireless-device-import-task-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-wireless-device-import-task-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-wireless-device-import-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-wireless-device-import-task-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-wireless-device-import-task-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-wireless-device-request common-lisp:nil
                       ((positioning :initarg :positioning :type
                         (common-lisp:or positioning-config-status
                                         common-lisp:null)
                         :accessor %update-wireless-device-request-positioning
                         :initform common-lisp:nil)
                        (lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or lo-ra-wanupdate-device
                                         common-lisp:null)
                         :accessor %update-wireless-device-request-lo-ra-wan
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-wireless-device-request-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or wireless-device-name common-lisp:null)
                         :accessor %update-wireless-device-request-name
                         :initform common-lisp:nil)
                        (destination-name :initarg :destination-name :type
                         (common-lisp:or destination-name common-lisp:null)
                         :accessor
                         %update-wireless-device-request-destination-name
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or wireless-device-id common-lisp:null)
                         :accessor %update-wireless-device-request-id :initform
                         (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-wireless-device-request
                    'make-update-wireless-device-request))
 (common-lisp:defun make-update-wireless-device-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key positioning lo-ra-wan description name
                     destination-name id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-wireless-device-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-wireless-device-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-wireless-device-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-name))
      (common-lisp:list
       (common-lisp:cons "DestinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'positioning))
      (common-lisp:list
       (common-lisp:cons "Positioning"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-wireless-device-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-wireless-device-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-wireless-device-response
                    'make-update-wireless-device-response))
 (common-lisp:defun make-update-wireless-device-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-wireless-device-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-wireless-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-wireless-device-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-wireless-device-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-wireless-gateway-request common-lisp:nil
                       ((max-eirp :initarg :max-eirp :type
                         (common-lisp:or gateway-max-eirp common-lisp:null)
                         :accessor %update-wireless-gateway-request-max-eirp
                         :initform common-lisp:nil)
                        (net-id-filters :initarg :net-id-filters :type
                         (common-lisp:or net-id-filters common-lisp:null)
                         :accessor
                         %update-wireless-gateway-request-net-id-filters
                         :initform common-lisp:nil)
                        (join-eui-filters :initarg :join-eui-filters :type
                         (common-lisp:or join-eui-filters common-lisp:null)
                         :accessor
                         %update-wireless-gateway-request-join-eui-filters
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %update-wireless-gateway-request-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or wireless-gateway-name
                                         common-lisp:null)
                         :accessor %update-wireless-gateway-request-name
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or wireless-gateway-id common-lisp:null)
                         :accessor %update-wireless-gateway-request-id
                         :initform (common-lisp:error ":id is required"))))
 (common-lisp:export
  (common-lisp:list 'update-wireless-gateway-request
                    'make-update-wireless-gateway-request))
 (common-lisp:defun make-update-wireless-gateway-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-eirp net-id-filters join-eui-filters
                     description name id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-wireless-gateway-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-wireless-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-wireless-gateway-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'join-eui-filters))
      (common-lisp:list
       (common-lisp:cons "JoinEuiFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'net-id-filters))
      (common-lisp:list
       (common-lisp:cons "NetIdFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-eirp))
      (common-lisp:list
       (common-lisp:cons "MaxEirp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-wireless-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-wireless-gateway-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-wireless-gateway-response
                    'make-update-wireless-gateway-response))
 (common-lisp:defun make-update-wireless-gateway-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-wireless-gateway-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-wireless-gateway-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-wireless-gateway-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-wireless-gateway-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-wireless-gateway-task-create common-lisp:nil
                       ((lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or lo-ra-wanupdate-gateway-task-create
                                         common-lisp:null)
                         :accessor
                         %update-wireless-gateway-task-create-lo-ra-wan
                         :initform common-lisp:nil)
                        (update-data-role :initarg :update-data-role :type
                         (common-lisp:or update-data-source common-lisp:null)
                         :accessor
                         %update-wireless-gateway-task-create-update-data-role
                         :initform common-lisp:nil)
                        (update-data-source :initarg :update-data-source :type
                         (common-lisp:or update-data-source common-lisp:null)
                         :accessor
                         %update-wireless-gateway-task-create-update-data-source
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-wireless-gateway-task-create
                    'make-update-wireless-gateway-task-create))
 (common-lisp:defun make-update-wireless-gateway-task-create
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key lo-ra-wan update-data-role
                     update-data-source)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-wireless-gateway-task-create
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-wireless-gateway-task-create))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-wireless-gateway-task-create))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-data-source))
      (common-lisp:list
       (common-lisp:cons "UpdateDataSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-data-role))
      (common-lisp:list
       (common-lisp:cons "UpdateDataRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-wireless-gateway-task-create))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-wireless-gateway-task-entry common-lisp:nil
                       ((arn :initarg :arn :type
                         (common-lisp:or wireless-gateway-task-definition-arn
                                         common-lisp:null)
                         :accessor %update-wireless-gateway-task-entry-arn
                         :initform common-lisp:nil)
                        (lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or lo-ra-wanupdate-gateway-task-entry
                                         common-lisp:null)
                         :accessor
                         %update-wireless-gateway-task-entry-lo-ra-wan
                         :initform common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or wireless-gateway-task-definition-id
                                         common-lisp:null)
                         :accessor %update-wireless-gateway-task-entry-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-wireless-gateway-task-entry
                    'make-update-wireless-gateway-task-entry))
 (common-lisp:defun make-update-wireless-gateway-task-entry
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key arn lo-ra-wan id)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-wireless-gateway-task-entry
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-wireless-gateway-task-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-wireless-gateway-task-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-wireless-gateway-task-entry))
   common-lisp:nil))
(common-lisp:deftype use2dsolver () 'common-lisp:boolean)
(common-lisp:deftype utran-cid () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (iotwireless-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype vertical-accuracy () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:deftype wcdma-list () '(trivial-types:proper-list wcdma-obj))
 (common-lisp:defun |make-wcdma-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list wcdma-obj))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass wcdma-local-id common-lisp:nil
                       ((psc :initarg :psc :type
                         (common-lisp:or psc common-lisp:null) :accessor
                         %wcdma-local-id-psc :initform
                         (common-lisp:error ":psc is required"))
                        (uarfcndl :initarg :uarfcndl :type
                         (common-lisp:or uarfcndl common-lisp:null) :accessor
                         %wcdma-local-id-uarfcndl :initform
                         (common-lisp:error ":uarfcndl is required"))))
 (common-lisp:export (common-lisp:list 'wcdma-local-id 'make-wcdma-local-id))
 (common-lisp:defun make-wcdma-local-id
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key psc uarfcndl)
   (common-lisp:apply #'common-lisp:make-instance 'wcdma-local-id
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input wcdma-local-id))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input wcdma-local-id))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uarfcndl))
      (common-lisp:list
       (common-lisp:cons "Uarfcndl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'psc))
      (common-lisp:list
       (common-lisp:cons "Psc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input wcdma-local-id))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype wcdma-nmr-list ()
   '(trivial-types:proper-list wcdma-nmr-obj))
 (common-lisp:defun |make-wcdma-nmr-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list wcdma-nmr-obj))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass wcdma-nmr-obj common-lisp:nil
                       ((path-loss :initarg :path-loss :type
                         (common-lisp:or path-loss common-lisp:null) :accessor
                         %wcdma-nmr-obj-path-loss :initform common-lisp:nil)
                        (rscp :initarg :rscp :type
                         (common-lisp:or rscp common-lisp:null) :accessor
                         %wcdma-nmr-obj-rscp :initform common-lisp:nil)
                        (utran-cid :initarg :utran-cid :type
                         (common-lisp:or utran-cid common-lisp:null) :accessor
                         %wcdma-nmr-obj-utran-cid :initform
                         (common-lisp:error ":utran-cid is required"))
                        (psc :initarg :psc :type
                         (common-lisp:or psc common-lisp:null) :accessor
                         %wcdma-nmr-obj-psc :initform
                         (common-lisp:error ":psc is required"))
                        (uarfcndl :initarg :uarfcndl :type
                         (common-lisp:or uarfcndl common-lisp:null) :accessor
                         %wcdma-nmr-obj-uarfcndl :initform
                         (common-lisp:error ":uarfcndl is required"))))
 (common-lisp:export (common-lisp:list 'wcdma-nmr-obj 'make-wcdma-nmr-obj))
 (common-lisp:defun make-wcdma-nmr-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key path-loss rscp utran-cid psc uarfcndl)
   (common-lisp:apply #'common-lisp:make-instance 'wcdma-nmr-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input wcdma-nmr-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input wcdma-nmr-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'uarfcndl))
      (common-lisp:list
       (common-lisp:cons "Uarfcndl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'psc))
      (common-lisp:list
       (common-lisp:cons "Psc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'utran-cid))
      (common-lisp:list
       (common-lisp:cons "UtranCid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rscp))
      (common-lisp:list
       (common-lisp:cons "Rscp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-loss))
      (common-lisp:list
       (common-lisp:cons "PathLoss"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input wcdma-nmr-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass wcdma-obj common-lisp:nil
                       ((wcdma-nmr :initarg :wcdma-nmr :type
                         (common-lisp:or wcdma-nmr-list common-lisp:null)
                         :accessor %wcdma-obj-wcdma-nmr :initform
                         common-lisp:nil)
                        (path-loss :initarg :path-loss :type
                         (common-lisp:or path-loss common-lisp:null) :accessor
                         %wcdma-obj-path-loss :initform common-lisp:nil)
                        (rscp :initarg :rscp :type
                         (common-lisp:or rscp common-lisp:null) :accessor
                         %wcdma-obj-rscp :initform common-lisp:nil)
                        (wcdma-local-id :initarg :wcdma-local-id :type
                         (common-lisp:or wcdma-local-id common-lisp:null)
                         :accessor %wcdma-obj-wcdma-local-id :initform
                         common-lisp:nil)
                        (utran-cid :initarg :utran-cid :type
                         (common-lisp:or utran-cid common-lisp:null) :accessor
                         %wcdma-obj-utran-cid :initform
                         (common-lisp:error ":utran-cid is required"))
                        (lac :initarg :lac :type
                         (common-lisp:or lac common-lisp:null) :accessor
                         %wcdma-obj-lac :initform common-lisp:nil)
                        (mnc :initarg :mnc :type
                         (common-lisp:or mnc common-lisp:null) :accessor
                         %wcdma-obj-mnc :initform
                         (common-lisp:error ":mnc is required"))
                        (mcc :initarg :mcc :type
                         (common-lisp:or mcc common-lisp:null) :accessor
                         %wcdma-obj-mcc :initform
                         (common-lisp:error ":mcc is required"))))
 (common-lisp:export (common-lisp:list 'wcdma-obj 'make-wcdma-obj))
 (common-lisp:defun make-wcdma-obj
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key wcdma-nmr path-loss rscp wcdma-local-id
                     utran-cid lac mnc mcc)
   (common-lisp:apply #'common-lisp:make-instance 'wcdma-obj
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input wcdma-obj))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input wcdma-obj))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mcc))
      (common-lisp:list
       (common-lisp:cons "Mcc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mnc))
      (common-lisp:list
       (common-lisp:cons "Mnc"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lac))
      (common-lisp:list
       (common-lisp:cons "Lac"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'utran-cid))
      (common-lisp:list
       (common-lisp:cons "UtranCid"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wcdma-local-id))
      (common-lisp:list
       (common-lisp:cons "WcdmaLocalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rscp))
      (common-lisp:list
       (common-lisp:cons "Rscp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-loss))
      (common-lisp:list
       (common-lisp:cons "PathLoss"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wcdma-nmr))
      (common-lisp:list
       (common-lisp:cons "WcdmaNmr"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input wcdma-obj))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass wi-fi-access-point common-lisp:nil
                       ((rss :initarg :rss :type
                         (common-lisp:or rss common-lisp:null) :accessor
                         %wi-fi-access-point-rss :initform
                         (common-lisp:error ":rss is required"))
                        (mac-address :initarg :mac-address :type
                         (common-lisp:or mac-address common-lisp:null)
                         :accessor %wi-fi-access-point-mac-address :initform
                         (common-lisp:error ":mac-address is required"))))
 (common-lisp:export
  (common-lisp:list 'wi-fi-access-point 'make-wi-fi-access-point))
 (common-lisp:defun make-wi-fi-access-point
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key rss mac-address)
   (common-lisp:apply #'common-lisp:make-instance 'wi-fi-access-point
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input wi-fi-access-point))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input wi-fi-access-point))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-address))
      (common-lisp:list
       (common-lisp:cons "MacAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rss))
      (common-lisp:list
       (common-lisp:cons "Rss"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input wi-fi-access-point))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype wi-fi-access-points ()
   '(trivial-types:proper-list wi-fi-access-point))
 (common-lisp:defun |make-wi-fi-access-points|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list wi-fi-access-point))
   aws-sdk/generator/shape::members))
(common-lisp:deftype wireless-device-arn () 'common-lisp:string)
(common-lisp:deftype wireless-device-event () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass wireless-device-event-log-option common-lisp:nil
                       ((log-level :initarg :log-level :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         %wireless-device-event-log-option-log-level :initform
                         (common-lisp:error ":log-level is required"))
                        (event :initarg :event :type
                         (common-lisp:or wireless-device-event
                                         common-lisp:null)
                         :accessor %wireless-device-event-log-option-event
                         :initform (common-lisp:error ":event is required"))))
 (common-lisp:export
  (common-lisp:list 'wireless-device-event-log-option
                    'make-wireless-device-event-log-option))
 (common-lisp:defun make-wireless-device-event-log-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-level event)
   (common-lisp:apply #'common-lisp:make-instance
                      'wireless-device-event-log-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          wireless-device-event-log-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          wireless-device-event-log-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "Event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          wireless-device-event-log-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype wireless-device-event-log-option-list ()
   '(trivial-types:proper-list wireless-device-event-log-option))
 (common-lisp:defun |make-wireless-device-event-log-option-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            wireless-device-event-log-option))
   aws-sdk/generator/shape::members))
(common-lisp:deftype wireless-device-frame-info () 'common-lisp:string)
(common-lisp:deftype wireless-device-id () 'common-lisp:string)
(common-lisp:deftype wireless-device-id-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass wireless-device-import-task common-lisp:nil
                       ((failed-imported-device-count :initarg
                         :failed-imported-device-count :type
                         (common-lisp:or imported-wireless-device-count
                                         common-lisp:null)
                         :accessor
                         %wireless-device-import-task-failed-imported-device-count
                         :initform common-lisp:nil)
                        (onboarded-imported-device-count :initarg
                         :onboarded-imported-device-count :type
                         (common-lisp:or imported-wireless-device-count
                                         common-lisp:null)
                         :accessor
                         %wireless-device-import-task-onboarded-imported-device-count
                         :initform common-lisp:nil)
                        (pending-imported-device-count :initarg
                         :pending-imported-device-count :type
                         (common-lisp:or imported-wireless-device-count
                                         common-lisp:null)
                         :accessor
                         %wireless-device-import-task-pending-imported-device-count
                         :initform common-lisp:nil)
                        (initialized-imported-device-count :initarg
                         :initialized-imported-device-count :type
                         (common-lisp:or imported-wireless-device-count
                                         common-lisp:null)
                         :accessor
                         %wireless-device-import-task-initialized-imported-device-count
                         :initform common-lisp:nil)
                        (status-reason :initarg :status-reason :type
                         (common-lisp:or status-reason common-lisp:null)
                         :accessor %wireless-device-import-task-status-reason
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or import-task-status common-lisp:null)
                         :accessor %wireless-device-import-task-status
                         :initform common-lisp:nil)
                        (creation-time :initarg :creation-time :type
                         (common-lisp:or creation-time common-lisp:null)
                         :accessor %wireless-device-import-task-creation-time
                         :initform common-lisp:nil)
                        (sidewalk :initarg :sidewalk :type
                         (common-lisp:or sidewalk-get-start-import-info
                                         common-lisp:null)
                         :accessor %wireless-device-import-task-sidewalk
                         :initform common-lisp:nil)
                        (destination-name :initarg :destination-name :type
                         (common-lisp:or destination-name common-lisp:null)
                         :accessor
                         %wireless-device-import-task-destination-name
                         :initform common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or import-task-arn common-lisp:null)
                         :accessor %wireless-device-import-task-arn :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or import-task-id common-lisp:null)
                         :accessor %wireless-device-import-task-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'wireless-device-import-task
                    'make-wireless-device-import-task))
 (common-lisp:defun make-wireless-device-import-task
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failed-imported-device-count
                     onboarded-imported-device-count
                     pending-imported-device-count
                     initialized-imported-device-count status-reason status
                     creation-time sidewalk destination-name arn id)
   (common-lisp:apply #'common-lisp:make-instance 'wireless-device-import-task
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          wireless-device-import-task))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          wireless-device-import-task))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-name))
      (common-lisp:list
       (common-lisp:cons "DestinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sidewalk))
      (common-lisp:list
       (common-lisp:cons "Sidewalk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status-reason))
      (common-lisp:list
       (common-lisp:cons "StatusReason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initialized-imported-device-count))
      (common-lisp:list
       (common-lisp:cons "InitializedImportedDeviceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pending-imported-device-count))
      (common-lisp:list
       (common-lisp:cons "PendingImportedDeviceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'onboarded-imported-device-count))
      (common-lisp:list
       (common-lisp:cons "OnboardedImportedDeviceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'failed-imported-device-count))
      (common-lisp:list
       (common-lisp:cons "FailedImportedDeviceCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          wireless-device-import-task))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype wireless-device-import-task-list ()
   '(trivial-types:proper-list wireless-device-import-task))
 (common-lisp:defun |make-wireless-device-import-task-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            wireless-device-import-task))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype wireless-device-list ()
   '(trivial-types:proper-list wireless-device-id))
 (common-lisp:defun |make-wireless-device-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list wireless-device-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass wireless-device-log-option common-lisp:nil
                       ((events :initarg :events :type
                         (common-lisp:or wireless-device-event-log-option-list
                                         common-lisp:null)
                         :accessor %wireless-device-log-option-events :initform
                         common-lisp:nil)
                        (log-level :initarg :log-level :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         %wireless-device-log-option-log-level :initform
                         (common-lisp:error ":log-level is required"))
                        (type :initarg :type :type
                         (common-lisp:or wireless-device-type common-lisp:null)
                         :accessor %wireless-device-log-option-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export
  (common-lisp:list 'wireless-device-log-option
                    'make-wireless-device-log-option))
 (common-lisp:defun make-wireless-device-log-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key events log-level type)
   (common-lisp:apply #'common-lisp:make-instance 'wireless-device-log-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          wireless-device-log-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          wireless-device-log-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          wireless-device-log-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype wireless-device-log-option-list ()
   '(trivial-types:proper-list wireless-device-log-option))
 (common-lisp:defun |make-wireless-device-log-option-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            wireless-device-log-option))
   aws-sdk/generator/shape::members))
(common-lisp:deftype wireless-device-name () 'common-lisp:string)
(common-lisp:deftype wireless-device-sidewalk-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass wireless-device-statistics common-lisp:nil
                       ((mc-group-id :initarg :mc-group-id :type
                         (common-lisp:or mc-group-id common-lisp:null)
                         :accessor %wireless-device-statistics-mc-group-id
                         :initform common-lisp:nil)
                        (multicast-device-status :initarg
                         :multicast-device-status :type
                         (common-lisp:or multicast-device-status
                                         common-lisp:null)
                         :accessor
                         %wireless-device-statistics-multicast-device-status
                         :initform common-lisp:nil)
                        (fuota-device-status :initarg :fuota-device-status
                         :type
                         (common-lisp:or fuota-device-status common-lisp:null)
                         :accessor
                         %wireless-device-statistics-fuota-device-status
                         :initform common-lisp:nil)
                        (sidewalk :initarg :sidewalk :type
                         (common-lisp:or sidewalk-list-device common-lisp:null)
                         :accessor %wireless-device-statistics-sidewalk
                         :initform common-lisp:nil)
                        (lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or lo-ra-wanlist-device common-lisp:null)
                         :accessor %wireless-device-statistics-lo-ra-wan
                         :initform common-lisp:nil)
                        (last-uplink-received-at :initarg
                         :last-uplink-received-at :type
                         (common-lisp:or isodate-time-string common-lisp:null)
                         :accessor
                         %wireless-device-statistics-last-uplink-received-at
                         :initform common-lisp:nil)
                        (destination-name :initarg :destination-name :type
                         (common-lisp:or destination-name common-lisp:null)
                         :accessor %wireless-device-statistics-destination-name
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or wireless-device-name common-lisp:null)
                         :accessor %wireless-device-statistics-name :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or wireless-device-type common-lisp:null)
                         :accessor %wireless-device-statistics-type :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or wireless-device-id common-lisp:null)
                         :accessor %wireless-device-statistics-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or wireless-device-arn common-lisp:null)
                         :accessor %wireless-device-statistics-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'wireless-device-statistics
                    'make-wireless-device-statistics))
 (common-lisp:defun make-wireless-device-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key mc-group-id multicast-device-status
                     fuota-device-status sidewalk lo-ra-wan
                     last-uplink-received-at destination-name name type id arn)
   (common-lisp:apply #'common-lisp:make-instance 'wireless-device-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          wireless-device-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          wireless-device-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-name))
      (common-lisp:list
       (common-lisp:cons "DestinationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-uplink-received-at))
      (common-lisp:list
       (common-lisp:cons "LastUplinkReceivedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sidewalk))
      (common-lisp:list
       (common-lisp:cons "Sidewalk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fuota-device-status))
      (common-lisp:list
       (common-lisp:cons "FuotaDeviceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'multicast-device-status))
      (common-lisp:list
       (common-lisp:cons "MulticastDeviceStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mc-group-id))
      (common-lisp:list
       (common-lisp:cons "McGroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          wireless-device-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype wireless-device-statistics-list ()
   '(trivial-types:proper-list wireless-device-statistics))
 (common-lisp:defun |make-wireless-device-statistics-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            wireless-device-statistics))
   aws-sdk/generator/shape::members))
(common-lisp:deftype wireless-device-type () 'common-lisp:string)
(common-lisp:deftype wireless-gateway-arn () 'common-lisp:string)
(common-lisp:deftype wireless-gateway-event () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass wireless-gateway-event-log-option common-lisp:nil
                       ((log-level :initarg :log-level :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         %wireless-gateway-event-log-option-log-level :initform
                         (common-lisp:error ":log-level is required"))
                        (event :initarg :event :type
                         (common-lisp:or wireless-gateway-event
                                         common-lisp:null)
                         :accessor %wireless-gateway-event-log-option-event
                         :initform (common-lisp:error ":event is required"))))
 (common-lisp:export
  (common-lisp:list 'wireless-gateway-event-log-option
                    'make-wireless-gateway-event-log-option))
 (common-lisp:defun make-wireless-gateway-event-log-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key log-level event)
   (common-lisp:apply #'common-lisp:make-instance
                      'wireless-gateway-event-log-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          wireless-gateway-event-log-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          wireless-gateway-event-log-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event))
      (common-lisp:list
       (common-lisp:cons "Event"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          wireless-gateway-event-log-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype wireless-gateway-event-log-option-list ()
   '(trivial-types:proper-list wireless-gateway-event-log-option))
 (common-lisp:defun |make-wireless-gateway-event-log-option-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            wireless-gateway-event-log-option))
   aws-sdk/generator/shape::members))
(common-lisp:deftype wireless-gateway-id () 'common-lisp:string)
(common-lisp:deftype wireless-gateway-id-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype wireless-gateway-list ()
   '(trivial-types:proper-list wireless-gateway-id))
 (common-lisp:defun |make-wireless-gateway-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list wireless-gateway-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass wireless-gateway-log-option common-lisp:nil
                       ((events :initarg :events :type
                         (common-lisp:or wireless-gateway-event-log-option-list
                                         common-lisp:null)
                         :accessor %wireless-gateway-log-option-events
                         :initform common-lisp:nil)
                        (log-level :initarg :log-level :type
                         (common-lisp:or log-level common-lisp:null) :accessor
                         %wireless-gateway-log-option-log-level :initform
                         (common-lisp:error ":log-level is required"))
                        (type :initarg :type :type
                         (common-lisp:or wireless-gateway-type
                                         common-lisp:null)
                         :accessor %wireless-gateway-log-option-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export
  (common-lisp:list 'wireless-gateway-log-option
                    'make-wireless-gateway-log-option))
 (common-lisp:defun make-wireless-gateway-log-option
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key events log-level type)
   (common-lisp:apply #'common-lisp:make-instance 'wireless-gateway-log-option
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          wireless-gateway-log-option))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          wireless-gateway-log-option))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'log-level))
      (common-lisp:list
       (common-lisp:cons "LogLevel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          wireless-gateway-log-option))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype wireless-gateway-log-option-list ()
   '(trivial-types:proper-list wireless-gateway-log-option))
 (common-lisp:defun |make-wireless-gateway-log-option-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            wireless-gateway-log-option))
   aws-sdk/generator/shape::members))
(common-lisp:deftype wireless-gateway-name () 'common-lisp:string)
(common-lisp:deftype wireless-gateway-service-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass wireless-gateway-statistics common-lisp:nil
                       ((last-uplink-received-at :initarg
                         :last-uplink-received-at :type
                         (common-lisp:or isodate-time-string common-lisp:null)
                         :accessor
                         %wireless-gateway-statistics-last-uplink-received-at
                         :initform common-lisp:nil)
                        (lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or lo-ra-wangateway common-lisp:null)
                         :accessor %wireless-gateway-statistics-lo-ra-wan
                         :initform common-lisp:nil)
                        (description :initarg :description :type
                         (common-lisp:or description common-lisp:null)
                         :accessor %wireless-gateway-statistics-description
                         :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or wireless-gateway-name
                                         common-lisp:null)
                         :accessor %wireless-gateway-statistics-name :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or wireless-gateway-id common-lisp:null)
                         :accessor %wireless-gateway-statistics-id :initform
                         common-lisp:nil)
                        (arn :initarg :arn :type
                         (common-lisp:or wireless-gateway-arn common-lisp:null)
                         :accessor %wireless-gateway-statistics-arn :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'wireless-gateway-statistics
                    'make-wireless-gateway-statistics))
 (common-lisp:defun make-wireless-gateway-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key last-uplink-received-at lo-ra-wan
                     description name id arn)
   (common-lisp:apply #'common-lisp:make-instance 'wireless-gateway-statistics
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          wireless-gateway-statistics))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          wireless-gateway-statistics))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-uplink-received-at))
      (common-lisp:list
       (common-lisp:cons "LastUplinkReceivedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          wireless-gateway-statistics))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype wireless-gateway-statistics-list ()
   '(trivial-types:proper-list wireless-gateway-statistics))
 (common-lisp:defun |make-wireless-gateway-statistics-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            wireless-gateway-statistics))
   aws-sdk/generator/shape::members))
(common-lisp:deftype wireless-gateway-task-definition-arn ()
  'common-lisp:string)
(common-lisp:deftype wireless-gateway-task-definition-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype wireless-gateway-task-definition-list ()
   '(trivial-types:proper-list update-wireless-gateway-task-entry))
 (common-lisp:defun |make-wireless-gateway-task-definition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            update-wireless-gateway-task-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype wireless-gateway-task-definition-type ()
  'common-lisp:string)
(common-lisp:deftype wireless-gateway-task-name () 'common-lisp:string)
(common-lisp:deftype wireless-gateway-task-status () 'common-lisp:string)
(common-lisp:deftype wireless-gateway-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass wireless-metadata common-lisp:nil
                       ((sidewalk :initarg :sidewalk :type
                         (common-lisp:or sidewalk-send-data-to-device
                                         common-lisp:null)
                         :accessor %wireless-metadata-sidewalk :initform
                         common-lisp:nil)
                        (lo-ra-wan :initarg :lo-ra-wan :type
                         (common-lisp:or lo-ra-wansend-data-to-device
                                         common-lisp:null)
                         :accessor %wireless-metadata-lo-ra-wan :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'wireless-metadata 'make-wireless-metadata))
 (common-lisp:defun make-wireless-metadata
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sidewalk lo-ra-wan)
   (common-lisp:apply #'common-lisp:make-instance 'wireless-metadata
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input wireless-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input wireless-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'lo-ra-wan))
      (common-lisp:list
       (common-lisp:cons "LoRaWAN"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sidewalk))
      (common-lisp:list
       (common-lisp:cons "Sidewalk"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input wireless-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun associate-aws-account-with-partner-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sidewalk client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable sidewalk client-request-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-aws-account-with-partner-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/partner-accounts"
                                                        "AssociateAwsAccountWithPartnerAccount"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-aws-account-with-partner-account))
(common-lisp:progn
 (common-lisp:defun associate-multicast-group-with-fuota-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id multicast-group-id)
   (common-lisp:declare (common-lisp:ignorable id multicast-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-multicast-group-with-fuota-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/fuota-tasks/~A/multicast-group"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "AssociateMulticastGroupWithFuotaTask"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-multicast-group-with-fuota-task))
(common-lisp:progn
 (common-lisp:defun associate-wireless-device-with-fuota-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id wireless-device-id)
   (common-lisp:declare (common-lisp:ignorable id wireless-device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-wireless-device-with-fuota-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/fuota-tasks/~A/wireless-device"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "AssociateWirelessDeviceWithFuotaTask"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-wireless-device-with-fuota-task))
(common-lisp:progn
 (common-lisp:defun associate-wireless-device-with-multicast-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id wireless-device-id)
   (common-lisp:declare (common-lisp:ignorable id wireless-device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-wireless-device-with-multicast-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/multicast-groups/~A/wireless-device"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "AssociateWirelessDeviceWithMulticastGroup"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-wireless-device-with-multicast-group))
(common-lisp:progn
 (common-lisp:defun associate-wireless-device-with-thing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id thing-arn)
   (common-lisp:declare (common-lisp:ignorable id thing-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-wireless-device-with-thing-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/wireless-devices/~A/thing"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "AssociateWirelessDeviceWithThing"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-wireless-device-with-thing))
(common-lisp:progn
 (common-lisp:defun associate-wireless-gateway-with-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id iot-certificate-id)
   (common-lisp:declare (common-lisp:ignorable id iot-certificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-wireless-gateway-with-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/wireless-gateways/~A/certificate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "AssociateWirelessGatewayWithCertificate"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-wireless-gateway-with-certificate))
(common-lisp:progn
 (common-lisp:defun associate-wireless-gateway-with-thing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id thing-arn)
   (common-lisp:declare (common-lisp:ignorable id thing-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-wireless-gateway-with-thing-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/wireless-gateways/~A/thing"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "AssociateWirelessGatewayWithThing"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-wireless-gateway-with-thing))
(common-lisp:progn
 (common-lisp:defun cancel-multicast-group-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-multicast-group-session-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/multicast-groups/~A/session"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "CancelMulticastGroupSession"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-multicast-group-session))
(common-lisp:progn
 (common-lisp:defun create-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name expression-type expression
                     description role-arn tags client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable name expression-type expression description role-arn
     tags client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-destination-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/destinations"
                                                        "CreateDestination"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-destination))
(common-lisp:progn
 (common-lisp:defun create-device-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name lo-ra-wan tags client-request-token
                     sidewalk)
   (common-lisp:declare
    (common-lisp:ignorable name lo-ra-wan tags client-request-token sidewalk))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-device-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/device-profiles"
                                                        "CreateDeviceProfile"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-device-profile))
(common-lisp:progn
 (common-lisp:defun create-fuota-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description client-request-token
                     lo-ra-wan firmware-update-image firmware-update-role tags
                     redundancy-percent fragment-size-bytes
                     fragment-interval-ms)
   (common-lisp:declare
    (common-lisp:ignorable name description client-request-token lo-ra-wan
     firmware-update-image firmware-update-role tags redundancy-percent
     fragment-size-bytes fragment-interval-ms))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-fuota-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/fuota-tasks"
                                                        "CreateFuotaTask"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-fuota-task))
(common-lisp:progn
 (common-lisp:defun create-multicast-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description client-request-token
                     lo-ra-wan tags)
   (common-lisp:declare
    (common-lisp:ignorable name description client-request-token lo-ra-wan
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-multicast-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/multicast-groups"
                                                        "CreateMulticastGroup"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-multicast-group))
(common-lisp:progn
 (common-lisp:defun create-network-analyzer-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name trace-content wireless-devices
                     wireless-gateways description tags client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable name trace-content wireless-devices
     wireless-gateways description tags client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-network-analyzer-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/network-analyzer-configurations"
                                                        "CreateNetworkAnalyzerConfiguration"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-network-analyzer-configuration))
(common-lisp:progn
 (common-lisp:defun create-service-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name lo-ra-wan tags client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable name lo-ra-wan tags client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-service-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/service-profiles"
                                                        "CreateServiceProfile"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-service-profile))
(common-lisp:progn
 (common-lisp:defun create-wireless-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key type name description destination-name
                     client-request-token lo-ra-wan tags positioning sidewalk)
   (common-lisp:declare
    (common-lisp:ignorable type name description destination-name
     client-request-token lo-ra-wan tags positioning sidewalk))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-wireless-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/wireless-devices"
                                                        "CreateWirelessDevice"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-wireless-device))
(common-lisp:progn
 (common-lisp:defun create-wireless-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description lo-ra-wan tags
                     client-request-token)
   (common-lisp:declare
    (common-lisp:ignorable name description lo-ra-wan tags
     client-request-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-wireless-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/wireless-gateways"
                                                        "CreateWirelessGateway"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-wireless-gateway))
(common-lisp:progn
 (common-lisp:defun create-wireless-gateway-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id wireless-gateway-task-definition-id)
   (common-lisp:declare
    (common-lisp:ignorable id wireless-gateway-task-definition-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-wireless-gateway-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/wireless-gateways/~A/tasks"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "CreateWirelessGatewayTask"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-wireless-gateway-task))
(common-lisp:progn
 (common-lisp:defun create-wireless-gateway-task-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-create-tasks name update
                     client-request-token tags)
   (common-lisp:declare
    (common-lisp:ignorable auto-create-tasks name update client-request-token
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-wireless-gateway-task-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/wireless-gateway-task-definitions"
                                                        "CreateWirelessGatewayTaskDefinition"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-wireless-gateway-task-definition))
(common-lisp:progn
 (common-lisp:defun delete-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-destination-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/destinations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteDestination"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-destination))
(common-lisp:progn
 (common-lisp:defun delete-device-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-device-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/device-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteDeviceProfile"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-device-profile))
(common-lisp:progn
 (common-lisp:defun delete-fuota-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-fuota-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/fuota-tasks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteFuotaTask"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-fuota-task))
(common-lisp:progn
 (common-lisp:defun delete-multicast-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-multicast-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/multicast-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteMulticastGroup"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-multicast-group))
(common-lisp:progn
 (common-lisp:defun delete-network-analyzer-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-name)
   (common-lisp:declare (common-lisp:ignorable configuration-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-network-analyzer-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/network-analyzer-configurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configuration-name))))
                                                        "DeleteNetworkAnalyzerConfiguration"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-network-analyzer-configuration))
(common-lisp:progn
 (common-lisp:defun delete-queued-messages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id message-id wireless-device-type)
   (common-lisp:declare
    (common-lisp:ignorable id message-id wireless-device-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-queued-messages-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/wireless-devices/~A/data"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteQueuedMessages"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-queued-messages))
(common-lisp:progn
 (common-lisp:defun delete-service-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-service-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/service-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteServiceProfile"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-service-profile))
(common-lisp:progn
 (common-lisp:defun delete-wireless-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-wireless-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/wireless-devices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteWirelessDevice"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-wireless-device))
(common-lisp:progn
 (common-lisp:defun delete-wireless-device-import-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-wireless-device-import-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/wireless_device_import_task/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteWirelessDeviceImportTask"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-wireless-device-import-task))
(common-lisp:progn
 (common-lisp:defun delete-wireless-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-wireless-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/wireless-gateways/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteWirelessGateway"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-wireless-gateway))
(common-lisp:progn
 (common-lisp:defun delete-wireless-gateway-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-wireless-gateway-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/wireless-gateways/~A/tasks"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteWirelessGatewayTask"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-wireless-gateway-task))
(common-lisp:progn
 (common-lisp:defun delete-wireless-gateway-task-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-wireless-gateway-task-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/wireless-gateway-task-definitions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DeleteWirelessGatewayTaskDefinition"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-wireless-gateway-task-definition))
(common-lisp:progn
 (common-lisp:defun deregister-wireless-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identifier wireless-device-type)
   (common-lisp:declare
    (common-lisp:ignorable identifier wireless-device-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-deregister-wireless-device-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/wireless-devices/~A/deregister"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "DeregisterWirelessDevice"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deregister-wireless-device))
(common-lisp:progn
 (common-lisp:defun disassociate-aws-account-from-partner-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key partner-account-id partner-type)
   (common-lisp:declare
    (common-lisp:ignorable partner-account-id partner-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-aws-account-from-partner-account-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/partner-accounts/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'partner-account-id))))
                                                        "DisassociateAwsAccountFromPartnerAccount"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-aws-account-from-partner-account))
(common-lisp:progn
 (common-lisp:defun disassociate-multicast-group-from-fuota-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id multicast-group-id)
   (common-lisp:declare (common-lisp:ignorable id multicast-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-multicast-group-from-fuota-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/fuota-tasks/~A/multicast-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'multicast-group-id))))
                                                        "DisassociateMulticastGroupFromFuotaTask"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-multicast-group-from-fuota-task))
(common-lisp:progn
 (common-lisp:defun disassociate-wireless-device-from-fuota-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id wireless-device-id)
   (common-lisp:declare (common-lisp:ignorable id wireless-device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-wireless-device-from-fuota-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/fuota-tasks/~A/wireless-devices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'wireless-device-id))))
                                                        "DisassociateWirelessDeviceFromFuotaTask"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-wireless-device-from-fuota-task))
(common-lisp:progn
 (common-lisp:defun disassociate-wireless-device-from-multicast-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id wireless-device-id)
   (common-lisp:declare (common-lisp:ignorable id wireless-device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-wireless-device-from-multicast-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/multicast-groups/~A/wireless-devices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'wireless-device-id))))
                                                        "DisassociateWirelessDeviceFromMulticastGroup"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-wireless-device-from-multicast-group))
(common-lisp:progn
 (common-lisp:defun disassociate-wireless-device-from-thing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-wireless-device-from-thing-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/wireless-devices/~A/thing"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DisassociateWirelessDeviceFromThing"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-wireless-device-from-thing))
(common-lisp:progn
 (common-lisp:defun disassociate-wireless-gateway-from-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-wireless-gateway-from-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/wireless-gateways/~A/certificate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DisassociateWirelessGatewayFromCertificate"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-wireless-gateway-from-certificate))
(common-lisp:progn
 (common-lisp:defun disassociate-wireless-gateway-from-thing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-wireless-gateway-from-thing-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/wireless-gateways/~A/thing"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "DisassociateWirelessGatewayFromThing"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-wireless-gateway-from-thing))
(common-lisp:progn
 (common-lisp:defun get-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-destination-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/destinations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetDestination"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-destination))
(common-lisp:progn
 (common-lisp:defun get-device-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-device-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/device-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetDeviceProfile"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-device-profile))
(common-lisp:progn
 (common-lisp:defun get-event-configuration-by-resource-types ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iotwireless-request :method "GET" :path
                                "/event-configurations-resource-types"
                                :protocol :rest-json :operation
                                "GetEventConfigurationByResourceTypes" :params
                                `(("Action"
                                   ,@"GetEventConfigurationByResourceTypes")
                                  ("Version" ,@"2020-11-22"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-event-configuration-by-resource-types))
(common-lisp:progn
 (common-lisp:defun get-fuota-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-fuota-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/fuota-tasks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetFuotaTask"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-fuota-task))
(common-lisp:progn
 (common-lisp:defun get-log-levels-by-resource-types ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iotwireless-request :method "GET" :path
                                "/log-levels" :protocol :rest-json :operation
                                "GetLogLevelsByResourceTypes" :params
                                `(("Action" ,@"GetLogLevelsByResourceTypes")
                                  ("Version" ,@"2020-11-22"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'get-log-levels-by-resource-types))
(common-lisp:progn
 (common-lisp:defun get-multicast-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-multicast-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/multicast-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetMulticastGroup"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-multicast-group))
(common-lisp:progn
 (common-lisp:defun get-multicast-group-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-multicast-group-session-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/multicast-groups/~A/session"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetMulticastGroupSession"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-multicast-group-session))
(common-lisp:progn
 (common-lisp:defun get-network-analyzer-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-name)
   (common-lisp:declare (common-lisp:ignorable configuration-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-network-analyzer-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/network-analyzer-configurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configuration-name))))
                                                        "GetNetworkAnalyzerConfiguration"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-network-analyzer-configuration))
(common-lisp:progn
 (common-lisp:defun get-partner-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key partner-account-id partner-type)
   (common-lisp:declare
    (common-lisp:ignorable partner-account-id partner-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-partner-account-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/partner-accounts/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'partner-account-id))))
                                                        "GetPartnerAccount"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-partner-account))
(common-lisp:progn
 (common-lisp:defun get-position
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-identifier resource-type)
   (common-lisp:declare
    (common-lisp:ignorable resource-identifier resource-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-position-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/positions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-identifier))))
                                                        "GetPosition"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-position))
(common-lisp:progn
 (common-lisp:defun get-position-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-identifier resource-type)
   (common-lisp:declare
    (common-lisp:ignorable resource-identifier resource-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-position-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/position-configurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-identifier))))
                                                        "GetPositionConfiguration"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-position-configuration))
(common-lisp:progn
 (common-lisp:defun get-position-estimate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key wi-fi-access-points cell-towers ip gnss
                     timestamp)
   (common-lisp:declare
    (common-lisp:ignorable wi-fi-access-points cell-towers ip gnss timestamp))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-position-estimate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/position-estimate"
                                                        "GetPositionEstimate"
                                                        "2020-11-22")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-position-estimate))
(common-lisp:progn
 (common-lisp:defun get-resource-event-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identifier identifier-type partner-type)
   (common-lisp:declare
    (common-lisp:ignorable identifier identifier-type partner-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-resource-event-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/event-configurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetResourceEventConfiguration"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resource-event-configuration))
(common-lisp:progn
 (common-lisp:defun get-resource-log-level
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-identifier resource-type)
   (common-lisp:declare
    (common-lisp:ignorable resource-identifier resource-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resource-log-level-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/log-levels/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-identifier))))
                                                        "GetResourceLogLevel"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resource-log-level))
(common-lisp:progn
 (common-lisp:defun get-resource-position
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-identifier resource-type)
   (common-lisp:declare
    (common-lisp:ignorable resource-identifier resource-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resource-position-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/resource-positions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-identifier))))
                                                        "GetResourcePosition"
                                                        "2020-11-22")
       :want-stream common-lisp:t)
      "blob" common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resource-position))
(common-lisp:progn
 (common-lisp:defun get-service-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-type)
   (common-lisp:declare (common-lisp:ignorable service-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-service-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/service-endpoint"
                                                        "GetServiceEndpoint"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-service-endpoint))
(common-lisp:progn
 (common-lisp:defun get-service-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-service-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/service-profiles/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetServiceProfile"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-service-profile))
(common-lisp:progn
 (common-lisp:defun get-wireless-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identifier identifier-type)
   (common-lisp:declare (common-lisp:ignorable identifier identifier-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-wireless-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/wireless-devices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetWirelessDevice"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-wireless-device))
(common-lisp:progn
 (common-lisp:defun get-wireless-device-import-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-wireless-device-import-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/wireless_device_import_task/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetWirelessDeviceImportTask"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-wireless-device-import-task))
(common-lisp:progn
 (common-lisp:defun get-wireless-device-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key wireless-device-id)
   (common-lisp:declare (common-lisp:ignorable wireless-device-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-wireless-device-statistics-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/wireless-devices/~A/statistics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetWirelessDeviceStatistics"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-wireless-device-statistics))
(common-lisp:progn
 (common-lisp:defun get-wireless-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identifier identifier-type)
   (common-lisp:declare (common-lisp:ignorable identifier identifier-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-wireless-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/wireless-gateways/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "GetWirelessGateway"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-wireless-gateway))
(common-lisp:progn
 (common-lisp:defun get-wireless-gateway-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-wireless-gateway-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/wireless-gateways/~A/certificate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetWirelessGatewayCertificate"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-wireless-gateway-certificate))
(common-lisp:progn
 (common-lisp:defun get-wireless-gateway-firmware-information
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-wireless-gateway-firmware-information-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/wireless-gateways/~A/firmware-information"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetWirelessGatewayFirmwareInformation"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-wireless-gateway-firmware-information))
(common-lisp:progn
 (common-lisp:defun get-wireless-gateway-statistics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key wireless-gateway-id)
   (common-lisp:declare (common-lisp:ignorable wireless-gateway-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-wireless-gateway-statistics-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/wireless-gateways/~A/statistics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetWirelessGatewayStatistics"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-wireless-gateway-statistics))
(common-lisp:progn
 (common-lisp:defun get-wireless-gateway-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-wireless-gateway-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/wireless-gateways/~A/tasks"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetWirelessGatewayTask"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-wireless-gateway-task))
(common-lisp:progn
 (common-lisp:defun get-wireless-gateway-task-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-wireless-gateway-task-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/wireless-gateway-task-definitions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "GetWirelessGatewayTaskDefinition"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-wireless-gateway-task-definition))
(common-lisp:progn
 (common-lisp:defun list-destinations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-destinations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/destinations"
                                                        "ListDestinations"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-destinations))
(common-lisp:progn
 (common-lisp:defun list-device-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results
                     device-profile-type)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results device-profile-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-device-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/device-profiles"
                                                        "ListDeviceProfiles"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-device-profiles))
(common-lisp:progn
 (common-lisp:defun list-devices-for-wireless-device-import-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id max-results next-token status)
   (common-lisp:declare
    (common-lisp:ignorable id max-results next-token status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-devices-for-wireless-device-import-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/wireless_device_import_task"
                                                        "ListDevicesForWirelessDeviceImportTask"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-devices-for-wireless-device-import-task))
(common-lisp:progn
 (common-lisp:defun list-event-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-type max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable resource-type max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-event-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/event-configurations"
                                                        "ListEventConfigurations"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-event-configurations))
(common-lisp:progn
 (common-lisp:defun list-fuota-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-fuota-tasks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/fuota-tasks"
                                                        "ListFuotaTasks"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-fuota-tasks))
(common-lisp:progn
 (common-lisp:defun list-multicast-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-multicast-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/multicast-groups"
                                                        "ListMulticastGroups"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-multicast-groups))
(common-lisp:progn
 (common-lisp:defun list-multicast-groups-by-fuota-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id next-token max-results)
   (common-lisp:declare (common-lisp:ignorable id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-multicast-groups-by-fuota-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/fuota-tasks/~A/multicast-groups"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "ListMulticastGroupsByFuotaTask"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-multicast-groups-by-fuota-task))
(common-lisp:progn
 (common-lisp:defun list-network-analyzer-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-network-analyzer-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/network-analyzer-configurations"
                                                        "ListNetworkAnalyzerConfigurations"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-network-analyzer-configurations))
(common-lisp:progn
 (common-lisp:defun list-partner-accounts
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-partner-accounts-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/partner-accounts"
                                                        "ListPartnerAccounts"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-partner-accounts))
(common-lisp:progn
 (common-lisp:defun list-position-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-type max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable resource-type max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-position-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/position-configurations"
                                                        "ListPositionConfigurations"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-position-configurations))
(common-lisp:progn
 (common-lisp:defun list-queued-messages
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id next-token max-results
                     wireless-device-type)
   (common-lisp:declare
    (common-lisp:ignorable id next-token max-results wireless-device-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-queued-messages-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/wireless-devices/~A/data"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "ListQueuedMessages"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-queued-messages))
(common-lisp:progn
 (common-lisp:defun list-service-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-service-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/service-profiles"
                                                        "ListServiceProfiles"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-service-profiles))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/tags"
                                                        "ListTagsForResource"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-wireless-device-import-tasks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-wireless-device-import-tasks-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/wireless_device_import_tasks"
                                                        "ListWirelessDeviceImportTasks"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-wireless-device-import-tasks))
(common-lisp:progn
 (common-lisp:defun list-wireless-devices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token destination-name
                     device-profile-id service-profile-id wireless-device-type
                     fuota-task-id multicast-group-id)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token destination-name
     device-profile-id service-profile-id wireless-device-type fuota-task-id
     multicast-group-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-wireless-devices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/wireless-devices"
                                                        "ListWirelessDevices"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-wireless-devices))
(common-lisp:progn
 (common-lisp:defun list-wireless-gateway-task-definitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token
                     task-definition-type)
   (common-lisp:declare
    (common-lisp:ignorable max-results next-token task-definition-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-wireless-gateway-task-definitions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/wireless-gateway-task-definitions"
                                                        "ListWirelessGatewayTaskDefinitions"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-wireless-gateway-task-definitions))
(common-lisp:progn
 (common-lisp:defun list-wireless-gateways
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-wireless-gateways-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/wireless-gateways"
                                                        "ListWirelessGateways"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-wireless-gateways))
(common-lisp:progn
 (common-lisp:defun put-position-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-identifier resource-type solvers
                     destination)
   (common-lisp:declare
    (common-lisp:ignorable resource-identifier resource-type solvers
     destination))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-position-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/position-configurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-identifier))))
                                                        "PutPositionConfiguration"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-position-configuration))
(common-lisp:progn
 (common-lisp:defun put-resource-log-level
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-identifier resource-type
                     log-level)
   (common-lisp:declare
    (common-lisp:ignorable resource-identifier resource-type log-level))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-resource-log-level-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/log-levels/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-identifier))))
                                                        "PutResourceLogLevel"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-resource-log-level))
(common-lisp:progn
 (common-lisp:defun reset-all-resource-log-levels ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iotwireless-request :method "DELETE" :path
                                "/log-levels" :protocol :rest-json :operation
                                "ResetAllResourceLogLevels" :params
                                `(("Action" ,@"ResetAllResourceLogLevels")
                                  ("Version" ,@"2020-11-22"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'reset-all-resource-log-levels))
(common-lisp:progn
 (common-lisp:defun reset-resource-log-level
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-identifier resource-type)
   (common-lisp:declare
    (common-lisp:ignorable resource-identifier resource-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reset-resource-log-level-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/log-levels/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-identifier))))
                                                        "ResetResourceLogLevel"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'reset-resource-log-level))
(common-lisp:progn
 (common-lisp:defun send-data-to-multicast-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id payload-data wireless-metadata)
   (common-lisp:declare
    (common-lisp:ignorable id payload-data wireless-metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-send-data-to-multicast-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/multicast-groups/~A/data"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "SendDataToMulticastGroup"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'send-data-to-multicast-group))
(common-lisp:progn
 (common-lisp:defun send-data-to-wireless-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id transmit-mode payload-data
                     wireless-metadata)
   (common-lisp:declare
    (common-lisp:ignorable id transmit-mode payload-data wireless-metadata))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-send-data-to-wireless-device-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/wireless-devices/~A/data"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "SendDataToWirelessDevice"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'send-data-to-wireless-device))
(common-lisp:progn
 (common-lisp:defun start-bulk-associate-wireless-device-with-multicast-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id query-string tags)
   (common-lisp:declare (common-lisp:ignorable id query-string tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-bulk-associate-wireless-device-with-multicast-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/multicast-groups/~A/bulk"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "StartBulkAssociateWirelessDeviceWithMulticastGroup"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export
  'start-bulk-associate-wireless-device-with-multicast-group))
(common-lisp:progn
 (common-lisp:defun start-bulk-disassociate-wireless-device-from-multicast-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id query-string tags)
   (common-lisp:declare (common-lisp:ignorable id query-string tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-bulk-disassociate-wireless-device-from-multicast-group-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/multicast-groups/~A/bulk"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "StartBulkDisassociateWirelessDeviceFromMulticastGroup"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export
  'start-bulk-disassociate-wireless-device-from-multicast-group))
(common-lisp:progn
 (common-lisp:defun start-fuota-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id lo-ra-wan)
   (common-lisp:declare (common-lisp:ignorable id lo-ra-wan))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-fuota-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/fuota-tasks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "StartFuotaTask"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-fuota-task))
(common-lisp:progn
 (common-lisp:defun start-multicast-group-session
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id lo-ra-wan)
   (common-lisp:declare (common-lisp:ignorable id lo-ra-wan))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-multicast-group-session-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/multicast-groups/~A/session"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "StartMulticastGroupSession"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-multicast-group-session))
(common-lisp:progn
 (common-lisp:defun start-single-wireless-device-import-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destination-name client-request-token
                     device-name tags sidewalk)
   (common-lisp:declare
    (common-lisp:ignorable destination-name client-request-token device-name
     tags sidewalk))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-single-wireless-device-import-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/wireless_single_device_import_task"
                                                        "StartSingleWirelessDeviceImportTask"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-single-wireless-device-import-task))
(common-lisp:progn
 (common-lisp:defun start-wireless-device-import-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key destination-name client-request-token
                     tags sidewalk)
   (common-lisp:declare
    (common-lisp:ignorable destination-name client-request-token tags
     sidewalk))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-start-wireless-device-import-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/wireless_device_import_task"
                                                        "StartWirelessDeviceImportTask"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-wireless-device-import-task))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/tags" "TagResource"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun test-wireless-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-test-wireless-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/wireless-devices/~A/test"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "TestWirelessDevice"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'test-wireless-device))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        "/tags" "UntagResource"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name expression-type expression
                     description role-arn)
   (common-lisp:declare
    (common-lisp:ignorable name expression-type expression description
     role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-destination-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/destinations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "UpdateDestination"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-destination))
(common-lisp:progn
 (common-lisp:defun update-event-configuration-by-resource-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key device-registration-state proximity join
                     connection-status message-delivery-status)
   (common-lisp:declare
    (common-lisp:ignorable device-registration-state proximity join
     connection-status message-delivery-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-event-configuration-by-resource-types-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        "/event-configurations-resource-types"
                                                        "UpdateEventConfigurationByResourceTypes"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-event-configuration-by-resource-types))
(common-lisp:progn
 (common-lisp:defun update-fuota-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id name description lo-ra-wan
                     firmware-update-image firmware-update-role
                     redundancy-percent fragment-size-bytes
                     fragment-interval-ms)
   (common-lisp:declare
    (common-lisp:ignorable id name description lo-ra-wan firmware-update-image
     firmware-update-role redundancy-percent fragment-size-bytes
     fragment-interval-ms))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-fuota-task-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/fuota-tasks/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateFuotaTask"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-fuota-task))
(common-lisp:progn
 (common-lisp:defun update-log-levels-by-resource-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key default-log-level
                     wireless-device-log-options wireless-gateway-log-options)
   (common-lisp:declare
    (common-lisp:ignorable default-log-level wireless-device-log-options
     wireless-gateway-log-options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-log-levels-by-resource-types-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/log-levels"
                                                        "UpdateLogLevelsByResourceTypes"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-log-levels-by-resource-types))
(common-lisp:progn
 (common-lisp:defun update-multicast-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id name description lo-ra-wan)
   (common-lisp:declare (common-lisp:ignorable id name description lo-ra-wan))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-multicast-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/multicast-groups/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateMulticastGroup"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-multicast-group))
(common-lisp:progn
 (common-lisp:defun update-network-analyzer-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key configuration-name trace-content
                     wireless-devices-to-add wireless-devices-to-remove
                     wireless-gateways-to-add wireless-gateways-to-remove
                     description)
   (common-lisp:declare
    (common-lisp:ignorable configuration-name trace-content
     wireless-devices-to-add wireless-devices-to-remove
     wireless-gateways-to-add wireless-gateways-to-remove description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-network-analyzer-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/network-analyzer-configurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'configuration-name))))
                                                        "UpdateNetworkAnalyzerConfiguration"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-network-analyzer-configuration))
(common-lisp:progn
 (common-lisp:defun update-partner-account
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key sidewalk partner-account-id partner-type)
   (common-lisp:declare
    (common-lisp:ignorable sidewalk partner-account-id partner-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-partner-account-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/partner-accounts/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'partner-account-id))))
                                                        "UpdatePartnerAccount"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-partner-account))
(common-lisp:progn
 (common-lisp:defun update-position
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-identifier resource-type
                     position)
   (common-lisp:declare
    (common-lisp:ignorable resource-identifier resource-type position))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-position-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/positions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-identifier))))
                                                        "UpdatePosition"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-position))
(common-lisp:progn
 (common-lisp:defun update-resource-event-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identifier identifier-type partner-type
                     device-registration-state proximity join connection-status
                     message-delivery-status)
   (common-lisp:declare
    (common-lisp:ignorable identifier identifier-type partner-type
     device-registration-state proximity join connection-status
     message-delivery-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-resource-event-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/event-configurations/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'identifier))))
                                                        "UpdateResourceEventConfiguration"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-resource-event-configuration))
(common-lisp:progn
 (common-lisp:defun update-resource-position
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-identifier resource-type
                     geo-json-payload)
   (common-lisp:declare
    (common-lisp:ignorable resource-identifier resource-type geo-json-payload))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-resource-position-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/resource-positions/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-identifier))))
                                                        "UpdateResourcePosition"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-resource-position))
(common-lisp:progn
 (common-lisp:defun update-wireless-device
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id destination-name name description
                     lo-ra-wan positioning)
   (common-lisp:declare
    (common-lisp:ignorable id destination-name name description lo-ra-wan
     positioning))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-wireless-device-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/wireless-devices/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateWirelessDevice"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-wireless-device))
(common-lisp:progn
 (common-lisp:defun update-wireless-device-import-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id sidewalk)
   (common-lisp:declare (common-lisp:ignorable id sidewalk))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-wireless-device-import-task-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/wireless_device_import_task/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateWirelessDeviceImportTask"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-wireless-device-import-task))
(common-lisp:progn
 (common-lisp:defun update-wireless-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id name description join-eui-filters
                     net-id-filters max-eirp)
   (common-lisp:declare
    (common-lisp:ignorable id name description join-eui-filters net-id-filters
     max-eirp))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-wireless-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotwireless-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/wireless-gateways/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "UpdateWirelessGateway"
                                                        "2020-11-22"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-wireless-gateway))
