;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/rum/api
  (:use)
  (:nicknames #:aws/rum)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/rum/api)
(common-lisp:progn
 (common-lisp:defclass rum-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "rum" :protocol :rest-json))
 (common-lisp:export 'rum-request))
(common-lisp:progn
 (common-lisp:define-condition rum-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'rum-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("ConflictException" . conflict-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (rum-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass app-monitor common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %app-monitor-tags :initform common-lisp:nil)
                        (state :initarg :state :type
                         (common-lisp:or state-enum common-lisp:null) :accessor
                         %app-monitor-state :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or app-monitor-name common-lisp:null)
                         :accessor %app-monitor-name :initform common-lisp:nil)
                        (last-modified :initarg :last-modified :type
                         (common-lisp:or isotimestamp-string common-lisp:null)
                         :accessor %app-monitor-last-modified :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or app-monitor-id common-lisp:null)
                         :accessor %app-monitor-id :initform common-lisp:nil)
                        (domain :initarg :domain :type
                         (common-lisp:or app-monitor-domain common-lisp:null)
                         :accessor %app-monitor-domain :initform
                         common-lisp:nil)
                        (data-storage :initarg :data-storage :type
                         (common-lisp:or data-storage common-lisp:null)
                         :accessor %app-monitor-data-storage :initform
                         common-lisp:nil)
                        (custom-events :initarg :custom-events :type
                         (common-lisp:or custom-events common-lisp:null)
                         :accessor %app-monitor-custom-events :initform
                         common-lisp:nil)
                        (created :initarg :created :type
                         (common-lisp:or isotimestamp-string common-lisp:null)
                         :accessor %app-monitor-created :initform
                         common-lisp:nil)
                        (app-monitor-configuration :initarg
                         :app-monitor-configuration :type
                         (common-lisp:or app-monitor-configuration
                                         common-lisp:null)
                         :accessor %app-monitor-app-monitor-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'app-monitor 'make-app-monitor))
 (common-lisp:defun make-app-monitor
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags state name last-modified id domain
                     data-storage custom-events created
                     app-monitor-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'app-monitor
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input app-monitor))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input app-monitor))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-monitor-configuration))
      (common-lisp:list
       (common-lisp:cons "AppMonitorConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "Created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-events))
      (common-lisp:list
       (common-lisp:cons "CustomEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-storage))
      (common-lisp:list
       (common-lisp:cons "DataStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input app-monitor))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass app-monitor-configuration common-lisp:nil
                       ((telemetries :initarg :telemetries :type
                         (common-lisp:or telemetries common-lisp:null)
                         :accessor %app-monitor-configuration-telemetries
                         :initform common-lisp:nil)
                        (session-sample-rate :initarg :session-sample-rate
                         :type
                         (common-lisp:or session-sample-rate common-lisp:null)
                         :accessor
                         %app-monitor-configuration-session-sample-rate
                         :initform common-lisp:nil)
                        (included-pages :initarg :included-pages :type
                         (common-lisp:or pages common-lisp:null) :accessor
                         %app-monitor-configuration-included-pages :initform
                         common-lisp:nil)
                        (identity-pool-id :initarg :identity-pool-id :type
                         (common-lisp:or identity-pool-id common-lisp:null)
                         :accessor %app-monitor-configuration-identity-pool-id
                         :initform common-lisp:nil)
                        (guest-role-arn :initarg :guest-role-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %app-monitor-configuration-guest-role-arn :initform
                         common-lisp:nil)
                        (favorite-pages :initarg :favorite-pages :type
                         (common-lisp:or favorite-pages common-lisp:null)
                         :accessor %app-monitor-configuration-favorite-pages
                         :initform common-lisp:nil)
                        (excluded-pages :initarg :excluded-pages :type
                         (common-lisp:or pages common-lisp:null) :accessor
                         %app-monitor-configuration-excluded-pages :initform
                         common-lisp:nil)
                        (enable-xray :initarg :enable-xray :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %app-monitor-configuration-enable-xray :initform
                         common-lisp:nil)
                        (allow-cookies :initarg :allow-cookies :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %app-monitor-configuration-allow-cookies :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'app-monitor-configuration
                    'make-app-monitor-configuration))
 (common-lisp:defun make-app-monitor-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key telemetries session-sample-rate
                     included-pages identity-pool-id guest-role-arn
                     favorite-pages excluded-pages enable-xray allow-cookies)
   (common-lisp:apply #'common-lisp:make-instance 'app-monitor-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          app-monitor-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          app-monitor-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'allow-cookies))
      (common-lisp:list
       (common-lisp:cons "AllowCookies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-xray))
      (common-lisp:list
       (common-lisp:cons "EnableXRay"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'excluded-pages))
      (common-lisp:list
       (common-lisp:cons "ExcludedPages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'favorite-pages))
      (common-lisp:list
       (common-lisp:cons "FavoritePages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'guest-role-arn))
      (common-lisp:list
       (common-lisp:cons "GuestRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity-pool-id))
      (common-lisp:list
       (common-lisp:cons "IdentityPoolId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'included-pages))
      (common-lisp:list
       (common-lisp:cons "IncludedPages"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-sample-rate))
      (common-lisp:list
       (common-lisp:cons "SessionSampleRate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'telemetries))
      (common-lisp:list
       (common-lisp:cons "Telemetries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          app-monitor-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass app-monitor-details common-lisp:nil
                       ((version :initarg :|version| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %app-monitor-details-version :initform
                         common-lisp:nil)
                        (name :initarg :|name| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %app-monitor-details-name :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %app-monitor-details-id :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'app-monitor-details 'make-app-monitor-details))
 (common-lisp:defun make-app-monitor-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key version name id)
   (common-lisp:apply #'common-lisp:make-instance 'app-monitor-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input app-monitor-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input app-monitor-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version))
      (common-lisp:list
       (common-lisp:cons "version"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input app-monitor-details))
   common-lisp:nil))
(common-lisp:deftype app-monitor-domain () 'common-lisp:string)
(common-lisp:deftype app-monitor-id () 'common-lisp:string)
(common-lisp:deftype app-monitor-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass app-monitor-summary common-lisp:nil
                       ((state :initarg :state :type
                         (common-lisp:or state-enum common-lisp:null) :accessor
                         %app-monitor-summary-state :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or app-monitor-name common-lisp:null)
                         :accessor %app-monitor-summary-name :initform
                         common-lisp:nil)
                        (last-modified :initarg :last-modified :type
                         (common-lisp:or isotimestamp-string common-lisp:null)
                         :accessor %app-monitor-summary-last-modified :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or app-monitor-id common-lisp:null)
                         :accessor %app-monitor-summary-id :initform
                         common-lisp:nil)
                        (created :initarg :created :type
                         (common-lisp:or isotimestamp-string common-lisp:null)
                         :accessor %app-monitor-summary-created :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'app-monitor-summary 'make-app-monitor-summary))
 (common-lisp:defun make-app-monitor-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key state name last-modified id created)
   (common-lisp:apply #'common-lisp:make-instance 'app-monitor-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input app-monitor-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input app-monitor-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created))
      (common-lisp:list
       (common-lisp:cons "Created"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified))
      (common-lisp:list
       (common-lisp:cons "LastModified"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input app-monitor-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype app-monitor-summary-list ()
   '(trivial-types:proper-list app-monitor-summary))
 (common-lisp:defun |make-app-monitor-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list app-monitor-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass batch-create-rum-metric-definitions-error
                       common-lisp:nil
                       ((metric-definition :initarg :metric-definition :type
                         (common-lisp:or metric-definition-request
                                         common-lisp:null)
                         :accessor
                         %batch-create-rum-metric-definitions-error-metric-definition
                         :initform
                         (common-lisp:error ":metric-definition is required"))
                        (error-message :initarg :error-message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %batch-create-rum-metric-definitions-error-error-message
                         :initform
                         (common-lisp:error ":error-message is required"))
                        (error-code :initarg :error-code :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %batch-create-rum-metric-definitions-error-error-code
                         :initform
                         (common-lisp:error ":error-code is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-create-rum-metric-definitions-error
                    'make-batch-create-rum-metric-definitions-error))
 (common-lisp:defun make-batch-create-rum-metric-definitions-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metric-definition error-message
                     error-code)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-create-rum-metric-definitions-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-rum-metric-definitions-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-rum-metric-definitions-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-definition))
      (common-lisp:list
       (common-lisp:cons "MetricDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-rum-metric-definitions-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-create-rum-metric-definitions-errors ()
   '(trivial-types:proper-list batch-create-rum-metric-definitions-error))
 (common-lisp:defun |make-batch-create-rum-metric-definitions-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-create-rum-metric-definitions-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-create-rum-metric-definitions-request
                       common-lisp:nil
                       ((metric-definitions :initarg :metric-definitions :type
                         (common-lisp:or metric-definitions-request
                                         common-lisp:null)
                         :accessor
                         %batch-create-rum-metric-definitions-request-metric-definitions
                         :initform
                         (common-lisp:error ":metric-definitions is required"))
                        (destination-arn :initarg :destination-arn :type
                         (common-lisp:or destination-arn common-lisp:null)
                         :accessor
                         %batch-create-rum-metric-definitions-request-destination-arn
                         :initform common-lisp:nil)
                        (destination :initarg :destination :type
                         (common-lisp:or metric-destination common-lisp:null)
                         :accessor
                         %batch-create-rum-metric-definitions-request-destination
                         :initform
                         (common-lisp:error ":destination is required"))
                        (app-monitor-name :initarg :app-monitor-name :type
                         (common-lisp:or app-monitor-name common-lisp:null)
                         :accessor
                         %batch-create-rum-metric-definitions-request-app-monitor-name
                         :initform
                         (common-lisp:error ":app-monitor-name is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-create-rum-metric-definitions-request
                    'make-batch-create-rum-metric-definitions-request))
 (common-lisp:defun make-batch-create-rum-metric-definitions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metric-definitions destination-arn
                     destination app-monitor-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-create-rum-metric-definitions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-rum-metric-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-rum-metric-definitions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-arn))
      (common-lisp:list
       (common-lisp:cons "DestinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-definitions))
      (common-lisp:list
       (common-lisp:cons "MetricDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-rum-metric-definitions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-create-rum-metric-definitions-response
                       common-lisp:nil
                       ((metric-definitions :initarg :metric-definitions :type
                         (common-lisp:or metric-definitions common-lisp:null)
                         :accessor
                         %batch-create-rum-metric-definitions-response-metric-definitions
                         :initform common-lisp:nil)
                        (errors :initarg :errors :type
                         (common-lisp:or
                          batch-create-rum-metric-definitions-errors
                          common-lisp:null)
                         :accessor
                         %batch-create-rum-metric-definitions-response-errors
                         :initform (common-lisp:error ":errors is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-create-rum-metric-definitions-response
                    'make-batch-create-rum-metric-definitions-response))
 (common-lisp:defun make-batch-create-rum-metric-definitions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metric-definitions errors)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-create-rum-metric-definitions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-rum-metric-definitions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-rum-metric-definitions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-definitions))
      (common-lisp:list
       (common-lisp:cons "MetricDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-create-rum-metric-definitions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-rum-metric-definitions-error
                       common-lisp:nil
                       ((metric-definition-id :initarg :metric-definition-id
                         :type
                         (common-lisp:or metric-definition-id common-lisp:null)
                         :accessor
                         %batch-delete-rum-metric-definitions-error-metric-definition-id
                         :initform
                         (common-lisp:error
                          ":metric-definition-id is required"))
                        (error-message :initarg :error-message :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %batch-delete-rum-metric-definitions-error-error-message
                         :initform
                         (common-lisp:error ":error-message is required"))
                        (error-code :initarg :error-code :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %batch-delete-rum-metric-definitions-error-error-code
                         :initform
                         (common-lisp:error ":error-code is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-delete-rum-metric-definitions-error
                    'make-batch-delete-rum-metric-definitions-error))
 (common-lisp:defun make-batch-delete-rum-metric-definitions-error
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metric-definition-id error-message
                     error-code)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-delete-rum-metric-definitions-error
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-rum-metric-definitions-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-rum-metric-definitions-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-definition-id))
      (common-lisp:list
       (common-lisp:cons "MetricDefinitionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-rum-metric-definitions-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-delete-rum-metric-definitions-errors ()
   '(trivial-types:proper-list batch-delete-rum-metric-definitions-error))
 (common-lisp:defun |make-batch-delete-rum-metric-definitions-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-delete-rum-metric-definitions-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass batch-delete-rum-metric-definitions-request
                       common-lisp:nil
                       ((metric-definition-ids :initarg :metric-definition-ids
                         :type
                         (common-lisp:or metric-definition-ids
                                         common-lisp:null)
                         :accessor
                         %batch-delete-rum-metric-definitions-request-metric-definition-ids
                         :initform
                         (common-lisp:error
                          ":metric-definition-ids is required"))
                        (destination-arn :initarg :destination-arn :type
                         (common-lisp:or destination-arn common-lisp:null)
                         :accessor
                         %batch-delete-rum-metric-definitions-request-destination-arn
                         :initform common-lisp:nil)
                        (destination :initarg :destination :type
                         (common-lisp:or metric-destination common-lisp:null)
                         :accessor
                         %batch-delete-rum-metric-definitions-request-destination
                         :initform
                         (common-lisp:error ":destination is required"))
                        (app-monitor-name :initarg :app-monitor-name :type
                         (common-lisp:or app-monitor-name common-lisp:null)
                         :accessor
                         %batch-delete-rum-metric-definitions-request-app-monitor-name
                         :initform
                         (common-lisp:error ":app-monitor-name is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-delete-rum-metric-definitions-request
                    'make-batch-delete-rum-metric-definitions-request))
 (common-lisp:defun make-batch-delete-rum-metric-definitions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metric-definition-ids destination-arn
                     destination app-monitor-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-delete-rum-metric-definitions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-rum-metric-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-rum-metric-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-rum-metric-definitions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-delete-rum-metric-definitions-response
                       common-lisp:nil
                       ((metric-definition-ids :initarg :metric-definition-ids
                         :type
                         (common-lisp:or metric-definition-ids
                                         common-lisp:null)
                         :accessor
                         %batch-delete-rum-metric-definitions-response-metric-definition-ids
                         :initform common-lisp:nil)
                        (errors :initarg :errors :type
                         (common-lisp:or
                          batch-delete-rum-metric-definitions-errors
                          common-lisp:null)
                         :accessor
                         %batch-delete-rum-metric-definitions-response-errors
                         :initform (common-lisp:error ":errors is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-delete-rum-metric-definitions-response
                    'make-batch-delete-rum-metric-definitions-response))
 (common-lisp:defun make-batch-delete-rum-metric-definitions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metric-definition-ids errors)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-delete-rum-metric-definitions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-rum-metric-definitions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-rum-metric-definitions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-definition-ids))
      (common-lisp:list
       (common-lisp:cons "MetricDefinitionIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-delete-rum-metric-definitions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-rum-metric-definitions-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %batch-get-rum-metric-definitions-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results-integer common-lisp:null)
                         :accessor
                         %batch-get-rum-metric-definitions-request-max-results
                         :initform common-lisp:nil)
                        (destination-arn :initarg :destination-arn :type
                         (common-lisp:or destination-arn common-lisp:null)
                         :accessor
                         %batch-get-rum-metric-definitions-request-destination-arn
                         :initform common-lisp:nil)
                        (destination :initarg :destination :type
                         (common-lisp:or metric-destination common-lisp:null)
                         :accessor
                         %batch-get-rum-metric-definitions-request-destination
                         :initform
                         (common-lisp:error ":destination is required"))
                        (app-monitor-name :initarg :app-monitor-name :type
                         (common-lisp:or app-monitor-name common-lisp:null)
                         :accessor
                         %batch-get-rum-metric-definitions-request-app-monitor-name
                         :initform
                         (common-lisp:error ":app-monitor-name is required"))))
 (common-lisp:export
  (common-lisp:list 'batch-get-rum-metric-definitions-request
                    'make-batch-get-rum-metric-definitions-request))
 (common-lisp:defun make-batch-get-rum-metric-definitions-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results destination-arn
                     destination app-monitor-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-rum-metric-definitions-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-rum-metric-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-rum-metric-definitions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-rum-metric-definitions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass batch-get-rum-metric-definitions-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %batch-get-rum-metric-definitions-response-next-token
                         :initform common-lisp:nil)
                        (metric-definitions :initarg :metric-definitions :type
                         (common-lisp:or metric-definitions common-lisp:null)
                         :accessor
                         %batch-get-rum-metric-definitions-response-metric-definitions
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'batch-get-rum-metric-definitions-response
                    'make-batch-get-rum-metric-definitions-response))
 (common-lisp:defun make-batch-get-rum-metric-definitions-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token metric-definitions)
   (common-lisp:apply #'common-lisp:make-instance
                      'batch-get-rum-metric-definitions-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-rum-metric-definitions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-rum-metric-definitions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-definitions))
      (common-lisp:list
       (common-lisp:cons "MetricDefinitions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-rum-metric-definitions-response))
   common-lisp:nil))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:define-condition conflict-exception
     (rum-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       conflict-exception-message)
      (resource-name :initarg :|resourceName| :initform common-lisp:nil :reader
       conflict-exception-resource-name)
      (resource-type :initarg :|resourceType| :initform common-lisp:nil :reader
       conflict-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'conflict-exception 'conflict-exception-message
                    'conflict-exception-resource-name
                    'conflict-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass create-app-monitor-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %create-app-monitor-request-tags :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or app-monitor-name common-lisp:null)
                         :accessor %create-app-monitor-request-name :initform
                         (common-lisp:error ":name is required"))
                        (domain :initarg :domain :type
                         (common-lisp:or app-monitor-domain common-lisp:null)
                         :accessor %create-app-monitor-request-domain :initform
                         (common-lisp:error ":domain is required"))
                        (cw-log-enabled :initarg :cw-log-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %create-app-monitor-request-cw-log-enabled :initform
                         common-lisp:nil)
                        (custom-events :initarg :custom-events :type
                         (common-lisp:or custom-events common-lisp:null)
                         :accessor %create-app-monitor-request-custom-events
                         :initform common-lisp:nil)
                        (app-monitor-configuration :initarg
                         :app-monitor-configuration :type
                         (common-lisp:or app-monitor-configuration
                                         common-lisp:null)
                         :accessor
                         %create-app-monitor-request-app-monitor-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-app-monitor-request
                    'make-create-app-monitor-request))
 (common-lisp:defun make-create-app-monitor-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags name domain cw-log-enabled
                     custom-events app-monitor-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'create-app-monitor-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-app-monitor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-app-monitor-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-monitor-configuration))
      (common-lisp:list
       (common-lisp:cons "AppMonitorConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-events))
      (common-lisp:list
       (common-lisp:cons "CustomEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cw-log-enabled))
      (common-lisp:list
       (common-lisp:cons "CwLogEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-app-monitor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-app-monitor-response common-lisp:nil
                       ((id :initarg :id :type
                         (common-lisp:or app-monitor-id common-lisp:null)
                         :accessor %create-app-monitor-response-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-app-monitor-response
                    'make-create-app-monitor-response))
 (common-lisp:defun make-create-app-monitor-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key id)
   (common-lisp:apply #'common-lisp:make-instance 'create-app-monitor-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-app-monitor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-app-monitor-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-app-monitor-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-events common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or custom-events-status common-lisp:null)
                         :accessor %custom-events-status :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'custom-events 'make-custom-events))
 (common-lisp:defun make-custom-events
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status)
   (common-lisp:apply #'common-lisp:make-instance 'custom-events
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-events))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-events))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-events))
   common-lisp:nil))
(common-lisp:deftype custom-events-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass cw-log common-lisp:nil
                       ((cw-log-group :initarg :cw-log-group :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %cw-log-cw-log-group :initform common-lisp:nil)
                        (cw-log-enabled :initarg :cw-log-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %cw-log-cw-log-enabled :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'cw-log 'make-cw-log))
 (common-lisp:defun make-cw-log
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cw-log-group cw-log-enabled)
   (common-lisp:apply #'common-lisp:make-instance 'cw-log
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input cw-log))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input cw-log))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cw-log-enabled))
      (common-lisp:list
       (common-lisp:cons "CwLogEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cw-log-group))
      (common-lisp:list
       (common-lisp:cons "CwLogGroup"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input cw-log))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass data-storage common-lisp:nil
                       ((cw-log :initarg :cw-log :type
                         (common-lisp:or cw-log common-lisp:null) :accessor
                         %data-storage-cw-log :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'data-storage 'make-data-storage))
 (common-lisp:defun make-data-storage
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key cw-log)
   (common-lisp:apply #'common-lisp:make-instance 'data-storage
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cw-log))
      (common-lisp:list
       (common-lisp:cons "CwLog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-storage))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-app-monitor-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or app-monitor-name common-lisp:null)
                         :accessor %delete-app-monitor-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-app-monitor-request
                    'make-delete-app-monitor-request))
 (common-lisp:defun make-delete-app-monitor-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'delete-app-monitor-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-monitor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-monitor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-monitor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-app-monitor-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-app-monitor-response
                    'make-delete-app-monitor-response))
 (common-lisp:defun make-delete-app-monitor-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'delete-app-monitor-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-monitor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-monitor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-app-monitor-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-rum-metrics-destination-request common-lisp:nil
                       ((destination-arn :initarg :destination-arn :type
                         (common-lisp:or destination-arn common-lisp:null)
                         :accessor
                         %delete-rum-metrics-destination-request-destination-arn
                         :initform common-lisp:nil)
                        (destination :initarg :destination :type
                         (common-lisp:or metric-destination common-lisp:null)
                         :accessor
                         %delete-rum-metrics-destination-request-destination
                         :initform
                         (common-lisp:error ":destination is required"))
                        (app-monitor-name :initarg :app-monitor-name :type
                         (common-lisp:or app-monitor-name common-lisp:null)
                         :accessor
                         %delete-rum-metrics-destination-request-app-monitor-name
                         :initform
                         (common-lisp:error ":app-monitor-name is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-rum-metrics-destination-request
                    'make-delete-rum-metrics-destination-request))
 (common-lisp:defun make-delete-rum-metrics-destination-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key destination-arn destination
                     app-monitor-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-rum-metrics-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-rum-metrics-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-rum-metrics-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-rum-metrics-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-rum-metrics-destination-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-rum-metrics-destination-response
                    'make-delete-rum-metrics-destination-response))
 (common-lisp:defun make-delete-rum-metrics-destination-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-rum-metrics-destination-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-rum-metrics-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-rum-metrics-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-rum-metrics-destination-response))
   common-lisp:nil))
(common-lisp:deftype destination-arn () 'common-lisp:string)
(common-lisp:deftype dimension-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dimension-keys-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-dimension-keys-map|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype dimension-name () 'common-lisp:string)
(common-lisp:deftype event-data () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype event-data-list ()
   '(trivial-types:proper-list event-data))
 (common-lisp:defun |make-event-data-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list event-data))
   aws-sdk/generator/shape::members))
(common-lisp:deftype event-pattern () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype favorite-pages () '(trivial-types:proper-list string))
 (common-lisp:defun |make-favorite-pages|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass get-app-monitor-data-request common-lisp:nil
                       ((time-range :initarg :time-range :type
                         (common-lisp:or time-range common-lisp:null) :accessor
                         %get-app-monitor-data-request-time-range :initform
                         (common-lisp:error ":time-range is required"))
                        (next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %get-app-monitor-data-request-next-token :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or app-monitor-name common-lisp:null)
                         :accessor %get-app-monitor-data-request-name :initform
                         (common-lisp:error ":name is required"))
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-query-results common-lisp:null)
                         :accessor %get-app-monitor-data-request-max-results
                         :initform common-lisp:nil)
                        (filters :initarg :filters :type
                         (common-lisp:or query-filters common-lisp:null)
                         :accessor %get-app-monitor-data-request-filters
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-app-monitor-data-request
                    'make-get-app-monitor-data-request))
 (common-lisp:defun make-get-app-monitor-data-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key time-range next-token name max-results
                     filters)
   (common-lisp:apply #'common-lisp:make-instance 'get-app-monitor-data-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-app-monitor-data-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-app-monitor-data-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filters))
      (common-lisp:list
       (common-lisp:cons "Filters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-range))
      (common-lisp:list
       (common-lisp:cons "TimeRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-app-monitor-data-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-app-monitor-data-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or token common-lisp:null) :accessor
                         %get-app-monitor-data-response-next-token :initform
                         common-lisp:nil)
                        (events :initarg :events :type
                         (common-lisp:or event-data-list common-lisp:null)
                         :accessor %get-app-monitor-data-response-events
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-app-monitor-data-response
                    'make-get-app-monitor-data-response))
 (common-lisp:defun make-get-app-monitor-data-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token events)
   (common-lisp:apply #'common-lisp:make-instance
                      'get-app-monitor-data-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-app-monitor-data-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-app-monitor-data-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'events))
      (common-lisp:list
       (common-lisp:cons "Events"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-app-monitor-data-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-app-monitor-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or app-monitor-name common-lisp:null)
                         :accessor %get-app-monitor-request-name :initform
                         (common-lisp:error ":name is required"))))
 (common-lisp:export
  (common-lisp:list 'get-app-monitor-request 'make-get-app-monitor-request))
 (common-lisp:defun make-get-app-monitor-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name)
   (common-lisp:apply #'common-lisp:make-instance 'get-app-monitor-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-app-monitor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-app-monitor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-app-monitor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-app-monitor-response common-lisp:nil
                       ((app-monitor :initarg :app-monitor :type
                         (common-lisp:or app-monitor common-lisp:null)
                         :accessor %get-app-monitor-response-app-monitor
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-app-monitor-response 'make-get-app-monitor-response))
 (common-lisp:defun make-get-app-monitor-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key app-monitor)
   (common-lisp:apply #'common-lisp:make-instance 'get-app-monitor-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-app-monitor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-app-monitor-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-monitor))
      (common-lisp:list
       (common-lisp:cons "AppMonitor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-app-monitor-response))
   common-lisp:nil))
(common-lisp:deftype isotimestamp-string () 'common-lisp:string)
(common-lisp:deftype iam-role-arn () 'common-lisp:string)
(common-lisp:deftype identity-pool-id () 'common-lisp:string)
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (rum-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       internal-server-exception-message)
      (retry-after-seconds :initarg :|retryAfterSeconds| :initform
       common-lisp:nil :reader internal-server-exception-retry-after-seconds)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message
                    'internal-server-exception-retry-after-seconds)))
(common-lisp:deftype json-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-app-monitors-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-app-monitors-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results-integer common-lisp:null)
                         :accessor %list-app-monitors-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-app-monitors-request
                    'make-list-app-monitors-request))
 (common-lisp:defun make-list-app-monitors-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-app-monitors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-app-monitors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-app-monitors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-app-monitors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-app-monitors-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-app-monitors-response-next-token :initform
                         common-lisp:nil)
                        (app-monitor-summaries :initarg :app-monitor-summaries
                         :type
                         (common-lisp:or app-monitor-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-app-monitors-response-app-monitor-summaries
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-app-monitors-response
                    'make-list-app-monitors-response))
 (common-lisp:defun make-list-app-monitors-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token app-monitor-summaries)
   (common-lisp:apply #'common-lisp:make-instance 'list-app-monitors-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-app-monitors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-app-monitors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-monitor-summaries))
      (common-lisp:list
       (common-lisp:cons "AppMonitorSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-app-monitors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-rum-metrics-destinations-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-rum-metrics-destinations-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results-integer common-lisp:null)
                         :accessor
                         %list-rum-metrics-destinations-request-max-results
                         :initform common-lisp:nil)
                        (app-monitor-name :initarg :app-monitor-name :type
                         (common-lisp:or app-monitor-name common-lisp:null)
                         :accessor
                         %list-rum-metrics-destinations-request-app-monitor-name
                         :initform
                         (common-lisp:error ":app-monitor-name is required"))))
 (common-lisp:export
  (common-lisp:list 'list-rum-metrics-destinations-request
                    'make-list-rum-metrics-destinations-request))
 (common-lisp:defun make-list-rum-metrics-destinations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results app-monitor-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-rum-metrics-destinations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-rum-metrics-destinations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-rum-metrics-destinations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-rum-metrics-destinations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-rum-metrics-destinations-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-rum-metrics-destinations-response-next-token
                         :initform common-lisp:nil)
                        (destinations :initarg :destinations :type
                         (common-lisp:or metric-destination-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-rum-metrics-destinations-response-destinations
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-rum-metrics-destinations-response
                    'make-list-rum-metrics-destinations-response))
 (common-lisp:defun make-list-rum-metrics-destinations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token destinations)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-rum-metrics-destinations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-rum-metrics-destinations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-rum-metrics-destinations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destinations))
      (common-lisp:list
       (common-lisp:cons "Destinations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-rum-metrics-destinations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-tags-for-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %list-tags-for-resource-response-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype max-query-results () 'common-lisp:integer)
(common-lisp:deftype max-results-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass metric-definition common-lisp:nil
                       ((value-key :initarg :value-key :type
                         (common-lisp:or value-key common-lisp:null) :accessor
                         %metric-definition-value-key :initform
                         common-lisp:nil)
                        (unit-label :initarg :unit-label :type
                         (common-lisp:or unit-label common-lisp:null) :accessor
                         %metric-definition-unit-label :initform
                         common-lisp:nil)
                        (namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %metric-definition-namespace :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or metric-name common-lisp:null)
                         :accessor %metric-definition-name :initform
                         (common-lisp:error ":name is required"))
                        (metric-definition-id :initarg :metric-definition-id
                         :type
                         (common-lisp:or metric-definition-id common-lisp:null)
                         :accessor %metric-definition-metric-definition-id
                         :initform
                         (common-lisp:error
                          ":metric-definition-id is required"))
                        (event-pattern :initarg :event-pattern :type
                         (common-lisp:or event-pattern common-lisp:null)
                         :accessor %metric-definition-event-pattern :initform
                         common-lisp:nil)
                        (dimension-keys :initarg :dimension-keys :type
                         (common-lisp:or dimension-keys-map common-lisp:null)
                         :accessor %metric-definition-dimension-keys :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'metric-definition 'make-metric-definition))
 (common-lisp:defun make-metric-definition
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value-key unit-label namespace name
                     metric-definition-id event-pattern dimension-keys)
   (common-lisp:apply #'common-lisp:make-instance 'metric-definition
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-keys))
      (common-lisp:list
       (common-lisp:cons "DimensionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-pattern))
      (common-lisp:list
       (common-lisp:cons "EventPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-definition-id))
      (common-lisp:list
       (common-lisp:cons "MetricDefinitionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit-label))
      (common-lisp:list
       (common-lisp:cons "UnitLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-key))
      (common-lisp:list
       (common-lisp:cons "ValueKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-definition))
   common-lisp:nil))
(common-lisp:deftype metric-definition-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype metric-definition-ids ()
   '(trivial-types:proper-list metric-definition-id))
 (common-lisp:defun |make-metric-definition-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-definition-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass metric-definition-request common-lisp:nil
                       ((value-key :initarg :value-key :type
                         (common-lisp:or value-key common-lisp:null) :accessor
                         %metric-definition-request-value-key :initform
                         common-lisp:nil)
                        (unit-label :initarg :unit-label :type
                         (common-lisp:or unit-label common-lisp:null) :accessor
                         %metric-definition-request-unit-label :initform
                         common-lisp:nil)
                        (namespace :initarg :namespace :type
                         (common-lisp:or namespace common-lisp:null) :accessor
                         %metric-definition-request-namespace :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or metric-name common-lisp:null)
                         :accessor %metric-definition-request-name :initform
                         (common-lisp:error ":name is required"))
                        (event-pattern :initarg :event-pattern :type
                         (common-lisp:or event-pattern common-lisp:null)
                         :accessor %metric-definition-request-event-pattern
                         :initform common-lisp:nil)
                        (dimension-keys :initarg :dimension-keys :type
                         (common-lisp:or dimension-keys-map common-lisp:null)
                         :accessor %metric-definition-request-dimension-keys
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'metric-definition-request
                    'make-metric-definition-request))
 (common-lisp:defun make-metric-definition-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value-key unit-label namespace name
                     event-pattern dimension-keys)
   (common-lisp:apply #'common-lisp:make-instance 'metric-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metric-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metric-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dimension-keys))
      (common-lisp:list
       (common-lisp:cons "DimensionKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'event-pattern))
      (common-lisp:list
       (common-lisp:cons "EventPattern"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'namespace))
      (common-lisp:list
       (common-lisp:cons "Namespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit-label))
      (common-lisp:list
       (common-lisp:cons "UnitLabel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-key))
      (common-lisp:list
       (common-lisp:cons "ValueKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metric-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-definitions ()
   '(trivial-types:proper-list metric-definition))
 (common-lisp:defun |make-metric-definitions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metric-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype metric-definitions-request ()
   '(trivial-types:proper-list metric-definition-request))
 (common-lisp:defun |make-metric-definitions-request|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            metric-definition-request))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metric-destination () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass metric-destination-summary common-lisp:nil
                       ((iam-role-arn :initarg :iam-role-arn :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor %metric-destination-summary-iam-role-arn
                         :initform common-lisp:nil)
                        (destination-arn :initarg :destination-arn :type
                         (common-lisp:or destination-arn common-lisp:null)
                         :accessor %metric-destination-summary-destination-arn
                         :initform common-lisp:nil)
                        (destination :initarg :destination :type
                         (common-lisp:or metric-destination common-lisp:null)
                         :accessor %metric-destination-summary-destination
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'metric-destination-summary
                    'make-metric-destination-summary))
 (common-lisp:defun make-metric-destination-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key iam-role-arn destination-arn destination)
   (common-lisp:apply #'common-lisp:make-instance 'metric-destination-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metric-destination-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metric-destination-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-arn))
      (common-lisp:list
       (common-lisp:cons "DestinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metric-destination-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype metric-destination-summary-list ()
   '(trivial-types:proper-list metric-destination-summary))
 (common-lisp:defun |make-metric-destination-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            metric-destination-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype metric-name () 'common-lisp:string)
(common-lisp:deftype namespace () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype pages () '(trivial-types:proper-list url))
 (common-lisp:defun |make-pages|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list url))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass put-rum-events-request common-lisp:nil
                       ((user-details :initarg :user-details :type
                         (common-lisp:or user-details common-lisp:null)
                         :accessor %put-rum-events-request-user-details
                         :initform
                         (common-lisp:error ":user-details is required"))
                        (rum-events :initarg :rum-events :type
                         (common-lisp:or rum-event-list common-lisp:null)
                         :accessor %put-rum-events-request-rum-events :initform
                         (common-lisp:error ":rum-events is required"))
                        (id :initarg :id :type
                         (common-lisp:or put-rum-events-request-id-string
                                         common-lisp:null)
                         :accessor %put-rum-events-request-id :initform
                         (common-lisp:error ":id is required"))
                        (batch-id :initarg :batch-id :type
                         (common-lisp:or put-rum-events-request-batch-id-string
                                         common-lisp:null)
                         :accessor %put-rum-events-request-batch-id :initform
                         (common-lisp:error ":batch-id is required"))
                        (app-monitor-details :initarg :app-monitor-details
                         :type
                         (common-lisp:or app-monitor-details common-lisp:null)
                         :accessor %put-rum-events-request-app-monitor-details
                         :initform
                         (common-lisp:error
                          ":app-monitor-details is required"))))
 (common-lisp:export
  (common-lisp:list 'put-rum-events-request 'make-put-rum-events-request))
 (common-lisp:defun make-put-rum-events-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-details rum-events id batch-id
                     app-monitor-details)
   (common-lisp:apply #'common-lisp:make-instance 'put-rum-events-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-rum-events-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-rum-events-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'app-monitor-details))
      (common-lisp:list
       (common-lisp:cons "AppMonitorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'batch-id))
      (common-lisp:list
       (common-lisp:cons "BatchId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'rum-events))
      (common-lisp:list
       (common-lisp:cons "RumEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-details))
      (common-lisp:list
       (common-lisp:cons "UserDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-rum-events-request))
   common-lisp:nil))
(common-lisp:deftype put-rum-events-request-batch-id-string ()
  'common-lisp:string)
(common-lisp:deftype put-rum-events-request-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-rum-events-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'put-rum-events-response 'make-put-rum-events-response))
 (common-lisp:defun make-put-rum-events-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'put-rum-events-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-rum-events-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-rum-events-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-rum-events-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-rum-metrics-destination-request common-lisp:nil
                       ((iam-role-arn :initarg :iam-role-arn :type
                         (common-lisp:or iam-role-arn common-lisp:null)
                         :accessor
                         %put-rum-metrics-destination-request-iam-role-arn
                         :initform common-lisp:nil)
                        (destination-arn :initarg :destination-arn :type
                         (common-lisp:or destination-arn common-lisp:null)
                         :accessor
                         %put-rum-metrics-destination-request-destination-arn
                         :initform common-lisp:nil)
                        (destination :initarg :destination :type
                         (common-lisp:or metric-destination common-lisp:null)
                         :accessor
                         %put-rum-metrics-destination-request-destination
                         :initform
                         (common-lisp:error ":destination is required"))
                        (app-monitor-name :initarg :app-monitor-name :type
                         (common-lisp:or app-monitor-name common-lisp:null)
                         :accessor
                         %put-rum-metrics-destination-request-app-monitor-name
                         :initform
                         (common-lisp:error ":app-monitor-name is required"))))
 (common-lisp:export
  (common-lisp:list 'put-rum-metrics-destination-request
                    'make-put-rum-metrics-destination-request))
 (common-lisp:defun make-put-rum-metrics-destination-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key iam-role-arn destination-arn destination
                     app-monitor-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-rum-metrics-destination-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-rum-metrics-destination-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-rum-metrics-destination-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-arn))
      (common-lisp:list
       (common-lisp:cons "DestinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role-arn))
      (common-lisp:list
       (common-lisp:cons "IamRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-rum-metrics-destination-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-rum-metrics-destination-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'put-rum-metrics-destination-response
                    'make-put-rum-metrics-destination-response))
 (common-lisp:defun make-put-rum-metrics-destination-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'put-rum-metrics-destination-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-rum-metrics-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-rum-metrics-destination-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-rum-metrics-destination-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass query-filter common-lisp:nil
                       ((values :initarg :values :type
                         (common-lisp:or query-filter-value-list
                                         common-lisp:null)
                         :accessor %query-filter-values :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or query-filter-key common-lisp:null)
                         :accessor %query-filter-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'query-filter 'make-query-filter))
 (common-lisp:defun make-query-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key values name)
   (common-lisp:apply #'common-lisp:make-instance 'query-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input query-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input query-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'values))
      (common-lisp:list
       (common-lisp:cons "Values"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input query-filter))
   common-lisp:nil))
(common-lisp:deftype query-filter-key () 'common-lisp:string)
(common-lisp:deftype query-filter-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype query-filter-value-list ()
   '(trivial-types:proper-list query-filter-value))
 (common-lisp:defun |make-query-filter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list query-filter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype query-filters ()
   '(trivial-types:proper-list query-filter))
 (common-lisp:defun |make-query-filters|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list query-filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype query-timestamp () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (rum-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-name :initarg :|resourceName| :initform common-lisp:nil :reader
       resource-not-found-exception-resource-name)
      (resource-type :initarg :|resourceType| :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-name
                    'resource-not-found-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defclass rum-event common-lisp:nil
                       ((type :initarg :|type| :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %rum-event-type :initform
                         (common-lisp:error ":type is required"))
                        (timestamp :initarg common-lisp:string :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %rum-event-timestamp :initform
                         (common-lisp:error ":string is required"))
                        (metadata :initarg :|metadata| :type
                         (common-lisp:or json-value common-lisp:null) :accessor
                         %rum-event-metadata :initform common-lisp:nil)
                        (id :initarg :|id| :type
                         (common-lisp:or rum-event-id-string common-lisp:null)
                         :accessor %rum-event-id :initform
                         (common-lisp:error ":id is required"))
                        (details :initarg :|details| :type
                         (common-lisp:or json-value common-lisp:null) :accessor
                         %rum-event-details :initform
                         (common-lisp:error ":details is required"))))
 (common-lisp:export (common-lisp:list 'rum-event 'make-rum-event))
 (common-lisp:defun make-rum-event
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key type timestamp metadata id details)
   (common-lisp:apply #'common-lisp:make-instance 'rum-event
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input rum-event))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input rum-event))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metadata))
      (common-lisp:list
       (common-lisp:cons "metadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input rum-event))
   common-lisp:nil))
(common-lisp:deftype rum-event-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype rum-event-list () '(trivial-types:proper-list rum-event))
 (common-lisp:defun |make-rum-event-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list rum-event))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (rum-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype session-sample-rate () 'common-lisp:double-float)
(common-lisp:deftype state-enum () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-map common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype telemetries () '(trivial-types:proper-list telemetry))
 (common-lisp:defun |make-telemetries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list telemetry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype telemetry () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (rum-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       throttling-exception-message)
      (quota-code :initarg :|quotaCode| :initform common-lisp:nil :reader
       throttling-exception-quota-code)
      (retry-after-seconds :initarg :|retryAfterSeconds| :initform
       common-lisp:nil :reader throttling-exception-retry-after-seconds)
      (service-code :initarg :|serviceCode| :initform common-lisp:nil :reader
       throttling-exception-service-code)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message
                    'throttling-exception-quota-code
                    'throttling-exception-retry-after-seconds
                    'throttling-exception-service-code)))
(common-lisp:progn
 (common-lisp:defclass time-range common-lisp:nil
                       ((before :initarg :before :type
                         (common-lisp:or query-timestamp common-lisp:null)
                         :accessor %time-range-before :initform
                         common-lisp:nil)
                        (after :initarg :after :type
                         (common-lisp:or query-timestamp common-lisp:null)
                         :accessor %time-range-after :initform
                         (common-lisp:error ":after is required"))))
 (common-lisp:export (common-lisp:list 'time-range 'make-time-range))
 (common-lisp:defun make-time-range
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key before after)
   (common-lisp:apply #'common-lisp:make-instance 'time-range
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after))
      (common-lisp:list
       (common-lisp:cons "After"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'before))
      (common-lisp:list
       (common-lisp:cons "Before"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-range))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:deftype unit-label () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %untag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-app-monitor-request common-lisp:nil
                       ((name :initarg :name :type
                         (common-lisp:or app-monitor-name common-lisp:null)
                         :accessor %update-app-monitor-request-name :initform
                         (common-lisp:error ":name is required"))
                        (domain :initarg :domain :type
                         (common-lisp:or app-monitor-domain common-lisp:null)
                         :accessor %update-app-monitor-request-domain :initform
                         common-lisp:nil)
                        (cw-log-enabled :initarg :cw-log-enabled :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %update-app-monitor-request-cw-log-enabled :initform
                         common-lisp:nil)
                        (custom-events :initarg :custom-events :type
                         (common-lisp:or custom-events common-lisp:null)
                         :accessor %update-app-monitor-request-custom-events
                         :initform common-lisp:nil)
                        (app-monitor-configuration :initarg
                         :app-monitor-configuration :type
                         (common-lisp:or app-monitor-configuration
                                         common-lisp:null)
                         :accessor
                         %update-app-monitor-request-app-monitor-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-app-monitor-request
                    'make-update-app-monitor-request))
 (common-lisp:defun make-update-app-monitor-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key name domain cw-log-enabled custom-events
                     app-monitor-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'update-app-monitor-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-app-monitor-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-app-monitor-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'app-monitor-configuration))
      (common-lisp:list
       (common-lisp:cons "AppMonitorConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-events))
      (common-lisp:list
       (common-lisp:cons "CustomEvents"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cw-log-enabled))
      (common-lisp:list
       (common-lisp:cons "CwLogEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain))
      (common-lisp:list
       (common-lisp:cons "Domain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-app-monitor-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-app-monitor-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-app-monitor-response
                    'make-update-app-monitor-response))
 (common-lisp:defun make-update-app-monitor-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'update-app-monitor-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-app-monitor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-app-monitor-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-app-monitor-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-rum-metric-definition-request common-lisp:nil
                       ((metric-definition-id :initarg :metric-definition-id
                         :type
                         (common-lisp:or metric-definition-id common-lisp:null)
                         :accessor
                         %update-rum-metric-definition-request-metric-definition-id
                         :initform
                         (common-lisp:error
                          ":metric-definition-id is required"))
                        (metric-definition :initarg :metric-definition :type
                         (common-lisp:or metric-definition-request
                                         common-lisp:null)
                         :accessor
                         %update-rum-metric-definition-request-metric-definition
                         :initform
                         (common-lisp:error ":metric-definition is required"))
                        (destination-arn :initarg :destination-arn :type
                         (common-lisp:or destination-arn common-lisp:null)
                         :accessor
                         %update-rum-metric-definition-request-destination-arn
                         :initform common-lisp:nil)
                        (destination :initarg :destination :type
                         (common-lisp:or metric-destination common-lisp:null)
                         :accessor
                         %update-rum-metric-definition-request-destination
                         :initform
                         (common-lisp:error ":destination is required"))
                        (app-monitor-name :initarg :app-monitor-name :type
                         (common-lisp:or app-monitor-name common-lisp:null)
                         :accessor
                         %update-rum-metric-definition-request-app-monitor-name
                         :initform
                         (common-lisp:error ":app-monitor-name is required"))))
 (common-lisp:export
  (common-lisp:list 'update-rum-metric-definition-request
                    'make-update-rum-metric-definition-request))
 (common-lisp:defun make-update-rum-metric-definition-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key metric-definition-id metric-definition
                     destination-arn destination app-monitor-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-rum-metric-definition-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-rum-metric-definition-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-rum-metric-definition-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination))
      (common-lisp:list
       (common-lisp:cons "Destination"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'destination-arn))
      (common-lisp:list
       (common-lisp:cons "DestinationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric-definition))
      (common-lisp:list
       (common-lisp:cons "MetricDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'metric-definition-id))
      (common-lisp:list
       (common-lisp:cons "MetricDefinitionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-rum-metric-definition-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-rum-metric-definition-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'update-rum-metric-definition-response
                    'make-update-rum-metric-definition-response))
 (common-lisp:defun make-update-rum-metric-definition-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-rum-metric-definition-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-rum-metric-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-rum-metric-definition-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-rum-metric-definition-response))
   common-lisp:nil))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass user-details common-lisp:nil
                       ((user-id :initarg :|userId| :type
                         (common-lisp:or user-details-user-id-string
                                         common-lisp:null)
                         :accessor %user-details-user-id :initform
                         common-lisp:nil)
                        (session-id :initarg :|sessionId| :type
                         (common-lisp:or user-details-session-id-string
                                         common-lisp:null)
                         :accessor %user-details-session-id :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'user-details 'make-user-details))
 (common-lisp:defun make-user-details
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key user-id session-id)
   (common-lisp:apply #'common-lisp:make-instance 'user-details
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'session-id))
      (common-lisp:list
       (common-lisp:cons "sessionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "userId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-details))
   common-lisp:nil))
(common-lisp:deftype user-details-session-id-string () 'common-lisp:string)
(common-lisp:deftype user-details-user-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (rum-error)
     ((message :initarg :|message| :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:deftype value-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun batch-create-rum-metric-definitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-monitor-name destination
                     destination-arn metric-definitions)
   (common-lisp:declare
    (common-lisp:ignorable app-monitor-name destination destination-arn
     metric-definitions))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-create-rum-metric-definitions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rum-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rummetrics/~A/metrics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-monitor-name))))
                                                        "BatchCreateRumMetricDefinitions"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-create-rum-metric-definitions))
(common-lisp:progn
 (common-lisp:defun batch-delete-rum-metric-definitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-monitor-name destination
                     destination-arn metric-definition-ids)
   (common-lisp:declare
    (common-lisp:ignorable app-monitor-name destination destination-arn
     metric-definition-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-delete-rum-metric-definitions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rum-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rummetrics/~A/metrics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-monitor-name))))
                                                        "BatchDeleteRumMetricDefinitions"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-delete-rum-metric-definitions))
(common-lisp:progn
 (common-lisp:defun batch-get-rum-metric-definitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-monitor-name destination
                     destination-arn max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable app-monitor-name destination destination-arn
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-rum-metric-definitions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rum-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rummetrics/~A/metrics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-monitor-name))))
                                                        "BatchGetRumMetricDefinitions"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-rum-metric-definitions))
(common-lisp:progn
 (common-lisp:defun create-app-monitor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-monitor-configuration custom-events
                     cw-log-enabled domain name tags)
   (common-lisp:declare
    (common-lisp:ignorable app-monitor-configuration custom-events
     cw-log-enabled domain name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-app-monitor-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rum-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/appmonitor"
                                                        "CreateAppMonitor"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-app-monitor))
(common-lisp:progn
 (common-lisp:defun delete-app-monitor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-app-monitor-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rum-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/appmonitor/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteAppMonitor"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-app-monitor))
(common-lisp:progn
 (common-lisp:defun delete-rum-metrics-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-monitor-name destination
                     destination-arn)
   (common-lisp:declare
    (common-lisp:ignorable app-monitor-name destination destination-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-rum-metrics-destination-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rum-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rummetrics/~A/metricsdestination"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-monitor-name))))
                                                        "DeleteRumMetricsDestination"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-rum-metrics-destination))
(common-lisp:progn
 (common-lisp:defun get-app-monitor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-app-monitor-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rum-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/appmonitor/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetAppMonitor"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-app-monitor))
(common-lisp:progn
 (common-lisp:defun get-app-monitor-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filters max-results name next-token
                     time-range)
   (common-lisp:declare
    (common-lisp:ignorable filters max-results name next-token time-range))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-app-monitor-data-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rum-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/appmonitor/~A/data"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetAppMonitorData"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-app-monitor-data))
(common-lisp:progn
 (common-lisp:defun list-app-monitors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-app-monitors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rum-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/appmonitors"
                                                        "ListAppMonitors"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-app-monitors))
(common-lisp:progn
 (common-lisp:defun list-rum-metrics-destinations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-monitor-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable app-monitor-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-rum-metrics-destinations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rum-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rummetrics/~A/metricsdestination"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-monitor-name))))
                                                        "ListRumMetricsDestinations"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-rum-metrics-destinations))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rum-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-rum-events
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-monitor-details batch-id id
                     rum-events user-details)
   (common-lisp:declare
    (common-lisp:ignorable app-monitor-details batch-id id rum-events
     user-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-rum-events-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rum-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/appmonitors/~A/"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'id))))
                                                        "PutRumEvents"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-rum-events))
(common-lisp:progn
 (common-lisp:defun put-rum-metrics-destination
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-monitor-name destination
                     destination-arn iam-role-arn)
   (common-lisp:declare
    (common-lisp:ignorable app-monitor-name destination destination-arn
     iam-role-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-rum-metrics-destination-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rum-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rummetrics/~A/metricsdestination"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-monitor-name))))
                                                        "PutRumMetricsDestination"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-rum-metrics-destination))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rum-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rum-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-app-monitor
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-monitor-configuration custom-events
                     cw-log-enabled domain name)
   (common-lisp:declare
    (common-lisp:ignorable app-monitor-configuration custom-events
     cw-log-enabled domain name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-app-monitor-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rum-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/appmonitor/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "UpdateAppMonitor"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-app-monitor))
(common-lisp:progn
 (common-lisp:defun update-rum-metric-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key app-monitor-name destination
                     destination-arn metric-definition metric-definition-id)
   (common-lisp:declare
    (common-lisp:ignorable app-monitor-name destination destination-arn
     metric-definition metric-definition-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-rum-metric-definition-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'rum-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/rummetrics/~A/metrics"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'app-monitor-name))))
                                                        "UpdateRumMetricDefinition"
                                                        "2018-05-10"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-rum-metric-definition))
