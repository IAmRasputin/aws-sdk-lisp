;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/apprunner/api
  (:use)
  (:nicknames #:aws/apprunner)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/apprunner/api)
(common-lisp:progn
 (common-lisp:defclass apprunner-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "apprunner" :protocol
                        :json))
 (common-lisp:export 'apprunner-request))
(common-lisp:progn
 (common-lisp:define-condition apprunner-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'apprunner-error))
(common-lisp:defvar *error-map*
  '(("InternalServiceErrorException" . internal-service-error-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("InvalidStateException" . invalid-state-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)))
(common-lisp:deftype asconfig-max-concurrency () 'common-lisp:integer)
(common-lisp:deftype asconfig-max-size () 'common-lisp:integer)
(common-lisp:deftype asconfig-min-size () 'common-lisp:integer)
(common-lisp:deftype app-runner-resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass associate-custom-domain-request common-lisp:nil
                       ((enable-wwwsubdomain :initarg :enable-wwwsubdomain
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         %associate-custom-domain-request-enable-wwwsubdomain
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %associate-custom-domain-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))
                        (service-arn :initarg :service-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor %associate-custom-domain-request-service-arn
                         :initform
                         (common-lisp:error ":service-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-custom-domain-request
                    'make-associate-custom-domain-request))
 (common-lisp:defun make-associate-custom-domain-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key enable-wwwsubdomain domain-name
                     service-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-custom-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-custom-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-custom-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-wwwsubdomain))
      (common-lisp:list
       (common-lisp:cons "EnableWWWSubdomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-custom-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass associate-custom-domain-response common-lisp:nil
                       ((vpc-dnstargets :initarg :vpc-dnstargets :type
                         (common-lisp:or vpc-dnstarget-list common-lisp:null)
                         :accessor
                         %associate-custom-domain-response-vpc-dnstargets
                         :initform
                         (common-lisp:error ":vpc-dnstargets is required"))
                        (custom-domain :initarg :custom-domain :type
                         (common-lisp:or custom-domain common-lisp:null)
                         :accessor
                         %associate-custom-domain-response-custom-domain
                         :initform
                         (common-lisp:error ":custom-domain is required"))
                        (service-arn :initarg :service-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor
                         %associate-custom-domain-response-service-arn
                         :initform
                         (common-lisp:error ":service-arn is required"))
                        (dnstarget :initarg :dnstarget :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %associate-custom-domain-response-dnstarget :initform
                         (common-lisp:error ":dnstarget is required"))))
 (common-lisp:export
  (common-lisp:list 'associate-custom-domain-response
                    'make-associate-custom-domain-response))
 (common-lisp:defun make-associate-custom-domain-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-dnstargets custom-domain service-arn
                     dnstarget)
   (common-lisp:apply #'common-lisp:make-instance
                      'associate-custom-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-custom-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-custom-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dnstarget))
      (common-lisp:list
       (common-lisp:cons "DNSTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-domain))
      (common-lisp:list
       (common-lisp:cons "CustomDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-dnstargets))
      (common-lisp:list
       (common-lisp:cons "VpcDNSTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-custom-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass authentication-configuration common-lisp:nil
                       ((access-role-arn :initarg :access-role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %authentication-configuration-access-role-arn
                         :initform common-lisp:nil)
                        (connection-arn :initarg :connection-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor %authentication-configuration-connection-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'authentication-configuration
                    'make-authentication-configuration))
 (common-lisp:defun make-authentication-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key access-role-arn connection-arn)
   (common-lisp:apply #'common-lisp:make-instance 'authentication-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authentication-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authentication-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-role-arn))
      (common-lisp:list
       (common-lisp:cons "AccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authentication-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass auto-scaling-configuration common-lisp:nil
                       ((deleted-at :initarg :deleted-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %auto-scaling-configuration-deleted-at :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %auto-scaling-configuration-created-at :initform
                         common-lisp:nil)
                        (max-size :initarg :max-size :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %auto-scaling-configuration-max-size :initform
                         common-lisp:nil)
                        (min-size :initarg :min-size :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %auto-scaling-configuration-min-size :initform
                         common-lisp:nil)
                        (max-concurrency :initarg :max-concurrency :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %auto-scaling-configuration-max-concurrency :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or auto-scaling-configuration-status
                                         common-lisp:null)
                         :accessor %auto-scaling-configuration-status :initform
                         common-lisp:nil)
                        (latest :initarg :latest :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %auto-scaling-configuration-latest :initform
                         common-lisp:nil)
                        (auto-scaling-configuration-revision :initarg
                         :auto-scaling-configuration-revision :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %auto-scaling-configuration-auto-scaling-configuration-revision
                         :initform common-lisp:nil)
                        (auto-scaling-configuration-name :initarg
                         :auto-scaling-configuration-name :type
                         (common-lisp:or auto-scaling-configuration-name
                                         common-lisp:null)
                         :accessor
                         %auto-scaling-configuration-auto-scaling-configuration-name
                         :initform common-lisp:nil)
                        (auto-scaling-configuration-arn :initarg
                         :auto-scaling-configuration-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor
                         %auto-scaling-configuration-auto-scaling-configuration-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-configuration
                    'make-auto-scaling-configuration))
 (common-lisp:defun make-auto-scaling-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deleted-at created-at max-size min-size
                     max-concurrency status latest
                     auto-scaling-configuration-revision
                     auto-scaling-configuration-name
                     auto-scaling-configuration-arn)
   (common-lisp:apply #'common-lisp:make-instance 'auto-scaling-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration-revision))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfigurationRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest))
      (common-lisp:list
       (common-lisp:cons "Latest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrency))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-size))
      (common-lisp:list
       (common-lisp:cons "MinSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-size))
      (common-lisp:list
       (common-lisp:cons "MaxSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted-at))
      (common-lisp:list
       (common-lisp:cons "DeletedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-configuration))
   common-lisp:nil))
(common-lisp:deftype auto-scaling-configuration-name () 'common-lisp:string)
(common-lisp:deftype auto-scaling-configuration-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass auto-scaling-configuration-summary common-lisp:nil
                       ((auto-scaling-configuration-revision :initarg
                         :auto-scaling-configuration-revision :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %auto-scaling-configuration-summary-auto-scaling-configuration-revision
                         :initform common-lisp:nil)
                        (auto-scaling-configuration-name :initarg
                         :auto-scaling-configuration-name :type
                         (common-lisp:or auto-scaling-configuration-name
                                         common-lisp:null)
                         :accessor
                         %auto-scaling-configuration-summary-auto-scaling-configuration-name
                         :initform common-lisp:nil)
                        (auto-scaling-configuration-arn :initarg
                         :auto-scaling-configuration-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor
                         %auto-scaling-configuration-summary-auto-scaling-configuration-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-configuration-summary
                    'make-auto-scaling-configuration-summary))
 (common-lisp:defun make-auto-scaling-configuration-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auto-scaling-configuration-revision
                     auto-scaling-configuration-name
                     auto-scaling-configuration-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'auto-scaling-configuration-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-configuration-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-configuration-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration-revision))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfigurationRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-configuration-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auto-scaling-configuration-summary-list ()
   '(trivial-types:proper-list auto-scaling-configuration-summary))
 (common-lisp:defun |make-auto-scaling-configuration-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            auto-scaling-configuration-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype build-command () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass certificate-validation-record common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or certificate-validation-record-status
                                         common-lisp:null)
                         :accessor %certificate-validation-record-status
                         :initform common-lisp:nil)
                        (value :initarg :value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %certificate-validation-record-value :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %certificate-validation-record-type :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %certificate-validation-record-name :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'certificate-validation-record
                    'make-certificate-validation-record))
 (common-lisp:defun make-certificate-validation-record
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status value type name)
   (common-lisp:apply #'common-lisp:make-instance
                      'certificate-validation-record
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          certificate-validation-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          certificate-validation-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          certificate-validation-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype certificate-validation-record-list ()
   '(trivial-types:proper-list certificate-validation-record))
 (common-lisp:defun |make-certificate-validation-record-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            certificate-validation-record))
   aws-sdk/generator/shape::members))
(common-lisp:deftype certificate-validation-record-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass code-configuration common-lisp:nil
                       ((code-configuration-values :initarg
                         :code-configuration-values :type
                         (common-lisp:or code-configuration-values
                                         common-lisp:null)
                         :accessor
                         %code-configuration-code-configuration-values
                         :initform common-lisp:nil)
                        (configuration-source :initarg :configuration-source
                         :type
                         (common-lisp:or configuration-source common-lisp:null)
                         :accessor %code-configuration-configuration-source
                         :initform
                         (common-lisp:error
                          ":configuration-source is required"))))
 (common-lisp:export
  (common-lisp:list 'code-configuration 'make-code-configuration))
 (common-lisp:defun make-code-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key code-configuration-values
                     configuration-source)
   (common-lisp:apply #'common-lisp:make-instance 'code-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-source))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-configuration-values))
      (common-lisp:list
       (common-lisp:cons "CodeConfigurationValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass code-configuration-values common-lisp:nil
                       ((runtime-environment-secrets :initarg
                         :runtime-environment-secrets :type
                         (common-lisp:or runtime-environment-secrets
                                         common-lisp:null)
                         :accessor
                         %code-configuration-values-runtime-environment-secrets
                         :initform common-lisp:nil)
                        (runtime-environment-variables :initarg
                         :runtime-environment-variables :type
                         (common-lisp:or runtime-environment-variables
                                         common-lisp:null)
                         :accessor
                         %code-configuration-values-runtime-environment-variables
                         :initform common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %code-configuration-values-port :initform
                         common-lisp:nil)
                        (start-command :initarg :start-command :type
                         (common-lisp:or start-command common-lisp:null)
                         :accessor %code-configuration-values-start-command
                         :initform common-lisp:nil)
                        (build-command :initarg :build-command :type
                         (common-lisp:or build-command common-lisp:null)
                         :accessor %code-configuration-values-build-command
                         :initform common-lisp:nil)
                        (runtime :initarg :runtime :type
                         (common-lisp:or runtime common-lisp:null) :accessor
                         %code-configuration-values-runtime :initform
                         (common-lisp:error ":runtime is required"))))
 (common-lisp:export
  (common-lisp:list 'code-configuration-values
                    'make-code-configuration-values))
 (common-lisp:defun make-code-configuration-values
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key runtime-environment-secrets
                     runtime-environment-variables port start-command
                     build-command runtime)
   (common-lisp:apply #'common-lisp:make-instance 'code-configuration-values
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          code-configuration-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          code-configuration-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "Runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build-command))
      (common-lisp:list
       (common-lisp:cons "BuildCommand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-command))
      (common-lisp:list
       (common-lisp:cons "StartCommand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'runtime-environment-variables))
      (common-lisp:list
       (common-lisp:cons "RuntimeEnvironmentVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'runtime-environment-secrets))
      (common-lisp:list
       (common-lisp:cons "RuntimeEnvironmentSecrets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          code-configuration-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass code-repository common-lisp:nil
                       ((code-configuration :initarg :code-configuration :type
                         (common-lisp:or code-configuration common-lisp:null)
                         :accessor %code-repository-code-configuration
                         :initform common-lisp:nil)
                        (source-code-version :initarg :source-code-version
                         :type
                         (common-lisp:or source-code-version common-lisp:null)
                         :accessor %code-repository-source-code-version
                         :initform
                         (common-lisp:error
                          ":source-code-version is required"))
                        (repository-url :initarg :repository-url :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %code-repository-repository-url :initform
                         (common-lisp:error ":repository-url is required"))))
 (common-lisp:export (common-lisp:list 'code-repository 'make-code-repository))
 (common-lisp:defun make-code-repository
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key code-configuration source-code-version
                     repository-url)
   (common-lisp:apply #'common-lisp:make-instance 'code-repository
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-repository))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-repository))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-url))
      (common-lisp:list
       (common-lisp:cons "RepositoryUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-code-version))
      (common-lisp:list
       (common-lisp:cons "SourceCodeVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-configuration))
      (common-lisp:list
       (common-lisp:cons "CodeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-repository))
   common-lisp:nil))
(common-lisp:deftype configuration-source () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass connection common-lisp:nil
                       ((created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %connection-created-at :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or connection-status common-lisp:null)
                         :accessor %connection-status :initform
                         common-lisp:nil)
                        (provider-type :initarg :provider-type :type
                         (common-lisp:or provider-type common-lisp:null)
                         :accessor %connection-provider-type :initform
                         common-lisp:nil)
                        (connection-arn :initarg :connection-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor %connection-connection-arn :initform
                         common-lisp:nil)
                        (connection-name :initarg :connection-name :type
                         (common-lisp:or connection-name common-lisp:null)
                         :accessor %connection-connection-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'connection 'make-connection))
 (common-lisp:defun make-connection
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-at status provider-type
                     connection-arn connection-name)
   (common-lisp:apply #'common-lisp:make-instance 'connection
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connection))
   common-lisp:nil))
(common-lisp:deftype connection-name () 'common-lisp:string)
(common-lisp:deftype connection-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass connection-summary common-lisp:nil
                       ((created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %connection-summary-created-at :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or connection-status common-lisp:null)
                         :accessor %connection-summary-status :initform
                         common-lisp:nil)
                        (provider-type :initarg :provider-type :type
                         (common-lisp:or provider-type common-lisp:null)
                         :accessor %connection-summary-provider-type :initform
                         common-lisp:nil)
                        (connection-arn :initarg :connection-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor %connection-summary-connection-arn :initform
                         common-lisp:nil)
                        (connection-name :initarg :connection-name :type
                         (common-lisp:or connection-name common-lisp:null)
                         :accessor %connection-summary-connection-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'connection-summary 'make-connection-summary))
 (common-lisp:defun make-connection-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key created-at status provider-type
                     connection-arn connection-name)
   (common-lisp:apply #'common-lisp:make-instance 'connection-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connection-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connection-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connection-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype connection-summary-list ()
   '(trivial-types:proper-list connection-summary))
 (common-lisp:defun |make-connection-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connection-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cpu () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass create-auto-scaling-configuration-request
                       common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-auto-scaling-configuration-request-tags
                         :initform common-lisp:nil)
                        (max-size :initarg :max-size :type
                         (common-lisp:or asconfig-max-size common-lisp:null)
                         :accessor
                         %create-auto-scaling-configuration-request-max-size
                         :initform common-lisp:nil)
                        (min-size :initarg :min-size :type
                         (common-lisp:or asconfig-min-size common-lisp:null)
                         :accessor
                         %create-auto-scaling-configuration-request-min-size
                         :initform common-lisp:nil)
                        (max-concurrency :initarg :max-concurrency :type
                         (common-lisp:or asconfig-max-concurrency
                                         common-lisp:null)
                         :accessor
                         %create-auto-scaling-configuration-request-max-concurrency
                         :initform common-lisp:nil)
                        (auto-scaling-configuration-name :initarg
                         :auto-scaling-configuration-name :type
                         (common-lisp:or auto-scaling-configuration-name
                                         common-lisp:null)
                         :accessor
                         %create-auto-scaling-configuration-request-auto-scaling-configuration-name
                         :initform
                         (common-lisp:error
                          ":auto-scaling-configuration-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-auto-scaling-configuration-request
                    'make-create-auto-scaling-configuration-request))
 (common-lisp:defun make-create-auto-scaling-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags max-size min-size max-concurrency
                     auto-scaling-configuration-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-auto-scaling-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-scaling-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-scaling-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrency))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-size))
      (common-lisp:list
       (common-lisp:cons "MinSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-size))
      (common-lisp:list
       (common-lisp:cons "MaxSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-scaling-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-auto-scaling-configuration-response
                       common-lisp:nil
                       ((auto-scaling-configuration :initarg
                         :auto-scaling-configuration :type
                         (common-lisp:or auto-scaling-configuration
                                         common-lisp:null)
                         :accessor
                         %create-auto-scaling-configuration-response-auto-scaling-configuration
                         :initform
                         (common-lisp:error
                          ":auto-scaling-configuration is required"))))
 (common-lisp:export
  (common-lisp:list 'create-auto-scaling-configuration-response
                    'make-create-auto-scaling-configuration-response))
 (common-lisp:defun make-create-auto-scaling-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auto-scaling-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-auto-scaling-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-scaling-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-scaling-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-scaling-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-connection-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-connection-request-tags :initform
                         common-lisp:nil)
                        (provider-type :initarg :provider-type :type
                         (common-lisp:or provider-type common-lisp:null)
                         :accessor %create-connection-request-provider-type
                         :initform
                         (common-lisp:error ":provider-type is required"))
                        (connection-name :initarg :connection-name :type
                         (common-lisp:or connection-name common-lisp:null)
                         :accessor %create-connection-request-connection-name
                         :initform
                         (common-lisp:error ":connection-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-connection-request
                    'make-create-connection-request))
 (common-lisp:defun make-create-connection-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags provider-type connection-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-connection-response common-lisp:nil
                       ((connection :initarg :connection :type
                         (common-lisp:or connection common-lisp:null) :accessor
                         %create-connection-response-connection :initform
                         (common-lisp:error ":connection is required"))))
 (common-lisp:export
  (common-lisp:list 'create-connection-response
                    'make-create-connection-response))
 (common-lisp:defun make-create-connection-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection)
   (common-lisp:apply #'common-lisp:make-instance 'create-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection))
      (common-lisp:list
       (common-lisp:cons "Connection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-observability-configuration-request
                       common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-observability-configuration-request-tags
                         :initform common-lisp:nil)
                        (trace-configuration :initarg :trace-configuration
                         :type
                         (common-lisp:or trace-configuration common-lisp:null)
                         :accessor
                         %create-observability-configuration-request-trace-configuration
                         :initform common-lisp:nil)
                        (observability-configuration-name :initarg
                         :observability-configuration-name :type
                         (common-lisp:or observability-configuration-name
                                         common-lisp:null)
                         :accessor
                         %create-observability-configuration-request-observability-configuration-name
                         :initform
                         (common-lisp:error
                          ":observability-configuration-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-observability-configuration-request
                    'make-create-observability-configuration-request))
 (common-lisp:defun make-create-observability-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags trace-configuration
                     observability-configuration-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-observability-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-observability-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-observability-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration-name))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trace-configuration))
      (common-lisp:list
       (common-lisp:cons "TraceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-observability-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-observability-configuration-response
                       common-lisp:nil
                       ((observability-configuration :initarg
                         :observability-configuration :type
                         (common-lisp:or observability-configuration
                                         common-lisp:null)
                         :accessor
                         %create-observability-configuration-response-observability-configuration
                         :initform
                         (common-lisp:error
                          ":observability-configuration is required"))))
 (common-lisp:export
  (common-lisp:list 'create-observability-configuration-response
                    'make-create-observability-configuration-response))
 (common-lisp:defun make-create-observability-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key observability-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-observability-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-observability-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-observability-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-observability-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-service-request common-lisp:nil
                       ((observability-configuration :initarg
                         :observability-configuration :type
                         (common-lisp:or service-observability-configuration
                                         common-lisp:null)
                         :accessor
                         %create-service-request-observability-configuration
                         :initform common-lisp:nil)
                        (network-configuration :initarg :network-configuration
                         :type
                         (common-lisp:or network-configuration
                                         common-lisp:null)
                         :accessor
                         %create-service-request-network-configuration
                         :initform common-lisp:nil)
                        (auto-scaling-configuration-arn :initarg
                         :auto-scaling-configuration-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor
                         %create-service-request-auto-scaling-configuration-arn
                         :initform common-lisp:nil)
                        (health-check-configuration :initarg
                         :health-check-configuration :type
                         (common-lisp:or health-check-configuration
                                         common-lisp:null)
                         :accessor
                         %create-service-request-health-check-configuration
                         :initform common-lisp:nil)
                        (encryption-configuration :initarg
                         :encryption-configuration :type
                         (common-lisp:or encryption-configuration
                                         common-lisp:null)
                         :accessor
                         %create-service-request-encryption-configuration
                         :initform common-lisp:nil)
                        (tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-service-request-tags :initform
                         common-lisp:nil)
                        (instance-configuration :initarg
                         :instance-configuration :type
                         (common-lisp:or instance-configuration
                                         common-lisp:null)
                         :accessor
                         %create-service-request-instance-configuration
                         :initform common-lisp:nil)
                        (source-configuration :initarg :source-configuration
                         :type
                         (common-lisp:or source-configuration common-lisp:null)
                         :accessor %create-service-request-source-configuration
                         :initform
                         (common-lisp:error
                          ":source-configuration is required"))
                        (service-name :initarg :service-name :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor %create-service-request-service-name
                         :initform
                         (common-lisp:error ":service-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-service-request 'make-create-service-request))
 (common-lisp:defun make-create-service-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key observability-configuration
                     network-configuration auto-scaling-configuration-arn
                     health-check-configuration encryption-configuration tags
                     instance-configuration source-configuration service-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-service-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-configuration))
      (common-lisp:list
       (common-lisp:cons "SourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-configuration))
      (common-lisp:list
       (common-lisp:cons "InstanceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-configuration))
      (common-lisp:list
       (common-lisp:cons "HealthCheckConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "NetworkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-service-response common-lisp:nil
                       ((operation-id :initarg :operation-id :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %create-service-response-operation-id :initform
                         (common-lisp:error ":operation-id is required"))
                        (service :initarg :service :type
                         (common-lisp:or service common-lisp:null) :accessor
                         %create-service-response-service :initform
                         (common-lisp:error ":service is required"))))
 (common-lisp:export
  (common-lisp:list 'create-service-response 'make-create-service-response))
 (common-lisp:defun make-create-service-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-id service)
   (common-lisp:apply #'common-lisp:make-instance 'create-service-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vpc-connector-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-vpc-connector-request-tags :initform
                         common-lisp:nil)
                        (security-groups :initarg :security-groups :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor
                         %create-vpc-connector-request-security-groups
                         :initform common-lisp:nil)
                        (subnets :initarg :subnets :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %create-vpc-connector-request-subnets
                         :initform (common-lisp:error ":subnets is required"))
                        (vpc-connector-name :initarg :vpc-connector-name :type
                         (common-lisp:or vpc-connector-name common-lisp:null)
                         :accessor
                         %create-vpc-connector-request-vpc-connector-name
                         :initform
                         (common-lisp:error
                          ":vpc-connector-name is required"))))
 (common-lisp:export
  (common-lisp:list 'create-vpc-connector-request
                    'make-create-vpc-connector-request))
 (common-lisp:defun make-create-vpc-connector-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags security-groups subnets
                     vpc-connector-name)
   (common-lisp:apply #'common-lisp:make-instance 'create-vpc-connector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-connector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connector-name))
      (common-lisp:list
       (common-lisp:cons "VpcConnectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vpc-connector-response common-lisp:nil
                       ((vpc-connector :initarg :vpc-connector :type
                         (common-lisp:or vpc-connector common-lisp:null)
                         :accessor %create-vpc-connector-response-vpc-connector
                         :initform
                         (common-lisp:error ":vpc-connector is required"))))
 (common-lisp:export
  (common-lisp:list 'create-vpc-connector-response
                    'make-create-vpc-connector-response))
 (common-lisp:defun make-create-vpc-connector-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-connector)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-vpc-connector-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-connector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-connector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connector))
      (common-lisp:list
       (common-lisp:cons "VpcConnector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-connector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vpc-ingress-connection-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %create-vpc-ingress-connection-request-tags :initform
                         common-lisp:nil)
                        (ingress-vpc-configuration :initarg
                         :ingress-vpc-configuration :type
                         (common-lisp:or ingress-vpc-configuration
                                         common-lisp:null)
                         :accessor
                         %create-vpc-ingress-connection-request-ingress-vpc-configuration
                         :initform
                         (common-lisp:error
                          ":ingress-vpc-configuration is required"))
                        (vpc-ingress-connection-name :initarg
                         :vpc-ingress-connection-name :type
                         (common-lisp:or vpc-ingress-connection-name
                                         common-lisp:null)
                         :accessor
                         %create-vpc-ingress-connection-request-vpc-ingress-connection-name
                         :initform
                         (common-lisp:error
                          ":vpc-ingress-connection-name is required"))
                        (service-arn :initarg :service-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor
                         %create-vpc-ingress-connection-request-service-arn
                         :initform
                         (common-lisp:error ":service-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'create-vpc-ingress-connection-request
                    'make-create-vpc-ingress-connection-request))
 (common-lisp:defun make-create-vpc-ingress-connection-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags ingress-vpc-configuration
                     vpc-ingress-connection-name service-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-vpc-ingress-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-ingress-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-ingress-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-ingress-connection-name))
      (common-lisp:list
       (common-lisp:cons "VpcIngressConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingress-vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "IngressVpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-ingress-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass create-vpc-ingress-connection-response common-lisp:nil
                       ((vpc-ingress-connection :initarg
                         :vpc-ingress-connection :type
                         (common-lisp:or vpc-ingress-connection
                                         common-lisp:null)
                         :accessor
                         %create-vpc-ingress-connection-response-vpc-ingress-connection
                         :initform
                         (common-lisp:error
                          ":vpc-ingress-connection is required"))))
 (common-lisp:export
  (common-lisp:list 'create-vpc-ingress-connection-response
                    'make-create-vpc-ingress-connection-response))
 (common-lisp:defun make-create-vpc-ingress-connection-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-ingress-connection)
   (common-lisp:apply #'common-lisp:make-instance
                      'create-vpc-ingress-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-ingress-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-ingress-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-ingress-connection))
      (common-lisp:list
       (common-lisp:cons "VpcIngressConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-ingress-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass custom-domain common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or custom-domain-association-status
                                         common-lisp:null)
                         :accessor %custom-domain-status :initform
                         (common-lisp:error ":status is required"))
                        (certificate-validation-records :initarg
                         :certificate-validation-records :type
                         (common-lisp:or certificate-validation-record-list
                                         common-lisp:null)
                         :accessor
                         %custom-domain-certificate-validation-records
                         :initform common-lisp:nil)
                        (enable-wwwsubdomain :initarg :enable-wwwsubdomain
                         :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor %custom-domain-enable-wwwsubdomain :initform
                         (common-lisp:error
                          ":enable-wwwsubdomain is required"))
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %custom-domain-domain-name :initform
                         (common-lisp:error ":domain-name is required"))))
 (common-lisp:export (common-lisp:list 'custom-domain 'make-custom-domain))
 (common-lisp:defun make-custom-domain
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status certificate-validation-records
                     enable-wwwsubdomain domain-name)
   (common-lisp:apply #'common-lisp:make-instance 'custom-domain
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-domain))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-domain))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-wwwsubdomain))
      (common-lisp:list
       (common-lisp:cons "EnableWWWSubdomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-validation-records))
      (common-lisp:list
       (common-lisp:cons "CertificateValidationRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-domain))
   common-lisp:nil))
(common-lisp:deftype custom-domain-association-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype custom-domain-list ()
   '(trivial-types:proper-list custom-domain))
 (common-lisp:defun |make-custom-domain-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-domain))
   aws-sdk/generator/shape::members))
(common-lisp:deftype customer-account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-auto-scaling-configuration-request
                       common-lisp:nil
                       ((auto-scaling-configuration-arn :initarg
                         :auto-scaling-configuration-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor
                         %delete-auto-scaling-configuration-request-auto-scaling-configuration-arn
                         :initform
                         (common-lisp:error
                          ":auto-scaling-configuration-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-auto-scaling-configuration-request
                    'make-delete-auto-scaling-configuration-request))
 (common-lisp:defun make-delete-auto-scaling-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auto-scaling-configuration-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-auto-scaling-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-scaling-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-scaling-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-scaling-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-auto-scaling-configuration-response
                       common-lisp:nil
                       ((auto-scaling-configuration :initarg
                         :auto-scaling-configuration :type
                         (common-lisp:or auto-scaling-configuration
                                         common-lisp:null)
                         :accessor
                         %delete-auto-scaling-configuration-response-auto-scaling-configuration
                         :initform
                         (common-lisp:error
                          ":auto-scaling-configuration is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-auto-scaling-configuration-response
                    'make-delete-auto-scaling-configuration-response))
 (common-lisp:defun make-delete-auto-scaling-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auto-scaling-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-auto-scaling-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-scaling-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-scaling-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-scaling-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-connection-request common-lisp:nil
                       ((connection-arn :initarg :connection-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor %delete-connection-request-connection-arn
                         :initform
                         (common-lisp:error ":connection-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-connection-request
                    'make-delete-connection-request))
 (common-lisp:defun make-delete-connection-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-connection-response common-lisp:nil
                       ((connection :initarg :connection :type
                         (common-lisp:or connection common-lisp:null) :accessor
                         %delete-connection-response-connection :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-connection-response
                    'make-delete-connection-response))
 (common-lisp:defun make-delete-connection-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key connection)
   (common-lisp:apply #'common-lisp:make-instance 'delete-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection))
      (common-lisp:list
       (common-lisp:cons "Connection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-observability-configuration-request
                       common-lisp:nil
                       ((observability-configuration-arn :initarg
                         :observability-configuration-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor
                         %delete-observability-configuration-request-observability-configuration-arn
                         :initform
                         (common-lisp:error
                          ":observability-configuration-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-observability-configuration-request
                    'make-delete-observability-configuration-request))
 (common-lisp:defun make-delete-observability-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key observability-configuration-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-observability-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-observability-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-observability-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-observability-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-observability-configuration-response
                       common-lisp:nil
                       ((observability-configuration :initarg
                         :observability-configuration :type
                         (common-lisp:or observability-configuration
                                         common-lisp:null)
                         :accessor
                         %delete-observability-configuration-response-observability-configuration
                         :initform
                         (common-lisp:error
                          ":observability-configuration is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-observability-configuration-response
                    'make-delete-observability-configuration-response))
 (common-lisp:defun make-delete-observability-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key observability-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-observability-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-observability-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-observability-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-observability-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-service-request common-lisp:nil
                       ((service-arn :initarg :service-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor %delete-service-request-service-arn
                         :initform
                         (common-lisp:error ":service-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-service-request 'make-delete-service-request))
 (common-lisp:defun make-delete-service-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-service-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-service-response common-lisp:nil
                       ((operation-id :initarg :operation-id :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %delete-service-response-operation-id :initform
                         (common-lisp:error ":operation-id is required"))
                        (service :initarg :service :type
                         (common-lisp:or service common-lisp:null) :accessor
                         %delete-service-response-service :initform
                         (common-lisp:error ":service is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-service-response 'make-delete-service-response))
 (common-lisp:defun make-delete-service-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-id service)
   (common-lisp:apply #'common-lisp:make-instance 'delete-service-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-vpc-connector-request common-lisp:nil
                       ((vpc-connector-arn :initarg :vpc-connector-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor
                         %delete-vpc-connector-request-vpc-connector-arn
                         :initform
                         (common-lisp:error
                          ":vpc-connector-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-vpc-connector-request
                    'make-delete-vpc-connector-request))
 (common-lisp:defun make-delete-vpc-connector-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-connector-arn)
   (common-lisp:apply #'common-lisp:make-instance 'delete-vpc-connector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-connector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connector-arn))
      (common-lisp:list
       (common-lisp:cons "VpcConnectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-vpc-connector-response common-lisp:nil
                       ((vpc-connector :initarg :vpc-connector :type
                         (common-lisp:or vpc-connector common-lisp:null)
                         :accessor %delete-vpc-connector-response-vpc-connector
                         :initform
                         (common-lisp:error ":vpc-connector is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-vpc-connector-response
                    'make-delete-vpc-connector-response))
 (common-lisp:defun make-delete-vpc-connector-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-connector)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-vpc-connector-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-connector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-connector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connector))
      (common-lisp:list
       (common-lisp:cons "VpcConnector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-connector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-vpc-ingress-connection-request common-lisp:nil
                       ((vpc-ingress-connection-arn :initarg
                         :vpc-ingress-connection-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor
                         %delete-vpc-ingress-connection-request-vpc-ingress-connection-arn
                         :initform
                         (common-lisp:error
                          ":vpc-ingress-connection-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-vpc-ingress-connection-request
                    'make-delete-vpc-ingress-connection-request))
 (common-lisp:defun make-delete-vpc-ingress-connection-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-ingress-connection-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-vpc-ingress-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-ingress-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-ingress-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-ingress-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpcIngressConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-ingress-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-vpc-ingress-connection-response common-lisp:nil
                       ((vpc-ingress-connection :initarg
                         :vpc-ingress-connection :type
                         (common-lisp:or vpc-ingress-connection
                                         common-lisp:null)
                         :accessor
                         %delete-vpc-ingress-connection-response-vpc-ingress-connection
                         :initform
                         (common-lisp:error
                          ":vpc-ingress-connection is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-vpc-ingress-connection-response
                    'make-delete-vpc-ingress-connection-response))
 (common-lisp:defun make-delete-vpc-ingress-connection-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-ingress-connection)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-vpc-ingress-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-ingress-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-ingress-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-ingress-connection))
      (common-lisp:list
       (common-lisp:cons "VpcIngressConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-ingress-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-auto-scaling-configuration-request
                       common-lisp:nil
                       ((auto-scaling-configuration-arn :initarg
                         :auto-scaling-configuration-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor
                         %describe-auto-scaling-configuration-request-auto-scaling-configuration-arn
                         :initform
                         (common-lisp:error
                          ":auto-scaling-configuration-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-auto-scaling-configuration-request
                    'make-describe-auto-scaling-configuration-request))
 (common-lisp:defun make-describe-auto-scaling-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auto-scaling-configuration-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-auto-scaling-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-scaling-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-scaling-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-scaling-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-auto-scaling-configuration-response
                       common-lisp:nil
                       ((auto-scaling-configuration :initarg
                         :auto-scaling-configuration :type
                         (common-lisp:or auto-scaling-configuration
                                         common-lisp:null)
                         :accessor
                         %describe-auto-scaling-configuration-response-auto-scaling-configuration
                         :initform
                         (common-lisp:error
                          ":auto-scaling-configuration is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-auto-scaling-configuration-response
                    'make-describe-auto-scaling-configuration-response))
 (common-lisp:defun make-describe-auto-scaling-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key auto-scaling-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-auto-scaling-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-scaling-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-scaling-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-scaling-configuration-response))
   common-lisp:nil))
(common-lisp:deftype describe-custom-domains-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass describe-custom-domains-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or describe-custom-domains-max-results
                                         common-lisp:null)
                         :accessor %describe-custom-domains-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-custom-domains-request-next-token :initform
                         common-lisp:nil)
                        (service-arn :initarg :service-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor %describe-custom-domains-request-service-arn
                         :initform
                         (common-lisp:error ":service-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-custom-domains-request
                    'make-describe-custom-domains-request))
 (common-lisp:defun make-describe-custom-domains-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token service-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-custom-domains-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-domains-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-domains-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-domains-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-custom-domains-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-custom-domains-response-next-token :initform
                         common-lisp:nil)
                        (vpc-dnstargets :initarg :vpc-dnstargets :type
                         (common-lisp:or vpc-dnstarget-list common-lisp:null)
                         :accessor
                         %describe-custom-domains-response-vpc-dnstargets
                         :initform
                         (common-lisp:error ":vpc-dnstargets is required"))
                        (custom-domains :initarg :custom-domains :type
                         (common-lisp:or custom-domain-list common-lisp:null)
                         :accessor
                         %describe-custom-domains-response-custom-domains
                         :initform
                         (common-lisp:error ":custom-domains is required"))
                        (service-arn :initarg :service-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor
                         %describe-custom-domains-response-service-arn
                         :initform
                         (common-lisp:error ":service-arn is required"))
                        (dnstarget :initarg :dnstarget :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %describe-custom-domains-response-dnstarget :initform
                         (common-lisp:error ":dnstarget is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-custom-domains-response
                    'make-describe-custom-domains-response))
 (common-lisp:defun make-describe-custom-domains-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token vpc-dnstargets custom-domains
                     service-arn dnstarget)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-custom-domains-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-domains-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-domains-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dnstarget))
      (common-lisp:list
       (common-lisp:cons "DNSTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-domains))
      (common-lisp:list
       (common-lisp:cons "CustomDomains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-dnstargets))
      (common-lisp:list
       (common-lisp:cons "VpcDNSTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-domains-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-observability-configuration-request
                       common-lisp:nil
                       ((observability-configuration-arn :initarg
                         :observability-configuration-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor
                         %describe-observability-configuration-request-observability-configuration-arn
                         :initform
                         (common-lisp:error
                          ":observability-configuration-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-observability-configuration-request
                    'make-describe-observability-configuration-request))
 (common-lisp:defun make-describe-observability-configuration-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key observability-configuration-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-observability-configuration-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-observability-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-observability-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-observability-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-observability-configuration-response
                       common-lisp:nil
                       ((observability-configuration :initarg
                         :observability-configuration :type
                         (common-lisp:or observability-configuration
                                         common-lisp:null)
                         :accessor
                         %describe-observability-configuration-response-observability-configuration
                         :initform
                         (common-lisp:error
                          ":observability-configuration is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-observability-configuration-response
                    'make-describe-observability-configuration-response))
 (common-lisp:defun make-describe-observability-configuration-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key observability-configuration)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-observability-configuration-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-observability-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-observability-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-observability-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-service-request common-lisp:nil
                       ((service-arn :initarg :service-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor %describe-service-request-service-arn
                         :initform
                         (common-lisp:error ":service-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-service-request 'make-describe-service-request))
 (common-lisp:defun make-describe-service-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-arn)
   (common-lisp:apply #'common-lisp:make-instance 'describe-service-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-service-response common-lisp:nil
                       ((service :initarg :service :type
                         (common-lisp:or service common-lisp:null) :accessor
                         %describe-service-response-service :initform
                         (common-lisp:error ":service is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-service-response
                    'make-describe-service-response))
 (common-lisp:defun make-describe-service-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service)
   (common-lisp:apply #'common-lisp:make-instance 'describe-service-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-vpc-connector-request common-lisp:nil
                       ((vpc-connector-arn :initarg :vpc-connector-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor
                         %describe-vpc-connector-request-vpc-connector-arn
                         :initform
                         (common-lisp:error
                          ":vpc-connector-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-connector-request
                    'make-describe-vpc-connector-request))
 (common-lisp:defun make-describe-vpc-connector-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-connector-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-vpc-connector-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-connector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connector-arn))
      (common-lisp:list
       (common-lisp:cons "VpcConnectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-vpc-connector-response common-lisp:nil
                       ((vpc-connector :initarg :vpc-connector :type
                         (common-lisp:or vpc-connector common-lisp:null)
                         :accessor
                         %describe-vpc-connector-response-vpc-connector
                         :initform
                         (common-lisp:error ":vpc-connector is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-connector-response
                    'make-describe-vpc-connector-response))
 (common-lisp:defun make-describe-vpc-connector-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-connector)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-vpc-connector-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-connector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-connector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connector))
      (common-lisp:list
       (common-lisp:cons "VpcConnector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-connector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-vpc-ingress-connection-request common-lisp:nil
                       ((vpc-ingress-connection-arn :initarg
                         :vpc-ingress-connection-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor
                         %describe-vpc-ingress-connection-request-vpc-ingress-connection-arn
                         :initform
                         (common-lisp:error
                          ":vpc-ingress-connection-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-ingress-connection-request
                    'make-describe-vpc-ingress-connection-request))
 (common-lisp:defun make-describe-vpc-ingress-connection-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-ingress-connection-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-vpc-ingress-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-ingress-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-ingress-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-ingress-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpcIngressConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-ingress-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-vpc-ingress-connection-response common-lisp:nil
                       ((vpc-ingress-connection :initarg
                         :vpc-ingress-connection :type
                         (common-lisp:or vpc-ingress-connection
                                         common-lisp:null)
                         :accessor
                         %describe-vpc-ingress-connection-response-vpc-ingress-connection
                         :initform
                         (common-lisp:error
                          ":vpc-ingress-connection is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-ingress-connection-response
                    'make-describe-vpc-ingress-connection-response))
 (common-lisp:defun make-describe-vpc-ingress-connection-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-ingress-connection)
   (common-lisp:apply #'common-lisp:make-instance
                      'describe-vpc-ingress-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-ingress-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-ingress-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-ingress-connection))
      (common-lisp:list
       (common-lisp:cons "VpcIngressConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-ingress-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-custom-domain-request common-lisp:nil
                       ((domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor
                         %disassociate-custom-domain-request-domain-name
                         :initform
                         (common-lisp:error ":domain-name is required"))
                        (service-arn :initarg :service-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor
                         %disassociate-custom-domain-request-service-arn
                         :initform
                         (common-lisp:error ":service-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-custom-domain-request
                    'make-disassociate-custom-domain-request))
 (common-lisp:defun make-disassociate-custom-domain-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name service-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-custom-domain-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-custom-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-custom-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-custom-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass disassociate-custom-domain-response common-lisp:nil
                       ((vpc-dnstargets :initarg :vpc-dnstargets :type
                         (common-lisp:or vpc-dnstarget-list common-lisp:null)
                         :accessor
                         %disassociate-custom-domain-response-vpc-dnstargets
                         :initform
                         (common-lisp:error ":vpc-dnstargets is required"))
                        (custom-domain :initarg :custom-domain :type
                         (common-lisp:or custom-domain common-lisp:null)
                         :accessor
                         %disassociate-custom-domain-response-custom-domain
                         :initform
                         (common-lisp:error ":custom-domain is required"))
                        (service-arn :initarg :service-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor
                         %disassociate-custom-domain-response-service-arn
                         :initform
                         (common-lisp:error ":service-arn is required"))
                        (dnstarget :initarg :dnstarget :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %disassociate-custom-domain-response-dnstarget
                         :initform
                         (common-lisp:error ":dnstarget is required"))))
 (common-lisp:export
  (common-lisp:list 'disassociate-custom-domain-response
                    'make-disassociate-custom-domain-response))
 (common-lisp:defun make-disassociate-custom-domain-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-dnstargets custom-domain service-arn
                     dnstarget)
   (common-lisp:apply #'common-lisp:make-instance
                      'disassociate-custom-domain-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-custom-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-custom-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dnstarget))
      (common-lisp:list
       (common-lisp:cons "DNSTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-domain))
      (common-lisp:list
       (common-lisp:cons "CustomDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-dnstargets))
      (common-lisp:list
       (common-lisp:cons "VpcDNSTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-custom-domain-response))
   common-lisp:nil))
(common-lisp:deftype domain-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass egress-configuration common-lisp:nil
                       ((vpc-connector-arn :initarg :vpc-connector-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor %egress-configuration-vpc-connector-arn
                         :initform common-lisp:nil)
                        (egress-type :initarg :egress-type :type
                         (common-lisp:or egress-type common-lisp:null)
                         :accessor %egress-configuration-egress-type :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'egress-configuration 'make-egress-configuration))
 (common-lisp:defun make-egress-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-connector-arn egress-type)
   (common-lisp:apply #'common-lisp:make-instance 'egress-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input egress-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input egress-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-type))
      (common-lisp:list
       (common-lisp:cons "EgressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connector-arn))
      (common-lisp:list
       (common-lisp:cons "VpcConnectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input egress-configuration))
   common-lisp:nil))
(common-lisp:deftype egress-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass encryption-configuration common-lisp:nil
                       ((kms-key :initarg :kms-key :type
                         (common-lisp:or kms-key-arn common-lisp:null)
                         :accessor %encryption-configuration-kms-key :initform
                         (common-lisp:error ":kms-key is required"))))
 (common-lisp:export
  (common-lisp:list 'encryption-configuration 'make-encryption-configuration))
 (common-lisp:defun make-encryption-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key kms-key)
   (common-lisp:apply #'common-lisp:make-instance 'encryption-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key))
      (common-lisp:list
       (common-lisp:cons "KmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass health-check-configuration common-lisp:nil
                       ((unhealthy-threshold :initarg :unhealthy-threshold
                         :type
                         (common-lisp:or health-check-unhealthy-threshold
                                         common-lisp:null)
                         :accessor
                         %health-check-configuration-unhealthy-threshold
                         :initform common-lisp:nil)
                        (healthy-threshold :initarg :healthy-threshold :type
                         (common-lisp:or health-check-healthy-threshold
                                         common-lisp:null)
                         :accessor
                         %health-check-configuration-healthy-threshold
                         :initform common-lisp:nil)
                        (timeout :initarg :timeout :type
                         (common-lisp:or health-check-timeout common-lisp:null)
                         :accessor %health-check-configuration-timeout
                         :initform common-lisp:nil)
                        (interval :initarg :interval :type
                         (common-lisp:or health-check-interval
                                         common-lisp:null)
                         :accessor %health-check-configuration-interval
                         :initform common-lisp:nil)
                        (path :initarg :path :type
                         (common-lisp:or health-check-path common-lisp:null)
                         :accessor %health-check-configuration-path :initform
                         common-lisp:nil)
                        (protocol :initarg :protocol :type
                         (common-lisp:or health-check-protocol
                                         common-lisp:null)
                         :accessor %health-check-configuration-protocol
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'health-check-configuration
                    'make-health-check-configuration))
 (common-lisp:defun make-health-check-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key unhealthy-threshold healthy-threshold
                     timeout interval path protocol)
   (common-lisp:apply #'common-lisp:make-instance 'health-check-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          health-check-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          health-check-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'healthy-threshold))
      (common-lisp:list
       (common-lisp:cons "HealthyThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unhealthy-threshold))
      (common-lisp:list
       (common-lisp:cons "UnhealthyThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          health-check-configuration))
   common-lisp:nil))
(common-lisp:deftype health-check-healthy-threshold () 'common-lisp:integer)
(common-lisp:deftype health-check-interval () 'common-lisp:integer)
(common-lisp:deftype health-check-path () 'common-lisp:string)
(common-lisp:deftype health-check-protocol () 'common-lisp:string)
(common-lisp:deftype health-check-timeout () 'common-lisp:integer)
(common-lisp:deftype health-check-unhealthy-threshold () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass image-configuration common-lisp:nil
                       ((runtime-environment-secrets :initarg
                         :runtime-environment-secrets :type
                         (common-lisp:or runtime-environment-secrets
                                         common-lisp:null)
                         :accessor
                         %image-configuration-runtime-environment-secrets
                         :initform common-lisp:nil)
                        (port :initarg :port :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %image-configuration-port :initform common-lisp:nil)
                        (start-command :initarg :start-command :type
                         (common-lisp:or start-command common-lisp:null)
                         :accessor %image-configuration-start-command :initform
                         common-lisp:nil)
                        (runtime-environment-variables :initarg
                         :runtime-environment-variables :type
                         (common-lisp:or runtime-environment-variables
                                         common-lisp:null)
                         :accessor
                         %image-configuration-runtime-environment-variables
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'image-configuration 'make-image-configuration))
 (common-lisp:defun make-image-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key runtime-environment-secrets port
                     start-command runtime-environment-variables)
   (common-lisp:apply #'common-lisp:make-instance 'image-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'runtime-environment-variables))
      (common-lisp:list
       (common-lisp:cons "RuntimeEnvironmentVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-command))
      (common-lisp:list
       (common-lisp:cons "StartCommand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'runtime-environment-secrets))
      (common-lisp:list
       (common-lisp:cons "RuntimeEnvironmentSecrets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-configuration))
   common-lisp:nil))
(common-lisp:deftype image-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass image-repository common-lisp:nil
                       ((image-repository-type :initarg :image-repository-type
                         :type
                         (common-lisp:or image-repository-type
                                         common-lisp:null)
                         :accessor %image-repository-image-repository-type
                         :initform
                         (common-lisp:error
                          ":image-repository-type is required"))
                        (image-configuration :initarg :image-configuration
                         :type
                         (common-lisp:or image-configuration common-lisp:null)
                         :accessor %image-repository-image-configuration
                         :initform common-lisp:nil)
                        (image-identifier :initarg :image-identifier :type
                         (common-lisp:or image-identifier common-lisp:null)
                         :accessor %image-repository-image-identifier :initform
                         (common-lisp:error ":image-identifier is required"))))
 (common-lisp:export
  (common-lisp:list 'image-repository 'make-image-repository))
 (common-lisp:defun make-image-repository
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key image-repository-type image-configuration
                     image-identifier)
   (common-lisp:apply #'common-lisp:make-instance 'image-repository
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-repository))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-repository))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-identifier))
      (common-lisp:list
       (common-lisp:cons "ImageIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-configuration))
      (common-lisp:list
       (common-lisp:cons "ImageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-repository-type))
      (common-lisp:list
       (common-lisp:cons "ImageRepositoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-repository))
   common-lisp:nil))
(common-lisp:deftype image-repository-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass ingress-configuration common-lisp:nil
                       ((is-publicly-accessible :initarg
                         :is-publicly-accessible :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %ingress-configuration-is-publicly-accessible
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ingress-configuration 'make-ingress-configuration))
 (common-lisp:defun make-ingress-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key is-publicly-accessible)
   (common-lisp:apply #'common-lisp:make-instance 'ingress-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ingress-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ingress-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "IsPubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ingress-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass ingress-vpc-configuration common-lisp:nil
                       ((vpc-endpoint-id :initarg :vpc-endpoint-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %ingress-vpc-configuration-vpc-endpoint-id :initform
                         common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %ingress-vpc-configuration-vpc-id :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'ingress-vpc-configuration
                    'make-ingress-vpc-configuration))
 (common-lisp:defun make-ingress-vpc-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-endpoint-id vpc-id)
   (common-lisp:apply #'common-lisp:make-instance 'ingress-vpc-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ingress-vpc-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ingress-vpc-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ingress-vpc-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass instance-configuration common-lisp:nil
                       ((instance-role-arn :initarg :instance-role-arn :type
                         (common-lisp:or role-arn common-lisp:null) :accessor
                         %instance-configuration-instance-role-arn :initform
                         common-lisp:nil)
                        (memory :initarg :memory :type
                         (common-lisp:or memory common-lisp:null) :accessor
                         %instance-configuration-memory :initform
                         common-lisp:nil)
                        (cpu :initarg :cpu :type
                         (common-lisp:or cpu common-lisp:null) :accessor
                         %instance-configuration-cpu :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'instance-configuration 'make-instance-configuration))
 (common-lisp:defun make-instance-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key instance-role-arn memory cpu)
   (common-lisp:apply #'common-lisp:make-instance 'instance-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu))
      (common-lisp:list
       (common-lisp:cons "Cpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "Memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-role-arn))
      (common-lisp:list
       (common-lisp:cons "InstanceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-configuration))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-service-error-exception
     (apprunner-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-service-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-error-exception
                    'internal-service-error-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (apprunner-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-state-exception
     (apprunner-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-state-exception 'invalid-state-exception-message)))
(common-lisp:deftype kms-key-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass list-auto-scaling-configurations-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-auto-scaling-configurations-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-auto-scaling-configurations-request-max-results
                         :initform common-lisp:nil)
                        (latest-only :initarg :latest-only :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %list-auto-scaling-configurations-request-latest-only
                         :initform common-lisp:nil)
                        (auto-scaling-configuration-name :initarg
                         :auto-scaling-configuration-name :type
                         (common-lisp:or auto-scaling-configuration-name
                                         common-lisp:null)
                         :accessor
                         %list-auto-scaling-configurations-request-auto-scaling-configuration-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-auto-scaling-configurations-request
                    'make-list-auto-scaling-configurations-request))
 (common-lisp:defun make-list-auto-scaling-configurations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results latest-only
                     auto-scaling-configuration-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-auto-scaling-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-auto-scaling-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-auto-scaling-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-only))
      (common-lisp:list
       (common-lisp:cons "LatestOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-auto-scaling-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-auto-scaling-configurations-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-auto-scaling-configurations-response-next-token
                         :initform common-lisp:nil)
                        (auto-scaling-configuration-summary-list :initarg
                         :auto-scaling-configuration-summary-list :type
                         (common-lisp:or
                          auto-scaling-configuration-summary-list
                          common-lisp:null)
                         :accessor
                         %list-auto-scaling-configurations-response-auto-scaling-configuration-summary-list
                         :initform
                         (common-lisp:error
                          ":auto-scaling-configuration-summary-list is required"))))
 (common-lisp:export
  (common-lisp:list 'list-auto-scaling-configurations-response
                    'make-list-auto-scaling-configurations-response))
 (common-lisp:defun make-list-auto-scaling-configurations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token
                     auto-scaling-configuration-summary-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-auto-scaling-configurations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-auto-scaling-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-auto-scaling-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration-summary-list))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfigurationSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-auto-scaling-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-connections-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-connections-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-connections-request-max-results
                         :initform common-lisp:nil)
                        (connection-name :initarg :connection-name :type
                         (common-lisp:or connection-name common-lisp:null)
                         :accessor %list-connections-request-connection-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-connections-request 'make-list-connections-request))
 (common-lisp:defun make-list-connections-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results connection-name)
   (common-lisp:apply #'common-lisp:make-instance 'list-connections-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-connections-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-connections-response-next-token :initform
                         common-lisp:nil)
                        (connection-summary-list :initarg
                         :connection-summary-list :type
                         (common-lisp:or connection-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-connections-response-connection-summary-list
                         :initform
                         (common-lisp:error
                          ":connection-summary-list is required"))))
 (common-lisp:export
  (common-lisp:list 'list-connections-response
                    'make-list-connections-response))
 (common-lisp:defun make-list-connections-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token connection-summary-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-connections-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-summary-list))
      (common-lisp:list
       (common-lisp:cons "ConnectionSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-observability-configurations-request
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-observability-configurations-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-observability-configurations-request-max-results
                         :initform common-lisp:nil)
                        (latest-only :initarg :latest-only :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %list-observability-configurations-request-latest-only
                         :initform common-lisp:nil)
                        (observability-configuration-name :initarg
                         :observability-configuration-name :type
                         (common-lisp:or observability-configuration-name
                                         common-lisp:null)
                         :accessor
                         %list-observability-configurations-request-observability-configuration-name
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-observability-configurations-request
                    'make-list-observability-configurations-request))
 (common-lisp:defun make-list-observability-configurations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results latest-only
                     observability-configuration-name)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-observability-configurations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-observability-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-observability-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration-name))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-only))
      (common-lisp:list
       (common-lisp:cons "LatestOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-observability-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-observability-configurations-response
                       common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-observability-configurations-response-next-token
                         :initform common-lisp:nil)
                        (observability-configuration-summary-list :initarg
                         :observability-configuration-summary-list :type
                         (common-lisp:or
                          observability-configuration-summary-list
                          common-lisp:null)
                         :accessor
                         %list-observability-configurations-response-observability-configuration-summary-list
                         :initform
                         (common-lisp:error
                          ":observability-configuration-summary-list is required"))))
 (common-lisp:export
  (common-lisp:list 'list-observability-configurations-response
                    'make-list-observability-configurations-response))
 (common-lisp:defun make-list-observability-configurations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token
                     observability-configuration-summary-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-observability-configurations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-observability-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-observability-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration-summary-list))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfigurationSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-observability-configurations-response))
   common-lisp:nil))
(common-lisp:deftype list-operations-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-operations-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or list-operations-max-results
                                         common-lisp:null)
                         :accessor %list-operations-request-max-results
                         :initform common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-operations-request-next-token :initform
                         common-lisp:nil)
                        (service-arn :initarg :service-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor %list-operations-request-service-arn
                         :initform
                         (common-lisp:error ":service-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-operations-request 'make-list-operations-request))
 (common-lisp:defun make-list-operations-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token service-arn)
   (common-lisp:apply #'common-lisp:make-instance 'list-operations-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-operations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-operations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-operations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-operations-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-operations-response-next-token :initform
                         common-lisp:nil)
                        (operation-summary-list :initarg
                         :operation-summary-list :type
                         (common-lisp:or operation-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-operations-response-operation-summary-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-operations-response 'make-list-operations-response))
 (common-lisp:defun make-list-operations-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token operation-summary-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-operations-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-operations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-operations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-summary-list))
      (common-lisp:list
       (common-lisp:cons "OperationSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-operations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-services-request common-lisp:nil
                       ((max-results :initarg :max-results :type
                         (common-lisp:or service-max-results common-lisp:null)
                         :accessor %list-services-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-services-request-next-token :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-services-request 'make-list-services-request))
 (common-lisp:defun make-list-services-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key max-results next-token)
   (common-lisp:apply #'common-lisp:make-instance 'list-services-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-services-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-services-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-services-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-services-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-services-response-next-token :initform
                         common-lisp:nil)
                        (service-summary-list :initarg :service-summary-list
                         :type
                         (common-lisp:or service-summary-list common-lisp:null)
                         :accessor %list-services-response-service-summary-list
                         :initform
                         (common-lisp:error
                          ":service-summary-list is required"))))
 (common-lisp:export
  (common-lisp:list 'list-services-response 'make-list-services-response))
 (common-lisp:defun make-list-services-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token service-summary-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-services-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-services-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-services-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-summary-list))
      (common-lisp:list
       (common-lisp:cons "ServiceSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-services-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vpc-connectors-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-vpc-connectors-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor %list-vpc-connectors-request-max-results
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-vpc-connectors-request
                    'make-list-vpc-connectors-request))
 (common-lisp:defun make-list-vpc-connectors-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results)
   (common-lisp:apply #'common-lisp:make-instance 'list-vpc-connectors-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-connectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-connectors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-connectors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vpc-connectors-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-vpc-connectors-response-next-token :initform
                         common-lisp:nil)
                        (vpc-connectors :initarg :vpc-connectors :type
                         (common-lisp:or vpc-connectors common-lisp:null)
                         :accessor %list-vpc-connectors-response-vpc-connectors
                         :initform
                         (common-lisp:error ":vpc-connectors is required"))))
 (common-lisp:export
  (common-lisp:list 'list-vpc-connectors-response
                    'make-list-vpc-connectors-response))
 (common-lisp:defun make-list-vpc-connectors-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token vpc-connectors)
   (common-lisp:apply #'common-lisp:make-instance 'list-vpc-connectors-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-connectors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-connectors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connectors))
      (common-lisp:list
       (common-lisp:cons "VpcConnectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-connectors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vpc-ingress-connections-filter common-lisp:nil
                       ((vpc-endpoint-id :initarg :vpc-endpoint-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %list-vpc-ingress-connections-filter-vpc-endpoint-id
                         :initform common-lisp:nil)
                        (service-arn :initarg :service-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor
                         %list-vpc-ingress-connections-filter-service-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-vpc-ingress-connections-filter
                    'make-list-vpc-ingress-connections-filter))
 (common-lisp:defun make-list-vpc-ingress-connections-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-endpoint-id service-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-vpc-ingress-connections-filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-ingress-connections-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-ingress-connections-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-ingress-connections-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vpc-ingress-connections-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-vpc-ingress-connections-request-next-token
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or max-results common-lisp:null)
                         :accessor
                         %list-vpc-ingress-connections-request-max-results
                         :initform common-lisp:nil)
                        (filter :initarg :filter :type
                         (common-lisp:or list-vpc-ingress-connections-filter
                                         common-lisp:null)
                         :accessor %list-vpc-ingress-connections-request-filter
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-vpc-ingress-connections-request
                    'make-list-vpc-ingress-connections-request))
 (common-lisp:defun make-list-vpc-ingress-connections-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results filter)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-vpc-ingress-connections-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-ingress-connections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-ingress-connections-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-ingress-connections-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-vpc-ingress-connections-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-vpc-ingress-connections-response-next-token
                         :initform common-lisp:nil)
                        (vpc-ingress-connection-summary-list :initarg
                         :vpc-ingress-connection-summary-list :type
                         (common-lisp:or vpc-ingress-connection-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-vpc-ingress-connections-response-vpc-ingress-connection-summary-list
                         :initform
                         (common-lisp:error
                          ":vpc-ingress-connection-summary-list is required"))))
 (common-lisp:export
  (common-lisp:list 'list-vpc-ingress-connections-response
                    'make-list-vpc-ingress-connections-response))
 (common-lisp:defun make-list-vpc-ingress-connections-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token
                     vpc-ingress-connection-summary-list)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-vpc-ingress-connections-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-ingress-connections-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-ingress-connections-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-ingress-connection-summary-list))
      (common-lisp:list
       (common-lisp:cons "VpcIngressConnectionSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-ingress-connections-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype memory () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass network-configuration common-lisp:nil
                       ((ingress-configuration :initarg :ingress-configuration
                         :type
                         (common-lisp:or ingress-configuration
                                         common-lisp:null)
                         :accessor %network-configuration-ingress-configuration
                         :initform common-lisp:nil)
                        (egress-configuration :initarg :egress-configuration
                         :type
                         (common-lisp:or egress-configuration common-lisp:null)
                         :accessor %network-configuration-egress-configuration
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'network-configuration 'make-network-configuration))
 (common-lisp:defun make-network-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ingress-configuration
                     egress-configuration)
   (common-lisp:apply #'common-lisp:make-instance 'network-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'egress-configuration))
      (common-lisp:list
       (common-lisp:cons "EgressConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingress-configuration))
      (common-lisp:list
       (common-lisp:cons "IngressConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype nullable-boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defclass observability-configuration common-lisp:nil
                       ((deleted-at :initarg :deleted-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %observability-configuration-deleted-at :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %observability-configuration-created-at :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or observability-configuration-status
                                         common-lisp:null)
                         :accessor %observability-configuration-status
                         :initform common-lisp:nil)
                        (latest :initarg :latest :type
                         (common-lisp:or boolean common-lisp:null) :accessor
                         %observability-configuration-latest :initform
                         common-lisp:nil)
                        (observability-configuration-revision :initarg
                         :observability-configuration-revision :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %observability-configuration-observability-configuration-revision
                         :initform common-lisp:nil)
                        (trace-configuration :initarg :trace-configuration
                         :type
                         (common-lisp:or trace-configuration common-lisp:null)
                         :accessor
                         %observability-configuration-trace-configuration
                         :initform common-lisp:nil)
                        (observability-configuration-name :initarg
                         :observability-configuration-name :type
                         (common-lisp:or observability-configuration-name
                                         common-lisp:null)
                         :accessor
                         %observability-configuration-observability-configuration-name
                         :initform common-lisp:nil)
                        (observability-configuration-arn :initarg
                         :observability-configuration-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor
                         %observability-configuration-observability-configuration-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'observability-configuration
                    'make-observability-configuration))
 (common-lisp:defun make-observability-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deleted-at created-at status latest
                     observability-configuration-revision trace-configuration
                     observability-configuration-name
                     observability-configuration-arn)
   (common-lisp:apply #'common-lisp:make-instance 'observability-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          observability-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          observability-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration-name))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trace-configuration))
      (common-lisp:list
       (common-lisp:cons "TraceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration-revision))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfigurationRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest))
      (common-lisp:list
       (common-lisp:cons "Latest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted-at))
      (common-lisp:list
       (common-lisp:cons "DeletedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          observability-configuration))
   common-lisp:nil))
(common-lisp:deftype observability-configuration-name () 'common-lisp:string)
(common-lisp:deftype observability-configuration-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass observability-configuration-summary common-lisp:nil
                       ((observability-configuration-revision :initarg
                         :observability-configuration-revision :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %observability-configuration-summary-observability-configuration-revision
                         :initform common-lisp:nil)
                        (observability-configuration-name :initarg
                         :observability-configuration-name :type
                         (common-lisp:or observability-configuration-name
                                         common-lisp:null)
                         :accessor
                         %observability-configuration-summary-observability-configuration-name
                         :initform common-lisp:nil)
                        (observability-configuration-arn :initarg
                         :observability-configuration-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor
                         %observability-configuration-summary-observability-configuration-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'observability-configuration-summary
                    'make-observability-configuration-summary))
 (common-lisp:defun make-observability-configuration-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key observability-configuration-revision
                     observability-configuration-name
                     observability-configuration-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'observability-configuration-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          observability-configuration-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          observability-configuration-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration-name))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration-revision))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfigurationRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          observability-configuration-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype observability-configuration-summary-list ()
   '(trivial-types:proper-list observability-configuration-summary))
 (common-lisp:defun |make-observability-configuration-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            observability-configuration-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype operation-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass operation-summary common-lisp:nil
                       ((updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %operation-summary-updated-at :initform
                         common-lisp:nil)
                        (ended-at :initarg :ended-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %operation-summary-ended-at :initform common-lisp:nil)
                        (started-at :initarg :started-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %operation-summary-started-at :initform
                         common-lisp:nil)
                        (target-arn :initarg :target-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor %operation-summary-target-arn :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or operation-status common-lisp:null)
                         :accessor %operation-summary-status :initform
                         common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or operation-type common-lisp:null)
                         :accessor %operation-summary-type :initform
                         common-lisp:nil)
                        (id :initarg :id :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %operation-summary-id :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'operation-summary 'make-operation-summary))
 (common-lisp:defun make-operation-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key updated-at ended-at started-at target-arn
                     status type id)
   (common-lisp:apply #'common-lisp:make-instance 'operation-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input operation-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input operation-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "TargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "StartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ended-at))
      (common-lisp:list
       (common-lisp:cons "EndedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input operation-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype operation-summary-list ()
   '(trivial-types:proper-list operation-summary))
 (common-lisp:defun |make-operation-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list operation-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype operation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass pause-service-request common-lisp:nil
                       ((service-arn :initarg :service-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor %pause-service-request-service-arn :initform
                         (common-lisp:error ":service-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'pause-service-request 'make-pause-service-request))
 (common-lisp:defun make-pause-service-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-arn)
   (common-lisp:apply #'common-lisp:make-instance 'pause-service-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pause-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pause-service-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pause-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass pause-service-response common-lisp:nil
                       ((operation-id :initarg :operation-id :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %pause-service-response-operation-id :initform
                         common-lisp:nil)
                        (service :initarg :service :type
                         (common-lisp:or service common-lisp:null) :accessor
                         %pause-service-response-service :initform
                         (common-lisp:error ":service is required"))))
 (common-lisp:export
  (common-lisp:list 'pause-service-response 'make-pause-service-response))
 (common-lisp:defun make-pause-service-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-id service)
   (common-lisp:apply #'common-lisp:make-instance 'pause-service-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pause-service-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pause-service-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pause-service-response))
   common-lisp:nil))
(common-lisp:deftype provider-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (apprunner-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defclass resume-service-request common-lisp:nil
                       ((service-arn :initarg :service-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor %resume-service-request-service-arn
                         :initform
                         (common-lisp:error ":service-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'resume-service-request 'make-resume-service-request))
 (common-lisp:defun make-resume-service-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-arn)
   (common-lisp:apply #'common-lisp:make-instance 'resume-service-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resume-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resume-service-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resume-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass resume-service-response common-lisp:nil
                       ((operation-id :initarg :operation-id :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %resume-service-response-operation-id :initform
                         common-lisp:nil)
                        (service :initarg :service :type
                         (common-lisp:or service common-lisp:null) :accessor
                         %resume-service-response-service :initform
                         (common-lisp:error ":service is required"))))
 (common-lisp:export
  (common-lisp:list 'resume-service-response 'make-resume-service-response))
 (common-lisp:defun make-resume-service-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-id service)
   (common-lisp:apply #'common-lisp:make-instance 'resume-service-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resume-service-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resume-service-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resume-service-response))
   common-lisp:nil))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype runtime () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype runtime-environment-secrets () 'common-lisp:hash-table)
 (common-lisp:defun |make-runtime-environment-secrets|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype runtime-environment-secrets-name () 'common-lisp:string)
(common-lisp:deftype runtime-environment-secrets-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype runtime-environment-variables () 'common-lisp:hash-table)
 (common-lisp:defun |make-runtime-environment-variables|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype runtime-environment-variables-key () 'common-lisp:string)
(common-lisp:deftype runtime-environment-variables-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass service common-lisp:nil
                       ((observability-configuration :initarg
                         :observability-configuration :type
                         (common-lisp:or service-observability-configuration
                                         common-lisp:null)
                         :accessor %service-observability-configuration
                         :initform common-lisp:nil)
                        (network-configuration :initarg :network-configuration
                         :type
                         (common-lisp:or network-configuration
                                         common-lisp:null)
                         :accessor %service-network-configuration :initform
                         (common-lisp:error
                          ":network-configuration is required"))
                        (auto-scaling-configuration-summary :initarg
                         :auto-scaling-configuration-summary :type
                         (common-lisp:or auto-scaling-configuration-summary
                                         common-lisp:null)
                         :accessor %service-auto-scaling-configuration-summary
                         :initform
                         (common-lisp:error
                          ":auto-scaling-configuration-summary is required"))
                        (health-check-configuration :initarg
                         :health-check-configuration :type
                         (common-lisp:or health-check-configuration
                                         common-lisp:null)
                         :accessor %service-health-check-configuration
                         :initform common-lisp:nil)
                        (encryption-configuration :initarg
                         :encryption-configuration :type
                         (common-lisp:or encryption-configuration
                                         common-lisp:null)
                         :accessor %service-encryption-configuration :initform
                         common-lisp:nil)
                        (instance-configuration :initarg
                         :instance-configuration :type
                         (common-lisp:or instance-configuration
                                         common-lisp:null)
                         :accessor %service-instance-configuration :initform
                         (common-lisp:error
                          ":instance-configuration is required"))
                        (source-configuration :initarg :source-configuration
                         :type
                         (common-lisp:or source-configuration common-lisp:null)
                         :accessor %service-source-configuration :initform
                         (common-lisp:error
                          ":source-configuration is required"))
                        (status :initarg :status :type
                         (common-lisp:or service-status common-lisp:null)
                         :accessor %service-status :initform
                         (common-lisp:error ":status is required"))
                        (deleted-at :initarg :deleted-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %service-deleted-at :initform common-lisp:nil)
                        (updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %service-updated-at :initform
                         (common-lisp:error ":updated-at is required"))
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %service-created-at :initform
                         (common-lisp:error ":created-at is required"))
                        (service-url :initarg :service-url :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-service-url :initform common-lisp:nil)
                        (service-arn :initarg :service-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor %service-service-arn :initform
                         (common-lisp:error ":service-arn is required"))
                        (service-id :initarg :service-id :type
                         (common-lisp:or service-id common-lisp:null) :accessor
                         %service-service-id :initform
                         (common-lisp:error ":service-id is required"))
                        (service-name :initarg :service-name :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor %service-service-name :initform
                         (common-lisp:error ":service-name is required"))))
 (common-lisp:export (common-lisp:list 'service 'make-service))
 (common-lisp:defun make-service
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key observability-configuration
                     network-configuration auto-scaling-configuration-summary
                     health-check-configuration encryption-configuration
                     instance-configuration source-configuration status
                     deleted-at updated-at created-at service-url service-arn
                     service-id service-name)
   (common-lisp:apply #'common-lisp:make-instance 'service
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-id))
      (common-lisp:list
       (common-lisp:cons "ServiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-url))
      (common-lisp:list
       (common-lisp:cons "ServiceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted-at))
      (common-lisp:list
       (common-lisp:cons "DeletedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-configuration))
      (common-lisp:list
       (common-lisp:cons "SourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-configuration))
      (common-lisp:list
       (common-lisp:cons "InstanceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-configuration))
      (common-lisp:list
       (common-lisp:cons "HealthCheckConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration-summary))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfigurationSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "NetworkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service))
   common-lisp:nil))
(common-lisp:deftype service-id () 'common-lisp:string)
(common-lisp:deftype service-max-results () 'common-lisp:integer)
(common-lisp:deftype service-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass service-observability-configuration common-lisp:nil
                       ((observability-configuration-arn :initarg
                         :observability-configuration-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor
                         %service-observability-configuration-observability-configuration-arn
                         :initform common-lisp:nil)
                        (observability-enabled :initarg :observability-enabled
                         :type (common-lisp:or boolean common-lisp:null)
                         :accessor
                         %service-observability-configuration-observability-enabled
                         :initform
                         (common-lisp:error
                          ":observability-enabled is required"))))
 (common-lisp:export
  (common-lisp:list 'service-observability-configuration
                    'make-service-observability-configuration))
 (common-lisp:defun make-service-observability-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key observability-configuration-arn
                     observability-enabled)
   (common-lisp:apply #'common-lisp:make-instance
                      'service-observability-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-observability-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-observability-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-enabled))
      (common-lisp:list
       (common-lisp:cons "ObservabilityEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-observability-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (apprunner-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype service-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass service-summary common-lisp:nil
                       ((status :initarg :status :type
                         (common-lisp:or service-status common-lisp:null)
                         :accessor %service-summary-status :initform
                         common-lisp:nil)
                        (updated-at :initarg :updated-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %service-summary-updated-at :initform common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %service-summary-created-at :initform common-lisp:nil)
                        (service-url :initarg :service-url :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %service-summary-service-url :initform
                         common-lisp:nil)
                        (service-arn :initarg :service-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor %service-summary-service-arn :initform
                         common-lisp:nil)
                        (service-id :initarg :service-id :type
                         (common-lisp:or service-id common-lisp:null) :accessor
                         %service-summary-service-id :initform common-lisp:nil)
                        (service-name :initarg :service-name :type
                         (common-lisp:or service-name common-lisp:null)
                         :accessor %service-summary-service-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'service-summary 'make-service-summary))
 (common-lisp:defun make-service-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key status updated-at created-at service-url
                     service-arn service-id service-name)
   (common-lisp:apply #'common-lisp:make-instance 'service-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-id))
      (common-lisp:list
       (common-lisp:cons "ServiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-url))
      (common-lisp:list
       (common-lisp:cons "ServiceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-summary-list ()
   '(trivial-types:proper-list service-summary))
 (common-lisp:defun |make-service-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass source-code-version common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %source-code-version-value :initform
                         (common-lisp:error ":value is required"))
                        (type :initarg :type :type
                         (common-lisp:or source-code-version-type
                                         common-lisp:null)
                         :accessor %source-code-version-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export
  (common-lisp:list 'source-code-version 'make-source-code-version))
 (common-lisp:defun make-source-code-version
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value type)
   (common-lisp:apply #'common-lisp:make-instance 'source-code-version
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-code-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-code-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-code-version))
   common-lisp:nil))
(common-lisp:deftype source-code-version-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass source-configuration common-lisp:nil
                       ((authentication-configuration :initarg
                         :authentication-configuration :type
                         (common-lisp:or authentication-configuration
                                         common-lisp:null)
                         :accessor
                         %source-configuration-authentication-configuration
                         :initform common-lisp:nil)
                        (auto-deployments-enabled :initarg
                         :auto-deployments-enabled :type
                         (common-lisp:or nullable-boolean common-lisp:null)
                         :accessor
                         %source-configuration-auto-deployments-enabled
                         :initform common-lisp:nil)
                        (image-repository :initarg :image-repository :type
                         (common-lisp:or image-repository common-lisp:null)
                         :accessor %source-configuration-image-repository
                         :initform common-lisp:nil)
                        (code-repository :initarg :code-repository :type
                         (common-lisp:or code-repository common-lisp:null)
                         :accessor %source-configuration-code-repository
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'source-configuration 'make-source-configuration))
 (common-lisp:defun make-source-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key authentication-configuration
                     auto-deployments-enabled image-repository code-repository)
   (common-lisp:apply #'common-lisp:make-instance 'source-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-repository))
      (common-lisp:list
       (common-lisp:cons "CodeRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-repository))
      (common-lisp:list
       (common-lisp:cons "ImageRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-deployments-enabled))
      (common-lisp:list
       (common-lisp:cons "AutoDeploymentsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-configuration))
      (common-lisp:list
       (common-lisp:cons "AuthenticationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-configuration))
   common-lisp:nil))
(common-lisp:deftype start-command () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-deployment-request common-lisp:nil
                       ((service-arn :initarg :service-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor %start-deployment-request-service-arn
                         :initform
                         (common-lisp:error ":service-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'start-deployment-request 'make-start-deployment-request))
 (common-lisp:defun make-start-deployment-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-arn)
   (common-lisp:apply #'common-lisp:make-instance 'start-deployment-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-deployment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-deployment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-deployment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-deployment-response common-lisp:nil
                       ((operation-id :initarg :operation-id :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %start-deployment-response-operation-id :initform
                         (common-lisp:error ":operation-id is required"))))
 (common-lisp:export
  (common-lisp:list 'start-deployment-response
                    'make-start-deployment-response))
 (common-lisp:defun make-start-deployment-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-id)
   (common-lisp:apply #'common-lisp:make-instance 'start-deployment-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-deployment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-deployment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-deployment-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform common-lisp:nil)
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass trace-configuration common-lisp:nil
                       ((vendor :initarg :vendor :type
                         (common-lisp:or tracing-vendor common-lisp:null)
                         :accessor %trace-configuration-vendor :initform
                         (common-lisp:error ":vendor is required"))))
 (common-lisp:export
  (common-lisp:list 'trace-configuration 'make-trace-configuration))
 (common-lisp:defun make-trace-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vendor)
   (common-lisp:apply #'common-lisp:make-instance 'trace-configuration
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trace-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trace-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor))
      (common-lisp:list
       (common-lisp:cons "Vendor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trace-configuration))
   common-lisp:nil))
(common-lisp:deftype tracing-vendor () 'common-lisp:string)
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor %untag-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-request common-lisp:nil
                       ((observability-configuration :initarg
                         :observability-configuration :type
                         (common-lisp:or service-observability-configuration
                                         common-lisp:null)
                         :accessor
                         %update-service-request-observability-configuration
                         :initform common-lisp:nil)
                        (network-configuration :initarg :network-configuration
                         :type
                         (common-lisp:or network-configuration
                                         common-lisp:null)
                         :accessor
                         %update-service-request-network-configuration
                         :initform common-lisp:nil)
                        (health-check-configuration :initarg
                         :health-check-configuration :type
                         (common-lisp:or health-check-configuration
                                         common-lisp:null)
                         :accessor
                         %update-service-request-health-check-configuration
                         :initform common-lisp:nil)
                        (auto-scaling-configuration-arn :initarg
                         :auto-scaling-configuration-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor
                         %update-service-request-auto-scaling-configuration-arn
                         :initform common-lisp:nil)
                        (instance-configuration :initarg
                         :instance-configuration :type
                         (common-lisp:or instance-configuration
                                         common-lisp:null)
                         :accessor
                         %update-service-request-instance-configuration
                         :initform common-lisp:nil)
                        (source-configuration :initarg :source-configuration
                         :type
                         (common-lisp:or source-configuration common-lisp:null)
                         :accessor %update-service-request-source-configuration
                         :initform common-lisp:nil)
                        (service-arn :initarg :service-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor %update-service-request-service-arn
                         :initform
                         (common-lisp:error ":service-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-service-request 'make-update-service-request))
 (common-lisp:defun make-update-service-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key observability-configuration
                     network-configuration health-check-configuration
                     auto-scaling-configuration-arn instance-configuration
                     source-configuration service-arn)
   (common-lisp:apply #'common-lisp:make-instance 'update-service-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-configuration))
      (common-lisp:list
       (common-lisp:cons "SourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-configuration))
      (common-lisp:list
       (common-lisp:cons "InstanceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-configuration))
      (common-lisp:list
       (common-lisp:cons "HealthCheckConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "NetworkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-service-response common-lisp:nil
                       ((operation-id :initarg :operation-id :type
                         (common-lisp:or uuid common-lisp:null) :accessor
                         %update-service-response-operation-id :initform
                         (common-lisp:error ":operation-id is required"))
                        (service :initarg :service :type
                         (common-lisp:or service common-lisp:null) :accessor
                         %update-service-response-service :initform
                         (common-lisp:error ":service is required"))))
 (common-lisp:export
  (common-lisp:list 'update-service-response 'make-update-service-response))
 (common-lisp:defun make-update-service-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key operation-id service)
   (common-lisp:apply #'common-lisp:make-instance 'update-service-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-vpc-ingress-connection-request common-lisp:nil
                       ((ingress-vpc-configuration :initarg
                         :ingress-vpc-configuration :type
                         (common-lisp:or ingress-vpc-configuration
                                         common-lisp:null)
                         :accessor
                         %update-vpc-ingress-connection-request-ingress-vpc-configuration
                         :initform
                         (common-lisp:error
                          ":ingress-vpc-configuration is required"))
                        (vpc-ingress-connection-arn :initarg
                         :vpc-ingress-connection-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor
                         %update-vpc-ingress-connection-request-vpc-ingress-connection-arn
                         :initform
                         (common-lisp:error
                          ":vpc-ingress-connection-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'update-vpc-ingress-connection-request
                    'make-update-vpc-ingress-connection-request))
 (common-lisp:defun make-update-vpc-ingress-connection-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ingress-vpc-configuration
                     vpc-ingress-connection-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-vpc-ingress-connection-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-ingress-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-ingress-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-ingress-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpcIngressConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingress-vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "IngressVpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-ingress-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass update-vpc-ingress-connection-response common-lisp:nil
                       ((vpc-ingress-connection :initarg
                         :vpc-ingress-connection :type
                         (common-lisp:or vpc-ingress-connection
                                         common-lisp:null)
                         :accessor
                         %update-vpc-ingress-connection-response-vpc-ingress-connection
                         :initform
                         (common-lisp:error
                          ":vpc-ingress-connection is required"))))
 (common-lisp:export
  (common-lisp:list 'update-vpc-ingress-connection-response
                    'make-update-vpc-ingress-connection-response))
 (common-lisp:defun make-update-vpc-ingress-connection-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key vpc-ingress-connection)
   (common-lisp:apply #'common-lisp:make-instance
                      'update-vpc-ingress-connection-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-ingress-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-ingress-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-ingress-connection))
      (common-lisp:list
       (common-lisp:cons "VpcIngressConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-ingress-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass vpc-connector common-lisp:nil
                       ((deleted-at :initarg :deleted-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %vpc-connector-deleted-at :initform common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %vpc-connector-created-at :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or vpc-connector-status common-lisp:null)
                         :accessor %vpc-connector-status :initform
                         common-lisp:nil)
                        (security-groups :initarg :security-groups :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %vpc-connector-security-groups :initform
                         common-lisp:nil)
                        (subnets :initarg :subnets :type
                         (common-lisp:or string-list common-lisp:null)
                         :accessor %vpc-connector-subnets :initform
                         common-lisp:nil)
                        (vpc-connector-revision :initarg
                         :vpc-connector-revision :type
                         (common-lisp:or integer common-lisp:null) :accessor
                         %vpc-connector-vpc-connector-revision :initform
                         common-lisp:nil)
                        (vpc-connector-arn :initarg :vpc-connector-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor %vpc-connector-vpc-connector-arn :initform
                         common-lisp:nil)
                        (vpc-connector-name :initarg :vpc-connector-name :type
                         (common-lisp:or vpc-connector-name common-lisp:null)
                         :accessor %vpc-connector-vpc-connector-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'vpc-connector 'make-vpc-connector))
 (common-lisp:defun make-vpc-connector
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deleted-at created-at status
                     security-groups subnets vpc-connector-revision
                     vpc-connector-arn vpc-connector-name)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-connector
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-connector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-connector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connector-name))
      (common-lisp:list
       (common-lisp:cons "VpcConnectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connector-arn))
      (common-lisp:list
       (common-lisp:cons "VpcConnectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-connector-revision))
      (common-lisp:list
       (common-lisp:cons "VpcConnectorRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted-at))
      (common-lisp:list
       (common-lisp:cons "DeletedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-connector))
   common-lisp:nil))
(common-lisp:deftype vpc-connector-name () 'common-lisp:string)
(common-lisp:deftype vpc-connector-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype vpc-connectors ()
   '(trivial-types:proper-list vpc-connector))
 (common-lisp:defun |make-vpc-connectors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-connector))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass vpc-dnstarget common-lisp:nil
                       ((domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %vpc-dnstarget-domain-name :initform
                         common-lisp:nil)
                        (vpc-id :initarg :vpc-id :type
                         (common-lisp:or string common-lisp:null) :accessor
                         %vpc-dnstarget-vpc-id :initform common-lisp:nil)
                        (vpc-ingress-connection-arn :initarg
                         :vpc-ingress-connection-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor %vpc-dnstarget-vpc-ingress-connection-arn
                         :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'vpc-dnstarget 'make-vpc-dnstarget))
 (common-lisp:defun make-vpc-dnstarget
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key domain-name vpc-id
                     vpc-ingress-connection-arn)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-dnstarget
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-dnstarget))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-dnstarget))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-ingress-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpcIngressConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-dnstarget))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-dnstarget-list ()
   '(trivial-types:proper-list vpc-dnstarget))
 (common-lisp:defun |make-vpc-dnstarget-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-dnstarget))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass vpc-ingress-connection common-lisp:nil
                       ((deleted-at :initarg :deleted-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %vpc-ingress-connection-deleted-at :initform
                         common-lisp:nil)
                        (created-at :initarg :created-at :type
                         (common-lisp:or timestamp common-lisp:null) :accessor
                         %vpc-ingress-connection-created-at :initform
                         common-lisp:nil)
                        (ingress-vpc-configuration :initarg
                         :ingress-vpc-configuration :type
                         (common-lisp:or ingress-vpc-configuration
                                         common-lisp:null)
                         :accessor
                         %vpc-ingress-connection-ingress-vpc-configuration
                         :initform common-lisp:nil)
                        (domain-name :initarg :domain-name :type
                         (common-lisp:or domain-name common-lisp:null)
                         :accessor %vpc-ingress-connection-domain-name
                         :initform common-lisp:nil)
                        (account-id :initarg :account-id :type
                         (common-lisp:or customer-account-id common-lisp:null)
                         :accessor %vpc-ingress-connection-account-id :initform
                         common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or vpc-ingress-connection-status
                                         common-lisp:null)
                         :accessor %vpc-ingress-connection-status :initform
                         common-lisp:nil)
                        (service-arn :initarg :service-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor %vpc-ingress-connection-service-arn
                         :initform common-lisp:nil)
                        (vpc-ingress-connection-name :initarg
                         :vpc-ingress-connection-name :type
                         (common-lisp:or vpc-ingress-connection-name
                                         common-lisp:null)
                         :accessor
                         %vpc-ingress-connection-vpc-ingress-connection-name
                         :initform common-lisp:nil)
                        (vpc-ingress-connection-arn :initarg
                         :vpc-ingress-connection-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor
                         %vpc-ingress-connection-vpc-ingress-connection-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'vpc-ingress-connection 'make-vpc-ingress-connection))
 (common-lisp:defun make-vpc-ingress-connection
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key deleted-at created-at
                     ingress-vpc-configuration domain-name account-id status
                     service-arn vpc-ingress-connection-name
                     vpc-ingress-connection-arn)
   (common-lisp:apply #'common-lisp:make-instance 'vpc-ingress-connection
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-ingress-connection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-ingress-connection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-ingress-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpcIngressConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-ingress-connection-name))
      (common-lisp:list
       (common-lisp:cons "VpcIngressConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingress-vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "IngressVpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted-at))
      (common-lisp:list
       (common-lisp:cons "DeletedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-ingress-connection))
   common-lisp:nil))
(common-lisp:deftype vpc-ingress-connection-name () 'common-lisp:string)
(common-lisp:deftype vpc-ingress-connection-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass vpc-ingress-connection-summary common-lisp:nil
                       ((service-arn :initarg :service-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor %vpc-ingress-connection-summary-service-arn
                         :initform common-lisp:nil)
                        (vpc-ingress-connection-arn :initarg
                         :vpc-ingress-connection-arn :type
                         (common-lisp:or app-runner-resource-arn
                                         common-lisp:null)
                         :accessor
                         %vpc-ingress-connection-summary-vpc-ingress-connection-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'vpc-ingress-connection-summary
                    'make-vpc-ingress-connection-summary))
 (common-lisp:defun make-vpc-ingress-connection-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key service-arn vpc-ingress-connection-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'vpc-ingress-connection-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-ingress-connection-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-ingress-connection-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-ingress-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpcIngressConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-ingress-connection-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-ingress-connection-summary-list ()
   '(trivial-types:proper-list vpc-ingress-connection-summary))
 (common-lisp:defun |make-vpc-ingress-connection-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            vpc-ingress-connection-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun associate-custom-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-arn domain-name
                     enable-wwwsubdomain)
   (common-lisp:declare
    (common-lisp:ignorable service-arn domain-name enable-wwwsubdomain))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-custom-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "AssociateCustomDomain"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-custom-domain))
(common-lisp:progn
 (common-lisp:defun create-auto-scaling-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-configuration-name
                     max-concurrency min-size max-size tags)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-configuration-name max-concurrency
     min-size max-size tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-auto-scaling-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateAutoScalingConfiguration"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-auto-scaling-configuration))
(common-lisp:progn
 (common-lisp:defun create-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-name provider-type tags)
   (common-lisp:declare
    (common-lisp:ignorable connection-name provider-type tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateConnection"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-connection))
(common-lisp:progn
 (common-lisp:defun create-observability-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key observability-configuration-name
                     trace-configuration tags)
   (common-lisp:declare
    (common-lisp:ignorable observability-configuration-name trace-configuration
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-observability-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateObservabilityConfiguration"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-observability-configuration))
(common-lisp:progn
 (common-lisp:defun create-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name source-configuration
                     instance-configuration tags encryption-configuration
                     health-check-configuration auto-scaling-configuration-arn
                     network-configuration observability-configuration)
   (common-lisp:declare
    (common-lisp:ignorable service-name source-configuration
     instance-configuration tags encryption-configuration
     health-check-configuration auto-scaling-configuration-arn
     network-configuration observability-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-service-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateService"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-service))
(common-lisp:progn
 (common-lisp:defun create-vpc-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vpc-connector-name subnets
                     security-groups tags)
   (common-lisp:declare
    (common-lisp:ignorable vpc-connector-name subnets security-groups tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-vpc-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateVpcConnector"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-vpc-connector))
(common-lisp:progn
 (common-lisp:defun create-vpc-ingress-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-arn vpc-ingress-connection-name
                     ingress-vpc-configuration tags)
   (common-lisp:declare
    (common-lisp:ignorable service-arn vpc-ingress-connection-name
     ingress-vpc-configuration tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-vpc-ingress-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "CreateVpcIngressConnection"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-vpc-ingress-connection))
(common-lisp:progn
 (common-lisp:defun delete-auto-scaling-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-configuration-arn)
   (common-lisp:declare (common-lisp:ignorable auto-scaling-configuration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-auto-scaling-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteAutoScalingConfiguration"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-auto-scaling-configuration))
(common-lisp:progn
 (common-lisp:defun delete-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-arn)
   (common-lisp:declare (common-lisp:ignorable connection-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteConnection"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-connection))
(common-lisp:progn
 (common-lisp:defun delete-observability-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key observability-configuration-arn)
   (common-lisp:declare
    (common-lisp:ignorable observability-configuration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-observability-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteObservabilityConfiguration"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-observability-configuration))
(common-lisp:progn
 (common-lisp:defun delete-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-arn)
   (common-lisp:declare (common-lisp:ignorable service-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-service-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteService"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-service))
(common-lisp:progn
 (common-lisp:defun delete-vpc-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vpc-connector-arn)
   (common-lisp:declare (common-lisp:ignorable vpc-connector-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-vpc-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteVpcConnector"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-vpc-connector))
(common-lisp:progn
 (common-lisp:defun delete-vpc-ingress-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vpc-ingress-connection-arn)
   (common-lisp:declare (common-lisp:ignorable vpc-ingress-connection-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-vpc-ingress-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DeleteVpcIngressConnection"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-vpc-ingress-connection))
(common-lisp:progn
 (common-lisp:defun describe-auto-scaling-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-configuration-arn)
   (common-lisp:declare (common-lisp:ignorable auto-scaling-configuration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-auto-scaling-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeAutoScalingConfiguration"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-auto-scaling-configuration))
(common-lisp:progn
 (common-lisp:defun describe-custom-domains
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable service-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-custom-domains-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeCustomDomains"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-custom-domains))
(common-lisp:progn
 (common-lisp:defun describe-observability-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key observability-configuration-arn)
   (common-lisp:declare
    (common-lisp:ignorable observability-configuration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-observability-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeObservabilityConfiguration"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-observability-configuration))
(common-lisp:progn
 (common-lisp:defun describe-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-arn)
   (common-lisp:declare (common-lisp:ignorable service-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-service-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeService"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-service))
(common-lisp:progn
 (common-lisp:defun describe-vpc-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vpc-connector-arn)
   (common-lisp:declare (common-lisp:ignorable vpc-connector-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-vpc-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeVpcConnector"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-vpc-connector))
(common-lisp:progn
 (common-lisp:defun describe-vpc-ingress-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vpc-ingress-connection-arn)
   (common-lisp:declare (common-lisp:ignorable vpc-ingress-connection-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-vpc-ingress-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DescribeVpcIngressConnection"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-vpc-ingress-connection))
(common-lisp:progn
 (common-lisp:defun disassociate-custom-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-arn domain-name)
   (common-lisp:declare (common-lisp:ignorable service-arn domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-custom-domain-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "DisassociateCustomDomain"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-custom-domain))
(common-lisp:progn
 (common-lisp:defun list-auto-scaling-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-configuration-name
                     latest-only max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-configuration-name latest-only
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-auto-scaling-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListAutoScalingConfigurations"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-auto-scaling-configurations))
(common-lisp:progn
 (common-lisp:defun list-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable connection-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-connections-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListConnections"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-connections))
(common-lisp:progn
 (common-lisp:defun list-observability-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key observability-configuration-name
                     latest-only max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable observability-configuration-name latest-only
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-observability-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListObservabilityConfigurations"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-observability-configurations))
(common-lisp:progn
 (common-lisp:defun list-operations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable service-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-operations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListOperations"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-operations))
(common-lisp:progn
 (common-lisp:defun list-services
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-services-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListServices"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-services))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListTagsForResource"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-vpc-connectors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-vpc-connectors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListVpcConnectors"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-vpc-connectors))
(common-lisp:progn
 (common-lisp:defun list-vpc-ingress-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filter max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-vpc-ingress-connections-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ListVpcIngressConnections"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-vpc-ingress-connections))
(common-lisp:progn
 (common-lisp:defun pause-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-arn)
   (common-lisp:declare (common-lisp:ignorable service-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-pause-service-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "PauseService"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'pause-service))
(common-lisp:progn
 (common-lisp:defun resume-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-arn)
   (common-lisp:declare (common-lisp:ignorable service-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-resume-service-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "ResumeService"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'resume-service))
(common-lisp:progn
 (common-lisp:defun start-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-arn)
   (common-lisp:declare (common-lisp:ignorable service-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-deployment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "StartDeployment"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-deployment))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "TagResource"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UntagResource"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-arn source-configuration
                     instance-configuration auto-scaling-configuration-arn
                     health-check-configuration network-configuration
                     observability-configuration)
   (common-lisp:declare
    (common-lisp:ignorable service-arn source-configuration
     instance-configuration auto-scaling-configuration-arn
     health-check-configuration network-configuration
     observability-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-service-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateService"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-service))
(common-lisp:progn
 (common-lisp:defun update-vpc-ingress-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vpc-ingress-connection-arn
                     ingress-vpc-configuration)
   (common-lisp:declare
    (common-lisp:ignorable vpc-ingress-connection-arn
     ingress-vpc-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-vpc-ingress-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :json "/"
                                                        "UpdateVpcIngressConnection"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-vpc-ingress-connection))
