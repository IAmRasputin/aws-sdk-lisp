;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/apprunner/api
  (:use)
  (:nicknames #:aws/apprunner)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/apprunner/api)
(common-lisp:progn
 (common-lisp:defclass apprunner-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "apprunner"))
 (common-lisp:export 'apprunner-request))
(common-lisp:progn
 (common-lisp:define-condition apprunner-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'apprunner-error))
(common-lisp:defvar *error-map*
  '(("InternalServiceErrorException" . internal-service-error-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("InvalidStateException" . invalid-state-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)))
(common-lisp:deftype asconfig-max-concurrency () 'common-lisp:integer)
(common-lisp:deftype asconfig-max-size () 'common-lisp:integer)
(common-lisp:deftype asconfig-min-size () 'common-lisp:integer)
(common-lisp:deftype app-runner-resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (associate-custom-domain-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-custom-domain-request-"))
   (service-arn (common-lisp:error ":service-arn is required") :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (enable-wwwsubdomain common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-custom-domain-request
                    'make-associate-custom-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-custom-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-custom-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-wwwsubdomain))
      (common-lisp:list
       (common-lisp:cons "EnableWWWSubdomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-custom-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-custom-domain-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-custom-domain-response-"))
   (dnstarget (common-lisp:error ":dnstarget is required") :type
    (common-lisp:or string common-lisp:null))
   (service-arn (common-lisp:error ":service-arn is required") :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (custom-domain (common-lisp:error ":custom-domain is required") :type
    (common-lisp:or custom-domain common-lisp:null))
   (vpc-dnstargets (common-lisp:error ":vpc-dnstargets is required") :type
    (common-lisp:or vpc-dnstarget-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-custom-domain-response
                    'make-associate-custom-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-custom-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-custom-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dnstarget))
      (common-lisp:list
       (common-lisp:cons "DNSTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-domain))
      (common-lisp:list
       (common-lisp:cons "CustomDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-dnstargets))
      (common-lisp:list
       (common-lisp:cons "VpcDNSTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-custom-domain-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (authentication-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-authentication-configuration-"))
   (connection-arn common-lisp:nil :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (access-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'authentication-configuration
                    'make-authentication-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          authentication-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          authentication-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-role-arn))
      (common-lisp:list
       (common-lisp:cons "AccessRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          authentication-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (auto-scaling-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-scaling-configuration-"))
   (auto-scaling-configuration-arn common-lisp:nil :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (auto-scaling-configuration-name common-lisp:nil :type
    (common-lisp:or auto-scaling-configuration-name common-lisp:null))
   (auto-scaling-configuration-revision common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (latest common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or auto-scaling-configuration-status common-lisp:null))
   (max-concurrency common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (min-size common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (max-size common-lisp:nil :type (common-lisp:or integer common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (deleted-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-configuration
                    'make-auto-scaling-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration-revision))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfigurationRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest))
      (common-lisp:list
       (common-lisp:cons "Latest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrency))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-size))
      (common-lisp:list
       (common-lisp:cons "MinSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-size))
      (common-lisp:list
       (common-lisp:cons "MaxSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted-at))
      (common-lisp:list
       (common-lisp:cons "DeletedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-configuration))
   common-lisp:nil))
(common-lisp:deftype auto-scaling-configuration-name () 'common-lisp:string)
(common-lisp:deftype auto-scaling-configuration-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (auto-scaling-configuration-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-auto-scaling-configuration-summary-"))
   (auto-scaling-configuration-arn common-lisp:nil :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (auto-scaling-configuration-name common-lisp:nil :type
    (common-lisp:or auto-scaling-configuration-name common-lisp:null))
   (auto-scaling-configuration-revision common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'auto-scaling-configuration-summary
                    'make-auto-scaling-configuration-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-configuration-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-configuration-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration-revision))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfigurationRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          auto-scaling-configuration-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype auto-scaling-configuration-summary-list ()
   '(trivial-types:proper-list auto-scaling-configuration-summary))
 (common-lisp:defun |make-auto-scaling-configuration-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            auto-scaling-configuration-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype build-command () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (certificate-validation-record (:copier common-lisp:nil)
      (:conc-name "struct-shape-certificate-validation-record-"))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or certificate-validation-record-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'certificate-validation-record
                    'make-certificate-validation-record))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          certificate-validation-record))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          certificate-validation-record))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          certificate-validation-record))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype certificate-validation-record-list ()
   '(trivial-types:proper-list certificate-validation-record))
 (common-lisp:defun |make-certificate-validation-record-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            certificate-validation-record))
   aws-sdk/generator/shape::members))
(common-lisp:deftype certificate-validation-record-status ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (code-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-code-configuration-"))
   (configuration-source
    (common-lisp:error ":configuration-source is required") :type
    (common-lisp:or configuration-source common-lisp:null))
   (code-configuration-values common-lisp:nil :type
    (common-lisp:or code-configuration-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'code-configuration 'make-code-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-source))
      (common-lisp:list
       (common-lisp:cons "ConfigurationSource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'code-configuration-values))
      (common-lisp:list
       (common-lisp:cons "CodeConfigurationValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (code-configuration-values (:copier common-lisp:nil)
      (:conc-name "struct-shape-code-configuration-values-"))
   (runtime (common-lisp:error ":runtime is required") :type
    (common-lisp:or runtime common-lisp:null))
   (build-command common-lisp:nil :type
    (common-lisp:or build-command common-lisp:null))
   (start-command common-lisp:nil :type
    (common-lisp:or start-command common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (runtime-environment-variables common-lisp:nil :type
    (common-lisp:or runtime-environment-variables common-lisp:null))
   (runtime-environment-secrets common-lisp:nil :type
    (common-lisp:or runtime-environment-secrets common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'code-configuration-values
                    'make-code-configuration-values))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          code-configuration-values))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          code-configuration-values))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'runtime))
      (common-lisp:list
       (common-lisp:cons "Runtime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'build-command))
      (common-lisp:list
       (common-lisp:cons "BuildCommand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-command))
      (common-lisp:list
       (common-lisp:cons "StartCommand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'runtime-environment-variables))
      (common-lisp:list
       (common-lisp:cons "RuntimeEnvironmentVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'runtime-environment-secrets))
      (common-lisp:list
       (common-lisp:cons "RuntimeEnvironmentSecrets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          code-configuration-values))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (code-repository (:copier common-lisp:nil)
      (:conc-name "struct-shape-code-repository-"))
   (repository-url (common-lisp:error ":repository-url is required") :type
    (common-lisp:or string common-lisp:null))
   (source-code-version (common-lisp:error ":source-code-version is required")
    :type (common-lisp:or source-code-version common-lisp:null))
   (code-configuration common-lisp:nil :type
    (common-lisp:or code-configuration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'code-repository 'make-code-repository))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input code-repository))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input code-repository))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'repository-url))
      (common-lisp:list
       (common-lisp:cons "RepositoryUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-code-version))
      (common-lisp:list
       (common-lisp:cons "SourceCodeVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-configuration))
      (common-lisp:list
       (common-lisp:cons "CodeConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input code-repository))
   common-lisp:nil))
(common-lisp:deftype configuration-source () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (connection (:copier common-lisp:nil)
      (:conc-name "struct-shape-connection-"))
   (connection-name common-lisp:nil :type
    (common-lisp:or connection-name common-lisp:null))
   (connection-arn common-lisp:nil :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (provider-type common-lisp:nil :type
    (common-lisp:or provider-type common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or connection-status common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'connection 'make-connection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connection))
   common-lisp:nil))
(common-lisp:deftype connection-name () 'common-lisp:string)
(common-lisp:deftype connection-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (connection-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-connection-summary-"))
   (connection-name common-lisp:nil :type
    (common-lisp:or connection-name common-lisp:null))
   (connection-arn common-lisp:nil :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (provider-type common-lisp:nil :type
    (common-lisp:or provider-type common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or connection-status common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connection-summary 'make-connection-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input connection-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input connection-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input connection-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype connection-summary-list ()
   '(trivial-types:proper-list connection-summary))
 (common-lisp:defun |make-connection-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connection-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype cpu () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-auto-scaling-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-auto-scaling-configuration-request-"))
   (auto-scaling-configuration-name
    (common-lisp:error ":auto-scaling-configuration-name is required") :type
    (common-lisp:or auto-scaling-configuration-name common-lisp:null))
   (max-concurrency common-lisp:nil :type
    (common-lisp:or asconfig-max-concurrency common-lisp:null))
   (min-size common-lisp:nil :type
    (common-lisp:or asconfig-min-size common-lisp:null))
   (max-size common-lisp:nil :type
    (common-lisp:or asconfig-max-size common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-auto-scaling-configuration-request
                    'make-create-auto-scaling-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-scaling-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-scaling-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-concurrency))
      (common-lisp:list
       (common-lisp:cons "MaxConcurrency"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'min-size))
      (common-lisp:list
       (common-lisp:cons "MinSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-size))
      (common-lisp:list
       (common-lisp:cons "MaxSize"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-scaling-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-auto-scaling-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-auto-scaling-configuration-response-"))
   (auto-scaling-configuration
    (common-lisp:error ":auto-scaling-configuration is required") :type
    (common-lisp:or auto-scaling-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-auto-scaling-configuration-response
                    'make-create-auto-scaling-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-scaling-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-scaling-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-auto-scaling-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-connection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-connection-request-"))
   (connection-name (common-lisp:error ":connection-name is required") :type
    (common-lisp:or connection-name common-lisp:null))
   (provider-type (common-lisp:error ":provider-type is required") :type
    (common-lisp:or provider-type common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-connection-request
                    'make-create-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'provider-type))
      (common-lisp:list
       (common-lisp:cons "ProviderType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-connection-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-connection-response-"))
   (connection (common-lisp:error ":connection is required") :type
    (common-lisp:or connection common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-connection-response
                    'make-create-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection))
      (common-lisp:list
       (common-lisp:cons "Connection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-observability-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-observability-configuration-request-"))
   (observability-configuration-name
    (common-lisp:error ":observability-configuration-name is required") :type
    (common-lisp:or observability-configuration-name common-lisp:null))
   (trace-configuration common-lisp:nil :type
    (common-lisp:or trace-configuration common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-observability-configuration-request
                    'make-create-observability-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-observability-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-observability-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration-name))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trace-configuration))
      (common-lisp:list
       (common-lisp:cons "TraceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-observability-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-observability-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-observability-configuration-response-"))
   (observability-configuration
    (common-lisp:error ":observability-configuration is required") :type
    (common-lisp:or observability-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-observability-configuration-response
                    'make-create-observability-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-observability-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-observability-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-observability-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-service-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-service-request-"))
   (service-name (common-lisp:error ":service-name is required") :type
    (common-lisp:or service-name common-lisp:null))
   (source-configuration
    (common-lisp:error ":source-configuration is required") :type
    (common-lisp:or source-configuration common-lisp:null))
   (instance-configuration common-lisp:nil :type
    (common-lisp:or instance-configuration common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (encryption-configuration common-lisp:nil :type
    (common-lisp:or encryption-configuration common-lisp:null))
   (health-check-configuration common-lisp:nil :type
    (common-lisp:or health-check-configuration common-lisp:null))
   (auto-scaling-configuration-arn common-lisp:nil :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (network-configuration common-lisp:nil :type
    (common-lisp:or network-configuration common-lisp:null))
   (observability-configuration common-lisp:nil :type
    (common-lisp:or service-observability-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-service-request 'make-create-service-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-configuration))
      (common-lisp:list
       (common-lisp:cons "SourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-configuration))
      (common-lisp:list
       (common-lisp:cons "InstanceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-configuration))
      (common-lisp:list
       (common-lisp:cons "HealthCheckConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "NetworkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-service-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-service-response-"))
   (service (common-lisp:error ":service is required") :type
    (common-lisp:or service common-lisp:null))
   (operation-id (common-lisp:error ":operation-id is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-service-response 'make-create-service-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-vpc-connector-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-vpc-connector-request-"))
   (vpc-connector-name (common-lisp:error ":vpc-connector-name is required")
    :type (common-lisp:or vpc-connector-name common-lisp:null))
   (subnets (common-lisp:error ":subnets is required") :type
    (common-lisp:or string-list common-lisp:null))
   (security-groups common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-vpc-connector-request
                    'make-create-vpc-connector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-connector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connector-name))
      (common-lisp:list
       (common-lisp:cons "VpcConnectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-vpc-connector-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-vpc-connector-response-"))
   (vpc-connector (common-lisp:error ":vpc-connector is required") :type
    (common-lisp:or vpc-connector common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-vpc-connector-response
                    'make-create-vpc-connector-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-connector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-connector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connector))
      (common-lisp:list
       (common-lisp:cons "VpcConnector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-connector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-vpc-ingress-connection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-vpc-ingress-connection-request-"))
   (service-arn (common-lisp:error ":service-arn is required") :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (vpc-ingress-connection-name
    (common-lisp:error ":vpc-ingress-connection-name is required") :type
    (common-lisp:or vpc-ingress-connection-name common-lisp:null))
   (ingress-vpc-configuration
    (common-lisp:error ":ingress-vpc-configuration is required") :type
    (common-lisp:or ingress-vpc-configuration common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-vpc-ingress-connection-request
                    'make-create-vpc-ingress-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-ingress-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-ingress-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-ingress-connection-name))
      (common-lisp:list
       (common-lisp:cons "VpcIngressConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingress-vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "IngressVpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-ingress-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-vpc-ingress-connection-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-vpc-ingress-connection-response-"))
   (vpc-ingress-connection
    (common-lisp:error ":vpc-ingress-connection is required") :type
    (common-lisp:or vpc-ingress-connection common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-vpc-ingress-connection-response
                    'make-create-vpc-ingress-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-ingress-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-ingress-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-ingress-connection))
      (common-lisp:list
       (common-lisp:cons "VpcIngressConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-vpc-ingress-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (custom-domain (:copier common-lisp:nil)
      (:conc-name "struct-shape-custom-domain-"))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or domain-name common-lisp:null))
   (enable-wwwsubdomain (common-lisp:error ":enable-wwwsubdomain is required")
    :type (common-lisp:or nullable-boolean common-lisp:null))
   (certificate-validation-records common-lisp:nil :type
    (common-lisp:or certificate-validation-record-list common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or custom-domain-association-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'custom-domain 'make-custom-domain))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input custom-domain))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input custom-domain))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-wwwsubdomain))
      (common-lisp:list
       (common-lisp:cons "EnableWWWSubdomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'certificate-validation-records))
      (common-lisp:list
       (common-lisp:cons "CertificateValidationRecords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input custom-domain))
   common-lisp:nil))
(common-lisp:deftype custom-domain-association-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype custom-domain-list ()
   '(trivial-types:proper-list custom-domain))
 (common-lisp:defun |make-custom-domain-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list custom-domain))
   aws-sdk/generator/shape::members))
(common-lisp:deftype customer-account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-auto-scaling-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-auto-scaling-configuration-request-"))
   (auto-scaling-configuration-arn
    (common-lisp:error ":auto-scaling-configuration-arn is required") :type
    (common-lisp:or app-runner-resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-auto-scaling-configuration-request
                    'make-delete-auto-scaling-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-scaling-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-scaling-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-scaling-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-auto-scaling-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-auto-scaling-configuration-response-"))
   (auto-scaling-configuration
    (common-lisp:error ":auto-scaling-configuration is required") :type
    (common-lisp:or auto-scaling-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-auto-scaling-configuration-response
                    'make-delete-auto-scaling-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-scaling-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-scaling-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-auto-scaling-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-connection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-connection-request-"))
   (connection-arn (common-lisp:error ":connection-arn is required") :type
    (common-lisp:or app-runner-resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-connection-request
                    'make-delete-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-arn))
      (common-lisp:list
       (common-lisp:cons "ConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-connection-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-connection-response-"))
   (connection common-lisp:nil :type
    (common-lisp:or connection common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-connection-response
                    'make-delete-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection))
      (common-lisp:list
       (common-lisp:cons "Connection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-observability-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-observability-configuration-request-"))
   (observability-configuration-arn
    (common-lisp:error ":observability-configuration-arn is required") :type
    (common-lisp:or app-runner-resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-observability-configuration-request
                    'make-delete-observability-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-observability-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-observability-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-observability-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-observability-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-observability-configuration-response-"))
   (observability-configuration
    (common-lisp:error ":observability-configuration is required") :type
    (common-lisp:or observability-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-observability-configuration-response
                    'make-delete-observability-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-observability-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-observability-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-observability-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-service-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-service-request-"))
   (service-arn (common-lisp:error ":service-arn is required") :type
    (common-lisp:or app-runner-resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-service-request 'make-delete-service-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-service-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-service-response-"))
   (service (common-lisp:error ":service is required") :type
    (common-lisp:or service common-lisp:null))
   (operation-id (common-lisp:error ":operation-id is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-service-response 'make-delete-service-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-vpc-connector-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-vpc-connector-request-"))
   (vpc-connector-arn (common-lisp:error ":vpc-connector-arn is required")
    :type (common-lisp:or app-runner-resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-vpc-connector-request
                    'make-delete-vpc-connector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-connector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connector-arn))
      (common-lisp:list
       (common-lisp:cons "VpcConnectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-vpc-connector-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-vpc-connector-response-"))
   (vpc-connector (common-lisp:error ":vpc-connector is required") :type
    (common-lisp:or vpc-connector common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-vpc-connector-response
                    'make-delete-vpc-connector-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-connector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-connector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connector))
      (common-lisp:list
       (common-lisp:cons "VpcConnector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-connector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-vpc-ingress-connection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-vpc-ingress-connection-request-"))
   (vpc-ingress-connection-arn
    (common-lisp:error ":vpc-ingress-connection-arn is required") :type
    (common-lisp:or app-runner-resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-vpc-ingress-connection-request
                    'make-delete-vpc-ingress-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-ingress-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-ingress-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-ingress-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpcIngressConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-ingress-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-vpc-ingress-connection-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-vpc-ingress-connection-response-"))
   (vpc-ingress-connection
    (common-lisp:error ":vpc-ingress-connection is required") :type
    (common-lisp:or vpc-ingress-connection common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-vpc-ingress-connection-response
                    'make-delete-vpc-ingress-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-ingress-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-ingress-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-ingress-connection))
      (common-lisp:list
       (common-lisp:cons "VpcIngressConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-vpc-ingress-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-auto-scaling-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-auto-scaling-configuration-request-"))
   (auto-scaling-configuration-arn
    (common-lisp:error ":auto-scaling-configuration-arn is required") :type
    (common-lisp:or app-runner-resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-auto-scaling-configuration-request
                    'make-describe-auto-scaling-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-scaling-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-scaling-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-scaling-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-auto-scaling-configuration-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-auto-scaling-configuration-response-"))
   (auto-scaling-configuration
    (common-lisp:error ":auto-scaling-configuration is required") :type
    (common-lisp:or auto-scaling-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-auto-scaling-configuration-response
                    'make-describe-auto-scaling-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-scaling-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-scaling-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-auto-scaling-configuration-response))
   common-lisp:nil))
(common-lisp:deftype describe-custom-domains-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (describe-custom-domains-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-custom-domains-request-"))
   (service-arn (common-lisp:error ":service-arn is required") :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or describe-custom-domains-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-custom-domains-request
                    'make-describe-custom-domains-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-domains-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-domains-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-domains-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-custom-domains-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-custom-domains-response-"))
   (dnstarget (common-lisp:error ":dnstarget is required") :type
    (common-lisp:or string common-lisp:null))
   (service-arn (common-lisp:error ":service-arn is required") :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (custom-domains (common-lisp:error ":custom-domains is required") :type
    (common-lisp:or custom-domain-list common-lisp:null))
   (vpc-dnstargets (common-lisp:error ":vpc-dnstargets is required") :type
    (common-lisp:or vpc-dnstarget-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-custom-domains-response
                    'make-describe-custom-domains-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-domains-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-domains-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dnstarget))
      (common-lisp:list
       (common-lisp:cons "DNSTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-domains))
      (common-lisp:list
       (common-lisp:cons "CustomDomains"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-dnstargets))
      (common-lisp:list
       (common-lisp:cons "VpcDNSTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-custom-domains-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-observability-configuration-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-observability-configuration-request-"))
   (observability-configuration-arn
    (common-lisp:error ":observability-configuration-arn is required") :type
    (common-lisp:or app-runner-resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-observability-configuration-request
                    'make-describe-observability-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-observability-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-observability-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-observability-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-observability-configuration-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-observability-configuration-response-"))
   (observability-configuration
    (common-lisp:error ":observability-configuration is required") :type
    (common-lisp:or observability-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-observability-configuration-response
                    'make-describe-observability-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-observability-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-observability-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-observability-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-service-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-service-request-"))
   (service-arn (common-lisp:error ":service-arn is required") :type
    (common-lisp:or app-runner-resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-service-request 'make-describe-service-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-service-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-service-response-"))
   (service (common-lisp:error ":service is required") :type
    (common-lisp:or service common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-service-response
                    'make-describe-service-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-service-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-vpc-connector-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-vpc-connector-request-"))
   (vpc-connector-arn (common-lisp:error ":vpc-connector-arn is required")
    :type (common-lisp:or app-runner-resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-connector-request
                    'make-describe-vpc-connector-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-connector-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-connector-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connector-arn))
      (common-lisp:list
       (common-lisp:cons "VpcConnectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-connector-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-vpc-connector-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-vpc-connector-response-"))
   (vpc-connector (common-lisp:error ":vpc-connector is required") :type
    (common-lisp:or vpc-connector common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-connector-response
                    'make-describe-vpc-connector-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-connector-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-connector-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connector))
      (common-lisp:list
       (common-lisp:cons "VpcConnector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-connector-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-vpc-ingress-connection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-vpc-ingress-connection-request-"))
   (vpc-ingress-connection-arn
    (common-lisp:error ":vpc-ingress-connection-arn is required") :type
    (common-lisp:or app-runner-resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-ingress-connection-request
                    'make-describe-vpc-ingress-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-ingress-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-ingress-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-ingress-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpcIngressConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-ingress-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-vpc-ingress-connection-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-vpc-ingress-connection-response-"))
   (vpc-ingress-connection
    (common-lisp:error ":vpc-ingress-connection is required") :type
    (common-lisp:or vpc-ingress-connection common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-vpc-ingress-connection-response
                    'make-describe-vpc-ingress-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-ingress-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-ingress-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-ingress-connection))
      (common-lisp:list
       (common-lisp:cons "VpcIngressConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-vpc-ingress-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-custom-domain-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-custom-domain-request-"))
   (service-arn (common-lisp:error ":service-arn is required") :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (domain-name (common-lisp:error ":domain-name is required") :type
    (common-lisp:or domain-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-custom-domain-request
                    'make-disassociate-custom-domain-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-custom-domain-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-custom-domain-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-custom-domain-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-custom-domain-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-custom-domain-response-"))
   (dnstarget (common-lisp:error ":dnstarget is required") :type
    (common-lisp:or string common-lisp:null))
   (service-arn (common-lisp:error ":service-arn is required") :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (custom-domain (common-lisp:error ":custom-domain is required") :type
    (common-lisp:or custom-domain common-lisp:null))
   (vpc-dnstargets (common-lisp:error ":vpc-dnstargets is required") :type
    (common-lisp:or vpc-dnstarget-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-custom-domain-response
                    'make-disassociate-custom-domain-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-custom-domain-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-custom-domain-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dnstarget))
      (common-lisp:list
       (common-lisp:cons "DNSTarget"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-domain))
      (common-lisp:list
       (common-lisp:cons "CustomDomain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-dnstargets))
      (common-lisp:list
       (common-lisp:cons "VpcDNSTargets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-custom-domain-response))
   common-lisp:nil))
(common-lisp:deftype domain-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (egress-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-egress-configuration-"))
   (egress-type common-lisp:nil :type
    (common-lisp:or egress-type common-lisp:null))
   (vpc-connector-arn common-lisp:nil :type
    (common-lisp:or app-runner-resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'egress-configuration 'make-egress-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input egress-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input egress-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'egress-type))
      (common-lisp:list
       (common-lisp:cons "EgressType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connector-arn))
      (common-lisp:list
       (common-lisp:cons "VpcConnectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input egress-configuration))
   common-lisp:nil))
(common-lisp:deftype egress-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (encryption-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-encryption-configuration-"))
   (kms-key (common-lisp:error ":kms-key is required") :type
    (common-lisp:or kms-key-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'encryption-configuration 'make-encryption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key))
      (common-lisp:list
       (common-lisp:cons "KmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          encryption-configuration))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (health-check-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-health-check-configuration-"))
   (protocol common-lisp:nil :type
    (common-lisp:or health-check-protocol common-lisp:null))
   (path common-lisp:nil :type
    (common-lisp:or health-check-path common-lisp:null))
   (interval common-lisp:nil :type
    (common-lisp:or health-check-interval common-lisp:null))
   (timeout common-lisp:nil :type
    (common-lisp:or health-check-timeout common-lisp:null))
   (healthy-threshold common-lisp:nil :type
    (common-lisp:or health-check-healthy-threshold common-lisp:null))
   (unhealthy-threshold common-lisp:nil :type
    (common-lisp:or health-check-unhealthy-threshold common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'health-check-configuration
                    'make-health-check-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          health-check-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          health-check-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'protocol))
      (common-lisp:list
       (common-lisp:cons "Protocol"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "Interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timeout))
      (common-lisp:list
       (common-lisp:cons "Timeout"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'healthy-threshold))
      (common-lisp:list
       (common-lisp:cons "HealthyThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unhealthy-threshold))
      (common-lisp:list
       (common-lisp:cons "UnhealthyThreshold"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          health-check-configuration))
   common-lisp:nil))
(common-lisp:deftype health-check-healthy-threshold () 'common-lisp:integer)
(common-lisp:deftype health-check-interval () 'common-lisp:integer)
(common-lisp:deftype health-check-path () 'common-lisp:string)
(common-lisp:deftype health-check-protocol () 'common-lisp:string)
(common-lisp:deftype health-check-timeout () 'common-lisp:integer)
(common-lisp:deftype health-check-unhealthy-threshold () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (image-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-configuration-"))
   (runtime-environment-variables common-lisp:nil :type
    (common-lisp:or runtime-environment-variables common-lisp:null))
   (start-command common-lisp:nil :type
    (common-lisp:or start-command common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (runtime-environment-secrets common-lisp:nil :type
    (common-lisp:or runtime-environment-secrets common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'image-configuration 'make-image-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'runtime-environment-variables))
      (common-lisp:list
       (common-lisp:cons "RuntimeEnvironmentVariables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-command))
      (common-lisp:list
       (common-lisp:cons "StartCommand"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'port))
      (common-lisp:list
       (common-lisp:cons "Port"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'runtime-environment-secrets))
      (common-lisp:list
       (common-lisp:cons "RuntimeEnvironmentSecrets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-configuration))
   common-lisp:nil))
(common-lisp:deftype image-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (image-repository (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-repository-"))
   (image-identifier (common-lisp:error ":image-identifier is required") :type
    (common-lisp:or image-identifier common-lisp:null))
   (image-configuration common-lisp:nil :type
    (common-lisp:or image-configuration common-lisp:null))
   (image-repository-type
    (common-lisp:error ":image-repository-type is required") :type
    (common-lisp:or image-repository-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'image-repository 'make-image-repository))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-repository))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-repository))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-identifier))
      (common-lisp:list
       (common-lisp:cons "ImageIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-configuration))
      (common-lisp:list
       (common-lisp:cons "ImageConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'image-repository-type))
      (common-lisp:list
       (common-lisp:cons "ImageRepositoryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-repository))
   common-lisp:nil))
(common-lisp:deftype image-repository-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ingress-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-ingress-configuration-"))
   (is-publicly-accessible common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ingress-configuration 'make-ingress-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ingress-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ingress-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'is-publicly-accessible))
      (common-lisp:list
       (common-lisp:cons "IsPubliclyAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ingress-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ingress-vpc-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-ingress-vpc-configuration-"))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (vpc-endpoint-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ingress-vpc-configuration
                    'make-ingress-vpc-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ingress-vpc-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ingress-vpc-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ingress-vpc-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-configuration-"))
   (cpu common-lisp:nil :type (common-lisp:or cpu common-lisp:null))
   (memory common-lisp:nil :type (common-lisp:or memory common-lisp:null))
   (instance-role-arn common-lisp:nil :type
    (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-configuration 'make-instance-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          instance-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          instance-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cpu))
      (common-lisp:list
       (common-lisp:cons "Cpu"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'memory))
      (common-lisp:list
       (common-lisp:cons "Memory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-role-arn))
      (common-lisp:list
       (common-lisp:cons "InstanceRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          instance-configuration))
   common-lisp:nil))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-service-error-exception
     (apprunner-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-service-error-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-error-exception
                    'internal-service-error-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (apprunner-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-state-exception
     (apprunner-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-state-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-state-exception 'invalid-state-exception-message)))
(common-lisp:deftype kms-key-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-auto-scaling-configurations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-auto-scaling-configurations-request-"))
   (auto-scaling-configuration-name common-lisp:nil :type
    (common-lisp:or auto-scaling-configuration-name common-lisp:null))
   (latest-only common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-auto-scaling-configurations-request
                    'make-list-auto-scaling-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-auto-scaling-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-auto-scaling-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration-name))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-only))
      (common-lisp:list
       (common-lisp:cons "LatestOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-auto-scaling-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-auto-scaling-configurations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-auto-scaling-configurations-response-"))
   (auto-scaling-configuration-summary-list
    (common-lisp:error ":auto-scaling-configuration-summary-list is required")
    :type
    (common-lisp:or auto-scaling-configuration-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-auto-scaling-configurations-response
                    'make-list-auto-scaling-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-auto-scaling-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-auto-scaling-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration-summary-list))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfigurationSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-auto-scaling-configurations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-connections-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-connections-request-"))
   (connection-name common-lisp:nil :type
    (common-lisp:or connection-name common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-connections-request 'make-list-connections-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'connection-name))
      (common-lisp:list
       (common-lisp:cons "ConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-connections-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-connections-response-"))
   (connection-summary-list
    (common-lisp:error ":connection-summary-list is required") :type
    (common-lisp:or connection-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-connections-response
                    'make-list-connections-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'connection-summary-list))
      (common-lisp:list
       (common-lisp:cons "ConnectionSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-connections-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-observability-configurations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-observability-configurations-request-"))
   (observability-configuration-name common-lisp:nil :type
    (common-lisp:or observability-configuration-name common-lisp:null))
   (latest-only common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-observability-configurations-request
                    'make-list-observability-configurations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-observability-configurations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-observability-configurations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration-name))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest-only))
      (common-lisp:list
       (common-lisp:cons "LatestOnly"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-observability-configurations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-observability-configurations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-observability-configurations-response-"))
   (observability-configuration-summary-list
    (common-lisp:error ":observability-configuration-summary-list is required")
    :type
    (common-lisp:or observability-configuration-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-observability-configurations-response
                    'make-list-observability-configurations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-observability-configurations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-observability-configurations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration-summary-list))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfigurationSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-observability-configurations-response))
   common-lisp:nil))
(common-lisp:deftype list-operations-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-operations-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-operations-request-"))
   (service-arn (common-lisp:error ":service-arn is required") :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-operations-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-operations-request 'make-list-operations-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-operations-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-operations-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-operations-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-operations-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-operations-response-"))
   (operation-summary-list common-lisp:nil :type
    (common-lisp:or operation-summary-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-operations-response 'make-list-operations-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-operations-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-operations-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'operation-summary-list))
      (common-lisp:list
       (common-lisp:cons "OperationSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-operations-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-services-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-services-request-"))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or service-max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-services-request 'make-list-services-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-services-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-services-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-services-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-services-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-services-response-"))
   (service-summary-list
    (common-lisp:error ":service-summary-list is required") :type
    (common-lisp:or service-summary-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-services-response 'make-list-services-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-services-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-services-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-summary-list))
      (common-lisp:list
       (common-lisp:cons "ServiceSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-services-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or app-runner-resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-vpc-connectors-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-vpc-connectors-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-vpc-connectors-request
                    'make-list-vpc-connectors-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-connectors-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-connectors-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-connectors-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-vpc-connectors-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-vpc-connectors-response-"))
   (vpc-connectors (common-lisp:error ":vpc-connectors is required") :type
    (common-lisp:or vpc-connectors common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-vpc-connectors-response
                    'make-list-vpc-connectors-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-connectors-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-connectors-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connectors))
      (common-lisp:list
       (common-lisp:cons "VpcConnectors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-connectors-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-vpc-ingress-connections-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-vpc-ingress-connections-filter-"))
   (service-arn common-lisp:nil :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (vpc-endpoint-id common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-vpc-ingress-connections-filter
                    'make-list-vpc-ingress-connections-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-ingress-connections-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-ingress-connections-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-endpoint-id))
      (common-lisp:list
       (common-lisp:cons "VpcEndpointId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-ingress-connections-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-vpc-ingress-connections-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-vpc-ingress-connections-request-"))
   (filter common-lisp:nil :type
    (common-lisp:or list-vpc-ingress-connections-filter common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-vpc-ingress-connections-request
                    'make-list-vpc-ingress-connections-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-ingress-connections-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-ingress-connections-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-ingress-connections-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-vpc-ingress-connections-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-vpc-ingress-connections-response-"))
   (vpc-ingress-connection-summary-list
    (common-lisp:error ":vpc-ingress-connection-summary-list is required")
    :type
    (common-lisp:or vpc-ingress-connection-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-vpc-ingress-connections-response
                    'make-list-vpc-ingress-connections-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-ingress-connections-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-ingress-connections-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-ingress-connection-summary-list))
      (common-lisp:list
       (common-lisp:cons "VpcIngressConnectionSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-vpc-ingress-connections-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype memory () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (network-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-network-configuration-"))
   (egress-configuration common-lisp:nil :type
    (common-lisp:or egress-configuration common-lisp:null))
   (ingress-configuration common-lisp:nil :type
    (common-lisp:or ingress-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'network-configuration 'make-network-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'egress-configuration))
      (common-lisp:list
       (common-lisp:cons "EgressConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingress-configuration))
      (common-lisp:list
       (common-lisp:cons "IngressConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          network-configuration))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype nullable-boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (observability-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-observability-configuration-"))
   (observability-configuration-arn common-lisp:nil :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (observability-configuration-name common-lisp:nil :type
    (common-lisp:or observability-configuration-name common-lisp:null))
   (trace-configuration common-lisp:nil :type
    (common-lisp:or trace-configuration common-lisp:null))
   (observability-configuration-revision common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (latest common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or observability-configuration-status common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (deleted-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'observability-configuration
                    'make-observability-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          observability-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          observability-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration-name))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'trace-configuration))
      (common-lisp:list
       (common-lisp:cons "TraceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration-revision))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfigurationRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'latest))
      (common-lisp:list
       (common-lisp:cons "Latest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted-at))
      (common-lisp:list
       (common-lisp:cons "DeletedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          observability-configuration))
   common-lisp:nil))
(common-lisp:deftype observability-configuration-name () 'common-lisp:string)
(common-lisp:deftype observability-configuration-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (observability-configuration-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-observability-configuration-summary-"))
   (observability-configuration-arn common-lisp:nil :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (observability-configuration-name common-lisp:nil :type
    (common-lisp:or observability-configuration-name common-lisp:null))
   (observability-configuration-revision common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'observability-configuration-summary
                    'make-observability-configuration-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          observability-configuration-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          observability-configuration-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration-name))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfigurationName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration-revision))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfigurationRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          observability-configuration-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype observability-configuration-summary-list ()
   '(trivial-types:proper-list observability-configuration-summary))
 (common-lisp:defun |make-observability-configuration-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            observability-configuration-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype operation-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (operation-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-operation-summary-"))
   (id common-lisp:nil :type (common-lisp:or uuid common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or operation-type common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or operation-status common-lisp:null))
   (target-arn common-lisp:nil :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (started-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (ended-at common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'operation-summary 'make-operation-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input operation-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input operation-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'target-arn))
      (common-lisp:list
       (common-lisp:cons "TargetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'started-at))
      (common-lisp:list
       (common-lisp:cons "StartedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ended-at))
      (common-lisp:list
       (common-lisp:cons "EndedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input operation-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype operation-summary-list ()
   '(trivial-types:proper-list operation-summary))
 (common-lisp:defun |make-operation-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list operation-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype operation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (pause-service-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-pause-service-request-"))
   (service-arn (common-lisp:error ":service-arn is required") :type
    (common-lisp:or app-runner-resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pause-service-request 'make-pause-service-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pause-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pause-service-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pause-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pause-service-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-pause-service-response-"))
   (service (common-lisp:error ":service is required") :type
    (common-lisp:or service common-lisp:null))
   (operation-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pause-service-response 'make-pause-service-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pause-service-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pause-service-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pause-service-response))
   common-lisp:nil))
(common-lisp:deftype provider-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (apprunner-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (resume-service-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-resume-service-request-"))
   (service-arn (common-lisp:error ":service-arn is required") :type
    (common-lisp:or app-runner-resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resume-service-request 'make-resume-service-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resume-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resume-service-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resume-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resume-service-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-resume-service-response-"))
   (service (common-lisp:error ":service is required") :type
    (common-lisp:or service common-lisp:null))
   (operation-id common-lisp:nil :type (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resume-service-response 'make-resume-service-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resume-service-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resume-service-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resume-service-response))
   common-lisp:nil))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype runtime () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype runtime-environment-secrets () 'common-lisp:hash-table)
 (common-lisp:defun |make-runtime-environment-secrets|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype runtime-environment-secrets-name () 'common-lisp:string)
(common-lisp:deftype runtime-environment-secrets-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype runtime-environment-variables () 'common-lisp:hash-table)
 (common-lisp:defun |make-runtime-environment-variables|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype runtime-environment-variables-key () 'common-lisp:string)
(common-lisp:deftype runtime-environment-variables-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (service (:copier common-lisp:nil) (:conc-name "struct-shape-service-"))
   (service-name (common-lisp:error ":service-name is required") :type
    (common-lisp:or service-name common-lisp:null))
   (service-id (common-lisp:error ":service-id is required") :type
    (common-lisp:or service-id common-lisp:null))
   (service-arn (common-lisp:error ":service-arn is required") :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (service-url common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (created-at (common-lisp:error ":created-at is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at (common-lisp:error ":updated-at is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (deleted-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or service-status common-lisp:null))
   (source-configuration
    (common-lisp:error ":source-configuration is required") :type
    (common-lisp:or source-configuration common-lisp:null))
   (instance-configuration
    (common-lisp:error ":instance-configuration is required") :type
    (common-lisp:or instance-configuration common-lisp:null))
   (encryption-configuration common-lisp:nil :type
    (common-lisp:or encryption-configuration common-lisp:null))
   (health-check-configuration common-lisp:nil :type
    (common-lisp:or health-check-configuration common-lisp:null))
   (auto-scaling-configuration-summary
    (common-lisp:error ":auto-scaling-configuration-summary is required") :type
    (common-lisp:or auto-scaling-configuration-summary common-lisp:null))
   (network-configuration
    (common-lisp:error ":network-configuration is required") :type
    (common-lisp:or network-configuration common-lisp:null))
   (observability-configuration common-lisp:nil :type
    (common-lisp:or service-observability-configuration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'service 'make-service))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-id))
      (common-lisp:list
       (common-lisp:cons "ServiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-url))
      (common-lisp:list
       (common-lisp:cons "ServiceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted-at))
      (common-lisp:list
       (common-lisp:cons "DeletedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-configuration))
      (common-lisp:list
       (common-lisp:cons "SourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-configuration))
      (common-lisp:list
       (common-lisp:cons "InstanceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-configuration))
      (common-lisp:list
       (common-lisp:cons "HealthCheckConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration-summary))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfigurationSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "NetworkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service))
   common-lisp:nil))
(common-lisp:deftype service-id () 'common-lisp:string)
(common-lisp:deftype service-max-results () 'common-lisp:integer)
(common-lisp:deftype service-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (service-observability-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-observability-configuration-"))
   (observability-enabled
    (common-lisp:error ":observability-enabled is required") :type
    (common-lisp:or boolean common-lisp:null))
   (observability-configuration-arn common-lisp:nil :type
    (common-lisp:or app-runner-resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-observability-configuration
                    'make-service-observability-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-observability-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-observability-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-enabled))
      (common-lisp:list
       (common-lisp:cons "ObservabilityEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-observability-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (apprunner-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:deftype service-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (service-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-summary-"))
   (service-name common-lisp:nil :type
    (common-lisp:or service-name common-lisp:null))
   (service-id common-lisp:nil :type
    (common-lisp:or service-id common-lisp:null))
   (service-arn common-lisp:nil :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (service-url common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (updated-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or service-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'service-summary 'make-service-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input service-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input service-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-id))
      (common-lisp:list
       (common-lisp:cons "ServiceId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-url))
      (common-lisp:list
       (common-lisp:cons "ServiceUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'updated-at))
      (common-lisp:list
       (common-lisp:cons "UpdatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input service-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-summary-list ()
   '(trivial-types:proper-list service-summary))
 (common-lisp:defun |make-service-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (source-code-version (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-code-version-"))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or source-code-version-type common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'source-code-version 'make-source-code-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-code-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-code-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-code-version))
   common-lisp:nil))
(common-lisp:deftype source-code-version-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (source-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-source-configuration-"))
   (code-repository common-lisp:nil :type
    (common-lisp:or code-repository common-lisp:null))
   (image-repository common-lisp:nil :type
    (common-lisp:or image-repository common-lisp:null))
   (auto-deployments-enabled common-lisp:nil :type
    (common-lisp:or nullable-boolean common-lisp:null))
   (authentication-configuration common-lisp:nil :type
    (common-lisp:or authentication-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'source-configuration 'make-source-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input source-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input source-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code-repository))
      (common-lisp:list
       (common-lisp:cons "CodeRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'image-repository))
      (common-lisp:list
       (common-lisp:cons "ImageRepository"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-deployments-enabled))
      (common-lisp:list
       (common-lisp:cons "AutoDeploymentsEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-configuration))
      (common-lisp:list
       (common-lisp:cons "AuthenticationConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input source-configuration))
   common-lisp:nil))
(common-lisp:deftype start-command () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-deployment-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-deployment-request-"))
   (service-arn (common-lisp:error ":service-arn is required") :type
    (common-lisp:or app-runner-resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-deployment-request 'make-start-deployment-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-deployment-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-deployment-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-deployment-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-deployment-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-deployment-response-"))
   (operation-id (common-lisp:error ":operation-id is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-deployment-response
                    'make-start-deployment-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-deployment-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-deployment-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-deployment-response))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype string-list () '(trivial-types:proper-list string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key common-lisp:nil :type (common-lisp:or tag-key common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (trace-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-trace-configuration-"))
   (vendor (common-lisp:error ":vendor is required") :type
    (common-lisp:or tracing-vendor common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'trace-configuration 'make-trace-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input trace-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input trace-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vendor))
      (common-lisp:list
       (common-lisp:cons "Vendor"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input trace-configuration))
   common-lisp:nil))
(common-lisp:deftype tracing-vendor () 'common-lisp:string)
(common-lisp:deftype uuid () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-service-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-service-request-"))
   (service-arn (common-lisp:error ":service-arn is required") :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (source-configuration common-lisp:nil :type
    (common-lisp:or source-configuration common-lisp:null))
   (instance-configuration common-lisp:nil :type
    (common-lisp:or instance-configuration common-lisp:null))
   (auto-scaling-configuration-arn common-lisp:nil :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (health-check-configuration common-lisp:nil :type
    (common-lisp:or health-check-configuration common-lisp:null))
   (network-configuration common-lisp:nil :type
    (common-lisp:or network-configuration common-lisp:null))
   (observability-configuration common-lisp:nil :type
    (common-lisp:or service-observability-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-service-request 'make-update-service-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'source-configuration))
      (common-lisp:list
       (common-lisp:cons "SourceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-configuration))
      (common-lisp:list
       (common-lisp:cons "InstanceConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auto-scaling-configuration-arn))
      (common-lisp:list
       (common-lisp:cons "AutoScalingConfigurationArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'health-check-configuration))
      (common-lisp:list
       (common-lisp:cons "HealthCheckConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'network-configuration))
      (common-lisp:list
       (common-lisp:cons "NetworkConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'observability-configuration))
      (common-lisp:list
       (common-lisp:cons "ObservabilityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-service-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-service-response-"))
   (service (common-lisp:error ":service is required") :type
    (common-lisp:or service common-lisp:null))
   (operation-id (common-lisp:error ":operation-id is required") :type
    (common-lisp:or uuid common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-service-response 'make-update-service-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service))
      (common-lisp:list
       (common-lisp:cons "Service"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'operation-id))
      (common-lisp:list
       (common-lisp:cons "OperationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-vpc-ingress-connection-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-vpc-ingress-connection-request-"))
   (vpc-ingress-connection-arn
    (common-lisp:error ":vpc-ingress-connection-arn is required") :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (ingress-vpc-configuration
    (common-lisp:error ":ingress-vpc-configuration is required") :type
    (common-lisp:or ingress-vpc-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-vpc-ingress-connection-request
                    'make-update-vpc-ingress-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-ingress-connection-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-ingress-connection-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-ingress-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpcIngressConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingress-vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "IngressVpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-ingress-connection-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-vpc-ingress-connection-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-vpc-ingress-connection-response-"))
   (vpc-ingress-connection
    (common-lisp:error ":vpc-ingress-connection is required") :type
    (common-lisp:or vpc-ingress-connection common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-vpc-ingress-connection-response
                    'make-update-vpc-ingress-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-ingress-connection-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-ingress-connection-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-ingress-connection))
      (common-lisp:list
       (common-lisp:cons "VpcIngressConnection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-vpc-ingress-connection-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-connector (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-connector-"))
   (vpc-connector-name common-lisp:nil :type
    (common-lisp:or vpc-connector-name common-lisp:null))
   (vpc-connector-arn common-lisp:nil :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (vpc-connector-revision common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (subnets common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (security-groups common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or vpc-connector-status common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (deleted-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'vpc-connector 'make-vpc-connector))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-connector))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-connector))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connector-name))
      (common-lisp:list
       (common-lisp:cons "VpcConnectorName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-connector-arn))
      (common-lisp:list
       (common-lisp:cons "VpcConnectorArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-connector-revision))
      (common-lisp:list
       (common-lisp:cons "VpcConnectorRevision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'subnets))
      (common-lisp:list
       (common-lisp:cons "Subnets"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'security-groups))
      (common-lisp:list
       (common-lisp:cons "SecurityGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted-at))
      (common-lisp:list
       (common-lisp:cons "DeletedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-connector))
   common-lisp:nil))
(common-lisp:deftype vpc-connector-name () 'common-lisp:string)
(common-lisp:deftype vpc-connector-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype vpc-connectors ()
   '(trivial-types:proper-list vpc-connector))
 (common-lisp:defun |make-vpc-connectors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-connector))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-dnstarget (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-dnstarget-"))
   (vpc-ingress-connection-arn common-lisp:nil :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (vpc-id common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (domain-name common-lisp:nil :type
    (common-lisp:or domain-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'vpc-dnstarget 'make-vpc-dnstarget))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input vpc-dnstarget))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input vpc-dnstarget))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-ingress-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpcIngressConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'vpc-id))
      (common-lisp:list
       (common-lisp:cons "VpcId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input vpc-dnstarget))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-dnstarget-list ()
   '(trivial-types:proper-list vpc-dnstarget))
 (common-lisp:defun |make-vpc-dnstarget-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc-dnstarget))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-ingress-connection (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-ingress-connection-"))
   (vpc-ingress-connection-arn common-lisp:nil :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (vpc-ingress-connection-name common-lisp:nil :type
    (common-lisp:or vpc-ingress-connection-name common-lisp:null))
   (service-arn common-lisp:nil :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or vpc-ingress-connection-status common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or customer-account-id common-lisp:null))
   (domain-name common-lisp:nil :type
    (common-lisp:or domain-name common-lisp:null))
   (ingress-vpc-configuration common-lisp:nil :type
    (common-lisp:or ingress-vpc-configuration common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (deleted-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-ingress-connection 'make-vpc-ingress-connection))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-ingress-connection))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-ingress-connection))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-ingress-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpcIngressConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-ingress-connection-name))
      (common-lisp:list
       (common-lisp:cons "VpcIngressConnectionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-id))
      (common-lisp:list
       (common-lisp:cons "AccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'domain-name))
      (common-lisp:list
       (common-lisp:cons "DomainName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ingress-vpc-configuration))
      (common-lisp:list
       (common-lisp:cons "IngressVpcConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-at))
      (common-lisp:list
       (common-lisp:cons "CreatedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deleted-at))
      (common-lisp:list
       (common-lisp:cons "DeletedAt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-ingress-connection))
   common-lisp:nil))
(common-lisp:deftype vpc-ingress-connection-name () 'common-lisp:string)
(common-lisp:deftype vpc-ingress-connection-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (vpc-ingress-connection-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-vpc-ingress-connection-summary-"))
   (vpc-ingress-connection-arn common-lisp:nil :type
    (common-lisp:or app-runner-resource-arn common-lisp:null))
   (service-arn common-lisp:nil :type
    (common-lisp:or app-runner-resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpc-ingress-connection-summary
                    'make-vpc-ingress-connection-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          vpc-ingress-connection-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          vpc-ingress-connection-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'vpc-ingress-connection-arn))
      (common-lisp:list
       (common-lisp:cons "VpcIngressConnectionArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-arn))
      (common-lisp:list
       (common-lisp:cons "ServiceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          vpc-ingress-connection-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype vpc-ingress-connection-summary-list ()
   '(trivial-types:proper-list vpc-ingress-connection-summary))
 (common-lisp:defun |make-vpc-ingress-connection-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            vpc-ingress-connection-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun associate-custom-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-arn domain-name
                     enable-wwwsubdomain)
   (common-lisp:declare
    (common-lisp:ignorable service-arn domain-name enable-wwwsubdomain))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-custom-domain-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AssociateCustomDomain"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-custom-domain))
(common-lisp:progn
 (common-lisp:defun create-auto-scaling-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-configuration-name
                     max-concurrency min-size max-size tags)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-configuration-name max-concurrency
     min-size max-size tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-auto-scaling-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAutoScalingConfiguration"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-auto-scaling-configuration))
(common-lisp:progn
 (common-lisp:defun create-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-name provider-type tags)
   (common-lisp:declare
    (common-lisp:ignorable connection-name provider-type tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateConnection"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-connection))
(common-lisp:progn
 (common-lisp:defun create-observability-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key observability-configuration-name
                     trace-configuration tags)
   (common-lisp:declare
    (common-lisp:ignorable observability-configuration-name trace-configuration
     tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-observability-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateObservabilityConfiguration"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-observability-configuration))
(common-lisp:progn
 (common-lisp:defun create-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-name source-configuration
                     instance-configuration tags encryption-configuration
                     health-check-configuration auto-scaling-configuration-arn
                     network-configuration observability-configuration)
   (common-lisp:declare
    (common-lisp:ignorable service-name source-configuration
     instance-configuration tags encryption-configuration
     health-check-configuration auto-scaling-configuration-arn
     network-configuration observability-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-service-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateService"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-service))
(common-lisp:progn
 (common-lisp:defun create-vpc-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vpc-connector-name subnets
                     security-groups tags)
   (common-lisp:declare
    (common-lisp:ignorable vpc-connector-name subnets security-groups tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-vpc-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateVpcConnector"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-vpc-connector))
(common-lisp:progn
 (common-lisp:defun create-vpc-ingress-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-arn vpc-ingress-connection-name
                     ingress-vpc-configuration tags)
   (common-lisp:declare
    (common-lisp:ignorable service-arn vpc-ingress-connection-name
     ingress-vpc-configuration tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-vpc-ingress-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateVpcIngressConnection"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-vpc-ingress-connection))
(common-lisp:progn
 (common-lisp:defun delete-auto-scaling-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-configuration-arn)
   (common-lisp:declare (common-lisp:ignorable auto-scaling-configuration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-auto-scaling-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAutoScalingConfiguration"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-auto-scaling-configuration))
(common-lisp:progn
 (common-lisp:defun delete-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-arn)
   (common-lisp:declare (common-lisp:ignorable connection-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteConnection"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-connection))
(common-lisp:progn
 (common-lisp:defun delete-observability-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key observability-configuration-arn)
   (common-lisp:declare
    (common-lisp:ignorable observability-configuration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-observability-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteObservabilityConfiguration"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-observability-configuration))
(common-lisp:progn
 (common-lisp:defun delete-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-arn)
   (common-lisp:declare (common-lisp:ignorable service-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-service-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteService"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-service))
(common-lisp:progn
 (common-lisp:defun delete-vpc-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vpc-connector-arn)
   (common-lisp:declare (common-lisp:ignorable vpc-connector-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-vpc-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteVpcConnector"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-vpc-connector))
(common-lisp:progn
 (common-lisp:defun delete-vpc-ingress-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vpc-ingress-connection-arn)
   (common-lisp:declare (common-lisp:ignorable vpc-ingress-connection-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-vpc-ingress-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteVpcIngressConnection"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-vpc-ingress-connection))
(common-lisp:progn
 (common-lisp:defun describe-auto-scaling-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-configuration-arn)
   (common-lisp:declare (common-lisp:ignorable auto-scaling-configuration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-auto-scaling-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeAutoScalingConfiguration"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-auto-scaling-configuration))
(common-lisp:progn
 (common-lisp:defun describe-custom-domains
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable service-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-custom-domains-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeCustomDomains"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-custom-domains))
(common-lisp:progn
 (common-lisp:defun describe-observability-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key observability-configuration-arn)
   (common-lisp:declare
    (common-lisp:ignorable observability-configuration-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-observability-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeObservabilityConfiguration"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-observability-configuration))
(common-lisp:progn
 (common-lisp:defun describe-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-arn)
   (common-lisp:declare (common-lisp:ignorable service-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-service-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeService"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-service))
(common-lisp:progn
 (common-lisp:defun describe-vpc-connector
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vpc-connector-arn)
   (common-lisp:declare (common-lisp:ignorable vpc-connector-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-vpc-connector-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeVpcConnector"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-vpc-connector))
(common-lisp:progn
 (common-lisp:defun describe-vpc-ingress-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vpc-ingress-connection-arn)
   (common-lisp:declare (common-lisp:ignorable vpc-ingress-connection-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-vpc-ingress-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DescribeVpcIngressConnection"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-vpc-ingress-connection))
(common-lisp:progn
 (common-lisp:defun disassociate-custom-domain
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-arn domain-name)
   (common-lisp:declare (common-lisp:ignorable service-arn domain-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-custom-domain-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DisassociateCustomDomain"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-custom-domain))
(common-lisp:progn
 (common-lisp:defun list-auto-scaling-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auto-scaling-configuration-name
                     latest-only max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable auto-scaling-configuration-name latest-only
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-auto-scaling-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAutoScalingConfigurations"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-auto-scaling-configurations))
(common-lisp:progn
 (common-lisp:defun list-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable connection-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-connections-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListConnections"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-connections))
(common-lisp:progn
 (common-lisp:defun list-observability-configurations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key observability-configuration-name
                     latest-only max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable observability-configuration-name latest-only
     max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-observability-configurations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListObservabilityConfigurations"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-observability-configurations))
(common-lisp:progn
 (common-lisp:defun list-operations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable service-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-operations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListOperations"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-operations))
(common-lisp:progn
 (common-lisp:defun list-services
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-services-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListServices"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-services))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListTagsForResource"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-vpc-connectors
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-vpc-connectors-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListVpcConnectors"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-vpc-connectors))
(common-lisp:progn
 (common-lisp:defun list-vpc-ingress-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter max-results next-token)
   (common-lisp:declare (common-lisp:ignorable filter max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-vpc-ingress-connections-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListVpcIngressConnections"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-vpc-ingress-connections))
(common-lisp:progn
 (common-lisp:defun pause-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-arn)
   (common-lisp:declare (common-lisp:ignorable service-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-pause-service-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PauseService"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'pause-service))
(common-lisp:progn
 (common-lisp:defun resume-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-arn)
   (common-lisp:declare (common-lisp:ignorable service-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-resume-service-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResumeService"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'resume-service))
(common-lisp:progn
 (common-lisp:defun start-deployment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-arn)
   (common-lisp:declare (common-lisp:ignorable service-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-deployment-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "StartDeployment"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-deployment))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagResource"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagResource"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-service
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key service-arn source-configuration
                     instance-configuration auto-scaling-configuration-arn
                     health-check-configuration network-configuration
                     observability-configuration)
   (common-lisp:declare
    (common-lisp:ignorable service-arn source-configuration
     instance-configuration auto-scaling-configuration-arn
     health-check-configuration network-configuration
     observability-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-service-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateService"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-service))
(common-lisp:progn
 (common-lisp:defun update-vpc-ingress-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key vpc-ingress-connection-arn
                     ingress-vpc-configuration)
   (common-lisp:declare
    (common-lisp:ignorable vpc-ingress-connection-arn
     ingress-vpc-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-vpc-ingress-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'apprunner-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateVpcIngressConnection"
                                                        "2020-05-15"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-vpc-ingress-connection))
