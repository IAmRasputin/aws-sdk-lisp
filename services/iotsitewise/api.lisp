;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/iotsitewise/api
  (:use)
  (:nicknames #:aws/iotsitewise)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/iotsitewise/api)
(common-lisp:progn
 (common-lisp:defclass iotsitewise-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "iotsitewise" :protocol
                        :rest-json))
 (common-lisp:export 'iotsitewise-request))
(common-lisp:progn
 (common-lisp:define-condition iotsitewise-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'iotsitewise-error))
(common-lisp:defvar *error-map*
  '(("ConflictingOperationException" . conflicting-operation-exception)
    ("InternalFailureException" . internal-failure-exception)
    ("InvalidRequestException" . invalid-request-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceAlreadyExistsException" . resource-already-exists-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ServiceUnavailableException" . service-unavailable-exception)
    ("ThrottlingException" . throttling-exception)
    ("TooManyTagsException" . too-many-tags-exception)
    ("UnauthorizedException" . unauthorized-exception)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype access-policy-summaries ()
   '(trivial-types:proper-list access-policy-summary))
 (common-lisp:defun |make-access-policy-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-policy-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (access-policy-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-policy-summary-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or id common-lisp:null))
   (identity (common-lisp:error ":identity is required") :type
    (common-lisp:or identity common-lisp:null))
   (resource (common-lisp:error ":resource is required") :type
    (common-lisp:or resource common-lisp:null))
   (permission (common-lisp:error ":permission is required") :type
    (common-lisp:or permission common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-update-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'access-policy-summary 'make-access-policy-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          access-policy-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          access-policy-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identity))
      (common-lisp:list
       (common-lisp:cons "identity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource))
      (common-lisp:list
       (common-lisp:cons "resource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permission))
      (common-lisp:list
       (common-lisp:cons "permission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          access-policy-summary))
   common-lisp:nil))
(common-lisp:deftype aggregate-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype aggregate-types ()
   '(trivial-types:proper-list aggregate-type))
 (common-lisp:defun |make-aggregate-types|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aggregate-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype aggregated-double-value () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct
     (aggregated-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-aggregated-value-"))
   (timestamp (common-lisp:error ":string is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (quality common-lisp:nil :type (common-lisp:or quality common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or aggregates common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'aggregated-value 'make-aggregated-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aggregated-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aggregated-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quality))
      (common-lisp:list
       (common-lisp:cons "quality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aggregated-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype aggregated-values ()
   '(trivial-types:proper-list aggregated-value))
 (common-lisp:defun |make-aggregated-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list aggregated-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (aggregates (:copier common-lisp:nil)
      (:conc-name "struct-shape-aggregates-"))
   (average common-lisp:nil :type
    (common-lisp:or aggregated-double-value common-lisp:null))
   (count common-lisp:nil :type
    (common-lisp:or aggregated-double-value common-lisp:null))
   (maximum common-lisp:nil :type
    (common-lisp:or aggregated-double-value common-lisp:null))
   (minimum common-lisp:nil :type
    (common-lisp:or aggregated-double-value common-lisp:null))
   (sum common-lisp:nil :type
    (common-lisp:or aggregated-double-value common-lisp:null))
   (standard-deviation common-lisp:nil :type
    (common-lisp:or aggregated-double-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'aggregates 'make-aggregates))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input aggregates))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input aggregates))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'average))
      (common-lisp:list
       (common-lisp:cons "average"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'count))
      (common-lisp:list
       (common-lisp:cons "count"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'maximum))
      (common-lisp:list
       (common-lisp:cons "maximum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'minimum))
      (common-lisp:list
       (common-lisp:cons "minimum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sum))
      (common-lisp:list
       (common-lisp:cons "sum"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'standard-deviation))
      (common-lisp:list
       (common-lisp:cons "standardDeviation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input aggregates))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (alarms (:copier common-lisp:nil) (:conc-name "struct-shape-alarms-"))
   (alarm-role-arn (common-lisp:error ":alarmrolearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (notification-lambda-arn common-lisp:nil :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'alarms 'make-alarms))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input alarms))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input alarms))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarm-role-arn))
      (common-lisp:list
       (common-lisp:cons "alarmRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-lambda-arn))
      (common-lisp:list
       (common-lisp:cons "notificationLambdaArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input alarms))
   common-lisp:nil))
(common-lisp:deftype amazon-resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (asset-composite-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-composite-model-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or name common-lisp:null))
   (properties (common-lisp:error ":properties is required") :type
    (common-lisp:or asset-properties common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'asset-composite-model 'make-asset-composite-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-composite-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-composite-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-composite-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-composite-models ()
   '(trivial-types:proper-list asset-composite-model))
 (common-lisp:defun |make-asset-composite-models|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-composite-model))
   aws-sdk/generator/shape::members))
(common-lisp:deftype asset-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (asset-error-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-error-details-"))
   (asset-id (common-lisp:error ":assetid is required") :type
    (common-lisp:or id common-lisp:null))
   (code (common-lisp:error ":code is required") :type
    (common-lisp:or asset-error-code common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or asset-error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'asset-error-details 'make-asset-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-error-details))
   common-lisp:nil))
(common-lisp:deftype asset-error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype asset-hierarchies ()
   '(trivial-types:proper-list asset-hierarchy))
 (common-lisp:defun |make-asset-hierarchies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-hierarchy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (asset-hierarchy (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-hierarchy-"))
   (id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'asset-hierarchy 'make-asset-hierarchy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-hierarchy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-hierarchy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-hierarchy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (asset-hierarchy-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-hierarchy-info-"))
   (parent-asset-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (child-asset-id common-lisp:nil :type (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'asset-hierarchy-info 'make-asset-hierarchy-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-hierarchy-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-hierarchy-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'parent-asset-id))
      (common-lisp:list
       (common-lisp:cons "parentAssetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-asset-id))
      (common-lisp:list
       (common-lisp:cons "childAssetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-hierarchy-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-ids () '(trivial-types:proper-list id))
 (common-lisp:defun |make-asset-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (asset-model-composite-model (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-model-composite-model-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or name common-lisp:null))
   (properties common-lisp:nil :type
    (common-lisp:or asset-model-properties common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'asset-model-composite-model
                    'make-asset-model-composite-model))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-composite-model))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-composite-model))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-composite-model))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (asset-model-composite-model-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-model-composite-model-definition-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or name common-lisp:null))
   (properties common-lisp:nil :type
    (common-lisp:or asset-model-property-definitions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'asset-model-composite-model-definition
                    'make-asset-model-composite-model-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-composite-model-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-composite-model-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'properties))
      (common-lisp:list
       (common-lisp:cons "properties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-composite-model-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-model-composite-model-definitions ()
   '(trivial-types:proper-list asset-model-composite-model-definition))
 (common-lisp:defun |make-asset-model-composite-model-definitions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            asset-model-composite-model-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype asset-model-composite-models ()
   '(trivial-types:proper-list asset-model-composite-model))
 (common-lisp:defun |make-asset-model-composite-models|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            asset-model-composite-model))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype asset-model-hierarchies ()
   '(trivial-types:proper-list asset-model-hierarchy))
 (common-lisp:defun |make-asset-model-hierarchies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-model-hierarchy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (asset-model-hierarchy (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-model-hierarchy-"))
   (id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (child-asset-model-id (common-lisp:error ":childassetmodelid is required")
    :type (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'asset-model-hierarchy 'make-asset-model-hierarchy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-hierarchy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-hierarchy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'child-asset-model-id))
      (common-lisp:list
       (common-lisp:cons "childAssetModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-hierarchy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (asset-model-hierarchy-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-model-hierarchy-definition-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (child-asset-model-id (common-lisp:error ":childassetmodelid is required")
    :type (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'asset-model-hierarchy-definition
                    'make-asset-model-hierarchy-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-hierarchy-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-hierarchy-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'child-asset-model-id))
      (common-lisp:list
       (common-lisp:cons "childAssetModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-hierarchy-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-model-hierarchy-definitions ()
   '(trivial-types:proper-list asset-model-hierarchy-definition))
 (common-lisp:defun |make-asset-model-hierarchy-definitions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            asset-model-hierarchy-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype asset-model-properties ()
   '(trivial-types:proper-list asset-model-property))
 (common-lisp:defun |make-asset-model-properties|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-model-property))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (asset-model-property (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-model-property-"))
   (id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (data-type (common-lisp:error ":datatype is required") :type
    (common-lisp:or property-data-type common-lisp:null))
   (data-type-spec common-lisp:nil :type
    (common-lisp:or name common-lisp:null))
   (unit common-lisp:nil :type (common-lisp:or property-unit common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or property-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'asset-model-property 'make-asset-model-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-model-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-model-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type-spec))
      (common-lisp:list
       (common-lisp:cons "dataTypeSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-model-property))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (asset-model-property-definition (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-model-property-definition-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (data-type (common-lisp:error ":datatype is required") :type
    (common-lisp:or property-data-type common-lisp:null))
   (data-type-spec common-lisp:nil :type
    (common-lisp:or name common-lisp:null))
   (unit common-lisp:nil :type (common-lisp:or property-unit common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or property-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'asset-model-property-definition
                    'make-asset-model-property-definition))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-property-definition))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-property-definition))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type-spec))
      (common-lisp:list
       (common-lisp:cons "dataTypeSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-property-definition))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-model-property-definitions ()
   '(trivial-types:proper-list asset-model-property-definition))
 (common-lisp:defun |make-asset-model-property-definitions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            asset-model-property-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype asset-model-property-summaries ()
   '(trivial-types:proper-list asset-model-property-summary))
 (common-lisp:defun |make-asset-model-property-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            asset-model-property-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (asset-model-property-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-model-property-summary-"))
   (id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (data-type (common-lisp:error ":datatype is required") :type
    (common-lisp:or property-data-type common-lisp:null))
   (data-type-spec common-lisp:nil :type
    (common-lisp:or name common-lisp:null))
   (unit common-lisp:nil :type (common-lisp:or property-unit common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or property-type common-lisp:null))
   (asset-model-composite-model-id common-lisp:nil :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'asset-model-property-summary
                    'make-asset-model-property-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-property-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-property-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type-spec))
      (common-lisp:list
       (common-lisp:cons "dataTypeSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-model-id))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-model-property-summary))
   common-lisp:nil))
(common-lisp:deftype asset-model-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (asset-model-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-model-status-"))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or asset-model-state common-lisp:null))
   (error common-lisp:nil :type
    (common-lisp:or error-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'asset-model-status 'make-asset-model-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-model-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-model-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-model-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-model-summaries ()
   '(trivial-types:proper-list asset-model-summary))
 (common-lisp:defun |make-asset-model-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-model-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (asset-model-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-model-summary-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or id common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or description common-lisp:null))
   (creation-date (common-lisp:error ":creationdate is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-update-date (common-lisp:error ":lastupdatedate is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or asset-model-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'asset-model-summary 'make-asset-model-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-model-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-model-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-model-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-properties ()
   '(trivial-types:proper-list asset-property))
 (common-lisp:defun |make-asset-properties|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-property))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (asset-property (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-property-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (alias common-lisp:nil :type
    (common-lisp:or property-alias common-lisp:null))
   (notification common-lisp:nil :type
    (common-lisp:or property-notification common-lisp:null))
   (data-type (common-lisp:error ":datatype is required") :type
    (common-lisp:or property-data-type common-lisp:null))
   (data-type-spec common-lisp:nil :type
    (common-lisp:or name common-lisp:null))
   (unit common-lisp:nil :type
    (common-lisp:or property-unit common-lisp:null)))
 (common-lisp:export (common-lisp:list 'asset-property 'make-asset-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type-spec))
      (common-lisp:list
       (common-lisp:cons "dataTypeSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-property))
   common-lisp:nil))
(common-lisp:deftype asset-property-alias () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype asset-property-summaries ()
   '(trivial-types:proper-list asset-property-summary))
 (common-lisp:defun |make-asset-property-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-property-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (asset-property-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-property-summary-"))
   (id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (alias common-lisp:nil :type
    (common-lisp:or property-alias common-lisp:null))
   (unit common-lisp:nil :type (common-lisp:or property-unit common-lisp:null))
   (notification common-lisp:nil :type
    (common-lisp:or property-notification common-lisp:null))
   (asset-composite-model-id common-lisp:nil :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'asset-property-summary 'make-asset-property-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-property-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-property-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-composite-model-id))
      (common-lisp:list
       (common-lisp:cons "assetCompositeModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-property-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (asset-property-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-property-value-"))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or variant common-lisp:null))
   (timestamp (common-lisp:error ":string is required") :type
    (common-lisp:or time-in-nanos common-lisp:null))
   (quality common-lisp:nil :type (common-lisp:or quality common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'asset-property-value 'make-asset-property-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-property-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-property-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'quality))
      (common-lisp:list
       (common-lisp:cons "quality"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-property-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-property-value-history ()
   '(trivial-types:proper-list asset-property-value))
 (common-lisp:defun |make-asset-property-value-history|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-property-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype asset-property-values ()
   '(trivial-types:proper-list asset-property-value))
 (common-lisp:defun |make-asset-property-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-property-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype asset-relationship-summaries ()
   '(trivial-types:proper-list asset-relationship-summary))
 (common-lisp:defun |make-asset-relationship-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            asset-relationship-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (asset-relationship-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-relationship-summary-"))
   (hierarchy-info common-lisp:nil :type
    (common-lisp:or asset-hierarchy-info common-lisp:null))
   (relationship-type (common-lisp:error ":relationshiptype is required") :type
    (common-lisp:or asset-relationship-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'asset-relationship-summary
                    'make-asset-relationship-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asset-relationship-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asset-relationship-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-info))
      (common-lisp:list
       (common-lisp:cons "hierarchyInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'relationship-type))
      (common-lisp:list
       (common-lisp:cons "relationshipType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asset-relationship-summary))
   common-lisp:nil))
(common-lisp:deftype asset-relationship-type () 'common-lisp:string)
(common-lisp:deftype asset-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (asset-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-status-"))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or asset-state common-lisp:null))
   (error common-lisp:nil :type
    (common-lisp:or error-details common-lisp:null)))
 (common-lisp:export (common-lisp:list 'asset-status 'make-asset-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype asset-summaries ()
   '(trivial-types:proper-list asset-summary))
 (common-lisp:defun |make-asset-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (asset-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-asset-summary-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or id common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (asset-model-id (common-lisp:error ":assetmodelid is required") :type
    (common-lisp:or id common-lisp:null))
   (creation-date (common-lisp:error ":creationdate is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-update-date (common-lisp:error ":lastupdatedate is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or asset-status common-lisp:null))
   (hierarchies (common-lisp:error ":hierarchies is required") :type
    (common-lisp:or asset-hierarchies common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export (common-lisp:list 'asset-summary 'make-asset-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input asset-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input asset-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-id))
      (common-lisp:list
       (common-lisp:cons "assetModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchies))
      (common-lisp:list
       (common-lisp:cons "hierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input asset-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-assets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-associate-assets-request-"))
   (asset-id (common-lisp:error ":assetid is required") :type
    (common-lisp:or id common-lisp:null))
   (hierarchy-id (common-lisp:error ":hierarchyid is required") :type
    (common-lisp:or id common-lisp:null))
   (child-asset-id (common-lisp:error ":childassetid is required") :type
    (common-lisp:or id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-assets-request 'make-associate-assets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-assets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-assets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-id))
      (common-lisp:list
       (common-lisp:cons "hierarchyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-asset-id))
      (common-lisp:list
       (common-lisp:cons "childAssetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-assets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-time-series-to-asset-property-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-associate-time-series-to-asset-property-request-"))
   (alias (common-lisp:error ":alias is required") :type
    (common-lisp:or property-alias common-lisp:null))
   (asset-id (common-lisp:error ":assetid is required") :type
    (common-lisp:or id common-lisp:null))
   (property-id (common-lisp:error ":propertyid is required") :type
    (common-lisp:or id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-time-series-to-asset-property-request
                    'make-associate-time-series-to-asset-property-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associate-time-series-to-asset-property-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associate-time-series-to-asset-property-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associate-time-series-to-asset-property-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype associated-assets-summaries ()
   '(trivial-types:proper-list associated-assets-summary))
 (common-lisp:defun |make-associated-assets-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            associated-assets-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (associated-assets-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-associated-assets-summary-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or id common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (asset-model-id (common-lisp:error ":assetmodelid is required") :type
    (common-lisp:or id common-lisp:null))
   (creation-date (common-lisp:error ":creationdate is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-update-date (common-lisp:error ":lastupdatedate is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or asset-status common-lisp:null))
   (hierarchies (common-lisp:error ":hierarchies is required") :type
    (common-lisp:or asset-hierarchies common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associated-assets-summary
                    'make-associated-assets-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          associated-assets-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          associated-assets-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-id))
      (common-lisp:list
       (common-lisp:cons "assetModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchies))
      (common-lisp:list
       (common-lisp:cons "hierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          associated-assets-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attribute (:copier common-lisp:nil)
      (:conc-name "struct-shape-attribute-"))
   (default-value common-lisp:nil :type
    (common-lisp:or default-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'attribute 'make-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attribute))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attribute))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-value))
      (common-lisp:list
       (common-lisp:cons "defaultValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attribute))
   common-lisp:nil))
(common-lisp:deftype auth-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype batch-associate-project-assets-errors ()
   '(trivial-types:proper-list asset-error-details))
 (common-lisp:defun |make-batch-associate-project-assets-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-error-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-associate-project-assets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-associate-project-assets-request-"))
   (project-id (common-lisp:error ":projectid is required") :type
    (common-lisp:or id common-lisp:null))
   (asset-ids (common-lisp:error ":assetids is required") :type
    (common-lisp:or ids common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-associate-project-assets-request
                    'make-batch-associate-project-assets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-project-assets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-project-assets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-ids))
      (common-lisp:list
       (common-lisp:cons "assetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-project-assets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-associate-project-assets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-associate-project-assets-response-"))
   (errors common-lisp:nil :type
    (common-lisp:or batch-associate-project-assets-errors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-associate-project-assets-response
                    'make-batch-associate-project-assets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-project-assets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-project-assets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-associate-project-assets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-disassociate-project-assets-errors ()
   '(trivial-types:proper-list asset-error-details))
 (common-lisp:defun |make-batch-disassociate-project-assets-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list asset-error-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-disassociate-project-assets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-disassociate-project-assets-request-"))
   (project-id (common-lisp:error ":projectid is required") :type
    (common-lisp:or id common-lisp:null))
   (asset-ids (common-lisp:error ":assetids is required") :type
    (common-lisp:or ids common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-disassociate-project-assets-request
                    'make-batch-disassociate-project-assets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-project-assets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-project-assets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-ids))
      (common-lisp:list
       (common-lisp:cons "assetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-project-assets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-disassociate-project-assets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-disassociate-project-assets-response-"))
   (errors common-lisp:nil :type
    (common-lisp:or batch-disassociate-project-assets-errors
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-disassociate-project-assets-response
                    'make-batch-disassociate-project-assets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-project-assets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-project-assets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-disassociate-project-assets-response))
   common-lisp:nil))
(common-lisp:deftype batch-entry-completion-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype batch-get-asset-property-aggregates-entries ()
   '(trivial-types:proper-list batch-get-asset-property-aggregates-entry))
 (common-lisp:defun |make-batch-get-asset-property-aggregates-entries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-asset-property-aggregates-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-asset-property-aggregates-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-asset-property-aggregates-entry-"))
   (entry-id (common-lisp:error ":entryid is required") :type
    (common-lisp:or entry-id common-lisp:null))
   (asset-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (property-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (property-alias common-lisp:nil :type
    (common-lisp:or asset-property-alias common-lisp:null))
   (aggregate-types (common-lisp:error ":aggregatetypes is required") :type
    (common-lisp:or aggregate-types common-lisp:null))
   (resolution (common-lisp:error ":resolution is required") :type
    (common-lisp:or resolution common-lisp:null))
   (start-date (common-lisp:error ":startdate is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (end-date (common-lisp:error ":enddate is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (qualities common-lisp:nil :type
    (common-lisp:or qualities common-lisp:null))
   (time-ordering common-lisp:nil :type
    (common-lisp:or time-ordering common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-aggregates-entry
                    'make-batch-get-asset-property-aggregates-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-id))
      (common-lisp:list
       (common-lisp:cons "propertyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-alias))
      (common-lisp:list
       (common-lisp:cons "propertyAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregate-types))
      (common-lisp:list
       (common-lisp:cons "aggregateTypes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resolution))
      (common-lisp:list
       (common-lisp:cons "resolution"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "startDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date))
      (common-lisp:list
       (common-lisp:cons "endDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qualities))
      (common-lisp:list
       (common-lisp:cons "qualities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-ordering))
      (common-lisp:list
       (common-lisp:cons "timeOrdering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-entry))
   common-lisp:nil))
(common-lisp:deftype batch-get-asset-property-aggregates-error-code ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype batch-get-asset-property-aggregates-error-entries ()
   '(trivial-types:proper-list
     batch-get-asset-property-aggregates-error-entry))
 (common-lisp:defun |make-batch-get-asset-property-aggregates-error-entries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-asset-property-aggregates-error-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-asset-property-aggregates-error-entry (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-get-asset-property-aggregates-error-entry-"))
   (error-code (common-lisp:error ":errorcode is required") :type
    (common-lisp:or batch-get-asset-property-aggregates-error-code
                    common-lisp:null))
   (error-message (common-lisp:error ":errormessage is required") :type
    (common-lisp:or error-message common-lisp:null))
   (entry-id (common-lisp:error ":entryid is required") :type
    (common-lisp:or entry-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-aggregates-error-entry
                    'make-batch-get-asset-property-aggregates-error-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-error-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-error-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-error-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-asset-property-aggregates-error-info (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-get-asset-property-aggregates-error-info-"))
   (error-code (common-lisp:error ":errorcode is required") :type
    (common-lisp:or batch-get-asset-property-aggregates-error-code
                    common-lisp:null))
   (error-timestamp (common-lisp:error ":errortimestamp is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-aggregates-error-info
                    'make-batch-get-asset-property-aggregates-error-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-error-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-error-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-timestamp))
      (common-lisp:list
       (common-lisp:cons "errorTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-error-info))
   common-lisp:nil))
(common-lisp:deftype batch-get-asset-property-aggregates-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-asset-property-aggregates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-asset-property-aggregates-request-"))
   (entries (common-lisp:error ":entries is required") :type
    (common-lisp:or batch-get-asset-property-aggregates-entries
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or batch-get-asset-property-aggregates-max-results
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-aggregates-request
                    'make-batch-get-asset-property-aggregates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-asset-property-aggregates-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-get-asset-property-aggregates-response-"))
   (error-entries (common-lisp:error ":errorentries is required") :type
    (common-lisp:or batch-get-asset-property-aggregates-error-entries
                    common-lisp:null))
   (success-entries (common-lisp:error ":successentries is required") :type
    (common-lisp:or batch-get-asset-property-aggregates-success-entries
                    common-lisp:null))
   (skipped-entries (common-lisp:error ":skippedentries is required") :type
    (common-lisp:or batch-get-asset-property-aggregates-skipped-entries
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-aggregates-response
                    'make-batch-get-asset-property-aggregates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-entries))
      (common-lisp:list
       (common-lisp:cons "errorEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-entries))
      (common-lisp:list
       (common-lisp:cons "successEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skipped-entries))
      (common-lisp:list
       (common-lisp:cons "skippedEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-asset-property-aggregates-skipped-entries ()
   '(trivial-types:proper-list
     batch-get-asset-property-aggregates-skipped-entry))
 (common-lisp:defun |make-batch-get-asset-property-aggregates-skipped-entries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-asset-property-aggregates-skipped-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-asset-property-aggregates-skipped-entry
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-get-asset-property-aggregates-skipped-entry-"))
   (entry-id (common-lisp:error ":entryid is required") :type
    (common-lisp:or entry-id common-lisp:null))
   (completion-status (common-lisp:error ":completionstatus is required") :type
    (common-lisp:or batch-entry-completion-status common-lisp:null))
   (error-info common-lisp:nil :type
    (common-lisp:or batch-get-asset-property-aggregates-error-info
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-aggregates-skipped-entry
                    'make-batch-get-asset-property-aggregates-skipped-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-skipped-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-skipped-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-status))
      (common-lisp:list
       (common-lisp:cons "completionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-info))
      (common-lisp:list
       (common-lisp:cons "errorInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-skipped-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-asset-property-aggregates-success-entries ()
   '(trivial-types:proper-list
     batch-get-asset-property-aggregates-success-entry))
 (common-lisp:defun |make-batch-get-asset-property-aggregates-success-entries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-asset-property-aggregates-success-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-asset-property-aggregates-success-entry
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-get-asset-property-aggregates-success-entry-"))
   (entry-id (common-lisp:error ":entryid is required") :type
    (common-lisp:or entry-id common-lisp:null))
   (aggregated-values (common-lisp:error ":aggregatedvalues is required") :type
    (common-lisp:or aggregated-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-aggregates-success-entry
                    'make-batch-get-asset-property-aggregates-success-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-success-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-success-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregated-values))
      (common-lisp:list
       (common-lisp:cons "aggregatedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-aggregates-success-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-asset-property-value-entries ()
   '(trivial-types:proper-list batch-get-asset-property-value-entry))
 (common-lisp:defun |make-batch-get-asset-property-value-entries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-asset-property-value-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-asset-property-value-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-asset-property-value-entry-"))
   (entry-id (common-lisp:error ":entryid is required") :type
    (common-lisp:or entry-id common-lisp:null))
   (asset-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (property-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (property-alias common-lisp:nil :type
    (common-lisp:or asset-property-alias common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-value-entry
                    'make-batch-get-asset-property-value-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-id))
      (common-lisp:list
       (common-lisp:cons "propertyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-alias))
      (common-lisp:list
       (common-lisp:cons "propertyAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-entry))
   common-lisp:nil))
(common-lisp:deftype batch-get-asset-property-value-error-code ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype batch-get-asset-property-value-error-entries ()
   '(trivial-types:proper-list batch-get-asset-property-value-error-entry))
 (common-lisp:defun |make-batch-get-asset-property-value-error-entries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-asset-property-value-error-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-asset-property-value-error-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-asset-property-value-error-entry-"))
   (error-code (common-lisp:error ":errorcode is required") :type
    (common-lisp:or batch-get-asset-property-value-error-code
                    common-lisp:null))
   (error-message (common-lisp:error ":errormessage is required") :type
    (common-lisp:or error-message common-lisp:null))
   (entry-id (common-lisp:error ":entryid is required") :type
    (common-lisp:or entry-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-value-error-entry
                    'make-batch-get-asset-property-value-error-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-error-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-error-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-error-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-asset-property-value-error-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-asset-property-value-error-info-"))
   (error-code (common-lisp:error ":errorcode is required") :type
    (common-lisp:or batch-get-asset-property-value-error-code
                    common-lisp:null))
   (error-timestamp (common-lisp:error ":errortimestamp is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-value-error-info
                    'make-batch-get-asset-property-value-error-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-error-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-error-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-timestamp))
      (common-lisp:list
       (common-lisp:cons "errorTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-error-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-asset-property-value-history-entries ()
   '(trivial-types:proper-list batch-get-asset-property-value-history-entry))
 (common-lisp:defun |make-batch-get-asset-property-value-history-entries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-asset-property-value-history-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-asset-property-value-history-entry (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-get-asset-property-value-history-entry-"))
   (entry-id (common-lisp:error ":entryid is required") :type
    (common-lisp:or entry-id common-lisp:null))
   (asset-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (property-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (property-alias common-lisp:nil :type
    (common-lisp:or asset-property-alias common-lisp:null))
   (start-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-date common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (qualities common-lisp:nil :type
    (common-lisp:or qualities common-lisp:null))
   (time-ordering common-lisp:nil :type
    (common-lisp:or time-ordering common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-value-history-entry
                    'make-batch-get-asset-property-value-history-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-id))
      (common-lisp:list
       (common-lisp:cons "propertyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-alias))
      (common-lisp:list
       (common-lisp:cons "propertyAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-date))
      (common-lisp:list
       (common-lisp:cons "startDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-date))
      (common-lisp:list
       (common-lisp:cons "endDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qualities))
      (common-lisp:list
       (common-lisp:cons "qualities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-ordering))
      (common-lisp:list
       (common-lisp:cons "timeOrdering"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-entry))
   common-lisp:nil))
(common-lisp:deftype batch-get-asset-property-value-history-error-code ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype batch-get-asset-property-value-history-error-entries ()
   '(trivial-types:proper-list
     batch-get-asset-property-value-history-error-entry))
 (common-lisp:defun |make-batch-get-asset-property-value-history-error-entries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-asset-property-value-history-error-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-asset-property-value-history-error-entry
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-get-asset-property-value-history-error-entry-"))
   (error-code (common-lisp:error ":errorcode is required") :type
    (common-lisp:or batch-get-asset-property-value-history-error-code
                    common-lisp:null))
   (error-message (common-lisp:error ":errormessage is required") :type
    (common-lisp:or error-message common-lisp:null))
   (entry-id (common-lisp:error ":entryid is required") :type
    (common-lisp:or entry-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-value-history-error-entry
                    'make-batch-get-asset-property-value-history-error-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-error-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-error-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-error-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-asset-property-value-history-error-info
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-get-asset-property-value-history-error-info-"))
   (error-code (common-lisp:error ":errorcode is required") :type
    (common-lisp:or batch-get-asset-property-value-history-error-code
                    common-lisp:null))
   (error-timestamp (common-lisp:error ":errortimestamp is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-value-history-error-info
                    'make-batch-get-asset-property-value-history-error-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-error-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-error-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-timestamp))
      (common-lisp:list
       (common-lisp:cons "errorTimestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-error-info))
   common-lisp:nil))
(common-lisp:deftype batch-get-asset-property-value-history-max-results ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-asset-property-value-history-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-get-asset-property-value-history-request-"))
   (entries (common-lisp:error ":entries is required") :type
    (common-lisp:or batch-get-asset-property-value-history-entries
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or batch-get-asset-property-value-history-max-results
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-value-history-request
                    'make-batch-get-asset-property-value-history-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "maxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-asset-property-value-history-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-get-asset-property-value-history-response-"))
   (error-entries (common-lisp:error ":errorentries is required") :type
    (common-lisp:or batch-get-asset-property-value-history-error-entries
                    common-lisp:null))
   (success-entries (common-lisp:error ":successentries is required") :type
    (common-lisp:or batch-get-asset-property-value-history-success-entries
                    common-lisp:null))
   (skipped-entries (common-lisp:error ":skippedentries is required") :type
    (common-lisp:or batch-get-asset-property-value-history-skipped-entries
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-value-history-response
                    'make-batch-get-asset-property-value-history-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-entries))
      (common-lisp:list
       (common-lisp:cons "errorEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-entries))
      (common-lisp:list
       (common-lisp:cons "successEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skipped-entries))
      (common-lisp:list
       (common-lisp:cons "skippedEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-asset-property-value-history-skipped-entries ()
   '(trivial-types:proper-list
     batch-get-asset-property-value-history-skipped-entry))
 (common-lisp:defun |make-batch-get-asset-property-value-history-skipped-entries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-asset-property-value-history-skipped-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-asset-property-value-history-skipped-entry
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-get-asset-property-value-history-skipped-entry-"))
   (entry-id (common-lisp:error ":entryid is required") :type
    (common-lisp:or entry-id common-lisp:null))
   (completion-status (common-lisp:error ":completionstatus is required") :type
    (common-lisp:or batch-entry-completion-status common-lisp:null))
   (error-info common-lisp:nil :type
    (common-lisp:or batch-get-asset-property-value-history-error-info
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-value-history-skipped-entry
                    'make-batch-get-asset-property-value-history-skipped-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-skipped-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-skipped-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-status))
      (common-lisp:list
       (common-lisp:cons "completionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-info))
      (common-lisp:list
       (common-lisp:cons "errorInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-skipped-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-asset-property-value-history-success-entries ()
   '(trivial-types:proper-list
     batch-get-asset-property-value-history-success-entry))
 (common-lisp:defun |make-batch-get-asset-property-value-history-success-entries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-asset-property-value-history-success-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-asset-property-value-history-success-entry
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-get-asset-property-value-history-success-entry-"))
   (entry-id (common-lisp:error ":entryid is required") :type
    (common-lisp:or entry-id common-lisp:null))
   (asset-property-value-history
    (common-lisp:error ":assetpropertyvaluehistory is required") :type
    (common-lisp:or asset-property-value-history common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-value-history-success-entry
                    'make-batch-get-asset-property-value-history-success-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-success-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-success-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-property-value-history))
      (common-lisp:list
       (common-lisp:cons "assetPropertyValueHistory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-history-success-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-asset-property-value-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-asset-property-value-request-"))
   (entries (common-lisp:error ":entries is required") :type
    (common-lisp:or batch-get-asset-property-value-entries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-value-request
                    'make-batch-get-asset-property-value-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-asset-property-value-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-get-asset-property-value-response-"))
   (error-entries (common-lisp:error ":errorentries is required") :type
    (common-lisp:or batch-get-asset-property-value-error-entries
                    common-lisp:null))
   (success-entries (common-lisp:error ":successentries is required") :type
    (common-lisp:or batch-get-asset-property-value-success-entries
                    common-lisp:null))
   (skipped-entries (common-lisp:error ":skippedentries is required") :type
    (common-lisp:or batch-get-asset-property-value-skipped-entries
                    common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-value-response
                    'make-batch-get-asset-property-value-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-entries))
      (common-lisp:list
       (common-lisp:cons "errorEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'success-entries))
      (common-lisp:list
       (common-lisp:cons "successEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'skipped-entries))
      (common-lisp:list
       (common-lisp:cons "skippedEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-asset-property-value-skipped-entries ()
   '(trivial-types:proper-list batch-get-asset-property-value-skipped-entry))
 (common-lisp:defun |make-batch-get-asset-property-value-skipped-entries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-asset-property-value-skipped-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-asset-property-value-skipped-entry (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-get-asset-property-value-skipped-entry-"))
   (entry-id (common-lisp:error ":entryid is required") :type
    (common-lisp:or entry-id common-lisp:null))
   (completion-status (common-lisp:error ":completionstatus is required") :type
    (common-lisp:or batch-entry-completion-status common-lisp:null))
   (error-info common-lisp:nil :type
    (common-lisp:or batch-get-asset-property-value-error-info
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-value-skipped-entry
                    'make-batch-get-asset-property-value-skipped-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-skipped-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-skipped-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'completion-status))
      (common-lisp:list
       (common-lisp:cons "completionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-info))
      (common-lisp:list
       (common-lisp:cons "errorInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-skipped-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-get-asset-property-value-success-entries ()
   '(trivial-types:proper-list batch-get-asset-property-value-success-entry))
 (common-lisp:defun |make-batch-get-asset-property-value-success-entries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-get-asset-property-value-success-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-asset-property-value-success-entry (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-batch-get-asset-property-value-success-entry-"))
   (entry-id (common-lisp:error ":entryid is required") :type
    (common-lisp:or entry-id common-lisp:null))
   (asset-property-value common-lisp:nil :type
    (common-lisp:or asset-property-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-asset-property-value-success-entry
                    'make-batch-get-asset-property-value-success-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-success-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-success-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-property-value))
      (common-lisp:list
       (common-lisp:cons "assetPropertyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-get-asset-property-value-success-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-put-asset-property-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-put-asset-property-error-"))
   (error-code (common-lisp:error ":errorcode is required") :type
    (common-lisp:or batch-put-asset-property-value-error-code
                    common-lisp:null))
   (error-message (common-lisp:error ":errormessage is required") :type
    (common-lisp:or error-message common-lisp:null))
   (timestamps (common-lisp:error ":timestamps is required") :type
    (common-lisp:or timestamps common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-put-asset-property-error
                    'make-batch-put-asset-property-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-asset-property-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-asset-property-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "errorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "errorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamps))
      (common-lisp:list
       (common-lisp:cons "timestamps"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-asset-property-error))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-put-asset-property-error-entries ()
   '(trivial-types:proper-list batch-put-asset-property-error-entry))
 (common-lisp:defun |make-batch-put-asset-property-error-entries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-put-asset-property-error-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-put-asset-property-error-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-put-asset-property-error-entry-"))
   (entry-id (common-lisp:error ":entryid is required") :type
    (common-lisp:or entry-id common-lisp:null))
   (errors (common-lisp:error ":errors is required") :type
    (common-lisp:or batch-put-asset-property-errors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-put-asset-property-error-entry
                    'make-batch-put-asset-property-error-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-asset-property-error-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-asset-property-error-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-asset-property-error-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype batch-put-asset-property-errors ()
   '(trivial-types:proper-list batch-put-asset-property-error))
 (common-lisp:defun |make-batch-put-asset-property-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            batch-put-asset-property-error))
   aws-sdk/generator/shape::members))
(common-lisp:deftype batch-put-asset-property-value-error-code ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (batch-put-asset-property-value-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-put-asset-property-value-request-"))
   (entries (common-lisp:error ":entries is required") :type
    (common-lisp:or put-asset-property-value-entries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-put-asset-property-value-request
                    'make-batch-put-asset-property-value-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-asset-property-value-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-asset-property-value-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entries))
      (common-lisp:list
       (common-lisp:cons "entries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-asset-property-value-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-put-asset-property-value-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-put-asset-property-value-response-"))
   (error-entries (common-lisp:error ":errorentries is required") :type
    (common-lisp:or batch-put-asset-property-error-entries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-put-asset-property-value-response
                    'make-batch-put-asset-property-value-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-asset-property-value-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-asset-property-value-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-entries))
      (common-lisp:list
       (common-lisp:cons "errorEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-put-asset-property-value-response))
   common-lisp:nil))
(common-lisp:deftype bucket () 'common-lisp:string)
(common-lisp:deftype capability-configuration () 'common-lisp:string)
(common-lisp:deftype capability-namespace () 'common-lisp:string)
(common-lisp:deftype capability-sync-status () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:deftype column-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype column-names () '(trivial-types:proper-list column-name))
 (common-lisp:defun |make-column-names|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (composite-model-property (:copier common-lisp:nil)
      (:conc-name "struct-shape-composite-model-property-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or name common-lisp:null))
   (asset-property (common-lisp:error ":assetproperty is required") :type
    (common-lisp:or property common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'composite-model-property 'make-composite-model-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          composite-model-property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          composite-model-property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-property))
      (common-lisp:list
       (common-lisp:cons "assetProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          composite-model-property))
   common-lisp:nil))
(common-lisp:deftype compute-location () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (configuration-error-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-configuration-error-details-"))
   (code (common-lisp:error ":code is required") :type
    (common-lisp:or error-code common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'configuration-error-details
                    'make-configuration-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          configuration-error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          configuration-error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          configuration-error-details))
   common-lisp:nil))
(common-lisp:deftype configuration-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (configuration-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-configuration-status-"))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or configuration-state common-lisp:null))
   (error common-lisp:nil :type
    (common-lisp:or configuration-error-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'configuration-status 'make-configuration-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input configuration-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input configuration-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input configuration-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition conflicting-operation-exception
     (iotsitewise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       conflicting-operation-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       conflicting-operation-exception-resource-id)
      (resource-arn :initarg :resource-arn :initform common-lisp:nil :reader
       conflicting-operation-exception-resource-arn)))
 (common-lisp:export
  (common-lisp:list 'conflicting-operation-exception
                    'conflicting-operation-exception-message
                    'conflicting-operation-exception-resource-id
                    'conflicting-operation-exception-resource-arn)))
(common-lisp:deftype core-device-thing-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-access-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-access-policy-request-"))
   (access-policy-identity
    (common-lisp:error ":accesspolicyidentity is required") :type
    (common-lisp:or identity common-lisp:null))
   (access-policy-resource
    (common-lisp:error ":accesspolicyresource is required") :type
    (common-lisp:or resource common-lisp:null))
   (access-policy-permission
    (common-lisp:error ":accesspolicypermission is required") :type
    (common-lisp:or permission common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-access-policy-request
                    'make-create-access-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-policy-identity))
      (common-lisp:list
       (common-lisp:cons "accessPolicyIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-policy-resource))
      (common-lisp:list
       (common-lisp:cons "accessPolicyResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-policy-permission))
      (common-lisp:list
       (common-lisp:cons "accessPolicyPermission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-access-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-access-policy-response-"))
   (access-policy-id (common-lisp:error ":accesspolicyid is required") :type
    (common-lisp:or id common-lisp:null))
   (access-policy-arn (common-lisp:error ":accesspolicyarn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-access-policy-response
                    'make-create-access-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policy-id))
      (common-lisp:list
       (common-lisp:cons "accessPolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policy-arn))
      (common-lisp:list
       (common-lisp:cons "accessPolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-asset-model-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-asset-model-request-"))
   (asset-model-name (common-lisp:error ":assetmodelname is required") :type
    (common-lisp:or name common-lisp:null))
   (asset-model-description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (asset-model-properties common-lisp:nil :type
    (common-lisp:or asset-model-property-definitions common-lisp:null))
   (asset-model-hierarchies common-lisp:nil :type
    (common-lisp:or asset-model-hierarchy-definitions common-lisp:null))
   (asset-model-composite-models common-lisp:nil :type
    (common-lisp:or asset-model-composite-model-definitions common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-asset-model-request
                    'make-create-asset-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-name))
      (common-lisp:list
       (common-lisp:cons "assetModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-description))
      (common-lisp:list
       (common-lisp:cons "assetModelDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-properties))
      (common-lisp:list
       (common-lisp:cons "assetModelProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-hierarchies))
      (common-lisp:list
       (common-lisp:cons "assetModelHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-models))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-asset-model-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-asset-model-response-"))
   (asset-model-id (common-lisp:error ":assetmodelid is required") :type
    (common-lisp:or id common-lisp:null))
   (asset-model-arn (common-lisp:error ":assetmodelarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (asset-model-status (common-lisp:error ":assetmodelstatus is required")
    :type (common-lisp:or asset-model-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-asset-model-response
                    'make-create-asset-model-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-model-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-id))
      (common-lisp:list
       (common-lisp:cons "assetModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-arn))
      (common-lisp:list
       (common-lisp:cons "assetModelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-status))
      (common-lisp:list
       (common-lisp:cons "assetModelStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-model-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-asset-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-asset-request-"))
   (asset-name (common-lisp:error ":assetname is required") :type
    (common-lisp:or name common-lisp:null))
   (asset-model-id (common-lisp:error ":assetmodelid is required") :type
    (common-lisp:or id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (asset-description common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-asset-request 'make-create-asset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-asset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-asset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-name))
      (common-lisp:list
       (common-lisp:cons "assetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-id))
      (common-lisp:list
       (common-lisp:cons "assetModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-description))
      (common-lisp:list
       (common-lisp:cons "assetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-asset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-asset-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-asset-response-"))
   (asset-id (common-lisp:error ":assetid is required") :type
    (common-lisp:or id common-lisp:null))
   (asset-arn (common-lisp:error ":assetarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (asset-status (common-lisp:error ":assetstatus is required") :type
    (common-lisp:or asset-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-asset-response 'make-create-asset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-arn))
      (common-lisp:list
       (common-lisp:cons "assetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-status))
      (common-lisp:list
       (common-lisp:cons "assetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-asset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-bulk-import-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-bulk-import-job-request-"))
   (job-name (common-lisp:error ":jobname is required") :type
    (common-lisp:or name common-lisp:null))
   (job-role-arn (common-lisp:error ":jobrolearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (files (common-lisp:error ":files is required") :type
    (common-lisp:or files common-lisp:null))
   (error-report-location
    (common-lisp:error ":errorreportlocation is required") :type
    (common-lisp:or error-report-location common-lisp:null))
   (job-configuration (common-lisp:error ":jobconfiguration is required") :type
    (common-lisp:or job-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-bulk-import-job-request
                    'make-create-bulk-import-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bulk-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bulk-import-job-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "jobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-role-arn))
      (common-lisp:list
       (common-lisp:cons "jobRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'files))
      (common-lisp:list
       (common-lisp:cons "files"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'error-report-location))
      (common-lisp:list
       (common-lisp:cons "errorReportLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-configuration))
      (common-lisp:list
       (common-lisp:cons "jobConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bulk-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-bulk-import-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-bulk-import-job-response-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or id common-lisp:null))
   (job-name (common-lisp:error ":jobname is required") :type
    (common-lisp:or name common-lisp:null))
   (job-status (common-lisp:error ":jobstatus is required") :type
    (common-lisp:or job-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-bulk-import-job-response
                    'make-create-bulk-import-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-bulk-import-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-bulk-import-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "jobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "jobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-bulk-import-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dashboard-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dashboard-request-"))
   (project-id (common-lisp:error ":projectid is required") :type
    (common-lisp:or id common-lisp:null))
   (dashboard-name (common-lisp:error ":dashboardname is required") :type
    (common-lisp:or name common-lisp:null))
   (dashboard-description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (dashboard-definition (common-lisp:error ":dashboarddefinition is required")
    :type (common-lisp:or dashboard-definition common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dashboard-request 'make-create-dashboard-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dashboard-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dashboard-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-name))
      (common-lisp:list
       (common-lisp:cons "dashboardName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashboard-description))
      (common-lisp:list
       (common-lisp:cons "dashboardDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashboard-definition))
      (common-lisp:list
       (common-lisp:cons "dashboardDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dashboard-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dashboard-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-dashboard-response-"))
   (dashboard-id (common-lisp:error ":dashboardid is required") :type
    (common-lisp:or id common-lisp:null))
   (dashboard-arn (common-lisp:error ":dashboardarn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dashboard-response
                    'make-create-dashboard-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-dashboard-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-dashboard-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-id))
      (common-lisp:list
       (common-lisp:cons "dashboardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-arn))
      (common-lisp:list
       (common-lisp:cons "dashboardArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-dashboard-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-gateway-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-gateway-request-"))
   (gateway-name (common-lisp:error ":gatewayname is required") :type
    (common-lisp:or name common-lisp:null))
   (gateway-platform (common-lisp:error ":gatewayplatform is required") :type
    (common-lisp:or gateway-platform common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-gateway-request 'make-create-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-name))
      (common-lisp:list
       (common-lisp:cons "gatewayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-platform))
      (common-lisp:list
       (common-lisp:cons "gatewayPlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-gateway-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-gateway-response-"))
   (gateway-id (common-lisp:error ":gatewayid is required") :type
    (common-lisp:or id common-lisp:null))
   (gateway-arn (common-lisp:error ":gatewayarn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-gateway-response 'make-create-gateway-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "gatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-arn))
      (common-lisp:list
       (common-lisp:cons "gatewayArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-gateway-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-portal-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-portal-request-"))
   (portal-name (common-lisp:error ":portalname is required") :type
    (common-lisp:or name common-lisp:null))
   (portal-description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (portal-contact-email (common-lisp:error ":portalcontactemail is required")
    :type (common-lisp:or email common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (portal-logo-image-file common-lisp:nil :type
    (common-lisp:or image-file common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null))
   (portal-auth-mode common-lisp:nil :type
    (common-lisp:or auth-mode common-lisp:null))
   (notification-sender-email common-lisp:nil :type
    (common-lisp:or email common-lisp:null))
   (alarms common-lisp:nil :type (common-lisp:or alarms common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-portal-request 'make-create-portal-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-portal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-portal-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-name))
      (common-lisp:list
       (common-lisp:cons "portalName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-description))
      (common-lisp:list
       (common-lisp:cons "portalDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'portal-contact-email))
      (common-lisp:list
       (common-lisp:cons "portalContactEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'portal-logo-image-file))
      (common-lisp:list
       (common-lisp:cons "portalLogoImageFile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-auth-mode))
      (common-lisp:list
       (common-lisp:cons "portalAuthMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-sender-email))
      (common-lisp:list
       (common-lisp:cons "notificationSenderEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarms))
      (common-lisp:list
       (common-lisp:cons "alarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-portal-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-portal-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-portal-response-"))
   (portal-id (common-lisp:error ":portalid is required") :type
    (common-lisp:or id common-lisp:null))
   (portal-arn (common-lisp:error ":portalarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (portal-start-url (common-lisp:error ":portalstarturl is required") :type
    (common-lisp:or url common-lisp:null))
   (portal-status (common-lisp:error ":portalstatus is required") :type
    (common-lisp:or portal-status common-lisp:null))
   (sso-application-id (common-lisp:error ":ssoapplicationid is required")
    :type (common-lisp:or ssoapplication-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-portal-response 'make-create-portal-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-portal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-portal-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-id))
      (common-lisp:list
       (common-lisp:cons "portalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-arn))
      (common-lisp:list
       (common-lisp:cons "portalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-start-url))
      (common-lisp:list
       (common-lisp:cons "portalStartUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-status))
      (common-lisp:list
       (common-lisp:cons "portalStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sso-application-id))
      (common-lisp:list
       (common-lisp:cons "ssoApplicationId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-portal-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-project-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-project-request-"))
   (portal-id (common-lisp:error ":portalid is required") :type
    (common-lisp:or id common-lisp:null))
   (project-name (common-lisp:error ":projectname is required") :type
    (common-lisp:or name common-lisp:null))
   (project-description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-project-request 'make-create-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-id))
      (common-lisp:list
       (common-lisp:cons "portalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "projectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-description))
      (common-lisp:list
       (common-lisp:cons "projectDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-project-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-project-response-"))
   (project-id (common-lisp:error ":projectid is required") :type
    (common-lisp:or id common-lisp:null))
   (project-arn (common-lisp:error ":projectarn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-project-response 'make-create-project-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-project-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "projectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-project-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (csv (:copier common-lisp:nil) (:conc-name "struct-shape-csv-"))
   (column-names common-lisp:nil :type
    (common-lisp:or column-names common-lisp:null)))
 (common-lisp:export (common-lisp:list 'csv 'make-csv))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input csv))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input csv))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column-names))
      (common-lisp:list
       (common-lisp:cons "columnNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input csv))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (customer-managed-s3storage (:copier common-lisp:nil)
      (:conc-name "struct-shape-customer-managed-s3storage-"))
   (s3resource-arn (common-lisp:error ":s3resourcearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'customer-managed-s3storage
                    'make-customer-managed-s3storage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          customer-managed-s3storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          customer-managed-s3storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 's3resource-arn))
      (common-lisp:list
       (common-lisp:cons "s3ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          customer-managed-s3storage))
   common-lisp:nil))
(common-lisp:deftype dashboard-definition () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dashboard-summaries ()
   '(trivial-types:proper-list dashboard-summary))
 (common-lisp:defun |make-dashboard-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dashboard-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (dashboard-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-dashboard-summary-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-update-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dashboard-summary 'make-dashboard-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dashboard-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dashboard-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dashboard-summary))
   common-lisp:nil))
(common-lisp:deftype default-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-access-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-access-policy-request-"))
   (access-policy-id (common-lisp:error ":accesspolicyid is required") :type
    (common-lisp:or id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-access-policy-request
                    'make-delete-access-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-access-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-access-policy-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-access-policy-response
                    'make-delete-access-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-asset-model-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-asset-model-request-"))
   (asset-model-id (common-lisp:error ":assetmodelid is required") :type
    (common-lisp:or id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-asset-model-request
                    'make-delete-asset-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-asset-model-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-asset-model-response-"))
   (asset-model-status (common-lisp:error ":assetmodelstatus is required")
    :type (common-lisp:or asset-model-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-asset-model-response
                    'make-delete-asset-model-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-model-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-status))
      (common-lisp:list
       (common-lisp:cons "assetModelStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-model-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-asset-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-asset-request-"))
   (asset-id (common-lisp:error ":assetid is required") :type
    (common-lisp:or id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-asset-request 'make-delete-asset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-asset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-asset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-asset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-asset-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-asset-response-"))
   (asset-status (common-lisp:error ":assetstatus is required") :type
    (common-lisp:or asset-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-asset-response 'make-delete-asset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-status))
      (common-lisp:list
       (common-lisp:cons "assetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-asset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dashboard-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dashboard-request-"))
   (dashboard-id (common-lisp:error ":dashboardid is required") :type
    (common-lisp:or id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dashboard-request 'make-delete-dashboard-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dashboard-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dashboard-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dashboard-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dashboard-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-dashboard-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-dashboard-response
                    'make-delete-dashboard-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-dashboard-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-dashboard-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-dashboard-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-gateway-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-gateway-request-"))
   (gateway-id (common-lisp:error ":gatewayid is required") :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-gateway-request 'make-delete-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-portal-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-portal-request-"))
   (portal-id (common-lisp:error ":portalid is required") :type
    (common-lisp:or id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-portal-request 'make-delete-portal-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-portal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-portal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-portal-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-portal-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-portal-response-"))
   (portal-status (common-lisp:error ":portalstatus is required") :type
    (common-lisp:or portal-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-portal-response 'make-delete-portal-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-portal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-portal-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-status))
      (common-lisp:list
       (common-lisp:cons "portalStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-portal-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-project-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-project-request-"))
   (project-id (common-lisp:error ":projectid is required") :type
    (common-lisp:or id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-project-request 'make-delete-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-project-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-project-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-project-response 'make-delete-project-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-project-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-time-series-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-time-series-request-"))
   (alias common-lisp:nil :type
    (common-lisp:or property-alias common-lisp:null))
   (asset-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (property-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-time-series-request
                    'make-delete-time-series-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-time-series-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-time-series-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-time-series-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-access-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-access-policy-request-"))
   (access-policy-id (common-lisp:error ":accesspolicyid is required") :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-access-policy-request
                    'make-describe-access-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-access-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-access-policy-response-"))
   (access-policy-id (common-lisp:error ":accesspolicyid is required") :type
    (common-lisp:or id common-lisp:null))
   (access-policy-arn (common-lisp:error ":accesspolicyarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (access-policy-identity
    (common-lisp:error ":accesspolicyidentity is required") :type
    (common-lisp:or identity common-lisp:null))
   (access-policy-resource
    (common-lisp:error ":accesspolicyresource is required") :type
    (common-lisp:or resource common-lisp:null))
   (access-policy-permission
    (common-lisp:error ":accesspolicypermission is required") :type
    (common-lisp:or permission common-lisp:null))
   (access-policy-creation-date
    (common-lisp:error ":accesspolicycreationdate is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (access-policy-last-update-date
    (common-lisp:error ":accesspolicylastupdatedate is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-access-policy-response
                    'make-describe-access-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policy-id))
      (common-lisp:list
       (common-lisp:cons "accessPolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-policy-arn))
      (common-lisp:list
       (common-lisp:cons "accessPolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-policy-identity))
      (common-lisp:list
       (common-lisp:cons "accessPolicyIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-policy-resource))
      (common-lisp:list
       (common-lisp:cons "accessPolicyResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-policy-permission))
      (common-lisp:list
       (common-lisp:cons "accessPolicyPermission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-policy-creation-date))
      (common-lisp:list
       (common-lisp:cons "accessPolicyCreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-policy-last-update-date))
      (common-lisp:list
       (common-lisp:cons "accessPolicyLastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-access-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-asset-model-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-asset-model-request-"))
   (asset-model-id (common-lisp:error ":assetmodelid is required") :type
    (common-lisp:or id common-lisp:null))
   (exclude-properties common-lisp:nil :type
    (common-lisp:or exclude-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-asset-model-request
                    'make-describe-asset-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-asset-model-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-asset-model-response-"))
   (asset-model-id (common-lisp:error ":assetmodelid is required") :type
    (common-lisp:or id common-lisp:null))
   (asset-model-arn (common-lisp:error ":assetmodelarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (asset-model-name (common-lisp:error ":assetmodelname is required") :type
    (common-lisp:or name common-lisp:null))
   (asset-model-description
    (common-lisp:error ":assetmodeldescription is required") :type
    (common-lisp:or description common-lisp:null))
   (asset-model-properties
    (common-lisp:error ":assetmodelproperties is required") :type
    (common-lisp:or asset-model-properties common-lisp:null))
   (asset-model-hierarchies
    (common-lisp:error ":assetmodelhierarchies is required") :type
    (common-lisp:or asset-model-hierarchies common-lisp:null))
   (asset-model-composite-models common-lisp:nil :type
    (common-lisp:or asset-model-composite-models common-lisp:null))
   (asset-model-creation-date
    (common-lisp:error ":assetmodelcreationdate is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (asset-model-last-update-date
    (common-lisp:error ":assetmodellastupdatedate is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (asset-model-status (common-lisp:error ":assetmodelstatus is required")
    :type (common-lisp:or asset-model-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-asset-model-response
                    'make-describe-asset-model-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-model-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-id))
      (common-lisp:list
       (common-lisp:cons "assetModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-arn))
      (common-lisp:list
       (common-lisp:cons "assetModelArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-name))
      (common-lisp:list
       (common-lisp:cons "assetModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-description))
      (common-lisp:list
       (common-lisp:cons "assetModelDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-properties))
      (common-lisp:list
       (common-lisp:cons "assetModelProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-hierarchies))
      (common-lisp:list
       (common-lisp:cons "assetModelHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-models))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-creation-date))
      (common-lisp:list
       (common-lisp:cons "assetModelCreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-last-update-date))
      (common-lisp:list
       (common-lisp:cons "assetModelLastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-status))
      (common-lisp:list
       (common-lisp:cons "assetModelStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-model-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-asset-property-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-asset-property-request-"))
   (asset-id (common-lisp:error ":assetid is required") :type
    (common-lisp:or id common-lisp:null))
   (property-id (common-lisp:error ":propertyid is required") :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-asset-property-request
                    'make-describe-asset-property-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-property-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-property-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-property-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-asset-property-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-asset-property-response-"))
   (asset-id (common-lisp:error ":assetid is required") :type
    (common-lisp:or id common-lisp:null))
   (asset-name (common-lisp:error ":assetname is required") :type
    (common-lisp:or name common-lisp:null))
   (asset-model-id (common-lisp:error ":assetmodelid is required") :type
    (common-lisp:or id common-lisp:null))
   (asset-property common-lisp:nil :type
    (common-lisp:or property common-lisp:null))
   (composite-model common-lisp:nil :type
    (common-lisp:or composite-model-property common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-asset-property-response
                    'make-describe-asset-property-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-property-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-property-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-name))
      (common-lisp:list
       (common-lisp:cons "assetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-id))
      (common-lisp:list
       (common-lisp:cons "assetModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-property))
      (common-lisp:list
       (common-lisp:cons "assetProperty"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'composite-model))
      (common-lisp:list
       (common-lisp:cons "compositeModel"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-property-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-asset-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-asset-request-"))
   (asset-id (common-lisp:error ":assetid is required") :type
    (common-lisp:or id common-lisp:null))
   (exclude-properties common-lisp:nil :type
    (common-lisp:or exclude-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-asset-request 'make-describe-asset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-asset-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-asset-response-"))
   (asset-id (common-lisp:error ":assetid is required") :type
    (common-lisp:or id common-lisp:null))
   (asset-arn (common-lisp:error ":assetarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (asset-name (common-lisp:error ":assetname is required") :type
    (common-lisp:or name common-lisp:null))
   (asset-model-id (common-lisp:error ":assetmodelid is required") :type
    (common-lisp:or id common-lisp:null))
   (asset-properties (common-lisp:error ":assetproperties is required") :type
    (common-lisp:or asset-properties common-lisp:null))
   (asset-hierarchies (common-lisp:error ":assethierarchies is required") :type
    (common-lisp:or asset-hierarchies common-lisp:null))
   (asset-composite-models common-lisp:nil :type
    (common-lisp:or asset-composite-models common-lisp:null))
   (asset-creation-date (common-lisp:error ":assetcreationdate is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (asset-last-update-date
    (common-lisp:error ":assetlastupdatedate is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (asset-status (common-lisp:error ":assetstatus is required") :type
    (common-lisp:or asset-status common-lisp:null))
   (asset-description common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-asset-response 'make-describe-asset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-arn))
      (common-lisp:list
       (common-lisp:cons "assetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-name))
      (common-lisp:list
       (common-lisp:cons "assetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-id))
      (common-lisp:list
       (common-lisp:cons "assetModelId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-properties))
      (common-lisp:list
       (common-lisp:cons "assetProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-hierarchies))
      (common-lisp:list
       (common-lisp:cons "assetHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-composite-models))
      (common-lisp:list
       (common-lisp:cons "assetCompositeModels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-creation-date))
      (common-lisp:list
       (common-lisp:cons "assetCreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-last-update-date))
      (common-lisp:list
       (common-lisp:cons "assetLastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-status))
      (common-lisp:list
       (common-lisp:cons "assetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-description))
      (common-lisp:list
       (common-lisp:cons "assetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-asset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-bulk-import-job-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-bulk-import-job-request-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-bulk-import-job-request
                    'make-describe-bulk-import-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bulk-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bulk-import-job-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bulk-import-job-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-bulk-import-job-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-bulk-import-job-response-"))
   (job-id (common-lisp:error ":jobid is required") :type
    (common-lisp:or id common-lisp:null))
   (job-name (common-lisp:error ":jobname is required") :type
    (common-lisp:or name common-lisp:null))
   (job-status (common-lisp:error ":jobstatus is required") :type
    (common-lisp:or job-status common-lisp:null))
   (job-role-arn (common-lisp:error ":jobrolearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (files (common-lisp:error ":files is required") :type
    (common-lisp:or files common-lisp:null))
   (error-report-location
    (common-lisp:error ":errorreportlocation is required") :type
    (common-lisp:or error-report-location common-lisp:null))
   (job-configuration (common-lisp:error ":jobconfiguration is required") :type
    (common-lisp:or job-configuration common-lisp:null))
   (job-creation-date (common-lisp:error ":jobcreationdate is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (job-last-update-date (common-lisp:error ":joblastupdatedate is required")
    :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-bulk-import-job-response
                    'make-describe-bulk-import-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-bulk-import-job-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-bulk-import-job-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "jobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-name))
      (common-lisp:list
       (common-lisp:cons "jobName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "jobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-role-arn))
      (common-lisp:list
       (common-lisp:cons "jobRoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'files))
      (common-lisp:list
       (common-lisp:cons "files"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'error-report-location))
      (common-lisp:list
       (common-lisp:cons "errorReportLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-configuration))
      (common-lisp:list
       (common-lisp:cons "jobConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-creation-date))
      (common-lisp:list
       (common-lisp:cons "jobCreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'job-last-update-date))
      (common-lisp:list
       (common-lisp:cons "jobLastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-bulk-import-job-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dashboard-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dashboard-request-"))
   (dashboard-id (common-lisp:error ":dashboardid is required") :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dashboard-request
                    'make-describe-dashboard-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-dashboard-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-dashboard-response-"))
   (dashboard-id (common-lisp:error ":dashboardid is required") :type
    (common-lisp:or id common-lisp:null))
   (dashboard-arn (common-lisp:error ":dashboardarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (dashboard-name (common-lisp:error ":dashboardname is required") :type
    (common-lisp:or name common-lisp:null))
   (project-id (common-lisp:error ":projectid is required") :type
    (common-lisp:or id common-lisp:null))
   (dashboard-description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (dashboard-definition (common-lisp:error ":dashboarddefinition is required")
    :type (common-lisp:or dashboard-definition common-lisp:null))
   (dashboard-creation-date
    (common-lisp:error ":dashboardcreationdate is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (dashboard-last-update-date
    (common-lisp:error ":dashboardlastupdatedate is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-dashboard-response
                    'make-describe-dashboard-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-id))
      (common-lisp:list
       (common-lisp:cons "dashboardId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-arn))
      (common-lisp:list
       (common-lisp:cons "dashboardArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-name))
      (common-lisp:list
       (common-lisp:cons "dashboardName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashboard-description))
      (common-lisp:list
       (common-lisp:cons "dashboardDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashboard-definition))
      (common-lisp:list
       (common-lisp:cons "dashboardDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashboard-creation-date))
      (common-lisp:list
       (common-lisp:cons "dashboardCreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashboard-last-update-date))
      (common-lisp:list
       (common-lisp:cons "dashboardLastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-dashboard-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-default-encryption-configuration-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-default-encryption-configuration-request-")))
 (common-lisp:export
  (common-lisp:list 'describe-default-encryption-configuration-request
                    'make-describe-default-encryption-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-encryption-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-encryption-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-encryption-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-default-encryption-configuration-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-default-encryption-configuration-response-"))
   (encryption-type (common-lisp:error ":encryptiontype is required") :type
    (common-lisp:or encryption-type common-lisp:null))
   (kms-key-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (configuration-status (common-lisp:error ":configurationstatus is required")
    :type (common-lisp:or configuration-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-default-encryption-configuration-response
                    'make-describe-default-encryption-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-encryption-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-encryption-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "encryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-status))
      (common-lisp:list
       (common-lisp:cons "configurationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-default-encryption-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-gateway-capability-configuration-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-gateway-capability-configuration-request-"))
   (gateway-id (common-lisp:error ":gatewayid is required") :type
    (common-lisp:or id common-lisp:null))
   (capability-namespace (common-lisp:error ":capabilitynamespace is required")
    :type (common-lisp:or capability-namespace common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-gateway-capability-configuration-request
                    'make-describe-gateway-capability-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-capability-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-capability-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-capability-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-gateway-capability-configuration-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-describe-gateway-capability-configuration-response-"))
   (gateway-id (common-lisp:error ":gatewayid is required") :type
    (common-lisp:or id common-lisp:null))
   (capability-namespace (common-lisp:error ":capabilitynamespace is required")
    :type (common-lisp:or capability-namespace common-lisp:null))
   (capability-configuration
    (common-lisp:error ":capabilityconfiguration is required") :type
    (common-lisp:or capability-configuration common-lisp:null))
   (capability-sync-status
    (common-lisp:error ":capabilitysyncstatus is required") :type
    (common-lisp:or capability-sync-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-gateway-capability-configuration-response
                    'make-describe-gateway-capability-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-capability-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-capability-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "gatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capability-namespace))
      (common-lisp:list
       (common-lisp:cons "capabilityNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capability-configuration))
      (common-lisp:list
       (common-lisp:cons "capabilityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capability-sync-status))
      (common-lisp:list
       (common-lisp:cons "capabilitySyncStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-capability-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-gateway-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-gateway-request-"))
   (gateway-id (common-lisp:error ":gatewayid is required") :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-gateway-request 'make-describe-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-gateway-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-gateway-response-"))
   (gateway-id (common-lisp:error ":gatewayid is required") :type
    (common-lisp:or id common-lisp:null))
   (gateway-name (common-lisp:error ":gatewayname is required") :type
    (common-lisp:or name common-lisp:null))
   (gateway-arn (common-lisp:error ":gatewayarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (gateway-platform common-lisp:nil :type
    (common-lisp:or gateway-platform common-lisp:null))
   (gateway-capability-summaries
    (common-lisp:error ":gatewaycapabilitysummaries is required") :type
    (common-lisp:or gateway-capability-summaries common-lisp:null))
   (creation-date (common-lisp:error ":creationdate is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-update-date (common-lisp:error ":lastupdatedate is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-gateway-response
                    'make-describe-gateway-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "gatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-name))
      (common-lisp:list
       (common-lisp:cons "gatewayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-arn))
      (common-lisp:list
       (common-lisp:cons "gatewayArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-platform))
      (common-lisp:list
       (common-lisp:cons "gatewayPlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'gateway-capability-summaries))
      (common-lisp:list
       (common-lisp:cons "gatewayCapabilitySummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-gateway-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-logging-options-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-logging-options-request-")))
 (common-lisp:export
  (common-lisp:list 'describe-logging-options-request
                    'make-describe-logging-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-logging-options-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-logging-options-response-"))
   (logging-options (common-lisp:error ":loggingoptions is required") :type
    (common-lisp:or logging-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-logging-options-response
                    'make-describe-logging-options-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-options-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-options))
      (common-lisp:list
       (common-lisp:cons "loggingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-logging-options-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-portal-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-portal-request-"))
   (portal-id (common-lisp:error ":portalid is required") :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-portal-request 'make-describe-portal-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-portal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-portal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-portal-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-portal-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-portal-response-"))
   (portal-id (common-lisp:error ":portalid is required") :type
    (common-lisp:or id common-lisp:null))
   (portal-arn (common-lisp:error ":portalarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (portal-name (common-lisp:error ":portalname is required") :type
    (common-lisp:or name common-lisp:null))
   (portal-description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (portal-client-id (common-lisp:error ":portalclientid is required") :type
    (common-lisp:or portal-client-id common-lisp:null))
   (portal-start-url (common-lisp:error ":portalstarturl is required") :type
    (common-lisp:or url common-lisp:null))
   (portal-contact-email (common-lisp:error ":portalcontactemail is required")
    :type (common-lisp:or email common-lisp:null))
   (portal-status (common-lisp:error ":portalstatus is required") :type
    (common-lisp:or portal-status common-lisp:null))
   (portal-creation-date (common-lisp:error ":portalcreationdate is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (portal-last-update-date
    (common-lisp:error ":portallastupdatedate is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (portal-logo-image-location common-lisp:nil :type
    (common-lisp:or image-location common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (portal-auth-mode common-lisp:nil :type
    (common-lisp:or auth-mode common-lisp:null))
   (notification-sender-email common-lisp:nil :type
    (common-lisp:or email common-lisp:null))
   (alarms common-lisp:nil :type (common-lisp:or alarms common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-portal-response 'make-describe-portal-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-portal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-portal-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-id))
      (common-lisp:list
       (common-lisp:cons "portalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-arn))
      (common-lisp:list
       (common-lisp:cons "portalArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-name))
      (common-lisp:list
       (common-lisp:cons "portalName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-description))
      (common-lisp:list
       (common-lisp:cons "portalDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-client-id))
      (common-lisp:list
       (common-lisp:cons "portalClientId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-start-url))
      (common-lisp:list
       (common-lisp:cons "portalStartUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'portal-contact-email))
      (common-lisp:list
       (common-lisp:cons "portalContactEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-status))
      (common-lisp:list
       (common-lisp:cons "portalStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'portal-creation-date))
      (common-lisp:list
       (common-lisp:cons "portalCreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'portal-last-update-date))
      (common-lisp:list
       (common-lisp:cons "portalLastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'portal-logo-image-location))
      (common-lisp:list
       (common-lisp:cons "portalLogoImageLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-auth-mode))
      (common-lisp:list
       (common-lisp:cons "portalAuthMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-sender-email))
      (common-lisp:list
       (common-lisp:cons "notificationSenderEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarms))
      (common-lisp:list
       (common-lisp:cons "alarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-portal-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-project-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-project-request-"))
   (project-id (common-lisp:error ":projectid is required") :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-project-request 'make-describe-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-project-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-project-response-"))
   (project-id (common-lisp:error ":projectid is required") :type
    (common-lisp:or id common-lisp:null))
   (project-arn (common-lisp:error ":projectarn is required") :type
    (common-lisp:or arn common-lisp:null))
   (project-name (common-lisp:error ":projectname is required") :type
    (common-lisp:or name common-lisp:null))
   (portal-id (common-lisp:error ":portalid is required") :type
    (common-lisp:or id common-lisp:null))
   (project-description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (project-creation-date
    (common-lisp:error ":projectcreationdate is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (project-last-update-date
    (common-lisp:error ":projectlastupdatedate is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-project-response
                    'make-describe-project-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-id))
      (common-lisp:list
       (common-lisp:cons "projectId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-arn))
      (common-lisp:list
       (common-lisp:cons "projectArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "projectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-id))
      (common-lisp:list
       (common-lisp:cons "portalId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-description))
      (common-lisp:list
       (common-lisp:cons "projectDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'project-creation-date))
      (common-lisp:list
       (common-lisp:cons "projectCreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'project-last-update-date))
      (common-lisp:list
       (common-lisp:cons "projectLastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-project-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-storage-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-storage-configuration-request-")))
 (common-lisp:export
  (common-lisp:list 'describe-storage-configuration-request
                    'make-describe-storage-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-storage-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-storage-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-storage-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-storage-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-storage-configuration-response-"))
   (storage-type (common-lisp:error ":storagetype is required") :type
    (common-lisp:or storage-type common-lisp:null))
   (multi-layer-storage common-lisp:nil :type
    (common-lisp:or multi-layer-storage common-lisp:null))
   (disassociated-data-storage common-lisp:nil :type
    (common-lisp:or disassociated-data-storage-state common-lisp:null))
   (retention-period common-lisp:nil :type
    (common-lisp:or retention-period common-lisp:null))
   (configuration-status (common-lisp:error ":configurationstatus is required")
    :type (common-lisp:or configuration-status common-lisp:null))
   (last-update-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-storage-configuration-response
                    'make-describe-storage-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-storage-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-storage-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "storageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-layer-storage))
      (common-lisp:list
       (common-lisp:cons "multiLayerStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disassociated-data-storage))
      (common-lisp:list
       (common-lisp:cons "disassociatedDataStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "retentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-status))
      (common-lisp:list
       (common-lisp:cons "configurationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-storage-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-time-series-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-time-series-request-"))
   (alias common-lisp:nil :type
    (common-lisp:or property-alias common-lisp:null))
   (asset-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (property-id common-lisp:nil :type (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-time-series-request
                    'make-describe-time-series-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-time-series-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-time-series-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-time-series-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-time-series-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-time-series-response-"))
   (asset-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (property-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (alias common-lisp:nil :type
    (common-lisp:or property-alias common-lisp:null))
   (time-series-id (common-lisp:error ":timeseriesid is required") :type
    (common-lisp:or time-series-id common-lisp:null))
   (data-type (common-lisp:error ":datatype is required") :type
    (common-lisp:or property-data-type common-lisp:null))
   (data-type-spec common-lisp:nil :type
    (common-lisp:or name common-lisp:null))
   (time-series-creation-date
    (common-lisp:error ":timeseriescreationdate is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (time-series-last-update-date
    (common-lisp:error ":timeserieslastupdatedate is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (time-series-arn (common-lisp:error ":timeseriesarn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-time-series-response
                    'make-describe-time-series-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-time-series-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-time-series-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-id))
      (common-lisp:list
       (common-lisp:cons "propertyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-series-id))
      (common-lisp:list
       (common-lisp:cons "timeSeriesId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type-spec))
      (common-lisp:list
       (common-lisp:cons "dataTypeSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-series-creation-date))
      (common-lisp:list
       (common-lisp:cons "timeSeriesCreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-series-last-update-date))
      (common-lisp:list
       (common-lisp:cons "timeSeriesLastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-series-arn))
      (common-lisp:list
       (common-lisp:cons "timeSeriesArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-time-series-response))
   common-lisp:nil))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (detailed-error (:copier common-lisp:nil)
      (:conc-name "struct-shape-detailed-error-"))
   (code (common-lisp:error ":code is required") :type
    (common-lisp:or detailed-error-code common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or detailed-error-message common-lisp:null)))
 (common-lisp:export (common-lisp:list 'detailed-error 'make-detailed-error))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input detailed-error))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input detailed-error))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input detailed-error))
   common-lisp:nil))
(common-lisp:deftype detailed-error-code () 'common-lisp:string)
(common-lisp:deftype detailed-error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype detailed-errors ()
   '(trivial-types:proper-list detailed-error))
 (common-lisp:defun |make-detailed-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list detailed-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-assets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-disassociate-assets-request-"))
   (asset-id (common-lisp:error ":assetid is required") :type
    (common-lisp:or id common-lisp:null))
   (hierarchy-id (common-lisp:error ":hierarchyid is required") :type
    (common-lisp:or id common-lisp:null))
   (child-asset-id (common-lisp:error ":childassetid is required") :type
    (common-lisp:or id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-assets-request
                    'make-disassociate-assets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-assets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-assets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-id))
      (common-lisp:list
       (common-lisp:cons "hierarchyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'child-asset-id))
      (common-lisp:list
       (common-lisp:cons "childAssetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-assets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-time-series-from-asset-property-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-disassociate-time-series-from-asset-property-request-"))
   (alias (common-lisp:error ":alias is required") :type
    (common-lisp:or property-alias common-lisp:null))
   (asset-id (common-lisp:error ":assetid is required") :type
    (common-lisp:or id common-lisp:null))
   (property-id (common-lisp:error ":propertyid is required") :type
    (common-lisp:or id common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-time-series-from-asset-property-request
                    'make-disassociate-time-series-from-asset-property-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-time-series-from-asset-property-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-time-series-from-asset-property-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          disassociate-time-series-from-asset-property-request))
   common-lisp:nil))
(common-lisp:deftype disassociated-data-storage-state () 'common-lisp:string)
(common-lisp:deftype email () 'common-lisp:string)
(common-lisp:deftype encryption-type () 'common-lisp:string)
(common-lisp:deftype entry-id () 'common-lisp:string)
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (error-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-error-details-"))
   (code (common-lisp:error ":code is required") :type
    (common-lisp:or error-code common-lisp:null))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or error-message common-lisp:null))
   (details common-lisp:nil :type
    (common-lisp:or detailed-errors common-lisp:null)))
 (common-lisp:export (common-lisp:list 'error-details 'make-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-details))
   common-lisp:nil))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (error-report-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-error-report-location-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket common-lisp:null))
   (prefix (common-lisp:error ":prefix is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'error-report-location 'make-error-report-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          error-report-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          error-report-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          error-report-location))
   common-lisp:nil))
(common-lisp:deftype exception-message () 'common-lisp:string)
(common-lisp:deftype exclude-properties () 'common-lisp:boolean)
(common-lisp:deftype expression () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (expression-variable (:copier common-lisp:nil)
      (:conc-name "struct-shape-expression-variable-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or variable-name common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or variable-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'expression-variable 'make-expression-variable))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input expression-variable))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input expression-variable))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input expression-variable))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype expression-variables ()
   '(trivial-types:proper-list expression-variable))
 (common-lisp:defun |make-expression-variables|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list expression-variable))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (file (:copier common-lisp:nil) (:conc-name "struct-shape-file-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or bucket common-lisp:null))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or string common-lisp:null))
   (version-id common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'file 'make-file))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input file))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input file))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "versionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input file))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (file-format (:copier common-lisp:nil)
      (:conc-name "struct-shape-file-format-"))
   (csv common-lisp:nil :type (common-lisp:or csv common-lisp:null)))
 (common-lisp:export (common-lisp:list 'file-format 'make-file-format))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input file-format))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input file-format))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'csv))
      (common-lisp:list
       (common-lisp:cons "csv"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input file-format))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype files () '(trivial-types:proper-list file))
 (common-lisp:defun |make-files|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list file))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (forwarding-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-forwarding-config-"))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or forwarding-config-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'forwarding-config 'make-forwarding-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input forwarding-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input forwarding-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input forwarding-config))
   common-lisp:nil))
(common-lisp:deftype forwarding-config-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype gateway-capability-summaries ()
   '(trivial-types:proper-list gateway-capability-summary))
 (common-lisp:defun |make-gateway-capability-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            gateway-capability-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (gateway-capability-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-gateway-capability-summary-"))
   (capability-namespace (common-lisp:error ":capabilitynamespace is required")
    :type (common-lisp:or capability-namespace common-lisp:null))
   (capability-sync-status
    (common-lisp:error ":capabilitysyncstatus is required") :type
    (common-lisp:or capability-sync-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'gateway-capability-summary
                    'make-gateway-capability-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          gateway-capability-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          gateway-capability-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capability-namespace))
      (common-lisp:list
       (common-lisp:cons "capabilityNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capability-sync-status))
      (common-lisp:list
       (common-lisp:cons "capabilitySyncStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          gateway-capability-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (gateway-platform (:copier common-lisp:nil)
      (:conc-name "struct-shape-gateway-platform-"))
   (greengrass common-lisp:nil :type
    (common-lisp:or greengrass common-lisp:null))
   (greengrass-v2 common-lisp:nil :type
    (common-lisp:or greengrass-v2 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'gateway-platform 'make-gateway-platform))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gateway-platform))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gateway-platform))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'greengrass))
      (common-lisp:list
       (common-lisp:cons "greengrass"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'greengrass-v2))
      (common-lisp:list
       (common-lisp:cons "greengrassV2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gateway-platform))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype gateway-summaries ()
   '(trivial-types:proper-list gateway-summary))
 (common-lisp:defun |make-gateway-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list gateway-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (gateway-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-gateway-summary-"))
   (gateway-id (common-lisp:error ":gatewayid is required") :type
    (common-lisp:or id common-lisp:null))
   (gateway-name (common-lisp:error ":gatewayname is required") :type
    (common-lisp:or name common-lisp:null))
   (gateway-platform common-lisp:nil :type
    (common-lisp:or gateway-platform common-lisp:null))
   (gateway-capability-summaries common-lisp:nil :type
    (common-lisp:or gateway-capability-summaries common-lisp:null))
   (creation-date (common-lisp:error ":creationdate is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (last-update-date (common-lisp:error ":lastupdatedate is required") :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'gateway-summary 'make-gateway-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input gateway-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input gateway-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-id))
      (common-lisp:list
       (common-lisp:cons "gatewayId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-name))
      (common-lisp:list
       (common-lisp:cons "gatewayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-platform))
      (common-lisp:list
       (common-lisp:cons "gatewayPlatform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'gateway-capability-summaries))
      (common-lisp:list
       (common-lisp:cons "gatewayCapabilitySummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input gateway-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-asset-property-aggregates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-asset-property-aggregates-request-"))
   (asset-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (property-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (property-alias common-lisp:nil :type
    (common-lisp:or asset-property-alias common-lisp:null))
   (aggregate-types (common-lisp:error ":aggregatetypes is required") :type
    (common-lisp:or aggregate-types common-lisp:null))
   (resolution (common-lisp:error ":resolution is required") :type
    (common-lisp:or resolution common-lisp:null))
   (qualities common-lisp:nil :type
    (common-lisp:or qualities common-lisp:null))
   (start-date (common-lisp:error ":startdate is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (end-date (common-lisp:error ":enddate is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (time-ordering common-lisp:nil :type
    (common-lisp:or time-ordering common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-asset-property-aggregates-request
                    'make-get-asset-property-aggregates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-aggregates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-aggregates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-aggregates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-asset-property-aggregates-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-asset-property-aggregates-response-"))
   (aggregated-values (common-lisp:error ":aggregatedvalues is required") :type
    (common-lisp:or aggregated-values common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-asset-property-aggregates-response
                    'make-get-asset-property-aggregates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-aggregates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-aggregates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregated-values))
      (common-lisp:list
       (common-lisp:cons "aggregatedValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-aggregates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-asset-property-value-history-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-asset-property-value-history-request-"))
   (asset-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (property-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (property-alias common-lisp:nil :type
    (common-lisp:or asset-property-alias common-lisp:null))
   (start-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (end-date common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (qualities common-lisp:nil :type
    (common-lisp:or qualities common-lisp:null))
   (time-ordering common-lisp:nil :type
    (common-lisp:or time-ordering common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-asset-property-value-history-request
                    'make-get-asset-property-value-history-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-value-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-value-history-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-value-history-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-asset-property-value-history-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-asset-property-value-history-response-"))
   (asset-property-value-history
    (common-lisp:error ":assetpropertyvaluehistory is required") :type
    (common-lisp:or asset-property-value-history common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-asset-property-value-history-response
                    'make-get-asset-property-value-history-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-value-history-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-value-history-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-property-value-history))
      (common-lisp:list
       (common-lisp:cons "assetPropertyValueHistory"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-value-history-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-asset-property-value-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-asset-property-value-request-"))
   (asset-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (property-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (property-alias common-lisp:nil :type
    (common-lisp:or asset-property-alias common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-asset-property-value-request
                    'make-get-asset-property-value-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-value-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-value-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-value-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-asset-property-value-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-asset-property-value-response-"))
   (property-value common-lisp:nil :type
    (common-lisp:or asset-property-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-asset-property-value-response
                    'make-get-asset-property-value-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-value-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-value-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-value))
      (common-lisp:list
       (common-lisp:cons "propertyValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-asset-property-value-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-interpolated-asset-property-values-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-interpolated-asset-property-values-request-"))
   (asset-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (property-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (property-alias common-lisp:nil :type
    (common-lisp:or asset-property-alias common-lisp:null))
   (start-time-in-seconds (common-lisp:error ":starttimeinseconds is required")
    :type (common-lisp:or time-in-seconds common-lisp:null))
   (start-time-offset-in-nanos common-lisp:nil :type
    (common-lisp:or offset-in-nanos common-lisp:null))
   (end-time-in-seconds (common-lisp:error ":endtimeinseconds is required")
    :type (common-lisp:or time-in-seconds common-lisp:null))
   (end-time-offset-in-nanos common-lisp:nil :type
    (common-lisp:or offset-in-nanos common-lisp:null))
   (quality (common-lisp:error ":quality is required") :type
    (common-lisp:or quality common-lisp:null))
   (interval-in-seconds (common-lisp:error ":intervalinseconds is required")
    :type (common-lisp:or interval-in-seconds common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-interpolated-results common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or interpolation-type common-lisp:null))
   (interval-window-in-seconds common-lisp:nil :type
    (common-lisp:or interval-window-in-seconds common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-interpolated-asset-property-values-request
                    'make-get-interpolated-asset-property-values-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-interpolated-asset-property-values-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-interpolated-asset-property-values-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-interpolated-asset-property-values-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-interpolated-asset-property-values-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-interpolated-asset-property-values-response-"))
   (interpolated-asset-property-values
    (common-lisp:error ":interpolatedassetpropertyvalues is required") :type
    (common-lisp:or interpolated-asset-property-values common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-interpolated-asset-property-values-response
                    'make-get-interpolated-asset-property-values-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-interpolated-asset-property-values-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-interpolated-asset-property-values-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'interpolated-asset-property-values))
      (common-lisp:list
       (common-lisp:cons "interpolatedAssetPropertyValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-interpolated-asset-property-values-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (greengrass (:copier common-lisp:nil)
      (:conc-name "struct-shape-greengrass-"))
   (group-arn (common-lisp:error ":grouparn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'greengrass 'make-greengrass))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input greengrass))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input greengrass))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-arn))
      (common-lisp:list
       (common-lisp:cons "groupArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input greengrass))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (greengrass-v2 (:copier common-lisp:nil)
      (:conc-name "struct-shape-greengrass-v2-"))
   (core-device-thing-name
    (common-lisp:error ":coredevicethingname is required") :type
    (common-lisp:or core-device-thing-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'greengrass-v2 'make-greengrass-v2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input greengrass-v2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input greengrass-v2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'core-device-thing-name))
      (common-lisp:list
       (common-lisp:cons "coreDeviceThingName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input greengrass-v2))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (group-identity (:copier common-lisp:nil)
      (:conc-name "struct-shape-group-identity-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or identity-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'group-identity 'make-group-identity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-identity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (iamrole-identity (:copier common-lisp:nil)
      (:conc-name "struct-shape-iamrole-identity-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'iamrole-identity 'make-iamrole-identity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input iamrole-identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input iamrole-identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input iamrole-identity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (iamuser-identity (:copier common-lisp:nil)
      (:conc-name "struct-shape-iamuser-identity-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'iamuser-identity 'make-iamuser-identity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input iamuser-identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input iamuser-identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input iamuser-identity))
   common-lisp:nil))
(common-lisp:deftype id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype ids () '(trivial-types:proper-list id))
 (common-lisp:defun |make-ids|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (identity (:copier common-lisp:nil) (:conc-name "struct-shape-identity-"))
   (user common-lisp:nil :type (common-lisp:or user-identity common-lisp:null))
   (group common-lisp:nil :type
    (common-lisp:or group-identity common-lisp:null))
   (iam-user common-lisp:nil :type
    (common-lisp:or iamuser-identity common-lisp:null))
   (iam-role common-lisp:nil :type
    (common-lisp:or iamrole-identity common-lisp:null)))
 (common-lisp:export (common-lisp:list 'identity 'make-identity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "user"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-user))
      (common-lisp:list
       (common-lisp:cons "iamUser"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iam-role))
      (common-lisp:list
       (common-lisp:cons "iamRole"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input identity))
   common-lisp:nil))
(common-lisp:deftype identity-id () 'common-lisp:string)
(common-lisp:deftype identity-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (image (:copier common-lisp:nil) (:conc-name "struct-shape-image-"))
   (id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (file common-lisp:nil :type (common-lisp:or image-file common-lisp:null)))
 (common-lisp:export (common-lisp:list 'image 'make-image))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file))
      (common-lisp:list
       (common-lisp:cons "file"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (image-file (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-file-"))
   (data (common-lisp:error ":data is required") :type
    (common-lisp:or image-file-data common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or image-file-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'image-file 'make-image-file))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-file))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-file))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data))
      (common-lisp:list
       (common-lisp:cons "data"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-file))
   common-lisp:nil))
(common-lisp:deftype image-file-data ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype image-file-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (image-location (:copier common-lisp:nil)
      (:conc-name "struct-shape-image-location-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or id common-lisp:null))
   (url (common-lisp:error ":url is required") :type
    (common-lisp:or url common-lisp:null)))
 (common-lisp:export (common-lisp:list 'image-location 'make-image-location))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input image-location))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input image-location))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input image-location))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition internal-failure-exception
     (iotsitewise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-failure-exception
                    'internal-failure-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (interpolated-asset-property-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-interpolated-asset-property-value-"))
   (timestamp (common-lisp:error ":string is required") :type
    (common-lisp:or time-in-nanos common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or variant common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'interpolated-asset-property-value
                    'make-interpolated-asset-property-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          interpolated-asset-property-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          interpolated-asset-property-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'timestamp))
      (common-lisp:list
       (common-lisp:cons "timestamp"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          interpolated-asset-property-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype interpolated-asset-property-values ()
   '(trivial-types:proper-list interpolated-asset-property-value))
 (common-lisp:defun |make-interpolated-asset-property-values|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            interpolated-asset-property-value))
   aws-sdk/generator/shape::members))
(common-lisp:deftype interpolation-type () 'common-lisp:string)
(common-lisp:deftype interval () 'common-lisp:string)
(common-lisp:deftype interval-in-seconds () 'common-lisp:integer)
(common-lisp:deftype interval-window-in-seconds () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition invalid-request-exception
     (iotsitewise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-request-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'invalid-request-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (job-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-configuration-"))
   (file-format (common-lisp:error ":fileformat is required") :type
    (common-lisp:or file-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-configuration 'make-job-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'file-format))
      (common-lisp:list
       (common-lisp:cons "fileFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-configuration))
   common-lisp:nil))
(common-lisp:deftype job-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype job-summaries ()
   '(trivial-types:proper-list job-summary))
 (common-lisp:defun |make-job-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (job-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-job-summary-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or job-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-summary 'make-job-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input job-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input job-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input job-summary))
   common-lisp:nil))
(common-lisp:deftype kms-key-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (iotsitewise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-access-policies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-access-policies-request-"))
   (identity-type common-lisp:nil :type
    (common-lisp:or identity-type common-lisp:null))
   (identity-id common-lisp:nil :type
    (common-lisp:or identity-id common-lisp:null))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (resource-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (iam-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-access-policies-request
                    'make-list-access-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-access-policies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-access-policies-response-"))
   (access-policy-summaries
    (common-lisp:error ":accesspolicysummaries is required") :type
    (common-lisp:or access-policy-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-access-policies-response
                    'make-list-access-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-policy-summaries))
      (common-lisp:list
       (common-lisp:cons "accessPolicySummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-policies-response))
   common-lisp:nil))
(common-lisp:deftype list-asset-model-properties-filter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-asset-model-properties-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-asset-model-properties-request-"))
   (asset-model-id (common-lisp:error ":assetmodelid is required") :type
    (common-lisp:or id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or list-asset-model-properties-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-asset-model-properties-request
                    'make-list-asset-model-properties-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-model-properties-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-model-properties-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-model-properties-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-asset-model-properties-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-asset-model-properties-response-"))
   (asset-model-property-summaries
    (common-lisp:error ":assetmodelpropertysummaries is required") :type
    (common-lisp:or asset-model-property-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-asset-model-properties-response
                    'make-list-asset-model-properties-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-model-properties-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-model-properties-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-property-summaries))
      (common-lisp:list
       (common-lisp:cons "assetModelPropertySummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-model-properties-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-asset-models-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-asset-models-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-asset-models-request
                    'make-list-asset-models-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-models-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-models-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-models-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-asset-models-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-asset-models-response-"))
   (asset-model-summaries
    (common-lisp:error ":assetmodelsummaries is required") :type
    (common-lisp:or asset-model-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-asset-models-response
                    'make-list-asset-models-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-models-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-models-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-summaries))
      (common-lisp:list
       (common-lisp:cons "assetModelSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-models-response))
   common-lisp:nil))
(common-lisp:deftype list-asset-properties-filter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-asset-properties-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-asset-properties-request-"))
   (asset-id (common-lisp:error ":assetid is required") :type
    (common-lisp:or id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or list-asset-properties-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-asset-properties-request
                    'make-list-asset-properties-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-properties-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-properties-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-properties-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-asset-properties-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-asset-properties-response-"))
   (asset-property-summaries
    (common-lisp:error ":assetpropertysummaries is required") :type
    (common-lisp:or asset-property-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-asset-properties-response
                    'make-list-asset-properties-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-properties-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-properties-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-property-summaries))
      (common-lisp:list
       (common-lisp:cons "assetPropertySummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-properties-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-asset-relationships-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-asset-relationships-request-"))
   (asset-id (common-lisp:error ":assetid is required") :type
    (common-lisp:or id common-lisp:null))
   (traversal-type (common-lisp:error ":traversaltype is required") :type
    (common-lisp:or traversal-type common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-asset-relationships-request
                    'make-list-asset-relationships-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-relationships-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-relationships-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-relationships-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-asset-relationships-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-asset-relationships-response-"))
   (asset-relationship-summaries
    (common-lisp:error ":assetrelationshipsummaries is required") :type
    (common-lisp:or asset-relationship-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-asset-relationships-response
                    'make-list-asset-relationships-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-relationships-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-relationships-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-relationship-summaries))
      (common-lisp:list
       (common-lisp:cons "assetRelationshipSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-asset-relationships-response))
   common-lisp:nil))
(common-lisp:deftype list-assets-filter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-assets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-assets-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (asset-model-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or list-assets-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-assets-request 'make-list-assets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-assets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-assets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-assets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-assets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-assets-response-"))
   (asset-summaries (common-lisp:error ":assetsummaries is required") :type
    (common-lisp:or asset-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-assets-response 'make-list-assets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-assets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-assets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-summaries))
      (common-lisp:list
       (common-lisp:cons "assetSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-assets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-associated-assets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-associated-assets-request-"))
   (asset-id (common-lisp:error ":assetid is required") :type
    (common-lisp:or id common-lisp:null))
   (hierarchy-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (traversal-direction common-lisp:nil :type
    (common-lisp:or traversal-direction common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-associated-assets-request
                    'make-list-associated-assets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-assets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-assets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-assets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-associated-assets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-associated-assets-response-"))
   (asset-summaries (common-lisp:error ":assetsummaries is required") :type
    (common-lisp:or associated-assets-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-associated-assets-response
                    'make-list-associated-assets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-assets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-assets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-summaries))
      (common-lisp:list
       (common-lisp:cons "assetSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-associated-assets-response))
   common-lisp:nil))
(common-lisp:deftype list-bulk-import-jobs-filter () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (list-bulk-import-jobs-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-bulk-import-jobs-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or list-bulk-import-jobs-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-bulk-import-jobs-request
                    'make-list-bulk-import-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bulk-import-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bulk-import-jobs-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bulk-import-jobs-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-bulk-import-jobs-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-bulk-import-jobs-response-"))
   (job-summaries (common-lisp:error ":jobsummaries is required") :type
    (common-lisp:or job-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-bulk-import-jobs-response
                    'make-list-bulk-import-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-bulk-import-jobs-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-bulk-import-jobs-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-summaries))
      (common-lisp:list
       (common-lisp:cons "jobSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-bulk-import-jobs-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-dashboards-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-dashboards-request-"))
   (project-id (common-lisp:error ":projectid is required") :type
    (common-lisp:or id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-dashboards-request 'make-list-dashboards-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboards-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboards-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboards-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-dashboards-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-dashboards-response-"))
   (dashboard-summaries (common-lisp:error ":dashboardsummaries is required")
    :type (common-lisp:or dashboard-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-dashboards-response 'make-list-dashboards-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboards-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboards-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-summaries))
      (common-lisp:list
       (common-lisp:cons "dashboardSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-dashboards-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-gateways-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-gateways-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-gateways-request 'make-list-gateways-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-gateways-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-gateways-response-"))
   (gateway-summaries (common-lisp:error ":gatewaysummaries is required") :type
    (common-lisp:or gateway-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-gateways-response 'make-list-gateways-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-summaries))
      (common-lisp:list
       (common-lisp:cons "gatewaySummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-gateways-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-portals-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-portals-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-portals-request 'make-list-portals-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-portals-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-portals-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-portals-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-portals-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-portals-response-"))
   (portal-summaries common-lisp:nil :type
    (common-lisp:or portal-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-portals-response 'make-list-portals-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-portals-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-portals-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-summaries))
      (common-lisp:list
       (common-lisp:cons "portalSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-portals-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-project-assets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-project-assets-request-"))
   (project-id (common-lisp:error ":projectid is required") :type
    (common-lisp:or id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-project-assets-request
                    'make-list-project-assets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-project-assets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-project-assets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-project-assets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-project-assets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-project-assets-response-"))
   (asset-ids (common-lisp:error ":assetids is required") :type
    (common-lisp:or asset-ids common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-project-assets-response
                    'make-list-project-assets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-project-assets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-project-assets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-ids))
      (common-lisp:list
       (common-lisp:cons "assetIds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-project-assets-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-projects-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-projects-request-"))
   (portal-id (common-lisp:error ":portalid is required") :type
    (common-lisp:or id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-projects-request 'make-list-projects-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-projects-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-projects-response-"))
   (project-summaries (common-lisp:error ":projectsummaries is required") :type
    (common-lisp:or project-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-projects-response 'make-list-projects-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-summaries))
      (common-lisp:list
       (common-lisp:cons "projectSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-projects-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-time-series-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-time-series-request-"))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (asset-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (alias-prefix common-lisp:nil :type
    (common-lisp:or property-alias common-lisp:null))
   (time-series-type common-lisp:nil :type
    (common-lisp:or list-time-series-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-time-series-request 'make-list-time-series-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-time-series-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-time-series-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-time-series-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-time-series-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-time-series-response-"))
   (time-series-summaries
    (common-lisp:error ":time-series-summaries is required") :type
    (common-lisp:or time-series-summaries common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-time-series-response
                    'make-list-time-series-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-time-series-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-time-series-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-series-summaries))
      (common-lisp:list
       (common-lisp:cons "TimeSeriesSummaries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "nextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-time-series-response))
   common-lisp:nil))
(common-lisp:deftype list-time-series-type () 'common-lisp:string)
(common-lisp:deftype logging-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (logging-options (:copier common-lisp:nil)
      (:conc-name "struct-shape-logging-options-"))
   (level (common-lisp:error ":level is required") :type
    (common-lisp:or logging-level common-lisp:null)))
 (common-lisp:export (common-lisp:list 'logging-options 'make-logging-options))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input logging-options))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input logging-options))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'level))
      (common-lisp:list
       (common-lisp:cons "level"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input logging-options))
   common-lisp:nil))
(common-lisp:deftype macro () 'common-lisp:string)
(common-lisp:deftype max-interpolated-results () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (measurement (:copier common-lisp:nil)
      (:conc-name "struct-shape-measurement-"))
   (processing-config common-lisp:nil :type
    (common-lisp:or measurement-processing-config common-lisp:null)))
 (common-lisp:export (common-lisp:list 'measurement 'make-measurement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input measurement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input measurement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-config))
      (common-lisp:list
       (common-lisp:cons "processingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input measurement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (measurement-processing-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-measurement-processing-config-"))
   (forwarding-config (common-lisp:error ":forwardingconfig is required") :type
    (common-lisp:or forwarding-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'measurement-processing-config
                    'make-measurement-processing-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          measurement-processing-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          measurement-processing-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forwarding-config))
      (common-lisp:list
       (common-lisp:cons "forwardingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          measurement-processing-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (metric (:copier common-lisp:nil) (:conc-name "struct-shape-metric-"))
   (expression (common-lisp:error ":expression is required") :type
    (common-lisp:or expression common-lisp:null))
   (variables (common-lisp:error ":variables is required") :type
    (common-lisp:or expression-variables common-lisp:null))
   (window (common-lisp:error ":window is required") :type
    (common-lisp:or metric-window common-lisp:null))
   (processing-config common-lisp:nil :type
    (common-lisp:or metric-processing-config common-lisp:null)))
 (common-lisp:export (common-lisp:list 'metric 'make-metric))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variables))
      (common-lisp:list
       (common-lisp:cons "variables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'window))
      (common-lisp:list
       (common-lisp:cons "window"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-config))
      (common-lisp:list
       (common-lisp:cons "processingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (metric-processing-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-processing-config-"))
   (compute-location (common-lisp:error ":computelocation is required") :type
    (common-lisp:or compute-location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'metric-processing-config 'make-metric-processing-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          metric-processing-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          metric-processing-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-location))
      (common-lisp:list
       (common-lisp:cons "computeLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          metric-processing-config))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (metric-window (:copier common-lisp:nil)
      (:conc-name "struct-shape-metric-window-"))
   (tumbling common-lisp:nil :type
    (common-lisp:or tumbling-window common-lisp:null)))
 (common-lisp:export (common-lisp:list 'metric-window 'make-metric-window))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input metric-window))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input metric-window))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tumbling))
      (common-lisp:list
       (common-lisp:cons "tumbling"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input metric-window))
   common-lisp:nil))
(common-lisp:deftype monitor-error-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (monitor-error-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-monitor-error-details-"))
   (code common-lisp:nil :type
    (common-lisp:or monitor-error-code common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or monitor-error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'monitor-error-details 'make-monitor-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          monitor-error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          monitor-error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          monitor-error-details))
   common-lisp:nil))
(common-lisp:deftype monitor-error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (multi-layer-storage (:copier common-lisp:nil)
      (:conc-name "struct-shape-multi-layer-storage-"))
   (customer-managed-s3storage
    (common-lisp:error ":customermanageds3storage is required") :type
    (common-lisp:or customer-managed-s3storage common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'multi-layer-storage 'make-multi-layer-storage))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input multi-layer-storage))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input multi-layer-storage))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'customer-managed-s3storage))
      (common-lisp:list
       (common-lisp:cons "customerManagedS3Storage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input multi-layer-storage))
   common-lisp:nil))
(common-lisp:deftype name () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype number-of-days () 'common-lisp:integer)
(common-lisp:deftype offset () 'common-lisp:string)
(common-lisp:deftype offset-in-nanos () 'common-lisp:integer)
(common-lisp:deftype permission () 'common-lisp:string)
(common-lisp:deftype portal-client-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (portal-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-portal-resource-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'portal-resource 'make-portal-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input portal-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input portal-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input portal-resource))
   common-lisp:nil))
(common-lisp:deftype portal-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (portal-status (:copier common-lisp:nil)
      (:conc-name "struct-shape-portal-status-"))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or portal-state common-lisp:null))
   (error common-lisp:nil :type
    (common-lisp:or monitor-error-details common-lisp:null)))
 (common-lisp:export (common-lisp:list 'portal-status 'make-portal-status))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input portal-status))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input portal-status))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input portal-status))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype portal-summaries ()
   '(trivial-types:proper-list portal-summary))
 (common-lisp:defun |make-portal-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list portal-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (portal-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-portal-summary-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (start-url (common-lisp:error ":starturl is required") :type
    (common-lisp:or url common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-update-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or portal-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'portal-summary 'make-portal-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input portal-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input portal-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-url))
      (common-lisp:list
       (common-lisp:cons "startUrl"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input portal-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (project-resource (:copier common-lisp:nil)
      (:conc-name "struct-shape-project-resource-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'project-resource 'make-project-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project-resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project-resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project-resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype project-summaries ()
   '(trivial-types:proper-list project-summary))
 (common-lisp:defun |make-project-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list project-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (project-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-project-summary-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-update-date common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'project-summary 'make-project-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input project-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input project-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date))
      (common-lisp:list
       (common-lisp:cons "creationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-update-date))
      (common-lisp:list
       (common-lisp:cons "lastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input project-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (property (:copier common-lisp:nil) (:conc-name "struct-shape-property-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or id common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or name common-lisp:null))
   (alias common-lisp:nil :type
    (common-lisp:or property-alias common-lisp:null))
   (notification common-lisp:nil :type
    (common-lisp:or property-notification common-lisp:null))
   (data-type (common-lisp:error ":datatype is required") :type
    (common-lisp:or property-data-type common-lisp:null))
   (unit common-lisp:nil :type (common-lisp:or property-unit common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or property-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'property 'make-property))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input property))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input property))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'notification))
      (common-lisp:list
       (common-lisp:cons "notification"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unit))
      (common-lisp:list
       (common-lisp:cons "unit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input property))
   common-lisp:nil))
(common-lisp:deftype property-alias () 'common-lisp:string)
(common-lisp:deftype property-data-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (property-notification (:copier common-lisp:nil)
      (:conc-name "struct-shape-property-notification-"))
   (topic (common-lisp:error ":topic is required") :type
    (common-lisp:or property-notification-topic common-lisp:null))
   (state (common-lisp:error ":state is required") :type
    (common-lisp:or property-notification-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'property-notification 'make-property-notification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          property-notification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          property-notification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'topic))
      (common-lisp:list
       (common-lisp:cons "topic"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "state"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          property-notification))
   common-lisp:nil))
(common-lisp:deftype property-notification-state () 'common-lisp:string)
(common-lisp:deftype property-notification-topic () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (property-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-property-type-"))
   (attribute common-lisp:nil :type
    (common-lisp:or attribute common-lisp:null))
   (measurement common-lisp:nil :type
    (common-lisp:or measurement common-lisp:null))
   (transform common-lisp:nil :type
    (common-lisp:or transform common-lisp:null))
   (metric common-lisp:nil :type (common-lisp:or metric common-lisp:null)))
 (common-lisp:export (common-lisp:list 'property-type 'make-property-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input property-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input property-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attribute))
      (common-lisp:list
       (common-lisp:cons "attribute"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'measurement))
      (common-lisp:list
       (common-lisp:cons "measurement"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transform))
      (common-lisp:list
       (common-lisp:cons "transform"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'metric))
      (common-lisp:list
       (common-lisp:cons "metric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input property-type))
   common-lisp:nil))
(common-lisp:deftype property-unit () 'common-lisp:string)
(common-lisp:deftype property-value-boolean-value () 'common-lisp:boolean)
(common-lisp:deftype property-value-double-value () 'common-lisp:double-float)
(common-lisp:deftype property-value-integer-value () 'common-lisp:integer)
(common-lisp:deftype property-value-string-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype put-asset-property-value-entries ()
   '(trivial-types:proper-list put-asset-property-value-entry))
 (common-lisp:defun |make-put-asset-property-value-entries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            put-asset-property-value-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (put-asset-property-value-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-asset-property-value-entry-"))
   (entry-id (common-lisp:error ":entryid is required") :type
    (common-lisp:or entry-id common-lisp:null))
   (asset-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (property-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (property-alias common-lisp:nil :type
    (common-lisp:or asset-property-alias common-lisp:null))
   (property-values (common-lisp:error ":propertyvalues is required") :type
    (common-lisp:or asset-property-values common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-asset-property-value-entry
                    'make-put-asset-property-value-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-asset-property-value-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-asset-property-value-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entry-id))
      (common-lisp:list
       (common-lisp:cons "entryId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-id))
      (common-lisp:list
       (common-lisp:cons "propertyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-alias))
      (common-lisp:list
       (common-lisp:cons "propertyAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-values))
      (common-lisp:list
       (common-lisp:cons "propertyValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-asset-property-value-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-default-encryption-configuration-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-put-default-encryption-configuration-request-"))
   (encryption-type (common-lisp:error ":encryptiontype is required") :type
    (common-lisp:or encryption-type common-lisp:null))
   (kms-key-id common-lisp:nil :type
    (common-lisp:or kms-key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-default-encryption-configuration-request
                    'make-put-default-encryption-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-default-encryption-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-default-encryption-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "encryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-id))
      (common-lisp:list
       (common-lisp:cons "kmsKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-default-encryption-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-default-encryption-configuration-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-put-default-encryption-configuration-response-"))
   (encryption-type (common-lisp:error ":encryptiontype is required") :type
    (common-lisp:or encryption-type common-lisp:null))
   (kms-key-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (configuration-status (common-lisp:error ":configurationstatus is required")
    :type (common-lisp:or configuration-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-default-encryption-configuration-response
                    'make-put-default-encryption-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-default-encryption-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-default-encryption-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-type))
      (common-lisp:list
       (common-lisp:cons "encryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "kmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-status))
      (common-lisp:list
       (common-lisp:cons "configurationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-default-encryption-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-logging-options-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-logging-options-request-"))
   (logging-options (common-lisp:error ":loggingoptions is required") :type
    (common-lisp:or logging-options common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-logging-options-request
                    'make-put-logging-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-options-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-options-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'logging-options))
      (common-lisp:list
       (common-lisp:cons "loggingOptions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-options-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-logging-options-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-logging-options-response-")))
 (common-lisp:export
  (common-lisp:list 'put-logging-options-response
                    'make-put-logging-options-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-options-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-logging-options-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-storage-configuration-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-storage-configuration-request-"))
   (storage-type (common-lisp:error ":storagetype is required") :type
    (common-lisp:or storage-type common-lisp:null))
   (multi-layer-storage common-lisp:nil :type
    (common-lisp:or multi-layer-storage common-lisp:null))
   (disassociated-data-storage common-lisp:nil :type
    (common-lisp:or disassociated-data-storage-state common-lisp:null))
   (retention-period common-lisp:nil :type
    (common-lisp:or retention-period common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-storage-configuration-request
                    'make-put-storage-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "storageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-layer-storage))
      (common-lisp:list
       (common-lisp:cons "multiLayerStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disassociated-data-storage))
      (common-lisp:list
       (common-lisp:cons "disassociatedDataStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "retentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-storage-configuration-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-storage-configuration-response-"))
   (storage-type (common-lisp:error ":storagetype is required") :type
    (common-lisp:or storage-type common-lisp:null))
   (multi-layer-storage common-lisp:nil :type
    (common-lisp:or multi-layer-storage common-lisp:null))
   (disassociated-data-storage common-lisp:nil :type
    (common-lisp:or disassociated-data-storage-state common-lisp:null))
   (retention-period common-lisp:nil :type
    (common-lisp:or retention-period common-lisp:null))
   (configuration-status (common-lisp:error ":configurationstatus is required")
    :type (common-lisp:or configuration-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-storage-configuration-response
                    'make-put-storage-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'storage-type))
      (common-lisp:list
       (common-lisp:cons "storageType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'multi-layer-storage))
      (common-lisp:list
       (common-lisp:cons "multiLayerStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'disassociated-data-storage))
      (common-lisp:list
       (common-lisp:cons "disassociatedDataStorage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'retention-period))
      (common-lisp:list
       (common-lisp:cons "retentionPeriod"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'configuration-status))
      (common-lisp:list
       (common-lisp:cons "configurationStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-storage-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype qualities () '(trivial-types:proper-list quality))
 (common-lisp:defun |make-qualities|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list quality))
   aws-sdk/generator/shape::members))
(common-lisp:deftype quality () 'common-lisp:string)
(common-lisp:deftype resolution () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resource (:copier common-lisp:nil) (:conc-name "struct-shape-resource-"))
   (portal common-lisp:nil :type
    (common-lisp:or portal-resource common-lisp:null))
   (project common-lisp:nil :type
    (common-lisp:or project-resource common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource 'make-resource))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input resource))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal))
      (common-lisp:list
       (common-lisp:cons "portal"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project))
      (common-lisp:list
       (common-lisp:cons "project"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input resource))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-already-exists-exception
     (iotsitewise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-already-exists-exception-message)
      (resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-already-exists-exception-resource-id)
      (resource-arn :initarg :resource-arn :initform common-lisp:nil :reader
       resource-already-exists-exception-resource-arn)))
 (common-lisp:export
  (common-lisp:list 'resource-already-exists-exception
                    'resource-already-exists-exception-message
                    'resource-already-exists-exception-resource-id
                    'resource-already-exists-exception-resource-arn)))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (iotsitewise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (retention-period (:copier common-lisp:nil)
      (:conc-name "struct-shape-retention-period-"))
   (number-of-days common-lisp:nil :type
    (common-lisp:or number-of-days common-lisp:null))
   (unlimited common-lisp:nil :type
    (common-lisp:or unlimited common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'retention-period 'make-retention-period))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input retention-period))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input retention-period))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'number-of-days))
      (common-lisp:list
       (common-lisp:cons "numberOfDays"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'unlimited))
      (common-lisp:list
       (common-lisp:cons "unlimited"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input retention-period))
   common-lisp:nil))
(common-lisp:deftype ssoapplication-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-unavailable-exception
     (iotsitewise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-unavailable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'service-unavailable-exception-message)))
(common-lisp:deftype storage-type () 'common-lisp:string)
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-map () 'common-lisp:hash-table)
 (common-lisp:defun |make-tag-map| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (iotsitewise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (time-in-nanos (:copier common-lisp:nil)
      (:conc-name "struct-shape-time-in-nanos-"))
   (time-in-seconds (common-lisp:error ":timeinseconds is required") :type
    (common-lisp:or time-in-seconds common-lisp:null))
   (offset-in-nanos common-lisp:nil :type
    (common-lisp:or offset-in-nanos common-lisp:null)))
 (common-lisp:export (common-lisp:list 'time-in-nanos 'make-time-in-nanos))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-in-nanos))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-in-nanos))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-in-seconds))
      (common-lisp:list
       (common-lisp:cons "timeInSeconds"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset-in-nanos))
      (common-lisp:list
       (common-lisp:cons "offsetInNanos"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-in-nanos))
   common-lisp:nil))
(common-lisp:deftype time-in-seconds () 'common-lisp:integer)
(common-lisp:deftype time-ordering () 'common-lisp:string)
(common-lisp:deftype time-series-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype time-series-summaries ()
   '(trivial-types:proper-list time-series-summary))
 (common-lisp:defun |make-time-series-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list time-series-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (time-series-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-time-series-summary-"))
   (asset-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (property-id common-lisp:nil :type (common-lisp:or id common-lisp:null))
   (alias common-lisp:nil :type
    (common-lisp:or property-alias common-lisp:null))
   (time-series-id (common-lisp:error ":timeseriesid is required") :type
    (common-lisp:or time-series-id common-lisp:null))
   (data-type (common-lisp:error ":datatype is required") :type
    (common-lisp:or property-data-type common-lisp:null))
   (data-type-spec common-lisp:nil :type
    (common-lisp:or name common-lisp:null))
   (time-series-creation-date
    (common-lisp:error ":timeseriescreationdate is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (time-series-last-update-date
    (common-lisp:error ":timeserieslastupdatedate is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (time-series-arn (common-lisp:error ":timeseriesarn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'time-series-summary 'make-time-series-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input time-series-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input time-series-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-id))
      (common-lisp:list
       (common-lisp:cons "assetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-id))
      (common-lisp:list
       (common-lisp:cons "propertyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alias))
      (common-lisp:list
       (common-lisp:cons "alias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-series-id))
      (common-lisp:list
       (common-lisp:cons "timeSeriesId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type))
      (common-lisp:list
       (common-lisp:cons "dataType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-type-spec))
      (common-lisp:list
       (common-lisp:cons "dataTypeSpec"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-series-creation-date))
      (common-lisp:list
       (common-lisp:cons "timeSeriesCreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'time-series-last-update-date))
      (common-lisp:list
       (common-lisp:cons "timeSeriesLastUpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'time-series-arn))
      (common-lisp:list
       (common-lisp:cons "timeSeriesArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input time-series-summary))
   common-lisp:nil))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype timestamps () '(trivial-types:proper-list time-in-nanos))
 (common-lisp:defun |make-timestamps|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list time-in-nanos))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition too-many-tags-exception
     (iotsitewise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       too-many-tags-exception-message)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       too-many-tags-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'too-many-tags-exception-message
                    'too-many-tags-exception-resource-name)))
(common-lisp:progn
 (common-lisp:defstruct
     (transform (:copier common-lisp:nil)
      (:conc-name "struct-shape-transform-"))
   (expression (common-lisp:error ":expression is required") :type
    (common-lisp:or expression common-lisp:null))
   (variables (common-lisp:error ":variables is required") :type
    (common-lisp:or expression-variables common-lisp:null))
   (processing-config common-lisp:nil :type
    (common-lisp:or transform-processing-config common-lisp:null)))
 (common-lisp:export (common-lisp:list 'transform 'make-transform))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input transform))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input transform))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expression))
      (common-lisp:list
       (common-lisp:cons "expression"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'variables))
      (common-lisp:list
       (common-lisp:cons "variables"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'processing-config))
      (common-lisp:list
       (common-lisp:cons "processingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input transform))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (transform-processing-config (:copier common-lisp:nil)
      (:conc-name "struct-shape-transform-processing-config-"))
   (compute-location (common-lisp:error ":computelocation is required") :type
    (common-lisp:or compute-location common-lisp:null))
   (forwarding-config common-lisp:nil :type
    (common-lisp:or forwarding-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transform-processing-config
                    'make-transform-processing-config))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          transform-processing-config))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          transform-processing-config))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'compute-location))
      (common-lisp:list
       (common-lisp:cons "computeLocation"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'forwarding-config))
      (common-lisp:list
       (common-lisp:cons "forwardingConfig"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          transform-processing-config))
   common-lisp:nil))
(common-lisp:deftype traversal-direction () 'common-lisp:string)
(common-lisp:deftype traversal-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (tumbling-window (:copier common-lisp:nil)
      (:conc-name "struct-shape-tumbling-window-"))
   (interval (common-lisp:error ":interval is required") :type
    (common-lisp:or interval common-lisp:null))
   (offset common-lisp:nil :type (common-lisp:or offset common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tumbling-window 'make-tumbling-window))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tumbling-window))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tumbling-window))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'interval))
      (common-lisp:list
       (common-lisp:cons "interval"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offset))
      (common-lisp:list
       (common-lisp:cons "offset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tumbling-window))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition unauthorized-exception
     (iotsitewise-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unauthorized-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unauthorized-exception 'unauthorized-exception-message)))
(common-lisp:deftype unlimited () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resourcearn is required") :type
    (common-lisp:or amazon-resource-name common-lisp:null))
   (tag-keys (common-lisp:error ":tagkeys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-access-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-access-policy-request-"))
   (access-policy-id (common-lisp:error ":accesspolicyid is required") :type
    (common-lisp:or id common-lisp:null))
   (access-policy-identity
    (common-lisp:error ":accesspolicyidentity is required") :type
    (common-lisp:or identity common-lisp:null))
   (access-policy-resource
    (common-lisp:error ":accesspolicyresource is required") :type
    (common-lisp:or resource common-lisp:null))
   (access-policy-permission
    (common-lisp:error ":accesspolicypermission is required") :type
    (common-lisp:or permission common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-access-policy-request
                    'make-update-access-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-access-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-access-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-policy-identity))
      (common-lisp:list
       (common-lisp:cons "accessPolicyIdentity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-policy-resource))
      (common-lisp:list
       (common-lisp:cons "accessPolicyResource"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-policy-permission))
      (common-lisp:list
       (common-lisp:cons "accessPolicyPermission"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-access-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-access-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-access-policy-response-")))
 (common-lisp:export
  (common-lisp:list 'update-access-policy-response
                    'make-update-access-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-access-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-access-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-access-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-asset-model-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-asset-model-request-"))
   (asset-model-id (common-lisp:error ":assetmodelid is required") :type
    (common-lisp:or id common-lisp:null))
   (asset-model-name (common-lisp:error ":assetmodelname is required") :type
    (common-lisp:or name common-lisp:null))
   (asset-model-description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (asset-model-properties common-lisp:nil :type
    (common-lisp:or asset-model-properties common-lisp:null))
   (asset-model-hierarchies common-lisp:nil :type
    (common-lisp:or asset-model-hierarchies common-lisp:null))
   (asset-model-composite-models common-lisp:nil :type
    (common-lisp:or asset-model-composite-models common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-asset-model-request
                    'make-update-asset-model-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-model-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-model-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-name))
      (common-lisp:list
       (common-lisp:cons "assetModelName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-description))
      (common-lisp:list
       (common-lisp:cons "assetModelDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-properties))
      (common-lisp:list
       (common-lisp:cons "assetModelProperties"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-hierarchies))
      (common-lisp:list
       (common-lisp:cons "assetModelHierarchies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'asset-model-composite-models))
      (common-lisp:list
       (common-lisp:cons "assetModelCompositeModels"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-model-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-asset-model-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-asset-model-response-"))
   (asset-model-status (common-lisp:error ":assetmodelstatus is required")
    :type (common-lisp:or asset-model-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-asset-model-response
                    'make-update-asset-model-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-model-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-model-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-model-status))
      (common-lisp:list
       (common-lisp:cons "assetModelStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-model-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-asset-property-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-asset-property-request-"))
   (asset-id (common-lisp:error ":assetid is required") :type
    (common-lisp:or id common-lisp:null))
   (property-id (common-lisp:error ":propertyid is required") :type
    (common-lisp:or id common-lisp:null))
   (property-alias common-lisp:nil :type
    (common-lisp:or property-alias common-lisp:null))
   (property-notification-state common-lisp:nil :type
    (common-lisp:or property-notification-state common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (property-unit common-lisp:nil :type
    (common-lisp:or property-unit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-asset-property-request
                    'make-update-asset-property-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-property-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-property-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-alias))
      (common-lisp:list
       (common-lisp:cons "propertyAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'property-notification-state))
      (common-lisp:list
       (common-lisp:cons "propertyNotificationState"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-unit))
      (common-lisp:list
       (common-lisp:cons "propertyUnit"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-property-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-asset-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-asset-request-"))
   (asset-id (common-lisp:error ":assetid is required") :type
    (common-lisp:or id common-lisp:null))
   (asset-name (common-lisp:error ":assetname is required") :type
    (common-lisp:or name common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (asset-description common-lisp:nil :type
    (common-lisp:or description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-asset-request 'make-update-asset-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-asset-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-asset-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-name))
      (common-lisp:list
       (common-lisp:cons "assetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-description))
      (common-lisp:list
       (common-lisp:cons "assetDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-asset-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-asset-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-asset-response-"))
   (asset-status (common-lisp:error ":assetstatus is required") :type
    (common-lisp:or asset-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-asset-response 'make-update-asset-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asset-status))
      (common-lisp:list
       (common-lisp:cons "assetStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-asset-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-dashboard-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-dashboard-request-"))
   (dashboard-id (common-lisp:error ":dashboardid is required") :type
    (common-lisp:or id common-lisp:null))
   (dashboard-name (common-lisp:error ":dashboardname is required") :type
    (common-lisp:or name common-lisp:null))
   (dashboard-description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (dashboard-definition (common-lisp:error ":dashboarddefinition is required")
    :type (common-lisp:or dashboard-definition common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-dashboard-request 'make-update-dashboard-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dashboard-name))
      (common-lisp:list
       (common-lisp:cons "dashboardName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashboard-description))
      (common-lisp:list
       (common-lisp:cons "dashboardDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dashboard-definition))
      (common-lisp:list
       (common-lisp:cons "dashboardDefinition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-dashboard-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-dashboard-response-")))
 (common-lisp:export
  (common-lisp:list 'update-dashboard-response
                    'make-update-dashboard-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-dashboard-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-gateway-capability-configuration-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-gateway-capability-configuration-request-"))
   (gateway-id (common-lisp:error ":gatewayid is required") :type
    (common-lisp:or id common-lisp:null))
   (capability-namespace (common-lisp:error ":capabilitynamespace is required")
    :type (common-lisp:or capability-namespace common-lisp:null))
   (capability-configuration
    (common-lisp:error ":capabilityconfiguration is required") :type
    (common-lisp:or capability-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-gateway-capability-configuration-request
                    'make-update-gateway-capability-configuration-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-capability-configuration-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-capability-configuration-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capability-namespace))
      (common-lisp:list
       (common-lisp:cons "capabilityNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capability-configuration))
      (common-lisp:list
       (common-lisp:cons "capabilityConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-capability-configuration-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-gateway-capability-configuration-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-gateway-capability-configuration-response-"))
   (capability-namespace (common-lisp:error ":capabilitynamespace is required")
    :type (common-lisp:or capability-namespace common-lisp:null))
   (capability-sync-status
    (common-lisp:error ":capabilitysyncstatus is required") :type
    (common-lisp:or capability-sync-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-gateway-capability-configuration-response
                    'make-update-gateway-capability-configuration-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-capability-configuration-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-capability-configuration-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capability-namespace))
      (common-lisp:list
       (common-lisp:cons "capabilityNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'capability-sync-status))
      (common-lisp:list
       (common-lisp:cons "capabilitySyncStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-capability-configuration-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-gateway-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-gateway-request-"))
   (gateway-id (common-lisp:error ":gatewayid is required") :type
    (common-lisp:or id common-lisp:null))
   (gateway-name (common-lisp:error ":gatewayname is required") :type
    (common-lisp:or name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-gateway-request 'make-update-gateway-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'gateway-name))
      (common-lisp:list
       (common-lisp:cons "gatewayName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-gateway-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-portal-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-portal-request-"))
   (portal-id (common-lisp:error ":portalid is required") :type
    (common-lisp:or id common-lisp:null))
   (portal-name (common-lisp:error ":portalname is required") :type
    (common-lisp:or name common-lisp:null))
   (portal-description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (portal-contact-email (common-lisp:error ":portalcontactemail is required")
    :type (common-lisp:or email common-lisp:null))
   (portal-logo-image common-lisp:nil :type
    (common-lisp:or image common-lisp:null))
   (role-arn (common-lisp:error ":rolearn is required") :type
    (common-lisp:or arn common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null))
   (notification-sender-email common-lisp:nil :type
    (common-lisp:or email common-lisp:null))
   (alarms common-lisp:nil :type (common-lisp:or alarms common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-portal-request 'make-update-portal-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-portal-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-portal-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-name))
      (common-lisp:list
       (common-lisp:cons "portalName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-description))
      (common-lisp:list
       (common-lisp:cons "portalDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'portal-contact-email))
      (common-lisp:list
       (common-lisp:cons "portalContactEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-logo-image))
      (common-lisp:list
       (common-lisp:cons "portalLogoImage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "roleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'notification-sender-email))
      (common-lisp:list
       (common-lisp:cons "notificationSenderEmail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'alarms))
      (common-lisp:list
       (common-lisp:cons "alarms"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-portal-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-portal-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-portal-response-"))
   (portal-status (common-lisp:error ":portalstatus is required") :type
    (common-lisp:or portal-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-portal-response 'make-update-portal-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-portal-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-portal-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'portal-status))
      (common-lisp:list
       (common-lisp:cons "portalStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-portal-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-project-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-project-request-"))
   (project-id (common-lisp:error ":projectid is required") :type
    (common-lisp:or id common-lisp:null))
   (project-name (common-lisp:error ":projectname is required") :type
    (common-lisp:or name common-lisp:null))
   (project-description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (client-token common-lisp:nil :type
    (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-project-request 'make-update-project-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-project-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-project-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-name))
      (common-lisp:list
       (common-lisp:cons "projectName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'project-description))
      (common-lisp:list
       (common-lisp:cons "projectDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-token))
      (common-lisp:list
       (common-lisp:cons "clientToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-project-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-project-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-project-response-")))
 (common-lisp:export
  (common-lisp:list 'update-project-response 'make-update-project-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-project-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-project-response))
   common-lisp:nil))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (user-identity (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-identity-"))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or identity-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user-identity 'make-user-identity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-identity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-identity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-identity))
   common-lisp:nil))
(common-lisp:deftype variable-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (variable-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-variable-value-"))
   (property-id (common-lisp:error ":propertyid is required") :type
    (common-lisp:or macro common-lisp:null))
   (hierarchy-id common-lisp:nil :type
    (common-lisp:or macro common-lisp:null)))
 (common-lisp:export (common-lisp:list 'variable-value 'make-variable-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input variable-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input variable-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'property-id))
      (common-lisp:list
       (common-lisp:cons "propertyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hierarchy-id))
      (common-lisp:list
       (common-lisp:cons "hierarchyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input variable-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (variant (:copier common-lisp:nil) (:conc-name "struct-shape-variant-"))
   (string-value common-lisp:nil :type
    (common-lisp:or property-value-string-value common-lisp:null))
   (integer-value common-lisp:nil :type
    (common-lisp:or property-value-integer-value common-lisp:null))
   (double-value common-lisp:nil :type
    (common-lisp:or property-value-double-value common-lisp:null))
   (boolean-value common-lisp:nil :type
    (common-lisp:or property-value-boolean-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'variant 'make-variant))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input variant))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input variant))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'string-value))
      (common-lisp:list
       (common-lisp:cons "stringValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'integer-value))
      (common-lisp:list
       (common-lisp:cons "integerValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'double-value))
      (common-lisp:list
       (common-lisp:cons "doubleValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'boolean-value))
      (common-lisp:list
       (common-lisp:cons "booleanValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input variant))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun associate-assets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id hierarchy-id child-asset-id
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable asset-id hierarchy-id child-asset-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-associate-assets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assets/~A/associate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-id))))
                                                        "AssociateAssets"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-assets))
(common-lisp:progn
 (common-lisp:defun associate-time-series-to-asset-property
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias asset-id property-id client-token)
   (common-lisp:declare
    (common-lisp:ignorable alias asset-id property-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-time-series-to-asset-property-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/timeseries/associate/"
                                                        "AssociateTimeSeriesToAssetProperty"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'associate-time-series-to-asset-property))
(common-lisp:progn
 (common-lisp:defun batch-associate-project-assets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-id asset-ids client-token)
   (common-lisp:declare
    (common-lisp:ignorable project-id asset-ids client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-associate-project-assets-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A/assets/associate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-id))))
                                                        "BatchAssociateProjectAssets"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-associate-project-assets))
(common-lisp:progn
 (common-lisp:defun batch-disassociate-project-assets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-id asset-ids client-token)
   (common-lisp:declare
    (common-lisp:ignorable project-id asset-ids client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-disassociate-project-assets-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A/assets/disassociate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-id))))
                                                        "BatchDisassociateProjectAssets"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-disassociate-project-assets))
(common-lisp:progn
 (common-lisp:defun batch-get-asset-property-aggregates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key entries next-token max-results)
   (common-lisp:declare (common-lisp:ignorable entries next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-asset-property-aggregates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/properties/batch/aggregates"
                                                        "BatchGetAssetPropertyAggregates"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-asset-property-aggregates))
(common-lisp:progn
 (common-lisp:defun batch-get-asset-property-value
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key entries next-token)
   (common-lisp:declare (common-lisp:ignorable entries next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-asset-property-value-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/properties/batch/latest"
                                                        "BatchGetAssetPropertyValue"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-asset-property-value))
(common-lisp:progn
 (common-lisp:defun batch-get-asset-property-value-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key entries next-token max-results)
   (common-lisp:declare (common-lisp:ignorable entries next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-get-asset-property-value-history-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/properties/batch/history"
                                                        "BatchGetAssetPropertyValueHistory"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-get-asset-property-value-history))
(common-lisp:progn
 (common-lisp:defun batch-put-asset-property-value
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key entries)
   (common-lisp:declare (common-lisp:ignorable entries))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-batch-put-asset-property-value-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/properties"
                                                        "BatchPutAssetPropertyValue"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-put-asset-property-value))
(common-lisp:progn
 (common-lisp:defun create-access-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-policy-identity
                     access-policy-resource access-policy-permission
                     client-token tags)
   (common-lisp:declare
    (common-lisp:ignorable access-policy-identity access-policy-resource
     access-policy-permission client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-access-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/access-policies"
                                                        "CreateAccessPolicy"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-access-policy))
(common-lisp:progn
 (common-lisp:defun create-asset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-name asset-model-id client-token
                     tags asset-description)
   (common-lisp:declare
    (common-lisp:ignorable asset-name asset-model-id client-token tags
     asset-description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-asset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/assets" "CreateAsset"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-asset))
(common-lisp:progn
 (common-lisp:defun create-asset-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-model-name asset-model-description
                     asset-model-properties asset-model-hierarchies
                     asset-model-composite-models client-token tags)
   (common-lisp:declare
    (common-lisp:ignorable asset-model-name asset-model-description
     asset-model-properties asset-model-hierarchies
     asset-model-composite-models client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-asset-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/asset-models"
                                                        "CreateAssetModel"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-asset-model))
(common-lisp:progn
 (common-lisp:defun create-bulk-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name job-role-arn files
                     error-report-location job-configuration)
   (common-lisp:declare
    (common-lisp:ignorable job-name job-role-arn files error-report-location
     job-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-bulk-import-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/jobs"
                                                        "CreateBulkImportJob"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-bulk-import-job))
(common-lisp:progn
 (common-lisp:defun create-dashboard
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-id dashboard-name
                     dashboard-description dashboard-definition client-token
                     tags)
   (common-lisp:declare
    (common-lisp:ignorable project-id dashboard-name dashboard-description
     dashboard-definition client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dashboard-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/dashboards"
                                                        "CreateDashboard"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-dashboard))
(common-lisp:progn
 (common-lisp:defun create-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-name gateway-platform tags)
   (common-lisp:declare
    (common-lisp:ignorable gateway-name gateway-platform tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/20200301/gateways"
                                                        "CreateGateway"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-gateway))
(common-lisp:progn
 (common-lisp:defun create-portal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-name portal-description
                     portal-contact-email client-token portal-logo-image-file
                     role-arn tags portal-auth-mode notification-sender-email
                     alarms)
   (common-lisp:declare
    (common-lisp:ignorable portal-name portal-description portal-contact-email
     client-token portal-logo-image-file role-arn tags portal-auth-mode
     notification-sender-email alarms))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-portal-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/portals"
                                                        "CreatePortal"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-portal))
(common-lisp:progn
 (common-lisp:defun create-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-id project-name
                     project-description client-token tags)
   (common-lisp:declare
    (common-lisp:ignorable portal-id project-name project-description
     client-token tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/projects"
                                                        "CreateProject"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-project))
(common-lisp:progn
 (common-lisp:defun delete-access-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-policy-id client-token)
   (common-lisp:declare (common-lisp:ignorable access-policy-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-access-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/access-policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'access-policy-id))))
                                                        "DeleteAccessPolicy"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-access-policy))
(common-lisp:progn
 (common-lisp:defun delete-asset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id client-token)
   (common-lisp:declare (common-lisp:ignorable asset-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-asset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-id))))
                                                        "DeleteAsset"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-asset))
(common-lisp:progn
 (common-lisp:defun delete-asset-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-model-id client-token)
   (common-lisp:declare (common-lisp:ignorable asset-model-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-asset-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/asset-models/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-model-id))))
                                                        "DeleteAssetModel"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-asset-model))
(common-lisp:progn
 (common-lisp:defun delete-dashboard
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dashboard-id client-token)
   (common-lisp:declare (common-lisp:ignorable dashboard-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dashboard-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/dashboards/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dashboard-id))))
                                                        "DeleteDashboard"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-dashboard))
(common-lisp:progn
 (common-lisp:defun delete-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-id)
   (common-lisp:declare (common-lisp:ignorable gateway-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/20200301/gateways/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'gateway-id))))
                                                        "DeleteGateway"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-gateway))
(common-lisp:progn
 (common-lisp:defun delete-portal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-id client-token)
   (common-lisp:declare (common-lisp:ignorable portal-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-portal-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'portal-id))))
                                                        "DeletePortal"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-portal))
(common-lisp:progn
 (common-lisp:defun delete-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-id client-token)
   (common-lisp:declare (common-lisp:ignorable project-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-id))))
                                                        "DeleteProject"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-project))
(common-lisp:progn
 (common-lisp:defun delete-time-series
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias asset-id property-id client-token)
   (common-lisp:declare
    (common-lisp:ignorable alias asset-id property-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-time-series-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/timeseries/delete/"
                                                        "DeleteTimeSeries"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-time-series))
(common-lisp:progn
 (common-lisp:defun describe-access-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-policy-id)
   (common-lisp:declare (common-lisp:ignorable access-policy-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-access-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/access-policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'access-policy-id))))
                                                        "DescribeAccessPolicy"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-access-policy))
(common-lisp:progn
 (common-lisp:defun describe-asset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id exclude-properties)
   (common-lisp:declare (common-lisp:ignorable asset-id exclude-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-asset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-id))))
                                                        "DescribeAsset"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-asset))
(common-lisp:progn
 (common-lisp:defun describe-asset-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-model-id exclude-properties)
   (common-lisp:declare
    (common-lisp:ignorable asset-model-id exclude-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-asset-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/asset-models/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-model-id))))
                                                        "DescribeAssetModel"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-asset-model))
(common-lisp:progn
 (common-lisp:defun describe-asset-property
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id property-id)
   (common-lisp:declare (common-lisp:ignorable asset-id property-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-asset-property-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assets/~A/properties/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'property-id))))
                                                        "DescribeAssetProperty"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-asset-property))
(common-lisp:progn
 (common-lisp:defun describe-bulk-import-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-bulk-import-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/jobs/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'job-id))))
                                                        "DescribeBulkImportJob"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-bulk-import-job))
(common-lisp:progn
 (common-lisp:defun describe-dashboard
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dashboard-id)
   (common-lisp:declare (common-lisp:ignorable dashboard-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-dashboard-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/dashboards/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dashboard-id))))
                                                        "DescribeDashboard"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-dashboard))
(common-lisp:progn
 (common-lisp:defun describe-default-encryption-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iotsitewise-request :method "GET" :path
                                "/configuration/account/encryption" :protocol
                                :rest-json :operation
                                "DescribeDefaultEncryptionConfiguration"
                                :params
                                `(("Action"
                                   ,@"DescribeDefaultEncryptionConfiguration")
                                  ("Version" ,@"2019-12-02"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-default-encryption-configuration))
(common-lisp:progn
 (common-lisp:defun describe-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-id)
   (common-lisp:declare (common-lisp:ignorable gateway-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/20200301/gateways/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'gateway-id))))
                                                        "DescribeGateway"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-gateway))
(common-lisp:progn
 (common-lisp:defun describe-gateway-capability-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-id capability-namespace)
   (common-lisp:declare
    (common-lisp:ignorable gateway-id capability-namespace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-gateway-capability-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/20200301/gateways/~A/capability/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'gateway-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'capability-namespace))))
                                                        "DescribeGatewayCapabilityConfiguration"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-gateway-capability-configuration))
(common-lisp:progn
 (common-lisp:defun describe-logging-options ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iotsitewise-request :method "GET" :path
                                "/logging" :protocol :rest-json :operation
                                "DescribeLoggingOptions" :params
                                `(("Action" ,@"DescribeLoggingOptions")
                                  ("Version" ,@"2019-12-02"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-logging-options))
(common-lisp:progn
 (common-lisp:defun describe-portal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-id)
   (common-lisp:declare (common-lisp:ignorable portal-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-portal-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'portal-id))))
                                                        "DescribePortal"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-portal))
(common-lisp:progn
 (common-lisp:defun describe-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-id)
   (common-lisp:declare (common-lisp:ignorable project-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-id))))
                                                        "DescribeProject"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-project))
(common-lisp:progn
 (common-lisp:defun describe-storage-configuration ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iotsitewise-request :method "GET" :path
                                "/configuration/account/storage" :protocol
                                :rest-json :operation
                                "DescribeStorageConfiguration" :params
                                `(("Action" ,@"DescribeStorageConfiguration")
                                  ("Version" ,@"2019-12-02"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'describe-storage-configuration))
(common-lisp:progn
 (common-lisp:defun describe-time-series
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias asset-id property-id)
   (common-lisp:declare (common-lisp:ignorable alias asset-id property-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-time-series-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/timeseries/describe/"
                                                        "DescribeTimeSeries"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-time-series))
(common-lisp:progn
 (common-lisp:defun disassociate-assets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id hierarchy-id child-asset-id
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable asset-id hierarchy-id child-asset-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disassociate-assets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assets/~A/disassociate"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-id))))
                                                        "DisassociateAssets"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-assets))
(common-lisp:progn
 (common-lisp:defun disassociate-time-series-from-asset-property
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key alias asset-id property-id client-token)
   (common-lisp:declare
    (common-lisp:ignorable alias asset-id property-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-time-series-from-asset-property-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/timeseries/disassociate/"
                                                        "DisassociateTimeSeriesFromAssetProperty"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'disassociate-time-series-from-asset-property))
(common-lisp:progn
 (common-lisp:defun get-asset-property-aggregates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id property-id property-alias
                     aggregate-types resolution qualities start-date end-date
                     time-ordering next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable asset-id property-id property-alias aggregate-types
     resolution qualities start-date end-date time-ordering next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-asset-property-aggregates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/properties/aggregates"
                                                        "GetAssetPropertyAggregates"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-asset-property-aggregates))
(common-lisp:progn
 (common-lisp:defun get-asset-property-value
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id property-id property-alias)
   (common-lisp:declare
    (common-lisp:ignorable asset-id property-id property-alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-asset-property-value-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/properties/latest"
                                                        "GetAssetPropertyValue"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-asset-property-value))
(common-lisp:progn
 (common-lisp:defun get-asset-property-value-history
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id property-id property-alias
                     start-date end-date qualities time-ordering next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable asset-id property-id property-alias start-date
     end-date qualities time-ordering next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-asset-property-value-history-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/properties/history"
                                                        "GetAssetPropertyValueHistory"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-asset-property-value-history))
(common-lisp:progn
 (common-lisp:defun get-interpolated-asset-property-values
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id property-id property-alias
                     start-time-in-seconds start-time-offset-in-nanos
                     end-time-in-seconds end-time-offset-in-nanos quality
                     interval-in-seconds next-token max-results type
                     interval-window-in-seconds)
   (common-lisp:declare
    (common-lisp:ignorable asset-id property-id property-alias
     start-time-in-seconds start-time-offset-in-nanos end-time-in-seconds
     end-time-offset-in-nanos quality interval-in-seconds next-token
     max-results type interval-window-in-seconds))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-interpolated-asset-property-values-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/properties/interpolated"
                                                        "GetInterpolatedAssetPropertyValues"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-interpolated-asset-property-values))
(common-lisp:progn
 (common-lisp:defun list-access-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key identity-type identity-id resource-type
                     resource-id iam-arn next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable identity-type identity-id resource-type resource-id
     iam-arn next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-access-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/access-policies"
                                                        "ListAccessPolicies"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-access-policies))
(common-lisp:progn
 (common-lisp:defun list-asset-model-properties
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-model-id next-token max-results
                     filter)
   (common-lisp:declare
    (common-lisp:ignorable asset-model-id next-token max-results filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-asset-model-properties-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/asset-models/~A/properties"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-model-id))))
                                                        "ListAssetModelProperties"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-asset-model-properties))
(common-lisp:progn
 (common-lisp:defun list-asset-models
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-asset-models-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/asset-models"
                                                        "ListAssetModels"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-asset-models))
(common-lisp:progn
 (common-lisp:defun list-asset-properties
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id next-token max-results filter)
   (common-lisp:declare
    (common-lisp:ignorable asset-id next-token max-results filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-asset-properties-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assets/~A/properties"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-id))))
                                                        "ListAssetProperties"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-asset-properties))
(common-lisp:progn
 (common-lisp:defun list-asset-relationships
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id traversal-type next-token
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable asset-id traversal-type next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-asset-relationships-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assets/~A/assetRelationships"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-id))))
                                                        "ListAssetRelationships"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-asset-relationships))
(common-lisp:progn
 (common-lisp:defun list-assets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results asset-model-id
                     filter)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results asset-model-id filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-assets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/assets" "ListAssets"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-assets))
(common-lisp:progn
 (common-lisp:defun list-associated-assets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id hierarchy-id traversal-direction
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable asset-id hierarchy-id traversal-direction next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-associated-assets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assets/~A/hierarchies"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-id))))
                                                        "ListAssociatedAssets"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-associated-assets))
(common-lisp:progn
 (common-lisp:defun list-bulk-import-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results filter)
   (common-lisp:declare (common-lisp:ignorable next-token max-results filter))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-bulk-import-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/jobs"
                                                        "ListBulkImportJobs"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-bulk-import-jobs))
(common-lisp:progn
 (common-lisp:defun list-dashboards
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable project-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-dashboards-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/dashboards"
                                                        "ListDashboards"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-dashboards))
(common-lisp:progn
 (common-lisp:defun list-gateways
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-gateways-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/20200301/gateways"
                                                        "ListGateways"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-gateways))
(common-lisp:progn
 (common-lisp:defun list-portals
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-portals-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/portals"
                                                        "ListPortals"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-portals))
(common-lisp:progn
 (common-lisp:defun list-project-assets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable project-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-project-assets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A/assets"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-id))))
                                                        "ListProjectAssets"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-project-assets))
(common-lisp:progn
 (common-lisp:defun list-projects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable portal-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-projects-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/projects"
                                                        "ListProjects"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-projects))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/tags"
                                                        "ListTagsForResource"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-time-series
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results asset-id
                     alias-prefix time-series-type)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results asset-id alias-prefix
     time-series-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-time-series-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" :rest-json
                                                        "/timeseries/"
                                                        "ListTimeSeries"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-time-series))
(common-lisp:progn
 (common-lisp:defun put-default-encryption-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key encryption-type kms-key-id)
   (common-lisp:declare (common-lisp:ignorable encryption-type kms-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-default-encryption-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/configuration/account/encryption"
                                                        "PutDefaultEncryptionConfiguration"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-default-encryption-configuration))
(common-lisp:progn
 (common-lisp:defun put-logging-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key logging-options)
   (common-lisp:declare (common-lisp:ignorable logging-options))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-logging-options-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        "/logging"
                                                        "PutLoggingOptions"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-logging-options))
(common-lisp:progn
 (common-lisp:defun put-storage-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key storage-type multi-layer-storage
                     disassociated-data-storage retention-period)
   (common-lisp:declare
    (common-lisp:ignorable storage-type multi-layer-storage
     disassociated-data-storage retention-period))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-storage-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/configuration/account/storage"
                                                        "PutStorageConfiguration"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-storage-configuration))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        "/tags" "TagResource"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE" :rest-json
                                                        "/tags" "UntagResource"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-access-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-policy-id access-policy-identity
                     access-policy-resource access-policy-permission
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable access-policy-id access-policy-identity
     access-policy-resource access-policy-permission client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-access-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/access-policies/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'access-policy-id))))
                                                        "UpdateAccessPolicy"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-access-policy))
(common-lisp:progn
 (common-lisp:defun update-asset
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id asset-name client-token
                     asset-description)
   (common-lisp:declare
    (common-lisp:ignorable asset-id asset-name client-token asset-description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-asset-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assets/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-id))))
                                                        "UpdateAsset"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-asset))
(common-lisp:progn
 (common-lisp:defun update-asset-model
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-model-id asset-model-name
                     asset-model-description asset-model-properties
                     asset-model-hierarchies asset-model-composite-models
                     client-token)
   (common-lisp:declare
    (common-lisp:ignorable asset-model-id asset-model-name
     asset-model-description asset-model-properties asset-model-hierarchies
     asset-model-composite-models client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-asset-model-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/asset-models/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-model-id))))
                                                        "UpdateAssetModel"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-asset-model))
(common-lisp:progn
 (common-lisp:defun update-asset-property
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key asset-id property-id property-alias
                     property-notification-state client-token property-unit)
   (common-lisp:declare
    (common-lisp:ignorable asset-id property-id property-alias
     property-notification-state client-token property-unit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-asset-property-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/assets/~A/properties/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'asset-id))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'property-id))))
                                                        "UpdateAssetProperty"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-asset-property))
(common-lisp:progn
 (common-lisp:defun update-dashboard
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dashboard-id dashboard-name
                     dashboard-description dashboard-definition client-token)
   (common-lisp:declare
    (common-lisp:ignorable dashboard-id dashboard-name dashboard-description
     dashboard-definition client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-dashboard-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/dashboards/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'dashboard-id))))
                                                        "UpdateDashboard"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-dashboard))
(common-lisp:progn
 (common-lisp:defun update-gateway
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-id gateway-name)
   (common-lisp:declare (common-lisp:ignorable gateway-id gateway-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-gateway-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/20200301/gateways/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'gateway-id))))
                                                        "UpdateGateway"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-gateway))
(common-lisp:progn
 (common-lisp:defun update-gateway-capability-configuration
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key gateway-id capability-namespace
                     capability-configuration)
   (common-lisp:declare
    (common-lisp:ignorable gateway-id capability-namespace
     capability-configuration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-gateway-capability-configuration-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/20200301/gateways/~A/capability"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'gateway-id))))
                                                        "UpdateGatewayCapabilityConfiguration"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-gateway-capability-configuration))
(common-lisp:progn
 (common-lisp:defun update-portal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key portal-id portal-name portal-description
                     portal-contact-email portal-logo-image role-arn
                     client-token notification-sender-email alarms)
   (common-lisp:declare
    (common-lisp:ignorable portal-id portal-name portal-description
     portal-contact-email portal-logo-image role-arn client-token
     notification-sender-email alarms))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-portal-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/portals/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'portal-id))))
                                                        "UpdatePortal"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-portal))
(common-lisp:progn
 (common-lisp:defun update-project
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key project-id project-name
                     project-description client-token)
   (common-lisp:declare
    (common-lisp:ignorable project-id project-name project-description
     client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-project-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iotsitewise-request
                                                        aws-sdk/generator/operation::input
                                                        "PUT" :rest-json
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/projects/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'project-id))))
                                                        "UpdateProject"
                                                        "2019-12-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-project))
