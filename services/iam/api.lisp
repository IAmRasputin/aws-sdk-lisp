;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/iam/api
  (:use)
  (:nicknames #:aws/iam)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/iam/api)
(common-lisp:progn
 (common-lisp:defclass iam-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "iam"))
 (common-lisp:export 'iam-request))
(common-lisp:progn
 (common-lisp:define-condition iam-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'iam-error))
(common-lisp:defvar *error-map*
  '(("ConcurrentModificationException" . concurrent-modification-exception)
    ("CredentialReportExpiredException" . credential-report-expired-exception)
    ("CredentialReportNotPresentException"
     . credential-report-not-present-exception)
    ("CredentialReportNotReadyException"
     . credential-report-not-ready-exception)
    ("DeleteConflictException" . delete-conflict-exception)
    ("DuplicateCertificateException" . duplicate-certificate-exception)
    ("DuplicateSSHPublicKeyException" . duplicate-sshpublic-key-exception)
    ("EntityAlreadyExistsException" . entity-already-exists-exception)
    ("EntityTemporarilyUnmodifiableException"
     . entity-temporarily-unmodifiable-exception)
    ("InvalidAuthenticationCodeException"
     . invalid-authentication-code-exception)
    ("InvalidCertificateException" . invalid-certificate-exception)
    ("InvalidInputException" . invalid-input-exception)
    ("InvalidPublicKeyException" . invalid-public-key-exception)
    ("InvalidUserTypeException" . invalid-user-type-exception)
    ("KeyPairMismatchException" . key-pair-mismatch-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("MalformedCertificateException" . malformed-certificate-exception)
    ("MalformedPolicyDocumentException" . malformed-policy-document-exception)
    ("NoSuchEntityException" . no-such-entity-exception)
    ("PasswordPolicyViolationException" . password-policy-violation-exception)
    ("PolicyEvaluationException" . policy-evaluation-exception)
    ("PolicyNotAttachableException" . policy-not-attachable-exception)
    ("ReportGenerationLimitExceededException"
     . report-generation-limit-exceeded-exception)
    ("ServiceFailureException" . service-failure-exception)
    ("ServiceNotSupportedException" . service-not-supported-exception)
    ("UnmodifiableEntityException" . unmodifiable-entity-exception)
    ("UnrecognizedPublicKeyEncodingException"
     . unrecognized-public-key-encoding-exception)))
(common-lisp:deftype access-advisor-usage-granularity-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (access-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-detail-"))
   (service-name (common-lisp:error ":service-name is required") :type
    (common-lisp:or |serviceNameType| common-lisp:null))
   (service-namespace (common-lisp:error ":service-namespace is required")
    :type (common-lisp:or |serviceNamespaceType| common-lisp:null))
   (region common-lisp:nil :type
    (common-lisp:or |stringType| common-lisp:null))
   (entity-path common-lisp:nil :type
    (common-lisp:or |organizationsEntityPathType| common-lisp:null))
   (last-authenticated-time common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null))
   (total-authenticated-entities common-lisp:nil :type
    (common-lisp:or |integerType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'access-detail 'make-access-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-namespace))
      (common-lisp:list
       (common-lisp:cons "ServiceNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-path))
      (common-lisp:list
       (common-lisp:cons "EntityPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-authenticated-time))
      (common-lisp:list
       (common-lisp:cons "LastAuthenticatedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-authenticated-entities))
      (common-lisp:list
       (common-lisp:cons "TotalAuthenticatedEntities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype access-details ()
   '(trivial-types:proper-list access-detail))
 (common-lisp:defun |make-access-details|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (access-key (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-key-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |userNameType| common-lisp:null))
   (access-key-id (common-lisp:error ":access-key-id is required") :type
    (common-lisp:or |accessKeyIdType| common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or |statusType| common-lisp:null))
   (secret-access-key (common-lisp:error ":secret-access-key is required")
    :type (common-lisp:or |accessKeySecretType| common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'access-key 'make-access-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'secret-access-key))
      (common-lisp:list
       (common-lisp:cons "SecretAccessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (access-key-last-used (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-key-last-used-"))
   (last-used-date (common-lisp:error ":last-used-date is required") :type
    (common-lisp:or |dateType| common-lisp:null))
   (service-name (common-lisp:error ":service-name is required") :type
    (common-lisp:or |stringType| common-lisp:null))
   (region (common-lisp:error ":region is required") :type
    (common-lisp:or |stringType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'access-key-last-used 'make-access-key-last-used))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-key-last-used))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-key-last-used))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-used-date))
      (common-lisp:list
       (common-lisp:cons "LastUsedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-key-last-used))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (access-key-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-access-key-metadata-"))
   (user-name common-lisp:nil :type
    (common-lisp:or |userNameType| common-lisp:null))
   (access-key-id common-lisp:nil :type
    (common-lisp:or |accessKeyIdType| common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or |statusType| common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'access-key-metadata 'make-access-key-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input access-key-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input access-key-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input access-key-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype action-name-list-type ()
   '(trivial-types:proper-list action-name-type))
 (common-lisp:defun |make-action-name-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-name-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype action-name-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (add-client-idto-open-idconnect-provider-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-add-client-idto-open-idconnect-provider-request-"))
   (open-idconnect-provider-arn
    (common-lisp:error ":open-idconnect-provider-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (client-id (common-lisp:error ":client-id is required") :type
    (common-lisp:or |clientIDType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-client-idto-open-idconnect-provider-request
                    'make-add-client-idto-open-idconnect-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-client-idto-open-idconnect-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-client-idto-open-idconnect-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idconnect-provider-arn))
      (common-lisp:list
       (common-lisp:cons "OpenIDConnectProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-client-idto-open-idconnect-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-role-to-instance-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-role-to-instance-profile-request-"))
   (instance-profile-name
    (common-lisp:error ":instance-profile-name is required") :type
    (common-lisp:or |instanceProfileNameType| common-lisp:null))
   (role-name (common-lisp:error ":role-name is required") :type
    (common-lisp:or |roleNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-role-to-instance-profile-request
                    'make-add-role-to-instance-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-role-to-instance-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-role-to-instance-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-role-to-instance-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (add-user-to-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-add-user-to-group-request-"))
   (group-name (common-lisp:error ":group-name is required") :type
    (common-lisp:or |groupNameType| common-lisp:null))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |existingUserNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-user-to-group-request
                    'make-add-user-to-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          add-user-to-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          add-user-to-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          add-user-to-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype arn-list-type () '(trivial-types:proper-list |arnType|))
 (common-lisp:defun |make-arn-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |arnType|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-group-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-group-policy-request-"))
   (group-name (common-lisp:error ":group-name is required") :type
    (common-lisp:or |groupNameType| common-lisp:null))
   (policy-arn (common-lisp:error ":policy-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-group-policy-request
                    'make-attach-group-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-group-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-group-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-group-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-role-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-role-policy-request-"))
   (role-name (common-lisp:error ":role-name is required") :type
    (common-lisp:or |roleNameType| common-lisp:null))
   (policy-arn (common-lisp:error ":policy-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-role-policy-request
                    'make-attach-role-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-role-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-role-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-role-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-user-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-attach-user-policy-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |userNameType| common-lisp:null))
   (policy-arn (common-lisp:error ":policy-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-user-policy-request
                    'make-attach-user-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attach-user-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attach-user-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attach-user-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attached-permissions-boundary (:copier common-lisp:nil)
      (:conc-name "struct-shape-attached-permissions-boundary-"))
   (permissions-boundary-type common-lisp:nil :type
    (common-lisp:or permissions-boundary-attachment-type common-lisp:null))
   (permissions-boundary-arn common-lisp:nil :type
    (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attached-permissions-boundary
                    'make-attached-permissions-boundary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          attached-permissions-boundary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          attached-permissions-boundary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary-type))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundaryType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary-arn))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundaryArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          attached-permissions-boundary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (attached-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-attached-policy-"))
   (policy-name common-lisp:nil :type
    (common-lisp:or |policyNameType| common-lisp:null))
   (policy-arn common-lisp:nil :type
    (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'attached-policy 'make-attached-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input attached-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input attached-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input attached-policy))
   common-lisp:nil))
(common-lisp:deftype bootstrap-datum ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defstruct
     (change-password-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-change-password-request-"))
   (old-password (common-lisp:error ":old-password is required") :type
    (common-lisp:or |passwordType| common-lisp:null))
   (new-password (common-lisp:error ":new-password is required") :type
    (common-lisp:or |passwordType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'change-password-request 'make-change-password-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          change-password-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          change-password-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'old-password))
      (common-lisp:list
       (common-lisp:cons "OldPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-password))
      (common-lisp:list
       (common-lisp:cons "NewPassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          change-password-request))
   common-lisp:nil))
(common-lisp:deftype column-number () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition concurrent-modification-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       concurrent-modification-exception-message)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'concurrent-modification-exception-message)))
(common-lisp:deftype concurrent-modification-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (context-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-context-entry-"))
   (context-key-name common-lisp:nil :type
    (common-lisp:or context-key-name-type common-lisp:null))
   (context-key-values common-lisp:nil :type
    (common-lisp:or context-key-value-list-type common-lisp:null))
   (context-key-type common-lisp:nil :type
    (common-lisp:or context-key-type-enum common-lisp:null)))
 (common-lisp:export (common-lisp:list 'context-entry 'make-context-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input context-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input context-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-key-name))
      (common-lisp:list
       (common-lisp:cons "ContextKeyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-key-values))
      (common-lisp:list
       (common-lisp:cons "ContextKeyValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-key-type))
      (common-lisp:list
       (common-lisp:cons "ContextKeyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input context-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype context-entry-list-type ()
   '(trivial-types:proper-list context-entry))
 (common-lisp:defun |make-context-entry-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list context-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype context-key-name-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype context-key-names-result-list-type ()
   '(trivial-types:proper-list context-key-name-type))
 (common-lisp:defun |make-context-key-names-result-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list context-key-name-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype context-key-type-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype context-key-value-list-type ()
   '(trivial-types:proper-list context-key-value-type))
 (common-lisp:defun |make-context-key-value-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list context-key-value-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype context-key-value-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-access-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-access-key-request-"))
   (user-name common-lisp:nil :type
    (common-lisp:or |existingUserNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-access-key-request
                    'make-create-access-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-access-key-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-access-key-response-"))
   (access-key (common-lisp:error ":access-key is required") :type
    (common-lisp:or access-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-access-key-response
                    'make-create-access-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-access-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-access-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key))
      (common-lisp:list
       (common-lisp:cons "AccessKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-access-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-account-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-account-alias-request-"))
   (account-alias (common-lisp:error ":account-alias is required") :type
    (common-lisp:or |accountAliasType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-account-alias-request
                    'make-create-account-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-account-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-account-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-alias))
      (common-lisp:list
       (common-lisp:cons "AccountAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-account-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-group-request-"))
   (path common-lisp:nil :type (common-lisp:or |pathType| common-lisp:null))
   (group-name (common-lisp:error ":group-name is required") :type
    (common-lisp:or |groupNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-group-request 'make-create-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-group-response-"))
   (group (common-lisp:error ":group is required") :type
    (common-lisp:or group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-group-response 'make-create-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "Group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-instance-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-instance-profile-request-"))
   (instance-profile-name
    (common-lisp:error ":instance-profile-name is required") :type
    (common-lisp:or |instanceProfileNameType| common-lisp:null))
   (path common-lisp:nil :type (common-lisp:or |pathType| common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or |tagListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-instance-profile-request
                    'make-create-instance-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-instance-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-instance-profile-response-"))
   (instance-profile (common-lisp:error ":instance-profile is required") :type
    (common-lisp:or instance-profile common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-instance-profile-response
                    'make-create-instance-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-profile))
      (common-lisp:list
       (common-lisp:cons "InstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-instance-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-login-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-login-profile-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |userNameType| common-lisp:null))
   (password (common-lisp:error ":password is required") :type
    (common-lisp:or |passwordType| common-lisp:null))
   (password-reset-required common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-login-profile-request
                    'make-create-login-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-login-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-login-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'password-reset-required))
      (common-lisp:list
       (common-lisp:cons "PasswordResetRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-login-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-login-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-login-profile-response-"))
   (login-profile (common-lisp:error ":login-profile is required") :type
    (common-lisp:or login-profile common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-login-profile-response
                    'make-create-login-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-login-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-login-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'login-profile))
      (common-lisp:list
       (common-lisp:cons "LoginProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-login-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-open-idconnect-provider-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-open-idconnect-provider-request-"))
   (url (common-lisp:error ":url is required") :type
    (common-lisp:or open-idconnect-provider-url-type common-lisp:null))
   (client-idlist common-lisp:nil :type
    (common-lisp:or |clientIDListType| common-lisp:null))
   (thumbprint-list (common-lisp:error ":thumbprint-list is required") :type
    (common-lisp:or |thumbprintListType| common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or |tagListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-open-idconnect-provider-request
                    'make-create-open-idconnect-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-open-idconnect-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-open-idconnect-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-idlist))
      (common-lisp:list
       (common-lisp:cons "ClientIDList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbprint-list))
      (common-lisp:list
       (common-lisp:cons "ThumbprintList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-open-idconnect-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-open-idconnect-provider-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-open-idconnect-provider-response-"))
   (open-idconnect-provider-arn common-lisp:nil :type
    (common-lisp:or |arnType| common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or |tagListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-open-idconnect-provider-response
                    'make-create-open-idconnect-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-open-idconnect-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-open-idconnect-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idconnect-provider-arn))
      (common-lisp:list
       (common-lisp:cons "OpenIDConnectProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-open-idconnect-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-policy-request-"))
   (policy-name (common-lisp:error ":policy-name is required") :type
    (common-lisp:or |policyNameType| common-lisp:null))
   (path common-lisp:nil :type
    (common-lisp:or |policyPathType| common-lisp:null))
   (policy-document (common-lisp:error ":policy-document is required") :type
    (common-lisp:or |policyDocumentType| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |policyDescriptionType| common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or |tagListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-policy-request 'make-create-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-policy-response-"))
   (policy common-lisp:nil :type (common-lisp:or policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-policy-response 'make-create-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-policy-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-policy-version-request-"))
   (policy-arn (common-lisp:error ":policy-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (policy-document (common-lisp:error ":policy-document is required") :type
    (common-lisp:or |policyDocumentType| common-lisp:null))
   (set-as-default common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-policy-version-request
                    'make-create-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'set-as-default))
      (common-lisp:list
       (common-lisp:cons "SetAsDefault"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-policy-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-policy-version-response-"))
   (policy-version common-lisp:nil :type
    (common-lisp:or policy-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-policy-version-response
                    'make-create-policy-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-version))
      (common-lisp:list
       (common-lisp:cons "PolicyVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-policy-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-role-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-role-request-"))
   (path common-lisp:nil :type (common-lisp:or |pathType| common-lisp:null))
   (role-name (common-lisp:error ":role-name is required") :type
    (common-lisp:or |roleNameType| common-lisp:null))
   (assume-role-policy-document
    (common-lisp:error ":assume-role-policy-document is required") :type
    (common-lisp:or |policyDocumentType| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |roleDescriptionType| common-lisp:null))
   (max-session-duration common-lisp:nil :type
    (common-lisp:or |roleMaxSessionDurationType| common-lisp:null))
   (permissions-boundary common-lisp:nil :type
    (common-lisp:or |arnType| common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or |tagListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-role-request 'make-create-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assume-role-policy-document))
      (common-lisp:list
       (common-lisp:cons "AssumeRolePolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-session-duration))
      (common-lisp:list
       (common-lisp:cons "MaxSessionDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-role-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-role-response-"))
   (role (common-lisp:error ":role is required") :type
    (common-lisp:or role common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-role-response 'make-create-role-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-role-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-role-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-samlprovider-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-samlprovider-request-"))
   (samlmetadata-document
    (common-lisp:error ":samlmetadata-document is required") :type
    (common-lisp:or samlmetadata-document-type common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or samlprovider-name-type common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or |tagListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-samlprovider-request
                    'make-create-samlprovider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-samlprovider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-samlprovider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'samlmetadata-document))
      (common-lisp:list
       (common-lisp:cons "SAMLMetadataDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-samlprovider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-samlprovider-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-samlprovider-response-"))
   (samlprovider-arn common-lisp:nil :type
    (common-lisp:or |arnType| common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or |tagListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-samlprovider-response
                    'make-create-samlprovider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-samlprovider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-samlprovider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'samlprovider-arn))
      (common-lisp:list
       (common-lisp:cons "SAMLProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-samlprovider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-service-linked-role-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-service-linked-role-request-"))
   (awsservice-name (common-lisp:error ":awsservice-name is required") :type
    (common-lisp:or |groupNameType| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |roleDescriptionType| common-lisp:null))
   (custom-suffix common-lisp:nil :type
    (common-lisp:or |customSuffixType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-service-linked-role-request
                    'make-create-service-linked-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-linked-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-linked-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'awsservice-name))
      (common-lisp:list
       (common-lisp:cons "AWSServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'custom-suffix))
      (common-lisp:list
       (common-lisp:cons "CustomSuffix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-linked-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-service-linked-role-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-service-linked-role-response-"))
   (role common-lisp:nil :type (common-lisp:or role common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-service-linked-role-response
                    'make-create-service-linked-role-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-linked-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-linked-role-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-linked-role-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-service-specific-credential-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-service-specific-credential-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |userNameType| common-lisp:null))
   (service-name (common-lisp:error ":service-name is required") :type
    (common-lisp:or |serviceName| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-service-specific-credential-request
                    'make-create-service-specific-credential-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-specific-credential-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-specific-credential-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-specific-credential-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-service-specific-credential-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-service-specific-credential-response-"))
   (service-specific-credential common-lisp:nil :type
    (common-lisp:or service-specific-credential common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-service-specific-credential-response
                    'make-create-service-specific-credential-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-service-specific-credential-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-service-specific-credential-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-specific-credential))
      (common-lisp:list
       (common-lisp:cons "ServiceSpecificCredential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-service-specific-credential-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-user-request-"))
   (path common-lisp:nil :type (common-lisp:or |pathType| common-lisp:null))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |userNameType| common-lisp:null))
   (permissions-boundary common-lisp:nil :type
    (common-lisp:or |arnType| common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or |tagListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-user-request 'make-create-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-user-response-"))
   (user common-lisp:nil :type (common-lisp:or user common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-user-response 'make-create-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input create-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input create-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-virtual-mfadevice-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-virtual-mfadevice-request-"))
   (path common-lisp:nil :type (common-lisp:or |pathType| common-lisp:null))
   (virtual-mfadevice-name
    (common-lisp:error ":virtual-mfadevice-name is required") :type
    (common-lisp:or |virtualMFADeviceName| common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or |tagListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-virtual-mfadevice-request
                    'make-create-virtual-mfadevice-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-mfadevice-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-mfadevice-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'virtual-mfadevice-name))
      (common-lisp:list
       (common-lisp:cons "VirtualMFADeviceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-mfadevice-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-virtual-mfadevice-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-virtual-mfadevice-response-"))
   (virtual-mfadevice (common-lisp:error ":virtual-mfadevice is required")
    :type (common-lisp:or virtual-mfadevice common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-virtual-mfadevice-response
                    'make-create-virtual-mfadevice-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-mfadevice-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-mfadevice-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-mfadevice))
      (common-lisp:list
       (common-lisp:cons "VirtualMFADevice"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-virtual-mfadevice-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition credential-report-expired-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       credential-report-expired-exception-message)))
 (common-lisp:export
  (common-lisp:list 'credential-report-expired-exception
                    'credential-report-expired-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition credential-report-not-present-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       credential-report-not-present-exception-message)))
 (common-lisp:export
  (common-lisp:list 'credential-report-not-present-exception
                    'credential-report-not-present-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition credential-report-not-ready-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       credential-report-not-ready-exception-message)))
 (common-lisp:export
  (common-lisp:list 'credential-report-not-ready-exception
                    'credential-report-not-ready-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (deactivate-mfadevice-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-deactivate-mfadevice-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (serial-number (common-lisp:error ":serial-number is required") :type
    (common-lisp:or |serialNumberType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deactivate-mfadevice-request
                    'make-deactivate-mfadevice-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-mfadevice-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-mfadevice-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deactivate-mfadevice-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-access-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-access-key-request-"))
   (user-name common-lisp:nil :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (access-key-id (common-lisp:error ":access-key-id is required") :type
    (common-lisp:or |accessKeyIdType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-access-key-request
                    'make-delete-access-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-access-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-account-alias-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-account-alias-request-"))
   (account-alias (common-lisp:error ":account-alias is required") :type
    (common-lisp:or |accountAliasType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-account-alias-request
                    'make-delete-account-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-alias-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-alias-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-alias))
      (common-lisp:list
       (common-lisp:cons "AccountAlias"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-account-alias-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition delete-conflict-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       delete-conflict-exception-message)))
 (common-lisp:export
  (common-lisp:list 'delete-conflict-exception
                    'delete-conflict-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-group-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-group-policy-request-"))
   (group-name (common-lisp:error ":group-name is required") :type
    (common-lisp:or |groupNameType| common-lisp:null))
   (policy-name (common-lisp:error ":policy-name is required") :type
    (common-lisp:or |policyNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-group-policy-request
                    'make-delete-group-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-group-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-group-request-"))
   (group-name (common-lisp:error ":group-name is required") :type
    (common-lisp:or |groupNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-group-request 'make-delete-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-instance-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-instance-profile-request-"))
   (instance-profile-name
    (common-lisp:error ":instance-profile-name is required") :type
    (common-lisp:or |instanceProfileNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-instance-profile-request
                    'make-delete-instance-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-instance-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-login-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-login-profile-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |userNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-login-profile-request
                    'make-delete-login-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-login-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-login-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-login-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-open-idconnect-provider-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-open-idconnect-provider-request-"))
   (open-idconnect-provider-arn
    (common-lisp:error ":open-idconnect-provider-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-open-idconnect-provider-request
                    'make-delete-open-idconnect-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-open-idconnect-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-open-idconnect-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idconnect-provider-arn))
      (common-lisp:list
       (common-lisp:cons "OpenIDConnectProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-open-idconnect-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-policy-request-"))
   (policy-arn (common-lisp:error ":policy-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-policy-request 'make-delete-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-policy-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-policy-version-request-"))
   (policy-arn (common-lisp:error ":policy-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (version-id (common-lisp:error ":version-id is required") :type
    (common-lisp:or |policyVersionIdType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-policy-version-request
                    'make-delete-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-policy-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-role-permissions-boundary-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-role-permissions-boundary-request-"))
   (role-name (common-lisp:error ":role-name is required") :type
    (common-lisp:or |roleNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-role-permissions-boundary-request
                    'make-delete-role-permissions-boundary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-role-permissions-boundary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-role-permissions-boundary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-role-permissions-boundary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-role-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-role-policy-request-"))
   (role-name (common-lisp:error ":role-name is required") :type
    (common-lisp:or |roleNameType| common-lisp:null))
   (policy-name (common-lisp:error ":policy-name is required") :type
    (common-lisp:or |policyNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-role-policy-request
                    'make-delete-role-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-role-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-role-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-role-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-role-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-role-request-"))
   (role-name (common-lisp:error ":role-name is required") :type
    (common-lisp:or |roleNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-role-request 'make-delete-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-samlprovider-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-samlprovider-request-"))
   (samlprovider-arn (common-lisp:error ":samlprovider-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-samlprovider-request
                    'make-delete-samlprovider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-samlprovider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-samlprovider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'samlprovider-arn))
      (common-lisp:list
       (common-lisp:cons "SAMLProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-samlprovider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-sshpublic-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-sshpublic-key-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |userNameType| common-lisp:null))
   (sshpublic-key-id (common-lisp:error ":sshpublic-key-id is required") :type
    (common-lisp:or |publicKeyIdType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-sshpublic-key-request
                    'make-delete-sshpublic-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-sshpublic-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-sshpublic-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sshpublic-key-id))
      (common-lisp:list
       (common-lisp:cons "SSHPublicKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-sshpublic-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-server-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-server-certificate-request-"))
   (server-certificate-name
    (common-lisp:error ":server-certificate-name is required") :type
    (common-lisp:or |serverCertificateNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-server-certificate-request
                    'make-delete-server-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-server-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-server-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-name))
      (common-lisp:list
       (common-lisp:cons "ServerCertificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-server-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-service-linked-role-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-service-linked-role-request-"))
   (role-name (common-lisp:error ":role-name is required") :type
    (common-lisp:or |roleNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-service-linked-role-request
                    'make-delete-service-linked-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-linked-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-linked-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-linked-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-service-linked-role-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-service-linked-role-response-"))
   (deletion-task-id (common-lisp:error ":deletion-task-id is required") :type
    (common-lisp:or deletion-task-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-service-linked-role-response
                    'make-delete-service-linked-role-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-linked-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-linked-role-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-task-id))
      (common-lisp:list
       (common-lisp:cons "DeletionTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-linked-role-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-service-specific-credential-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-service-specific-credential-request-"))
   (user-name common-lisp:nil :type
    (common-lisp:or |userNameType| common-lisp:null))
   (service-specific-credential-id
    (common-lisp:error ":service-specific-credential-id is required") :type
    (common-lisp:or |serviceSpecificCredentialId| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-service-specific-credential-request
                    'make-delete-service-specific-credential-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-specific-credential-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-specific-credential-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-specific-credential-id))
      (common-lisp:list
       (common-lisp:cons "ServiceSpecificCredentialId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-service-specific-credential-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-signing-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-signing-certificate-request-"))
   (user-name common-lisp:nil :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (certificate-id (common-lisp:error ":certificate-id is required") :type
    (common-lisp:or |certificateIdType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-signing-certificate-request
                    'make-delete-signing-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-signing-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-signing-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "CertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-signing-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-user-permissions-boundary-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-user-permissions-boundary-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |userNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-user-permissions-boundary-request
                    'make-delete-user-permissions-boundary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-permissions-boundary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-permissions-boundary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-permissions-boundary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-user-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-user-policy-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (policy-name (common-lisp:error ":policy-name is required") :type
    (common-lisp:or |policyNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-user-policy-request
                    'make-delete-user-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-user-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-user-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |existingUserNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-user-request 'make-delete-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input delete-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input delete-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-virtual-mfadevice-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-virtual-mfadevice-request-"))
   (serial-number (common-lisp:error ":serial-number is required") :type
    (common-lisp:or |serialNumberType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-mfadevice-request
                    'make-delete-virtual-mfadevice-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-mfadevice-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-mfadevice-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-virtual-mfadevice-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (deletion-task-failure-reason-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-deletion-task-failure-reason-type-"))
   (reason common-lisp:nil :type (common-lisp:or reason-type common-lisp:null))
   (role-usage-list common-lisp:nil :type
    (common-lisp:or role-usage-list-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deletion-task-failure-reason-type
                    'make-deletion-task-failure-reason-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          deletion-task-failure-reason-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          deletion-task-failure-reason-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-usage-list))
      (common-lisp:list
       (common-lisp:cons "RoleUsageList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          deletion-task-failure-reason-type))
   common-lisp:nil))
(common-lisp:deftype deletion-task-id-type () 'common-lisp:string)
(common-lisp:deftype deletion-task-status-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (detach-group-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-group-policy-request-"))
   (group-name (common-lisp:error ":group-name is required") :type
    (common-lisp:or |groupNameType| common-lisp:null))
   (policy-arn (common-lisp:error ":policy-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-group-policy-request
                    'make-detach-group-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-group-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-group-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-group-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-role-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-role-policy-request-"))
   (role-name (common-lisp:error ":role-name is required") :type
    (common-lisp:or |roleNameType| common-lisp:null))
   (policy-arn (common-lisp:error ":policy-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-role-policy-request
                    'make-detach-role-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-role-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-role-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-role-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-user-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-detach-user-policy-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |userNameType| common-lisp:null))
   (policy-arn (common-lisp:error ":policy-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-user-policy-request
                    'make-detach-user-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          detach-user-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          detach-user-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          detach-user-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition duplicate-certificate-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       duplicate-certificate-exception-message)))
 (common-lisp:export
  (common-lisp:list 'duplicate-certificate-exception
                    'duplicate-certificate-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition duplicate-sshpublic-key-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       duplicate-sshpublic-key-exception-message)))
 (common-lisp:export
  (common-lisp:list 'duplicate-sshpublic-key-exception
                    'duplicate-sshpublic-key-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-mfadevice-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-enable-mfadevice-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (serial-number (common-lisp:error ":serial-number is required") :type
    (common-lisp:or |serialNumberType| common-lisp:null))
   (authentication-code1
    (common-lisp:error ":authentication-code1 is required") :type
    (common-lisp:or |authenticationCodeType| common-lisp:null))
   (authentication-code2
    (common-lisp:error ":authentication-code2 is required") :type
    (common-lisp:or |authenticationCodeType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-mfadevice-request 'make-enable-mfadevice-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          enable-mfadevice-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          enable-mfadevice-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-code1))
      (common-lisp:list
       (common-lisp:cons "AuthenticationCode1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-code2))
      (common-lisp:list
       (common-lisp:cons "AuthenticationCode2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          enable-mfadevice-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition entity-already-exists-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       entity-already-exists-exception-message)))
 (common-lisp:export
  (common-lisp:list 'entity-already-exists-exception
                    'entity-already-exists-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (entity-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-entity-details-"))
   (entity-info (common-lisp:error ":entity-info is required") :type
    (common-lisp:or entity-info common-lisp:null))
   (last-authenticated common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'entity-details 'make-entity-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-info))
      (common-lisp:list
       (common-lisp:cons "EntityInfo"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-authenticated))
      (common-lisp:list
       (common-lisp:cons "LastAuthenticated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (entity-info (:copier common-lisp:nil)
      (:conc-name "struct-shape-entity-info-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or |userNameType| common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or |policyOwnerEntityType| common-lisp:null))
   (id (common-lisp:error ":id is required") :type
    (common-lisp:or |idType| common-lisp:null))
   (path common-lisp:nil :type (common-lisp:or |pathType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'entity-info 'make-entity-info))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity-info))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity-info))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'id))
      (common-lisp:list
       (common-lisp:cons "Id"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity-info))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition entity-temporarily-unmodifiable-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       entity-temporarily-unmodifiable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'entity-temporarily-unmodifiable-exception
                    'entity-temporarily-unmodifiable-exception-message)))
(common-lisp:deftype entity-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (error-details (:copier common-lisp:nil)
      (:conc-name "struct-shape-error-details-"))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or |stringType| common-lisp:null))
   (code (common-lisp:error ":code is required") :type
    (common-lisp:or |stringType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'error-details 'make-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-details))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "Message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'code))
      (common-lisp:list
       (common-lisp:cons "Code"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-details))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype eval-decision-details-type () 'common-lisp:hash-table)
 (common-lisp:defun |make-eval-decision-details-type|
                    (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype eval-decision-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (evaluation-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-evaluation-result-"))
   (eval-action-name (common-lisp:error ":eval-action-name is required") :type
    (common-lisp:or action-name-type common-lisp:null))
   (eval-resource-name common-lisp:nil :type
    (common-lisp:or resource-name-type common-lisp:null))
   (eval-decision (common-lisp:error ":eval-decision is required") :type
    (common-lisp:or policy-evaluation-decision-type common-lisp:null))
   (matched-statements common-lisp:nil :type
    (common-lisp:or statement-list-type common-lisp:null))
   (missing-context-values common-lisp:nil :type
    (common-lisp:or context-key-names-result-list-type common-lisp:null))
   (organizations-decision-detail common-lisp:nil :type
    (common-lisp:or organizations-decision-detail common-lisp:null))
   (permissions-boundary-decision-detail common-lisp:nil :type
    (common-lisp:or permissions-boundary-decision-detail common-lisp:null))
   (eval-decision-details common-lisp:nil :type
    (common-lisp:or eval-decision-details-type common-lisp:null))
   (resource-specific-results common-lisp:nil :type
    (common-lisp:or resource-specific-result-list-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluation-result 'make-evaluation-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input evaluation-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input evaluation-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eval-action-name))
      (common-lisp:list
       (common-lisp:cons "EvalActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eval-resource-name))
      (common-lisp:list
       (common-lisp:cons "EvalResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eval-decision))
      (common-lisp:list
       (common-lisp:cons "EvalDecision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matched-statements))
      (common-lisp:list
       (common-lisp:cons "MatchedStatements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'missing-context-values))
      (common-lisp:list
       (common-lisp:cons "MissingContextValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizations-decision-detail))
      (common-lisp:list
       (common-lisp:cons "OrganizationsDecisionDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary-decision-detail))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundaryDecisionDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'eval-decision-details))
      (common-lisp:list
       (common-lisp:cons "EvalDecisionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-specific-results))
      (common-lisp:list
       (common-lisp:cons "ResourceSpecificResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input evaluation-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype evaluation-results-list-type ()
   '(trivial-types:proper-list evaluation-result))
 (common-lisp:defun |make-evaluation-results-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list evaluation-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (generate-credential-report-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-generate-credential-report-response-"))
   (state common-lisp:nil :type
    (common-lisp:or report-state-type common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or report-state-description-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generate-credential-report-response
                    'make-generate-credential-report-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-credential-report-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-credential-report-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-credential-report-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (generate-organizations-access-report-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-generate-organizations-access-report-request-"))
   (entity-path (common-lisp:error ":entity-path is required") :type
    (common-lisp:or |organizationsEntityPathType| common-lisp:null))
   (organizations-policy-id common-lisp:nil :type
    (common-lisp:or |organizationsPolicyIdType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generate-organizations-access-report-request
                    'make-generate-organizations-access-report-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-organizations-access-report-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-organizations-access-report-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-path))
      (common-lisp:list
       (common-lisp:cons "EntityPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'organizations-policy-id))
      (common-lisp:list
       (common-lisp:cons "OrganizationsPolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-organizations-access-report-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (generate-organizations-access-report-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-generate-organizations-access-report-response-"))
   (job-id common-lisp:nil :type
    (common-lisp:or |jobIDType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generate-organizations-access-report-response
                    'make-generate-organizations-access-report-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-organizations-access-report-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-organizations-access-report-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-organizations-access-report-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (generate-service-last-accessed-details-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-generate-service-last-accessed-details-request-"))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (granularity common-lisp:nil :type
    (common-lisp:or access-advisor-usage-granularity-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generate-service-last-accessed-details-request
                    'make-generate-service-last-accessed-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-service-last-accessed-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-service-last-accessed-details-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'granularity))
      (common-lisp:list
       (common-lisp:cons "Granularity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-service-last-accessed-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (generate-service-last-accessed-details-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-generate-service-last-accessed-details-response-"))
   (job-id common-lisp:nil :type
    (common-lisp:or |jobIDType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generate-service-last-accessed-details-response
                    'make-generate-service-last-accessed-details-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-service-last-accessed-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-service-last-accessed-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-service-last-accessed-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-access-key-last-used-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-access-key-last-used-request-"))
   (access-key-id (common-lisp:error ":access-key-id is required") :type
    (common-lisp:or |accessKeyIdType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-access-key-last-used-request
                    'make-get-access-key-last-used-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-key-last-used-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-key-last-used-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-key-last-used-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-access-key-last-used-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-access-key-last-used-response-"))
   (user-name common-lisp:nil :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (access-key-last-used common-lisp:nil :type
    (common-lisp:or access-key-last-used common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-access-key-last-used-response
                    'make-get-access-key-last-used-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-access-key-last-used-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-access-key-last-used-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'access-key-last-used))
      (common-lisp:list
       (common-lisp:cons "AccessKeyLastUsed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-access-key-last-used-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-account-authorization-details-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-account-authorization-details-request-"))
   (filter common-lisp:nil :type
    (common-lisp:or |entityListType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-account-authorization-details-request
                    'make-get-account-authorization-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-account-authorization-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-account-authorization-details-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter))
      (common-lisp:list
       (common-lisp:cons "Filter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-account-authorization-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-account-authorization-details-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-account-authorization-details-response-"))
   (user-detail-list common-lisp:nil :type
    (common-lisp:or |userDetailListType| common-lisp:null))
   (group-detail-list common-lisp:nil :type
    (common-lisp:or |groupDetailListType| common-lisp:null))
   (role-detail-list common-lisp:nil :type
    (common-lisp:or |roleDetailListType| common-lisp:null))
   (policies common-lisp:nil :type
    (common-lisp:or managed-policy-detail-list-type common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-account-authorization-details-response
                    'make-get-account-authorization-details-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-account-authorization-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-account-authorization-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-detail-list))
      (common-lisp:list
       (common-lisp:cons "UserDetailList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-detail-list))
      (common-lisp:list
       (common-lisp:cons "GroupDetailList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-detail-list))
      (common-lisp:list
       (common-lisp:cons "RoleDetailList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "Policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-account-authorization-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-account-password-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-account-password-policy-response-"))
   (password-policy (common-lisp:error ":password-policy is required") :type
    (common-lisp:or password-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-account-password-policy-response
                    'make-get-account-password-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-account-password-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-account-password-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-policy))
      (common-lisp:list
       (common-lisp:cons "PasswordPolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-account-password-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-account-summary-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-account-summary-response-"))
   (summary-map common-lisp:nil :type
    (common-lisp:or |summaryMapType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-account-summary-response
                    'make-get-account-summary-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-account-summary-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-account-summary-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'summary-map))
      (common-lisp:list
       (common-lisp:cons "SummaryMap"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-account-summary-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-context-keys-for-custom-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-context-keys-for-custom-policy-request-"))
   (policy-input-list (common-lisp:error ":policy-input-list is required")
    :type (common-lisp:or simulation-policy-list-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-context-keys-for-custom-policy-request
                    'make-get-context-keys-for-custom-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-context-keys-for-custom-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-context-keys-for-custom-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-input-list))
      (common-lisp:list
       (common-lisp:cons "PolicyInputList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-context-keys-for-custom-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-context-keys-for-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-context-keys-for-policy-response-"))
   (context-key-names common-lisp:nil :type
    (common-lisp:or context-key-names-result-list-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-context-keys-for-policy-response
                    'make-get-context-keys-for-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-context-keys-for-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-context-keys-for-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-key-names))
      (common-lisp:list
       (common-lisp:cons "ContextKeyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-context-keys-for-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-context-keys-for-principal-policy-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-context-keys-for-principal-policy-request-"))
   (policy-source-arn (common-lisp:error ":policy-source-arn is required")
    :type (common-lisp:or |arnType| common-lisp:null))
   (policy-input-list common-lisp:nil :type
    (common-lisp:or simulation-policy-list-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-context-keys-for-principal-policy-request
                    'make-get-context-keys-for-principal-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-context-keys-for-principal-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-context-keys-for-principal-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-source-arn))
      (common-lisp:list
       (common-lisp:cons "PolicySourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-input-list))
      (common-lisp:list
       (common-lisp:cons "PolicyInputList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-context-keys-for-principal-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-credential-report-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-credential-report-response-"))
   (content common-lisp:nil :type
    (common-lisp:or report-content-type common-lisp:null))
   (report-format common-lisp:nil :type
    (common-lisp:or report-format-type common-lisp:null))
   (generated-time common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-credential-report-response
                    'make-get-credential-report-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-credential-report-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-credential-report-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'content))
      (common-lisp:list
       (common-lisp:cons "Content"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'report-format))
      (common-lisp:list
       (common-lisp:cons "ReportFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generated-time))
      (common-lisp:list
       (common-lisp:cons "GeneratedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-credential-report-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-group-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-group-policy-request-"))
   (group-name (common-lisp:error ":group-name is required") :type
    (common-lisp:or |groupNameType| common-lisp:null))
   (policy-name (common-lisp:error ":policy-name is required") :type
    (common-lisp:or |policyNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-group-policy-request 'make-get-group-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-group-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-group-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-group-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-group-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-group-policy-response-"))
   (group-name (common-lisp:error ":group-name is required") :type
    (common-lisp:or |groupNameType| common-lisp:null))
   (policy-name (common-lisp:error ":policy-name is required") :type
    (common-lisp:or |policyNameType| common-lisp:null))
   (policy-document (common-lisp:error ":policy-document is required") :type
    (common-lisp:or |policyDocumentType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-group-policy-response
                    'make-get-group-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-group-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-group-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-group-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-group-request-"))
   (group-name (common-lisp:error ":group-name is required") :type
    (common-lisp:or |groupNameType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-group-request 'make-get-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-group-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-group-response-"))
   (group (common-lisp:error ":group is required") :type
    (common-lisp:or group common-lisp:null))
   (users (common-lisp:error ":users is required") :type
    (common-lisp:or |userListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-group-response 'make-get-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-group-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-group-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group))
      (common-lisp:list
       (common-lisp:cons "Group"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "Users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-group-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-instance-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-instance-profile-request-"))
   (instance-profile-name
    (common-lisp:error ":instance-profile-name is required") :type
    (common-lisp:or |instanceProfileNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-instance-profile-request
                    'make-get-instance-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-instance-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-instance-profile-response-"))
   (instance-profile (common-lisp:error ":instance-profile is required") :type
    (common-lisp:or instance-profile common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-instance-profile-response
                    'make-get-instance-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-profile))
      (common-lisp:list
       (common-lisp:cons "InstanceProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-instance-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-login-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-login-profile-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |userNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-login-profile-request
                    'make-get-login-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-login-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-login-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-login-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-login-profile-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-login-profile-response-"))
   (login-profile (common-lisp:error ":login-profile is required") :type
    (common-lisp:or login-profile common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-login-profile-response
                    'make-get-login-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-login-profile-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-login-profile-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'login-profile))
      (common-lisp:list
       (common-lisp:cons "LoginProfile"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-login-profile-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-open-idconnect-provider-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-open-idconnect-provider-request-"))
   (open-idconnect-provider-arn
    (common-lisp:error ":open-idconnect-provider-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-open-idconnect-provider-request
                    'make-get-open-idconnect-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-open-idconnect-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-open-idconnect-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idconnect-provider-arn))
      (common-lisp:list
       (common-lisp:cons "OpenIDConnectProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-open-idconnect-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-open-idconnect-provider-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-open-idconnect-provider-response-"))
   (url common-lisp:nil :type
    (common-lisp:or open-idconnect-provider-url-type common-lisp:null))
   (client-idlist common-lisp:nil :type
    (common-lisp:or |clientIDListType| common-lisp:null))
   (thumbprint-list common-lisp:nil :type
    (common-lisp:or |thumbprintListType| common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or |tagListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-open-idconnect-provider-response
                    'make-get-open-idconnect-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-open-idconnect-provider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-open-idconnect-provider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'url))
      (common-lisp:list
       (common-lisp:cons "Url"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-idlist))
      (common-lisp:list
       (common-lisp:cons "ClientIDList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbprint-list))
      (common-lisp:list
       (common-lisp:cons "ThumbprintList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-open-idconnect-provider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-organizations-access-report-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-organizations-access-report-request-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or |jobIDType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (sort-key common-lisp:nil :type
    (common-lisp:or |sortKeyType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-organizations-access-report-request
                    'make-get-organizations-access-report-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-organizations-access-report-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-organizations-access-report-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-key))
      (common-lisp:list
       (common-lisp:cons "SortKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-organizations-access-report-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-organizations-access-report-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-organizations-access-report-response-"))
   (job-status (common-lisp:error ":job-status is required") :type
    (common-lisp:or |jobStatusType| common-lisp:null))
   (job-creation-date (common-lisp:error ":job-creation-date is required")
    :type (common-lisp:or |dateType| common-lisp:null))
   (job-completion-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null))
   (number-of-services-accessible common-lisp:nil :type
    (common-lisp:or |integerType| common-lisp:null))
   (number-of-services-not-accessed common-lisp:nil :type
    (common-lisp:or |integerType| common-lisp:null))
   (access-details common-lisp:nil :type
    (common-lisp:or access-details common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (error-details common-lisp:nil :type
    (common-lisp:or error-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-organizations-access-report-response
                    'make-get-organizations-access-report-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-organizations-access-report-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-organizations-access-report-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-creation-date))
      (common-lisp:list
       (common-lisp:cons "JobCreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-completion-date))
      (common-lisp:list
       (common-lisp:cons "JobCompletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-services-accessible))
      (common-lisp:list
       (common-lisp:cons "NumberOfServicesAccessible"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'number-of-services-not-accessed))
      (common-lisp:list
       (common-lisp:cons "NumberOfServicesNotAccessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-details))
      (common-lisp:list
       (common-lisp:cons "AccessDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-details))
      (common-lisp:list
       (common-lisp:cons "ErrorDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-organizations-access-report-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-policy-request-"))
   (policy-arn (common-lisp:error ":policy-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-request 'make-get-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-policy-response-"))
   (policy common-lisp:nil :type (common-lisp:or policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-response 'make-get-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-policy-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-policy-version-request-"))
   (policy-arn (common-lisp:error ":policy-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (version-id (common-lisp:error ":version-id is required") :type
    (common-lisp:or |policyVersionIdType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-version-request
                    'make-get-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-policy-version-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-policy-version-response-"))
   (policy-version common-lisp:nil :type
    (common-lisp:or policy-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-version-response
                    'make-get-policy-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-version))
      (common-lisp:list
       (common-lisp:cons "PolicyVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-policy-version-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-role-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-role-policy-request-"))
   (role-name (common-lisp:error ":role-name is required") :type
    (common-lisp:or |roleNameType| common-lisp:null))
   (policy-name (common-lisp:error ":policy-name is required") :type
    (common-lisp:or |policyNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-role-policy-request 'make-get-role-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-role-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-role-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-role-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-role-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-role-policy-response-"))
   (role-name (common-lisp:error ":role-name is required") :type
    (common-lisp:or |roleNameType| common-lisp:null))
   (policy-name (common-lisp:error ":policy-name is required") :type
    (common-lisp:or |policyNameType| common-lisp:null))
   (policy-document (common-lisp:error ":policy-document is required") :type
    (common-lisp:or |policyDocumentType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-role-policy-response 'make-get-role-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-role-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-role-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-role-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-role-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-role-request-"))
   (role-name (common-lisp:error ":role-name is required") :type
    (common-lisp:or |roleNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-role-request 'make-get-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-role-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-role-response-"))
   (role (common-lisp:error ":role is required") :type
    (common-lisp:or role common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-role-response 'make-get-role-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-role-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-role-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-samlprovider-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-samlprovider-request-"))
   (samlprovider-arn (common-lisp:error ":samlprovider-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-samlprovider-request 'make-get-samlprovider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-samlprovider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-samlprovider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'samlprovider-arn))
      (common-lisp:list
       (common-lisp:cons "SAMLProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-samlprovider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-samlprovider-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-samlprovider-response-"))
   (samlmetadata-document common-lisp:nil :type
    (common-lisp:or samlmetadata-document-type common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null))
   (valid-until common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or |tagListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-samlprovider-response
                    'make-get-samlprovider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-samlprovider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-samlprovider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'samlmetadata-document))
      (common-lisp:list
       (common-lisp:cons "SAMLMetadataDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid-until))
      (common-lisp:list
       (common-lisp:cons "ValidUntil"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-samlprovider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sshpublic-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sshpublic-key-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |userNameType| common-lisp:null))
   (sshpublic-key-id (common-lisp:error ":sshpublic-key-id is required") :type
    (common-lisp:or |publicKeyIdType| common-lisp:null))
   (encoding (common-lisp:error ":encoding is required") :type
    (common-lisp:or |encodingType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sshpublic-key-request
                    'make-get-sshpublic-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sshpublic-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sshpublic-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sshpublic-key-id))
      (common-lisp:list
       (common-lisp:cons "SSHPublicKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encoding))
      (common-lisp:list
       (common-lisp:cons "Encoding"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sshpublic-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-sshpublic-key-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-sshpublic-key-response-"))
   (sshpublic-key common-lisp:nil :type
    (common-lisp:or sshpublic-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sshpublic-key-response
                    'make-get-sshpublic-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-sshpublic-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-sshpublic-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sshpublic-key))
      (common-lisp:list
       (common-lisp:cons "SSHPublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-sshpublic-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-server-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-server-certificate-request-"))
   (server-certificate-name
    (common-lisp:error ":server-certificate-name is required") :type
    (common-lisp:or |serverCertificateNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-server-certificate-request
                    'make-get-server-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-server-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-server-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-name))
      (common-lisp:list
       (common-lisp:cons "ServerCertificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-server-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-server-certificate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-server-certificate-response-"))
   (server-certificate (common-lisp:error ":server-certificate is required")
    :type (common-lisp:or server-certificate common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-server-certificate-response
                    'make-get-server-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-server-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-server-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'server-certificate))
      (common-lisp:list
       (common-lisp:cons "ServerCertificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-server-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-service-last-accessed-details-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-service-last-accessed-details-request-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or |jobIDType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-service-last-accessed-details-request
                    'make-get-service-last-accessed-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-last-accessed-details-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-last-accessed-details-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-last-accessed-details-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-service-last-accessed-details-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-service-last-accessed-details-response-"))
   (job-status (common-lisp:error ":job-status is required") :type
    (common-lisp:or |jobStatusType| common-lisp:null))
   (job-type common-lisp:nil :type
    (common-lisp:or access-advisor-usage-granularity-type common-lisp:null))
   (job-creation-date (common-lisp:error ":job-creation-date is required")
    :type (common-lisp:or |dateType| common-lisp:null))
   (services-last-accessed
    (common-lisp:error ":services-last-accessed is required") :type
    (common-lisp:or services-last-accessed common-lisp:null))
   (job-completion-date (common-lisp:error ":job-completion-date is required")
    :type (common-lisp:or |dateType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null))
   (error common-lisp:nil :type
    (common-lisp:or error-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-service-last-accessed-details-response
                    'make-get-service-last-accessed-details-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-last-accessed-details-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-last-accessed-details-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-type))
      (common-lisp:list
       (common-lisp:cons "JobType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-creation-date))
      (common-lisp:list
       (common-lisp:cons "JobCreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'services-last-accessed))
      (common-lisp:list
       (common-lisp:cons "ServicesLastAccessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-completion-date))
      (common-lisp:list
       (common-lisp:cons "JobCompletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-last-accessed-details-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-service-last-accessed-details-with-entities-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-service-last-accessed-details-with-entities-request-"))
   (job-id (common-lisp:error ":job-id is required") :type
    (common-lisp:or |jobIDType| common-lisp:null))
   (service-namespace (common-lisp:error ":service-namespace is required")
    :type (common-lisp:or |serviceNamespaceType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-service-last-accessed-details-with-entities-request
                    'make-get-service-last-accessed-details-with-entities-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-last-accessed-details-with-entities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-last-accessed-details-with-entities-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-id))
      (common-lisp:list
       (common-lisp:cons "JobId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-namespace))
      (common-lisp:list
       (common-lisp:cons "ServiceNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-last-accessed-details-with-entities-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-service-last-accessed-details-with-entities-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-service-last-accessed-details-with-entities-response-"))
   (job-status (common-lisp:error ":job-status is required") :type
    (common-lisp:or |jobStatusType| common-lisp:null))
   (job-creation-date (common-lisp:error ":job-creation-date is required")
    :type (common-lisp:or |dateType| common-lisp:null))
   (job-completion-date (common-lisp:error ":job-completion-date is required")
    :type (common-lisp:or |dateType| common-lisp:null))
   (entity-details-list (common-lisp:error ":entity-details-list is required")
    :type (common-lisp:or |entityDetailsListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null))
   (error common-lisp:nil :type
    (common-lisp:or error-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-service-last-accessed-details-with-entities-response
                    'make-get-service-last-accessed-details-with-entities-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-last-accessed-details-with-entities-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-last-accessed-details-with-entities-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-status))
      (common-lisp:list
       (common-lisp:cons "JobStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-creation-date))
      (common-lisp:list
       (common-lisp:cons "JobCreationDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'job-completion-date))
      (common-lisp:list
       (common-lisp:cons "JobCompletionDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-details-list))
      (common-lisp:list
       (common-lisp:cons "EntityDetailsList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error))
      (common-lisp:list
       (common-lisp:cons "Error"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-last-accessed-details-with-entities-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-service-linked-role-deletion-status-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-service-linked-role-deletion-status-request-"))
   (deletion-task-id (common-lisp:error ":deletion-task-id is required") :type
    (common-lisp:or deletion-task-id-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-service-linked-role-deletion-status-request
                    'make-get-service-linked-role-deletion-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-linked-role-deletion-status-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-linked-role-deletion-status-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-task-id))
      (common-lisp:list
       (common-lisp:cons "DeletionTaskId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-linked-role-deletion-status-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-service-linked-role-deletion-status-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-get-service-linked-role-deletion-status-response-"))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or deletion-task-status-type common-lisp:null))
   (reason common-lisp:nil :type
    (common-lisp:or deletion-task-failure-reason-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-service-linked-role-deletion-status-response
                    'make-get-service-linked-role-deletion-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-service-linked-role-deletion-status-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-service-linked-role-deletion-status-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reason))
      (common-lisp:list
       (common-lisp:cons "Reason"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-service-linked-role-deletion-status-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-user-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-user-policy-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (policy-name (common-lisp:error ":policy-name is required") :type
    (common-lisp:or |policyNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-user-policy-request 'make-get-user-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-user-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-user-policy-response-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (policy-name (common-lisp:error ":policy-name is required") :type
    (common-lisp:or |policyNameType| common-lisp:null))
   (policy-document (common-lisp:error ":policy-document is required") :type
    (common-lisp:or |policyDocumentType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-user-policy-response 'make-get-user-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-user-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-user-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-user-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-user-request-"))
   (user-name common-lisp:nil :type
    (common-lisp:or |existingUserNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-user-request 'make-get-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-user-response-"))
   (user (common-lisp:error ":user is required") :type
    (common-lisp:or user common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-user-response 'make-get-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (group (:copier common-lisp:nil) (:conc-name "struct-shape-group-"))
   (path (common-lisp:error ":path is required") :type
    (common-lisp:or |pathType| common-lisp:null))
   (group-name (common-lisp:error ":group-name is required") :type
    (common-lisp:or |groupNameType| common-lisp:null))
   (group-id (common-lisp:error ":group-id is required") :type
    (common-lisp:or |idType| common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (create-date (common-lisp:error ":create-date is required") :type
    (common-lisp:or |dateType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'group 'make-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (group-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-group-detail-"))
   (path common-lisp:nil :type (common-lisp:or |pathType| common-lisp:null))
   (group-name common-lisp:nil :type
    (common-lisp:or |groupNameType| common-lisp:null))
   (group-id common-lisp:nil :type (common-lisp:or |idType| common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or |arnType| common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null))
   (group-policy-list common-lisp:nil :type
    (common-lisp:or |policyDetailListType| common-lisp:null))
   (attached-managed-policies common-lisp:nil :type
    (common-lisp:or |attachedPoliciesListType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'group-detail 'make-group-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input group-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input group-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-policy-list))
      (common-lisp:list
       (common-lisp:cons "GroupPolicyList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attached-managed-policies))
      (common-lisp:list
       (common-lisp:cons "AttachedManagedPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input group-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (instance-profile (:copier common-lisp:nil)
      (:conc-name "struct-shape-instance-profile-"))
   (path (common-lisp:error ":path is required") :type
    (common-lisp:or |pathType| common-lisp:null))
   (instance-profile-name
    (common-lisp:error ":instance-profile-name is required") :type
    (common-lisp:or |instanceProfileNameType| common-lisp:null))
   (instance-profile-id (common-lisp:error ":instance-profile-id is required")
    :type (common-lisp:or |idType| common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (create-date (common-lisp:error ":create-date is required") :type
    (common-lisp:or |dateType| common-lisp:null))
   (roles (common-lisp:error ":roles is required") :type
    (common-lisp:or |roleListType| common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or |tagListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-profile 'make-instance-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input instance-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input instance-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-profile-id))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roles))
      (common-lisp:list
       (common-lisp:cons "Roles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input instance-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition invalid-authentication-code-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-authentication-code-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-authentication-code-exception
                    'invalid-authentication-code-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-certificate-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-certificate-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-certificate-exception
                    'invalid-certificate-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-input-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-input-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-input-exception 'invalid-input-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-public-key-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-public-key-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-public-key-exception
                    'invalid-public-key-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition invalid-user-type-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-user-type-exception-message)))
 (common-lisp:export
  (common-lisp:list 'invalid-user-type-exception
                    'invalid-user-type-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition key-pair-mismatch-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       key-pair-mismatch-exception-message)))
 (common-lisp:export
  (common-lisp:list 'key-pair-mismatch-exception
                    'key-pair-mismatch-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception
                    'limit-exceeded-exception-message)))
(common-lisp:deftype line-number () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-access-keys-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-access-keys-request-"))
   (user-name common-lisp:nil :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-access-keys-request 'make-list-access-keys-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-keys-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-keys-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-keys-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-access-keys-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-access-keys-response-"))
   (access-key-metadata (common-lisp:error ":access-key-metadata is required")
    :type (common-lisp:or |accessKeyMetadataListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-access-keys-response
                    'make-list-access-keys-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-access-keys-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-access-keys-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-metadata))
      (common-lisp:list
       (common-lisp:cons "AccessKeyMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-access-keys-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-account-aliases-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-account-aliases-request-"))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-account-aliases-request
                    'make-list-account-aliases-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-account-aliases-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-account-aliases-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-account-aliases-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-account-aliases-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-account-aliases-response-"))
   (account-aliases (common-lisp:error ":account-aliases is required") :type
    (common-lisp:or |accountAliasListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-account-aliases-response
                    'make-list-account-aliases-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-account-aliases-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-account-aliases-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'account-aliases))
      (common-lisp:list
       (common-lisp:cons "AccountAliases"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-account-aliases-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-attached-group-policies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-attached-group-policies-request-"))
   (group-name (common-lisp:error ":group-name is required") :type
    (common-lisp:or |groupNameType| common-lisp:null))
   (path-prefix common-lisp:nil :type
    (common-lisp:or |policyPathType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-attached-group-policies-request
                    'make-list-attached-group-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-group-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-group-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-prefix))
      (common-lisp:list
       (common-lisp:cons "PathPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-group-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-attached-group-policies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-attached-group-policies-response-"))
   (attached-policies common-lisp:nil :type
    (common-lisp:or |attachedPoliciesListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-attached-group-policies-response
                    'make-list-attached-group-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-group-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-group-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attached-policies))
      (common-lisp:list
       (common-lisp:cons "AttachedPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-group-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-attached-role-policies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-attached-role-policies-request-"))
   (role-name (common-lisp:error ":role-name is required") :type
    (common-lisp:or |roleNameType| common-lisp:null))
   (path-prefix common-lisp:nil :type
    (common-lisp:or |policyPathType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-attached-role-policies-request
                    'make-list-attached-role-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-role-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-role-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-prefix))
      (common-lisp:list
       (common-lisp:cons "PathPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-role-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-attached-role-policies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-attached-role-policies-response-"))
   (attached-policies common-lisp:nil :type
    (common-lisp:or |attachedPoliciesListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-attached-role-policies-response
                    'make-list-attached-role-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-role-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-role-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attached-policies))
      (common-lisp:list
       (common-lisp:cons "AttachedPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-role-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-attached-user-policies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-attached-user-policies-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |userNameType| common-lisp:null))
   (path-prefix common-lisp:nil :type
    (common-lisp:or |policyPathType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-attached-user-policies-request
                    'make-list-attached-user-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-user-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-user-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-prefix))
      (common-lisp:list
       (common-lisp:cons "PathPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-user-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-attached-user-policies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-attached-user-policies-response-"))
   (attached-policies common-lisp:nil :type
    (common-lisp:or |attachedPoliciesListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-attached-user-policies-response
                    'make-list-attached-user-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-user-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-user-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attached-policies))
      (common-lisp:list
       (common-lisp:cons "AttachedPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-attached-user-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-entities-for-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-entities-for-policy-request-"))
   (policy-arn (common-lisp:error ":policy-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (entity-filter common-lisp:nil :type
    (common-lisp:or entity-type common-lisp:null))
   (path-prefix common-lisp:nil :type
    (common-lisp:or |pathType| common-lisp:null))
   (policy-usage-filter common-lisp:nil :type
    (common-lisp:or policy-usage-type common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-entities-for-policy-request
                    'make-list-entities-for-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-for-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-for-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-filter))
      (common-lisp:list
       (common-lisp:cons "EntityFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-prefix))
      (common-lisp:list
       (common-lisp:cons "PathPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-usage-filter))
      (common-lisp:list
       (common-lisp:cons "PolicyUsageFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-for-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-entities-for-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-entities-for-policy-response-"))
   (policy-groups common-lisp:nil :type
    (common-lisp:or policy-group-list-type common-lisp:null))
   (policy-users common-lisp:nil :type
    (common-lisp:or policy-user-list-type common-lisp:null))
   (policy-roles common-lisp:nil :type
    (common-lisp:or policy-role-list-type common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-entities-for-policy-response
                    'make-list-entities-for-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-for-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-for-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-groups))
      (common-lisp:list
       (common-lisp:cons "PolicyGroups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-users))
      (common-lisp:list
       (common-lisp:cons "PolicyUsers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-roles))
      (common-lisp:list
       (common-lisp:cons "PolicyRoles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-for-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-group-policies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-group-policies-request-"))
   (group-name (common-lisp:error ":group-name is required") :type
    (common-lisp:or |groupNameType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-group-policies-request
                    'make-list-group-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-group-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-group-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-group-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-group-policies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-group-policies-response-"))
   (policy-names (common-lisp:error ":policy-names is required") :type
    (common-lisp:or |policyNameListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-group-policies-response
                    'make-list-group-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-group-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-group-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-names))
      (common-lisp:list
       (common-lisp:cons "PolicyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-group-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-groups-for-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-groups-for-user-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-groups-for-user-request
                    'make-list-groups-for-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-groups-for-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-groups-for-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-groups-for-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-groups-for-user-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-groups-for-user-response-"))
   (groups (common-lisp:error ":groups is required") :type
    (common-lisp:or |groupListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-groups-for-user-response
                    'make-list-groups-for-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-groups-for-user-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-groups-for-user-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-groups-for-user-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-groups-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-groups-request-"))
   (path-prefix common-lisp:nil :type
    (common-lisp:or |pathPrefixType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-groups-request 'make-list-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-groups-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-groups-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-prefix))
      (common-lisp:list
       (common-lisp:cons "PathPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-groups-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-groups-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-groups-response-"))
   (groups (common-lisp:error ":groups is required") :type
    (common-lisp:or |groupListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-groups-response 'make-list-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-groups-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-groups-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'groups))
      (common-lisp:list
       (common-lisp:cons "Groups"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-groups-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-instance-profile-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-instance-profile-tags-request-"))
   (instance-profile-name
    (common-lisp:error ":instance-profile-name is required") :type
    (common-lisp:or |instanceProfileNameType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-instance-profile-tags-request
                    'make-list-instance-profile-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profile-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profile-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profile-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-instance-profile-tags-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-instance-profile-tags-response-"))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or |tagListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-instance-profile-tags-response
                    'make-list-instance-profile-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profile-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profile-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profile-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-instance-profiles-for-role-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-instance-profiles-for-role-request-"))
   (role-name (common-lisp:error ":role-name is required") :type
    (common-lisp:or |roleNameType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-instance-profiles-for-role-request
                    'make-list-instance-profiles-for-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-for-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-for-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-for-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-instance-profiles-for-role-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-instance-profiles-for-role-response-"))
   (instance-profiles (common-lisp:error ":instance-profiles is required")
    :type (common-lisp:or |instanceProfileListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-instance-profiles-for-role-response
                    'make-list-instance-profiles-for-role-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-for-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-for-role-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-profiles))
      (common-lisp:list
       (common-lisp:cons "InstanceProfiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-for-role-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-instance-profiles-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-instance-profiles-request-"))
   (path-prefix common-lisp:nil :type
    (common-lisp:or |pathPrefixType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-instance-profiles-request
                    'make-list-instance-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-prefix))
      (common-lisp:list
       (common-lisp:cons "PathPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-instance-profiles-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-instance-profiles-response-"))
   (instance-profiles (common-lisp:error ":instance-profiles is required")
    :type (common-lisp:or |instanceProfileListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-instance-profiles-response
                    'make-list-instance-profiles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'instance-profiles))
      (common-lisp:list
       (common-lisp:cons "InstanceProfiles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-instance-profiles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-mfadevice-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-mfadevice-tags-request-"))
   (serial-number (common-lisp:error ":serial-number is required") :type
    (common-lisp:or |serialNumberType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-mfadevice-tags-request
                    'make-list-mfadevice-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mfadevice-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mfadevice-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mfadevice-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-mfadevice-tags-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-mfadevice-tags-response-"))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or |tagListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-mfadevice-tags-response
                    'make-list-mfadevice-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mfadevice-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mfadevice-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mfadevice-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-mfadevices-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-mfadevices-request-"))
   (user-name common-lisp:nil :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-mfadevices-request 'make-list-mfadevices-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mfadevices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mfadevices-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mfadevices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-mfadevices-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-mfadevices-response-"))
   (mfadevices (common-lisp:error ":mfadevices is required") :type
    (common-lisp:or |mfaDeviceListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-mfadevices-response 'make-list-mfadevices-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-mfadevices-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-mfadevices-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mfadevices))
      (common-lisp:list
       (common-lisp:cons "MFADevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-mfadevices-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-open-idconnect-provider-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-open-idconnect-provider-tags-request-"))
   (open-idconnect-provider-arn
    (common-lisp:error ":open-idconnect-provider-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-open-idconnect-provider-tags-request
                    'make-list-open-idconnect-provider-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-open-idconnect-provider-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-open-idconnect-provider-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idconnect-provider-arn))
      (common-lisp:list
       (common-lisp:cons "OpenIDConnectProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-open-idconnect-provider-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-open-idconnect-provider-tags-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-open-idconnect-provider-tags-response-"))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or |tagListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-open-idconnect-provider-tags-response
                    'make-list-open-idconnect-provider-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-open-idconnect-provider-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-open-idconnect-provider-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-open-idconnect-provider-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-open-idconnect-providers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-open-idconnect-providers-request-")))
 (common-lisp:export
  (common-lisp:list 'list-open-idconnect-providers-request
                    'make-list-open-idconnect-providers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-open-idconnect-providers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-open-idconnect-providers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-open-idconnect-providers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-open-idconnect-providers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-open-idconnect-providers-response-"))
   (open-idconnect-provider-list common-lisp:nil :type
    (common-lisp:or open-idconnect-provider-list-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-open-idconnect-providers-response
                    'make-list-open-idconnect-providers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-open-idconnect-providers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-open-idconnect-providers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idconnect-provider-list))
      (common-lisp:list
       (common-lisp:cons "OpenIDConnectProviderList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-open-idconnect-providers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policies-granting-service-access-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policies-granting-service-access-entry-"))
   (service-namespace common-lisp:nil :type
    (common-lisp:or |serviceNamespaceType| common-lisp:null))
   (policies common-lisp:nil :type
    (common-lisp:or |policyGrantingServiceAccessListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policies-granting-service-access-entry
                    'make-list-policies-granting-service-access-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-granting-service-access-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-granting-service-access-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-namespace))
      (common-lisp:list
       (common-lisp:cons "ServiceNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "Policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-granting-service-access-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policies-granting-service-access-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-policies-granting-service-access-request-"))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (service-namespaces (common-lisp:error ":service-namespaces is required")
    :type (common-lisp:or |serviceNamespaceListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policies-granting-service-access-request
                    'make-list-policies-granting-service-access-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-granting-service-access-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-granting-service-access-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-namespaces))
      (common-lisp:list
       (common-lisp:cons "ServiceNamespaces"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-granting-service-access-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policies-granting-service-access-response (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-policies-granting-service-access-response-"))
   (policies-granting-service-access
    (common-lisp:error ":policies-granting-service-access is required") :type
    (common-lisp:or |listPolicyGrantingServiceAccessResponseListType|
                    common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policies-granting-service-access-response
                    'make-list-policies-granting-service-access-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-granting-service-access-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-granting-service-access-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'policies-granting-service-access))
      (common-lisp:list
       (common-lisp:cons "PoliciesGrantingServiceAccess"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-granting-service-access-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policies-request-"))
   (scope common-lisp:nil :type
    (common-lisp:or |policyScopeType| common-lisp:null))
   (only-attached common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (path-prefix common-lisp:nil :type
    (common-lisp:or |policyPathType| common-lisp:null))
   (policy-usage-filter common-lisp:nil :type
    (common-lisp:or policy-usage-type common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policies-request 'make-list-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'scope))
      (common-lisp:list
       (common-lisp:cons "Scope"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'only-attached))
      (common-lisp:list
       (common-lisp:cons "OnlyAttached"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-prefix))
      (common-lisp:list
       (common-lisp:cons "PathPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-usage-filter))
      (common-lisp:list
       (common-lisp:cons "PolicyUsageFilter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policies-response-"))
   (policies common-lisp:nil :type
    (common-lisp:or |policyListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policies-response 'make-list-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policies))
      (common-lisp:list
       (common-lisp:cons "Policies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policy-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policy-tags-request-"))
   (policy-arn (common-lisp:error ":policy-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policy-tags-request 'make-list-policy-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policy-tags-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policy-tags-response-"))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or |tagListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policy-tags-response
                    'make-list-policy-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policy-versions-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policy-versions-request-"))
   (policy-arn (common-lisp:error ":policy-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policy-versions-request
                    'make-list-policy-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policy-versions-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-policy-versions-response-"))
   (versions common-lisp:nil :type
    (common-lisp:or |policyDocumentVersionListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policy-versions-response
                    'make-list-policy-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'versions))
      (common-lisp:list
       (common-lisp:cons "Versions"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-policy-versions-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-role-policies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-role-policies-request-"))
   (role-name (common-lisp:error ":role-name is required") :type
    (common-lisp:or |roleNameType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-role-policies-request
                    'make-list-role-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-role-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-role-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-role-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-role-policies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-role-policies-response-"))
   (policy-names (common-lisp:error ":policy-names is required") :type
    (common-lisp:or |policyNameListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-role-policies-response
                    'make-list-role-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-role-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-role-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-names))
      (common-lisp:list
       (common-lisp:cons "PolicyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-role-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-role-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-role-tags-request-"))
   (role-name (common-lisp:error ":role-name is required") :type
    (common-lisp:or |roleNameType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-role-tags-request 'make-list-role-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-role-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-role-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-role-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-role-tags-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-role-tags-response-"))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or |tagListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-role-tags-response 'make-list-role-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-role-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-role-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-role-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-roles-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-roles-request-"))
   (path-prefix common-lisp:nil :type
    (common-lisp:or |pathPrefixType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-roles-request 'make-list-roles-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-roles-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-roles-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-prefix))
      (common-lisp:list
       (common-lisp:cons "PathPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-roles-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-roles-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-roles-response-"))
   (roles (common-lisp:error ":roles is required") :type
    (common-lisp:or |roleListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-roles-response 'make-list-roles-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-roles-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-roles-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'roles))
      (common-lisp:list
       (common-lisp:cons "Roles"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-roles-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-samlprovider-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-samlprovider-tags-request-"))
   (samlprovider-arn (common-lisp:error ":samlprovider-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-samlprovider-tags-request
                    'make-list-samlprovider-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-samlprovider-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-samlprovider-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'samlprovider-arn))
      (common-lisp:list
       (common-lisp:cons "SAMLProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-samlprovider-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-samlprovider-tags-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-samlprovider-tags-response-"))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or |tagListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-samlprovider-tags-response
                    'make-list-samlprovider-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-samlprovider-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-samlprovider-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-samlprovider-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-samlproviders-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-samlproviders-request-")))
 (common-lisp:export
  (common-lisp:list 'list-samlproviders-request
                    'make-list-samlproviders-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-samlproviders-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-samlproviders-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-samlproviders-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-samlproviders-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-samlproviders-response-"))
   (samlprovider-list common-lisp:nil :type
    (common-lisp:or samlprovider-list-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-samlproviders-response
                    'make-list-samlproviders-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-samlproviders-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-samlproviders-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'samlprovider-list))
      (common-lisp:list
       (common-lisp:cons "SAMLProviderList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-samlproviders-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-sshpublic-keys-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sshpublic-keys-request-"))
   (user-name common-lisp:nil :type
    (common-lisp:or |userNameType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sshpublic-keys-request
                    'make-list-sshpublic-keys-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sshpublic-keys-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sshpublic-keys-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sshpublic-keys-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-sshpublic-keys-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-sshpublic-keys-response-"))
   (sshpublic-keys common-lisp:nil :type
    (common-lisp:or sshpublic-key-list-type common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sshpublic-keys-response
                    'make-list-sshpublic-keys-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-sshpublic-keys-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-sshpublic-keys-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sshpublic-keys))
      (common-lisp:list
       (common-lisp:cons "SSHPublicKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-sshpublic-keys-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-server-certificate-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-server-certificate-tags-request-"))
   (server-certificate-name
    (common-lisp:error ":server-certificate-name is required") :type
    (common-lisp:or |serverCertificateNameType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-server-certificate-tags-request
                    'make-list-server-certificate-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-server-certificate-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-server-certificate-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-name))
      (common-lisp:list
       (common-lisp:cons "ServerCertificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-server-certificate-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-server-certificate-tags-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-server-certificate-tags-response-"))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or |tagListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-server-certificate-tags-response
                    'make-list-server-certificate-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-server-certificate-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-server-certificate-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-server-certificate-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-server-certificates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-server-certificates-request-"))
   (path-prefix common-lisp:nil :type
    (common-lisp:or |pathPrefixType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-server-certificates-request
                    'make-list-server-certificates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-server-certificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-server-certificates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-prefix))
      (common-lisp:list
       (common-lisp:cons "PathPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-server-certificates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-server-certificates-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-server-certificates-response-"))
   (server-certificate-metadata-list
    (common-lisp:error ":server-certificate-metadata-list is required") :type
    (common-lisp:or |serverCertificateMetadataListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-server-certificates-response
                    'make-list-server-certificates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-server-certificates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-server-certificates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-metadata-list))
      (common-lisp:list
       (common-lisp:cons "ServerCertificateMetadataList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-server-certificates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-service-specific-credentials-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-service-specific-credentials-request-"))
   (user-name common-lisp:nil :type
    (common-lisp:or |userNameType| common-lisp:null))
   (service-name common-lisp:nil :type
    (common-lisp:or |serviceName| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-service-specific-credentials-request
                    'make-list-service-specific-credentials-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-specific-credentials-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-specific-credentials-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-specific-credentials-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-service-specific-credentials-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-service-specific-credentials-response-"))
   (service-specific-credentials common-lisp:nil :type
    (common-lisp:or service-specific-credentials-list-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-service-specific-credentials-response
                    'make-list-service-specific-credentials-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-service-specific-credentials-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-service-specific-credentials-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-specific-credentials))
      (common-lisp:list
       (common-lisp:cons "ServiceSpecificCredentials"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-service-specific-credentials-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-signing-certificates-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-signing-certificates-request-"))
   (user-name common-lisp:nil :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-signing-certificates-request
                    'make-list-signing-certificates-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-signing-certificates-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-signing-certificates-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-signing-certificates-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-signing-certificates-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-signing-certificates-response-"))
   (certificates (common-lisp:error ":certificates is required") :type
    (common-lisp:or |certificateListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-signing-certificates-response
                    'make-list-signing-certificates-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-signing-certificates-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-signing-certificates-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificates))
      (common-lisp:list
       (common-lisp:cons "Certificates"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-signing-certificates-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-user-policies-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-user-policies-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-user-policies-request
                    'make-list-user-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-policies-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-policies-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-policies-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-user-policies-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-user-policies-response-"))
   (policy-names (common-lisp:error ":policy-names is required") :type
    (common-lisp:or |policyNameListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-user-policies-response
                    'make-list-user-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-policies-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-policies-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-names))
      (common-lisp:list
       (common-lisp:cons "PolicyNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-policies-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-user-tags-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-user-tags-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-user-tags-request 'make-list-user-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-tags-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-tags-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-tags-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-user-tags-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-user-tags-response-"))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or |tagListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-user-tags-response 'make-list-user-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-user-tags-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-user-tags-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-user-tags-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-users-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-users-request-"))
   (path-prefix common-lisp:nil :type
    (common-lisp:or |pathPrefixType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-users-request 'make-list-users-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-users-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-users-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path-prefix))
      (common-lisp:list
       (common-lisp:cons "PathPrefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-users-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-users-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-users-response-"))
   (users (common-lisp:error ":users is required") :type
    (common-lisp:or |userListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-users-response 'make-list-users-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-users-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-users-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'users))
      (common-lisp:list
       (common-lisp:cons "Users"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-users-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-virtual-mfadevices-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-virtual-mfadevices-request-"))
   (assignment-status common-lisp:nil :type
    (common-lisp:or |assignmentStatusType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-virtual-mfadevices-request
                    'make-list-virtual-mfadevices-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-mfadevices-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-mfadevices-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'assignment-status))
      (common-lisp:list
       (common-lisp:cons "AssignmentStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-mfadevices-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-virtual-mfadevices-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-virtual-mfadevices-response-"))
   (virtual-mfadevices (common-lisp:error ":virtual-mfadevices is required")
    :type (common-lisp:or |virtualMFADeviceListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-virtual-mfadevices-response
                    'make-list-virtual-mfadevices-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-mfadevices-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-mfadevices-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'virtual-mfadevices))
      (common-lisp:list
       (common-lisp:cons "VirtualMFADevices"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-virtual-mfadevices-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (login-profile (:copier common-lisp:nil)
      (:conc-name "struct-shape-login-profile-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |userNameType| common-lisp:null))
   (create-date (common-lisp:error ":create-date is required") :type
    (common-lisp:or |dateType| common-lisp:null))
   (password-reset-required common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'login-profile 'make-login-profile))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input login-profile))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input login-profile))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'password-reset-required))
      (common-lisp:list
       (common-lisp:cons "PasswordResetRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input login-profile))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (mfadevice (:copier common-lisp:nil)
      (:conc-name "struct-shape-mfadevice-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |userNameType| common-lisp:null))
   (serial-number (common-lisp:error ":serial-number is required") :type
    (common-lisp:or |serialNumberType| common-lisp:null))
   (enable-date (common-lisp:error ":enable-date is required") :type
    (common-lisp:or |dateType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'mfadevice 'make-mfadevice))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mfadevice))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mfadevice))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-date))
      (common-lisp:list
       (common-lisp:cons "EnableDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mfadevice))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition malformed-certificate-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       malformed-certificate-exception-message)))
 (common-lisp:export
  (common-lisp:list 'malformed-certificate-exception
                    'malformed-certificate-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition malformed-policy-document-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       malformed-policy-document-exception-message)))
 (common-lisp:export
  (common-lisp:list 'malformed-policy-document-exception
                    'malformed-policy-document-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (managed-policy-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-managed-policy-detail-"))
   (policy-name common-lisp:nil :type
    (common-lisp:or |policyNameType| common-lisp:null))
   (policy-id common-lisp:nil :type (common-lisp:or |idType| common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or |arnType| common-lisp:null))
   (path common-lisp:nil :type
    (common-lisp:or |policyPathType| common-lisp:null))
   (default-version-id common-lisp:nil :type
    (common-lisp:or |policyVersionIdType| common-lisp:null))
   (attachment-count common-lisp:nil :type
    (common-lisp:or |attachmentCountType| common-lisp:null))
   (permissions-boundary-usage-count common-lisp:nil :type
    (common-lisp:or |attachmentCountType| common-lisp:null))
   (is-attachable common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |policyDescriptionType| common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null))
   (update-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null))
   (policy-version-list common-lisp:nil :type
    (common-lisp:or |policyDocumentVersionListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'managed-policy-detail 'make-managed-policy-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          managed-policy-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          managed-policy-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-version-id))
      (common-lisp:list
       (common-lisp:cons "DefaultVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-count))
      (common-lisp:list
       (common-lisp:cons "AttachmentCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary-usage-count))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundaryUsageCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-attachable))
      (common-lisp:list
       (common-lisp:cons "IsAttachable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date))
      (common-lisp:list
       (common-lisp:cons "UpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-version-list))
      (common-lisp:list
       (common-lisp:cons "PolicyVersionList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          managed-policy-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype managed-policy-detail-list-type ()
   '(trivial-types:proper-list managed-policy-detail))
 (common-lisp:defun |make-managed-policy-detail-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list managed-policy-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition no-such-entity-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       no-such-entity-exception-message)))
 (common-lisp:export
  (common-lisp:list 'no-such-entity-exception
                    'no-such-entity-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (open-idconnect-provider-list-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-open-idconnect-provider-list-entry-"))
   (arn common-lisp:nil :type (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'open-idconnect-provider-list-entry
                    'make-open-idconnect-provider-list-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          open-idconnect-provider-list-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          open-idconnect-provider-list-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          open-idconnect-provider-list-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype open-idconnect-provider-list-type ()
   '(trivial-types:proper-list open-idconnect-provider-list-entry))
 (common-lisp:defun |make-open-idconnect-provider-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            open-idconnect-provider-list-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype open-idconnect-provider-url-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (organizations-decision-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-organizations-decision-detail-"))
   (allowed-by-organizations common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'organizations-decision-detail
                    'make-organizations-decision-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          organizations-decision-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          organizations-decision-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allowed-by-organizations))
      (common-lisp:list
       (common-lisp:cons "AllowedByOrganizations"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          organizations-decision-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (password-policy (:copier common-lisp:nil)
      (:conc-name "struct-shape-password-policy-"))
   (minimum-password-length common-lisp:nil :type
    (common-lisp:or |minimumPasswordLengthType| common-lisp:null))
   (require-symbols common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (require-numbers common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (require-uppercase-characters common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (require-lowercase-characters common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (allow-users-to-change-password common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (expire-passwords common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (max-password-age common-lisp:nil :type
    (common-lisp:or |maxPasswordAgeType| common-lisp:null))
   (password-reuse-prevention common-lisp:nil :type
    (common-lisp:or |passwordReusePreventionType| common-lisp:null))
   (hard-expiry common-lisp:nil :type
    (common-lisp:or |booleanObjectType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'password-policy 'make-password-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input password-policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input password-policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-password-length))
      (common-lisp:list
       (common-lisp:cons "MinimumPasswordLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-symbols))
      (common-lisp:list
       (common-lisp:cons "RequireSymbols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-numbers))
      (common-lisp:list
       (common-lisp:cons "RequireNumbers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'require-uppercase-characters))
      (common-lisp:list
       (common-lisp:cons "RequireUppercaseCharacters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'require-lowercase-characters))
      (common-lisp:list
       (common-lisp:cons "RequireLowercaseCharacters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-users-to-change-password))
      (common-lisp:list
       (common-lisp:cons "AllowUsersToChangePassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expire-passwords))
      (common-lisp:list
       (common-lisp:cons "ExpirePasswords"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-password-age))
      (common-lisp:list
       (common-lisp:cons "MaxPasswordAge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'password-reuse-prevention))
      (common-lisp:list
       (common-lisp:cons "PasswordReusePrevention"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hard-expiry))
      (common-lisp:list
       (common-lisp:cons "HardExpiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input password-policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition password-policy-violation-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       password-policy-violation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'password-policy-violation-exception
                    'password-policy-violation-exception-message)))
(common-lisp:deftype permissions-boundary-attachment-type ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (permissions-boundary-decision-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-permissions-boundary-decision-detail-"))
   (allowed-by-permissions-boundary common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'permissions-boundary-decision-detail
                    'make-permissions-boundary-decision-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          permissions-boundary-decision-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          permissions-boundary-decision-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allowed-by-permissions-boundary))
      (common-lisp:list
       (common-lisp:cons "AllowedByPermissionsBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          permissions-boundary-decision-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (policy (:copier common-lisp:nil) (:conc-name "struct-shape-policy-"))
   (policy-name common-lisp:nil :type
    (common-lisp:or |policyNameType| common-lisp:null))
   (policy-id common-lisp:nil :type (common-lisp:or |idType| common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or |arnType| common-lisp:null))
   (path common-lisp:nil :type
    (common-lisp:or |policyPathType| common-lisp:null))
   (default-version-id common-lisp:nil :type
    (common-lisp:or |policyVersionIdType| common-lisp:null))
   (attachment-count common-lisp:nil :type
    (common-lisp:or |attachmentCountType| common-lisp:null))
   (permissions-boundary-usage-count common-lisp:nil :type
    (common-lisp:or |attachmentCountType| common-lisp:null))
   (is-attachable common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |policyDescriptionType| common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null))
   (update-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or |tagListType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policy 'make-policy))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-id))
      (common-lisp:list
       (common-lisp:cons "PolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'default-version-id))
      (common-lisp:list
       (common-lisp:cons "DefaultVersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'attachment-count))
      (common-lisp:list
       (common-lisp:cons "AttachmentCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary-usage-count))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundaryUsageCount"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-attachable))
      (common-lisp:list
       (common-lisp:cons "IsAttachable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'update-date))
      (common-lisp:list
       (common-lisp:cons "UpdateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (policy-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-detail-"))
   (policy-name common-lisp:nil :type
    (common-lisp:or |policyNameType| common-lisp:null))
   (policy-document common-lisp:nil :type
    (common-lisp:or |policyDocumentType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policy-detail 'make-policy-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-detail))
   common-lisp:nil))
(common-lisp:deftype policy-evaluation-decision-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition policy-evaluation-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       policy-evaluation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'policy-evaluation-exception
                    'policy-evaluation-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (policy-granting-service-access (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-granting-service-access-"))
   (policy-name (common-lisp:error ":policy-name is required") :type
    (common-lisp:or |policyNameType| common-lisp:null))
   (policy-type (common-lisp:error ":policy-type is required") :type
    (common-lisp:or |policyType| common-lisp:null))
   (policy-arn common-lisp:nil :type
    (common-lisp:or |arnType| common-lisp:null))
   (entity-type common-lisp:nil :type
    (common-lisp:or |policyOwnerEntityType| common-lisp:null))
   (entity-name common-lisp:nil :type
    (common-lisp:or |entityNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'policy-granting-service-access
                    'make-policy-granting-service-access))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          policy-granting-service-access))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          policy-granting-service-access))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-type))
      (common-lisp:list
       (common-lisp:cons "PolicyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type))
      (common-lisp:list
       (common-lisp:cons "EntityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-name))
      (common-lisp:list
       (common-lisp:cons "EntityName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          policy-granting-service-access))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (policy-group (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-group-"))
   (group-name common-lisp:nil :type
    (common-lisp:or |groupNameType| common-lisp:null))
   (group-id common-lisp:nil :type (common-lisp:or |idType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policy-group 'make-policy-group))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-group))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-group))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-id))
      (common-lisp:list
       (common-lisp:cons "GroupId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-group))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-group-list-type ()
   '(trivial-types:proper-list policy-group))
 (common-lisp:defun |make-policy-group-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-identifier-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition policy-not-attachable-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       policy-not-attachable-exception-message)))
 (common-lisp:export
  (common-lisp:list 'policy-not-attachable-exception
                    'policy-not-attachable-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (policy-role (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-role-"))
   (role-name common-lisp:nil :type
    (common-lisp:or |roleNameType| common-lisp:null))
   (role-id common-lisp:nil :type (common-lisp:or |idType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policy-role 'make-policy-role))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-role))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-role))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-id))
      (common-lisp:list
       (common-lisp:cons "RoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-role))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-role-list-type ()
   '(trivial-types:proper-list policy-role))
 (common-lisp:defun |make-policy-role-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-role))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-source-type () 'common-lisp:string)
(common-lisp:deftype policy-usage-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (policy-user (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-user-"))
   (user-name common-lisp:nil :type
    (common-lisp:or |userNameType| common-lisp:null))
   (user-id common-lisp:nil :type (common-lisp:or |idType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policy-user 'make-policy-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype policy-user-list-type ()
   '(trivial-types:proper-list policy-user))
 (common-lisp:defun |make-policy-user-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-user))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (policy-version (:copier common-lisp:nil)
      (:conc-name "struct-shape-policy-version-"))
   (document common-lisp:nil :type
    (common-lisp:or |policyDocumentType| common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or |policyVersionIdType| common-lisp:null))
   (is-default-version common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policy-version 'make-policy-version))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input policy-version))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input policy-version))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document))
      (common-lisp:list
       (common-lisp:cons "Document"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-default-version))
      (common-lisp:list
       (common-lisp:cons "IsDefaultVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input policy-version))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (position (:copier common-lisp:nil) (:conc-name "struct-shape-position-"))
   (line common-lisp:nil :type (common-lisp:or line-number common-lisp:null))
   (column common-lisp:nil :type
    (common-lisp:or column-number common-lisp:null)))
 (common-lisp:export (common-lisp:list 'position 'make-position))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input position))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input position))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'line))
      (common-lisp:list
       (common-lisp:cons "Line"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'column))
      (common-lisp:list
       (common-lisp:cons "Column"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input position))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-group-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-group-policy-request-"))
   (group-name (common-lisp:error ":group-name is required") :type
    (common-lisp:or |groupNameType| common-lisp:null))
   (policy-name (common-lisp:error ":policy-name is required") :type
    (common-lisp:or |policyNameType| common-lisp:null))
   (policy-document (common-lisp:error ":policy-document is required") :type
    (common-lisp:or |policyDocumentType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-group-policy-request 'make-put-group-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-group-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-group-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-group-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-role-permissions-boundary-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-role-permissions-boundary-request-"))
   (role-name (common-lisp:error ":role-name is required") :type
    (common-lisp:or |roleNameType| common-lisp:null))
   (permissions-boundary
    (common-lisp:error ":permissions-boundary is required") :type
    (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-role-permissions-boundary-request
                    'make-put-role-permissions-boundary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-role-permissions-boundary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-role-permissions-boundary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-role-permissions-boundary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-role-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-role-policy-request-"))
   (role-name (common-lisp:error ":role-name is required") :type
    (common-lisp:or |roleNameType| common-lisp:null))
   (policy-name (common-lisp:error ":policy-name is required") :type
    (common-lisp:or |policyNameType| common-lisp:null))
   (policy-document (common-lisp:error ":policy-document is required") :type
    (common-lisp:or |policyDocumentType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-role-policy-request 'make-put-role-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-role-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-role-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-role-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-user-permissions-boundary-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-user-permissions-boundary-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |userNameType| common-lisp:null))
   (permissions-boundary
    (common-lisp:error ":permissions-boundary is required") :type
    (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-user-permissions-boundary-request
                    'make-put-user-permissions-boundary-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-user-permissions-boundary-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-user-permissions-boundary-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-user-permissions-boundary-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-user-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-user-policy-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (policy-name (common-lisp:error ":policy-name is required") :type
    (common-lisp:or |policyNameType| common-lisp:null))
   (policy-document (common-lisp:error ":policy-document is required") :type
    (common-lisp:or |policyDocumentType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-user-policy-request 'make-put-user-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-user-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-user-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-name))
      (common-lisp:list
       (common-lisp:cons "PolicyName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-user-policy-request))
   common-lisp:nil))
(common-lisp:deftype reason-type () 'common-lisp:string)
(common-lisp:deftype region-name-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (remove-client-idfrom-open-idconnect-provider-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-remove-client-idfrom-open-idconnect-provider-request-"))
   (open-idconnect-provider-arn
    (common-lisp:error ":open-idconnect-provider-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (client-id (common-lisp:error ":client-id is required") :type
    (common-lisp:or |clientIDType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-client-idfrom-open-idconnect-provider-request
                    'make-remove-client-idfrom-open-idconnect-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-client-idfrom-open-idconnect-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-client-idfrom-open-idconnect-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idconnect-provider-arn))
      (common-lisp:list
       (common-lisp:cons "OpenIDConnectProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'client-id))
      (common-lisp:list
       (common-lisp:cons "ClientID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-client-idfrom-open-idconnect-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-role-from-instance-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-role-from-instance-profile-request-"))
   (instance-profile-name
    (common-lisp:error ":instance-profile-name is required") :type
    (common-lisp:or |instanceProfileNameType| common-lisp:null))
   (role-name (common-lisp:error ":role-name is required") :type
    (common-lisp:or |roleNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-role-from-instance-profile-request
                    'make-remove-role-from-instance-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-role-from-instance-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-role-from-instance-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-role-from-instance-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-user-from-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-remove-user-from-group-request-"))
   (group-name (common-lisp:error ":group-name is required") :type
    (common-lisp:or |groupNameType| common-lisp:null))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |existingUserNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-user-from-group-request
                    'make-remove-user-from-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          remove-user-from-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          remove-user-from-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          remove-user-from-group-request))
   common-lisp:nil))
(common-lisp:deftype report-content-type ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype report-format-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition report-generation-limit-exceeded-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       report-generation-limit-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'report-generation-limit-exceeded-exception
                    'report-generation-limit-exceeded-exception-message)))
(common-lisp:deftype report-state-description-type () 'common-lisp:string)
(common-lisp:deftype report-state-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (reset-service-specific-credential-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-reset-service-specific-credential-request-"))
   (user-name common-lisp:nil :type
    (common-lisp:or |userNameType| common-lisp:null))
   (service-specific-credential-id
    (common-lisp:error ":service-specific-credential-id is required") :type
    (common-lisp:or |serviceSpecificCredentialId| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reset-service-specific-credential-request
                    'make-reset-service-specific-credential-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-service-specific-credential-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-service-specific-credential-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-specific-credential-id))
      (common-lisp:list
       (common-lisp:cons "ServiceSpecificCredentialId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-service-specific-credential-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (reset-service-specific-credential-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-reset-service-specific-credential-response-"))
   (service-specific-credential common-lisp:nil :type
    (common-lisp:or service-specific-credential common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reset-service-specific-credential-response
                    'make-reset-service-specific-credential-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          reset-service-specific-credential-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          reset-service-specific-credential-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-specific-credential))
      (common-lisp:list
       (common-lisp:cons "ServiceSpecificCredential"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          reset-service-specific-credential-response))
   common-lisp:nil))
(common-lisp:deftype resource-handling-option-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-name-list-type ()
   '(trivial-types:proper-list resource-name-type))
 (common-lisp:defun |make-resource-name-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-name-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-name-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resource-specific-result (:copier common-lisp:nil)
      (:conc-name "struct-shape-resource-specific-result-"))
   (eval-resource-name (common-lisp:error ":eval-resource-name is required")
    :type (common-lisp:or resource-name-type common-lisp:null))
   (eval-resource-decision
    (common-lisp:error ":eval-resource-decision is required") :type
    (common-lisp:or policy-evaluation-decision-type common-lisp:null))
   (matched-statements common-lisp:nil :type
    (common-lisp:or statement-list-type common-lisp:null))
   (missing-context-values common-lisp:nil :type
    (common-lisp:or context-key-names-result-list-type common-lisp:null))
   (eval-decision-details common-lisp:nil :type
    (common-lisp:or eval-decision-details-type common-lisp:null))
   (permissions-boundary-decision-detail common-lisp:nil :type
    (common-lisp:or permissions-boundary-decision-detail common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-specific-result 'make-resource-specific-result))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resource-specific-result))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resource-specific-result))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'eval-resource-name))
      (common-lisp:list
       (common-lisp:cons "EvalResourceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'eval-resource-decision))
      (common-lisp:list
       (common-lisp:cons "EvalResourceDecision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'matched-statements))
      (common-lisp:list
       (common-lisp:cons "MatchedStatements"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'missing-context-values))
      (common-lisp:list
       (common-lisp:cons "MissingContextValues"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'eval-decision-details))
      (common-lisp:list
       (common-lisp:cons "EvalDecisionDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary-decision-detail))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundaryDecisionDetail"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resource-specific-result))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resource-specific-result-list-type ()
   '(trivial-types:proper-list resource-specific-result))
 (common-lisp:defun |make-resource-specific-result-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resource-specific-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (resync-mfadevice-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-resync-mfadevice-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (serial-number (common-lisp:error ":serial-number is required") :type
    (common-lisp:or |serialNumberType| common-lisp:null))
   (authentication-code1
    (common-lisp:error ":authentication-code1 is required") :type
    (common-lisp:or |authenticationCodeType| common-lisp:null))
   (authentication-code2
    (common-lisp:error ":authentication-code2 is required") :type
    (common-lisp:or |authenticationCodeType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resync-mfadevice-request 'make-resync-mfadevice-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resync-mfadevice-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resync-mfadevice-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-code1))
      (common-lisp:list
       (common-lisp:cons "AuthenticationCode1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'authentication-code2))
      (common-lisp:list
       (common-lisp:cons "AuthenticationCode2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resync-mfadevice-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (role (:copier common-lisp:nil) (:conc-name "struct-shape-role-"))
   (path (common-lisp:error ":path is required") :type
    (common-lisp:or |pathType| common-lisp:null))
   (role-name (common-lisp:error ":role-name is required") :type
    (common-lisp:or |roleNameType| common-lisp:null))
   (role-id (common-lisp:error ":role-id is required") :type
    (common-lisp:or |idType| common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (create-date (common-lisp:error ":create-date is required") :type
    (common-lisp:or |dateType| common-lisp:null))
   (assume-role-policy-document common-lisp:nil :type
    (common-lisp:or |policyDocumentType| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |roleDescriptionType| common-lisp:null))
   (max-session-duration common-lisp:nil :type
    (common-lisp:or |roleMaxSessionDurationType| common-lisp:null))
   (permissions-boundary common-lisp:nil :type
    (common-lisp:or attached-permissions-boundary common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or |tagListType| common-lisp:null))
   (role-last-used common-lisp:nil :type
    (common-lisp:or role-last-used common-lisp:null)))
 (common-lisp:export (common-lisp:list 'role 'make-role))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input role))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input role))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-id))
      (common-lisp:list
       (common-lisp:cons "RoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assume-role-policy-document))
      (common-lisp:list
       (common-lisp:cons "AssumeRolePolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-session-duration))
      (common-lisp:list
       (common-lisp:cons "MaxSessionDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-last-used))
      (common-lisp:list
       (common-lisp:cons "RoleLastUsed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input role))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (role-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-role-detail-"))
   (path common-lisp:nil :type (common-lisp:or |pathType| common-lisp:null))
   (role-name common-lisp:nil :type
    (common-lisp:or |roleNameType| common-lisp:null))
   (role-id common-lisp:nil :type (common-lisp:or |idType| common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or |arnType| common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null))
   (assume-role-policy-document common-lisp:nil :type
    (common-lisp:or |policyDocumentType| common-lisp:null))
   (instance-profile-list common-lisp:nil :type
    (common-lisp:or |instanceProfileListType| common-lisp:null))
   (role-policy-list common-lisp:nil :type
    (common-lisp:or |policyDetailListType| common-lisp:null))
   (attached-managed-policies common-lisp:nil :type
    (common-lisp:or |attachedPoliciesListType| common-lisp:null))
   (permissions-boundary common-lisp:nil :type
    (common-lisp:or attached-permissions-boundary common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or |tagListType| common-lisp:null))
   (role-last-used common-lisp:nil :type
    (common-lisp:or role-last-used common-lisp:null)))
 (common-lisp:export (common-lisp:list 'role-detail 'make-role-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input role-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input role-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-id))
      (common-lisp:list
       (common-lisp:cons "RoleId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'assume-role-policy-document))
      (common-lisp:list
       (common-lisp:cons "AssumeRolePolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-list))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-policy-list))
      (common-lisp:list
       (common-lisp:cons "RolePolicyList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attached-managed-policies))
      (common-lisp:list
       (common-lisp:cons "AttachedManagedPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-last-used))
      (common-lisp:list
       (common-lisp:cons "RoleLastUsed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input role-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (role-last-used (:copier common-lisp:nil)
      (:conc-name "struct-shape-role-last-used-"))
   (last-used-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null))
   (region common-lisp:nil :type
    (common-lisp:or |stringType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'role-last-used 'make-role-last-used))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input role-last-used))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input role-last-used))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-used-date))
      (common-lisp:list
       (common-lisp:cons "LastUsedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input role-last-used))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype role-usage-list-type ()
   '(trivial-types:proper-list role-usage-type))
 (common-lisp:defun |make-role-usage-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list role-usage-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (role-usage-type (:copier common-lisp:nil)
      (:conc-name "struct-shape-role-usage-type-"))
   (region common-lisp:nil :type
    (common-lisp:or region-name-type common-lisp:null))
   (resources common-lisp:nil :type
    (common-lisp:or arn-list-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'role-usage-type 'make-role-usage-type))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input role-usage-type))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input role-usage-type))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'region))
      (common-lisp:list
       (common-lisp:cons "Region"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resources))
      (common-lisp:list
       (common-lisp:cons "Resources"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input role-usage-type))
   common-lisp:nil))
(common-lisp:deftype samlmetadata-document-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (samlprovider-list-entry (:copier common-lisp:nil)
      (:conc-name "struct-shape-samlprovider-list-entry-"))
   (arn common-lisp:nil :type (common-lisp:or |arnType| common-lisp:null))
   (valid-until common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'samlprovider-list-entry 'make-samlprovider-list-entry))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          samlprovider-list-entry))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          samlprovider-list-entry))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'valid-until))
      (common-lisp:list
       (common-lisp:cons "ValidUntil"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          samlprovider-list-entry))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype samlprovider-list-type ()
   '(trivial-types:proper-list samlprovider-list-entry))
 (common-lisp:defun |make-samlprovider-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list samlprovider-list-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype samlprovider-name-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (sshpublic-key (:copier common-lisp:nil)
      (:conc-name "struct-shape-sshpublic-key-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |userNameType| common-lisp:null))
   (sshpublic-key-id (common-lisp:error ":sshpublic-key-id is required") :type
    (common-lisp:or |publicKeyIdType| common-lisp:null))
   (fingerprint (common-lisp:error ":fingerprint is required") :type
    (common-lisp:or |publicKeyFingerprintType| common-lisp:null))
   (sshpublic-key-body (common-lisp:error ":sshpublic-key-body is required")
    :type (common-lisp:or |publicKeyMaterialType| common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or |statusType| common-lisp:null))
   (upload-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'sshpublic-key 'make-sshpublic-key))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sshpublic-key))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sshpublic-key))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sshpublic-key-id))
      (common-lisp:list
       (common-lisp:cons "SSHPublicKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'fingerprint))
      (common-lisp:list
       (common-lisp:cons "Fingerprint"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sshpublic-key-body))
      (common-lisp:list
       (common-lisp:cons "SSHPublicKeyBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-date))
      (common-lisp:list
       (common-lisp:cons "UploadDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sshpublic-key))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype sshpublic-key-list-type ()
   '(trivial-types:proper-list sshpublic-key-metadata))
 (common-lisp:defun |make-sshpublic-key-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sshpublic-key-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (sshpublic-key-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-sshpublic-key-metadata-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |userNameType| common-lisp:null))
   (sshpublic-key-id (common-lisp:error ":sshpublic-key-id is required") :type
    (common-lisp:or |publicKeyIdType| common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or |statusType| common-lisp:null))
   (upload-date (common-lisp:error ":upload-date is required") :type
    (common-lisp:or |dateType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sshpublic-key-metadata 'make-sshpublic-key-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          sshpublic-key-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          sshpublic-key-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sshpublic-key-id))
      (common-lisp:list
       (common-lisp:cons "SSHPublicKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-date))
      (common-lisp:list
       (common-lisp:cons "UploadDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          sshpublic-key-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (server-certificate (:copier common-lisp:nil)
      (:conc-name "struct-shape-server-certificate-"))
   (server-certificate-metadata
    (common-lisp:error ":server-certificate-metadata is required") :type
    (common-lisp:or server-certificate-metadata common-lisp:null))
   (certificate-body (common-lisp:error ":certificate-body is required") :type
    (common-lisp:or |certificateBodyType| common-lisp:null))
   (certificate-chain common-lisp:nil :type
    (common-lisp:or |certificateChainType| common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or |tagListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'server-certificate 'make-server-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input server-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input server-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-metadata))
      (common-lisp:list
       (common-lisp:cons "ServerCertificateMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-body))
      (common-lisp:list
       (common-lisp:cons "CertificateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-chain))
      (common-lisp:list
       (common-lisp:cons "CertificateChain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input server-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (server-certificate-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-server-certificate-metadata-"))
   (path (common-lisp:error ":path is required") :type
    (common-lisp:or |pathType| common-lisp:null))
   (server-certificate-name
    (common-lisp:error ":server-certificate-name is required") :type
    (common-lisp:or |serverCertificateNameType| common-lisp:null))
   (server-certificate-id
    (common-lisp:error ":server-certificate-id is required") :type
    (common-lisp:or |idType| common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (upload-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null))
   (expiration common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'server-certificate-metadata
                    'make-server-certificate-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          server-certificate-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          server-certificate-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-name))
      (common-lisp:list
       (common-lisp:cons "ServerCertificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-id))
      (common-lisp:list
       (common-lisp:cons "ServerCertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-date))
      (common-lisp:list
       (common-lisp:cons "UploadDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'expiration))
      (common-lisp:list
       (common-lisp:cons "Expiration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          server-certificate-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-failure-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-failure-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-failure-exception
                    'service-failure-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (service-last-accessed (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-last-accessed-"))
   (service-name (common-lisp:error ":service-name is required") :type
    (common-lisp:or |serviceNameType| common-lisp:null))
   (last-authenticated common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null))
   (service-namespace (common-lisp:error ":service-namespace is required")
    :type (common-lisp:or |serviceNamespaceType| common-lisp:null))
   (last-authenticated-entity common-lisp:nil :type
    (common-lisp:or |arnType| common-lisp:null))
   (last-authenticated-region common-lisp:nil :type
    (common-lisp:or |stringType| common-lisp:null))
   (total-authenticated-entities common-lisp:nil :type
    (common-lisp:or |integerType| common-lisp:null))
   (tracked-actions-last-accessed common-lisp:nil :type
    (common-lisp:or tracked-actions-last-accessed common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-last-accessed 'make-service-last-accessed))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-last-accessed))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-last-accessed))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-authenticated))
      (common-lisp:list
       (common-lisp:cons "LastAuthenticated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-namespace))
      (common-lisp:list
       (common-lisp:cons "ServiceNamespace"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-authenticated-entity))
      (common-lisp:list
       (common-lisp:cons "LastAuthenticatedEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-authenticated-region))
      (common-lisp:list
       (common-lisp:cons "LastAuthenticatedRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'total-authenticated-entities))
      (common-lisp:list
       (common-lisp:cons "TotalAuthenticatedEntities"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'tracked-actions-last-accessed))
      (common-lisp:list
       (common-lisp:cons "TrackedActionsLastAccessed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-last-accessed))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition service-not-supported-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-not-supported-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-not-supported-exception
                    'service-not-supported-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (service-specific-credential (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-specific-credential-"))
   (create-date (common-lisp:error ":create-date is required") :type
    (common-lisp:or |dateType| common-lisp:null))
   (service-name (common-lisp:error ":service-name is required") :type
    (common-lisp:or |serviceName| common-lisp:null))
   (service-user-name (common-lisp:error ":service-user-name is required")
    :type (common-lisp:or |serviceUserName| common-lisp:null))
   (service-password (common-lisp:error ":service-password is required") :type
    (common-lisp:or |servicePassword| common-lisp:null))
   (service-specific-credential-id
    (common-lisp:error ":service-specific-credential-id is required") :type
    (common-lisp:or |serviceSpecificCredentialId| common-lisp:null))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |userNameType| common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or |statusType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-specific-credential
                    'make-service-specific-credential))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-specific-credential))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-specific-credential))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-user-name))
      (common-lisp:list
       (common-lisp:cons "ServiceUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-password))
      (common-lisp:list
       (common-lisp:cons "ServicePassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-specific-credential-id))
      (common-lisp:list
       (common-lisp:cons "ServiceSpecificCredentialId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-specific-credential))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (service-specific-credential-metadata (:copier common-lisp:nil)
      (:conc-name "struct-shape-service-specific-credential-metadata-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |userNameType| common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or |statusType| common-lisp:null))
   (service-user-name (common-lisp:error ":service-user-name is required")
    :type (common-lisp:or |serviceUserName| common-lisp:null))
   (create-date (common-lisp:error ":create-date is required") :type
    (common-lisp:or |dateType| common-lisp:null))
   (service-specific-credential-id
    (common-lisp:error ":service-specific-credential-id is required") :type
    (common-lisp:or |serviceSpecificCredentialId| common-lisp:null))
   (service-name (common-lisp:error ":service-name is required") :type
    (common-lisp:or |serviceName| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-specific-credential-metadata
                    'make-service-specific-credential-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          service-specific-credential-metadata))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          service-specific-credential-metadata))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-user-name))
      (common-lisp:list
       (common-lisp:cons "ServiceUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-specific-credential-id))
      (common-lisp:list
       (common-lisp:cons "ServiceSpecificCredentialId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-name))
      (common-lisp:list
       (common-lisp:cons "ServiceName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          service-specific-credential-metadata))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype service-specific-credentials-list-type ()
   '(trivial-types:proper-list service-specific-credential-metadata))
 (common-lisp:defun |make-service-specific-credentials-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            service-specific-credential-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype services-last-accessed ()
   '(trivial-types:proper-list service-last-accessed))
 (common-lisp:defun |make-services-last-accessed|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list service-last-accessed))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (set-default-policy-version-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-set-default-policy-version-request-"))
   (policy-arn (common-lisp:error ":policy-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (version-id (common-lisp:error ":version-id is required") :type
    (common-lisp:or |policyVersionIdType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-default-policy-version-request
                    'make-set-default-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-default-policy-version-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-default-policy-version-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'version-id))
      (common-lisp:list
       (common-lisp:cons "VersionId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-default-policy-version-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (set-security-token-service-preferences-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-set-security-token-service-preferences-request-"))
   (global-endpoint-token-version
    (common-lisp:error ":global-endpoint-token-version is required") :type
    (common-lisp:or |globalEndpointTokenVersion| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-security-token-service-preferences-request
                    'make-set-security-token-service-preferences-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          set-security-token-service-preferences-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          set-security-token-service-preferences-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'global-endpoint-token-version))
      (common-lisp:list
       (common-lisp:cons "GlobalEndpointTokenVersion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          set-security-token-service-preferences-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (signing-certificate (:copier common-lisp:nil)
      (:conc-name "struct-shape-signing-certificate-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |userNameType| common-lisp:null))
   (certificate-id (common-lisp:error ":certificate-id is required") :type
    (common-lisp:or |certificateIdType| common-lisp:null))
   (certificate-body (common-lisp:error ":certificate-body is required") :type
    (common-lisp:or |certificateBodyType| common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or |statusType| common-lisp:null))
   (upload-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'signing-certificate 'make-signing-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input signing-certificate))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input signing-certificate))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "CertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-body))
      (common-lisp:list
       (common-lisp:cons "CertificateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'upload-date))
      (common-lisp:list
       (common-lisp:cons "UploadDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input signing-certificate))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (simulate-custom-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-simulate-custom-policy-request-"))
   (policy-input-list (common-lisp:error ":policy-input-list is required")
    :type (common-lisp:or simulation-policy-list-type common-lisp:null))
   (permissions-boundary-policy-input-list common-lisp:nil :type
    (common-lisp:or simulation-policy-list-type common-lisp:null))
   (action-names (common-lisp:error ":action-names is required") :type
    (common-lisp:or action-name-list-type common-lisp:null))
   (resource-arns common-lisp:nil :type
    (common-lisp:or resource-name-list-type common-lisp:null))
   (resource-policy common-lisp:nil :type
    (common-lisp:or |policyDocumentType| common-lisp:null))
   (resource-owner common-lisp:nil :type
    (common-lisp:or resource-name-type common-lisp:null))
   (caller-arn common-lisp:nil :type
    (common-lisp:or resource-name-type common-lisp:null))
   (context-entries common-lisp:nil :type
    (common-lisp:or context-entry-list-type common-lisp:null))
   (resource-handling-option common-lisp:nil :type
    (common-lisp:or resource-handling-option-type common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'simulate-custom-policy-request
                    'make-simulate-custom-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          simulate-custom-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          simulate-custom-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-input-list))
      (common-lisp:list
       (common-lisp:cons "PolicyInputList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary-policy-input-list))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundaryPolicyInputList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-names))
      (common-lisp:list
       (common-lisp:cons "ActionNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arns))
      (common-lisp:list
       (common-lisp:cons "ResourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-policy))
      (common-lisp:list
       (common-lisp:cons "ResourcePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "ResourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caller-arn))
      (common-lisp:list
       (common-lisp:cons "CallerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-entries))
      (common-lisp:list
       (common-lisp:cons "ContextEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-handling-option))
      (common-lisp:list
       (common-lisp:cons "ResourceHandlingOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          simulate-custom-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (simulate-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-simulate-policy-response-"))
   (evaluation-results common-lisp:nil :type
    (common-lisp:or evaluation-results-list-type common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |responseMarkerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'simulate-policy-response 'make-simulate-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          simulate-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          simulate-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'evaluation-results))
      (common-lisp:list
       (common-lisp:cons "EvaluationResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'is-truncated))
      (common-lisp:list
       (common-lisp:cons "IsTruncated"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          simulate-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (simulate-principal-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-simulate-principal-policy-request-"))
   (policy-source-arn (common-lisp:error ":policy-source-arn is required")
    :type (common-lisp:or |arnType| common-lisp:null))
   (policy-input-list common-lisp:nil :type
    (common-lisp:or simulation-policy-list-type common-lisp:null))
   (permissions-boundary-policy-input-list common-lisp:nil :type
    (common-lisp:or simulation-policy-list-type common-lisp:null))
   (action-names (common-lisp:error ":action-names is required") :type
    (common-lisp:or action-name-list-type common-lisp:null))
   (resource-arns common-lisp:nil :type
    (common-lisp:or resource-name-list-type common-lisp:null))
   (resource-policy common-lisp:nil :type
    (common-lisp:or |policyDocumentType| common-lisp:null))
   (resource-owner common-lisp:nil :type
    (common-lisp:or resource-name-type common-lisp:null))
   (caller-arn common-lisp:nil :type
    (common-lisp:or resource-name-type common-lisp:null))
   (context-entries common-lisp:nil :type
    (common-lisp:or context-entry-list-type common-lisp:null))
   (resource-handling-option common-lisp:nil :type
    (common-lisp:or resource-handling-option-type common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'simulate-principal-policy-request
                    'make-simulate-principal-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          simulate-principal-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          simulate-principal-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-source-arn))
      (common-lisp:list
       (common-lisp:cons "PolicySourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-input-list))
      (common-lisp:list
       (common-lisp:cons "PolicyInputList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary-policy-input-list))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundaryPolicyInputList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-names))
      (common-lisp:list
       (common-lisp:cons "ActionNames"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arns))
      (common-lisp:list
       (common-lisp:cons "ResourceArns"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-policy))
      (common-lisp:list
       (common-lisp:cons "ResourcePolicy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-owner))
      (common-lisp:list
       (common-lisp:cons "ResourceOwner"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'caller-arn))
      (common-lisp:list
       (common-lisp:cons "CallerArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'context-entries))
      (common-lisp:list
       (common-lisp:cons "ContextEntries"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resource-handling-option))
      (common-lisp:list
       (common-lisp:cons "ResourceHandlingOption"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-items))
      (common-lisp:list
       (common-lisp:cons "MaxItems"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'marker))
      (common-lisp:list
       (common-lisp:cons "Marker"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          simulate-principal-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype simulation-policy-list-type ()
   '(trivial-types:proper-list |policyDocumentType|))
 (common-lisp:defun |make-simulation-policy-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |policyDocumentType|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (statement (:copier common-lisp:nil)
      (:conc-name "struct-shape-statement-"))
   (source-policy-id common-lisp:nil :type
    (common-lisp:or policy-identifier-type common-lisp:null))
   (source-policy-type common-lisp:nil :type
    (common-lisp:or policy-source-type common-lisp:null))
   (start-position common-lisp:nil :type
    (common-lisp:or position common-lisp:null))
   (end-position common-lisp:nil :type
    (common-lisp:or position common-lisp:null)))
 (common-lisp:export (common-lisp:list 'statement 'make-statement))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input statement))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input statement))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-policy-id))
      (common-lisp:list
       (common-lisp:cons "SourcePolicyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'source-policy-type))
      (common-lisp:list
       (common-lisp:cons "SourcePolicyType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-position))
      (common-lisp:list
       (common-lisp:cons "StartPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-position))
      (common-lisp:list
       (common-lisp:cons "EndPosition"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input statement))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype statement-list-type ()
   '(trivial-types:proper-list statement))
 (common-lisp:defun |make-statement-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list statement))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or |tagKeyType| common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or |tagValueType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-instance-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-instance-profile-request-"))
   (instance-profile-name
    (common-lisp:error ":instance-profile-name is required") :type
    (common-lisp:or |instanceProfileNameType| common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or |tagListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-instance-profile-request
                    'make-tag-instance-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-instance-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-instance-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-instance-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-mfadevice-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-mfadevice-request-"))
   (serial-number (common-lisp:error ":serial-number is required") :type
    (common-lisp:or |serialNumberType| common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or |tagListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-mfadevice-request 'make-tag-mfadevice-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-mfadevice-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-mfadevice-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-mfadevice-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-open-idconnect-provider-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-open-idconnect-provider-request-"))
   (open-idconnect-provider-arn
    (common-lisp:error ":open-idconnect-provider-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or |tagListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-open-idconnect-provider-request
                    'make-tag-open-idconnect-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-open-idconnect-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-open-idconnect-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idconnect-provider-arn))
      (common-lisp:list
       (common-lisp:cons "OpenIDConnectProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-open-idconnect-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-policy-request-"))
   (policy-arn (common-lisp:error ":policy-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or |tagListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-policy-request 'make-tag-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-role-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-role-request-"))
   (role-name (common-lisp:error ":role-name is required") :type
    (common-lisp:or |roleNameType| common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or |tagListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-role-request 'make-tag-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-samlprovider-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-samlprovider-request-"))
   (samlprovider-arn (common-lisp:error ":samlprovider-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or |tagListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-samlprovider-request 'make-tag-samlprovider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-samlprovider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-samlprovider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'samlprovider-arn))
      (common-lisp:list
       (common-lisp:cons "SAMLProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-samlprovider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-server-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-server-certificate-request-"))
   (server-certificate-name
    (common-lisp:error ":server-certificate-name is required") :type
    (common-lisp:or |serverCertificateNameType| common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or |tagListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-server-certificate-request
                    'make-tag-server-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-server-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-server-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-name))
      (common-lisp:list
       (common-lisp:cons "ServerCertificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-server-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-user-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or |tagListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-user-request 'make-tag-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tracked-action-last-accessed (:copier common-lisp:nil)
      (:conc-name "struct-shape-tracked-action-last-accessed-"))
   (action-name common-lisp:nil :type
    (common-lisp:or |stringType| common-lisp:null))
   (last-accessed-entity common-lisp:nil :type
    (common-lisp:or |arnType| common-lisp:null))
   (last-accessed-time common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null))
   (last-accessed-region common-lisp:nil :type
    (common-lisp:or |stringType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tracked-action-last-accessed
                    'make-tracked-action-last-accessed))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tracked-action-last-accessed))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tracked-action-last-accessed))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'action-name))
      (common-lisp:list
       (common-lisp:cons "ActionName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-accessed-entity))
      (common-lisp:list
       (common-lisp:cons "LastAccessedEntity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-accessed-time))
      (common-lisp:list
       (common-lisp:cons "LastAccessedTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'last-accessed-region))
      (common-lisp:list
       (common-lisp:cons "LastAccessedRegion"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tracked-action-last-accessed))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype tracked-actions-last-accessed ()
   '(trivial-types:proper-list tracked-action-last-accessed))
 (common-lisp:defun |make-tracked-actions-last-accessed|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            tracked-action-last-accessed))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition unmodifiable-entity-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unmodifiable-entity-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unmodifiable-entity-exception
                    'unmodifiable-entity-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition unrecognized-public-key-encoding-exception
     (iam-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       unrecognized-public-key-encoding-exception-message)))
 (common-lisp:export
  (common-lisp:list 'unrecognized-public-key-encoding-exception
                    'unrecognized-public-key-encoding-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-instance-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-instance-profile-request-"))
   (instance-profile-name
    (common-lisp:error ":instance-profile-name is required") :type
    (common-lisp:or |instanceProfileNameType| common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or |tagKeyListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-instance-profile-request
                    'make-untag-instance-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-instance-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-instance-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'instance-profile-name))
      (common-lisp:list
       (common-lisp:cons "InstanceProfileName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-instance-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-mfadevice-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-mfadevice-request-"))
   (serial-number (common-lisp:error ":serial-number is required") :type
    (common-lisp:or |serialNumberType| common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or |tagKeyListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-mfadevice-request 'make-untag-mfadevice-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-mfadevice-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-mfadevice-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-mfadevice-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-open-idconnect-provider-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-open-idconnect-provider-request-"))
   (open-idconnect-provider-arn
    (common-lisp:error ":open-idconnect-provider-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or |tagKeyListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-open-idconnect-provider-request
                    'make-untag-open-idconnect-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-open-idconnect-provider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-open-idconnect-provider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idconnect-provider-arn))
      (common-lisp:list
       (common-lisp:cons "OpenIDConnectProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-open-idconnect-provider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-policy-request-"))
   (policy-arn (common-lisp:error ":policy-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or |tagKeyListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-policy-request 'make-untag-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-arn))
      (common-lisp:list
       (common-lisp:cons "PolicyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-role-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-role-request-"))
   (role-name (common-lisp:error ":role-name is required") :type
    (common-lisp:or |roleNameType| common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or |tagKeyListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-role-request 'make-untag-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-samlprovider-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-samlprovider-request-"))
   (samlprovider-arn (common-lisp:error ":samlprovider-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or |tagKeyListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-samlprovider-request
                    'make-untag-samlprovider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-samlprovider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-samlprovider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'samlprovider-arn))
      (common-lisp:list
       (common-lisp:cons "SAMLProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-samlprovider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-server-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-server-certificate-request-"))
   (server-certificate-name
    (common-lisp:error ":server-certificate-name is required") :type
    (common-lisp:or |serverCertificateNameType| common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or |tagKeyListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-server-certificate-request
                    'make-untag-server-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-server-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-server-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-name))
      (common-lisp:list
       (common-lisp:cons "ServerCertificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-server-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-user-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or |tagKeyListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-user-request 'make-untag-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input untag-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input untag-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input untag-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-access-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-access-key-request-"))
   (user-name common-lisp:nil :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (access-key-id (common-lisp:error ":access-key-id is required") :type
    (common-lisp:or |accessKeyIdType| common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or |statusType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-access-key-request
                    'make-update-access-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-access-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-access-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'access-key-id))
      (common-lisp:list
       (common-lisp:cons "AccessKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-access-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-account-password-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-account-password-policy-request-"))
   (minimum-password-length common-lisp:nil :type
    (common-lisp:or |minimumPasswordLengthType| common-lisp:null))
   (require-symbols common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (require-numbers common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (require-uppercase-characters common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (require-lowercase-characters common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (allow-users-to-change-password common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (max-password-age common-lisp:nil :type
    (common-lisp:or |maxPasswordAgeType| common-lisp:null))
   (password-reuse-prevention common-lisp:nil :type
    (common-lisp:or |passwordReusePreventionType| common-lisp:null))
   (hard-expiry common-lisp:nil :type
    (common-lisp:or |booleanObjectType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-account-password-policy-request
                    'make-update-account-password-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-account-password-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-account-password-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'minimum-password-length))
      (common-lisp:list
       (common-lisp:cons "MinimumPasswordLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-symbols))
      (common-lisp:list
       (common-lisp:cons "RequireSymbols"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'require-numbers))
      (common-lisp:list
       (common-lisp:cons "RequireNumbers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'require-uppercase-characters))
      (common-lisp:list
       (common-lisp:cons "RequireUppercaseCharacters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'require-lowercase-characters))
      (common-lisp:list
       (common-lisp:cons "RequireLowercaseCharacters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'allow-users-to-change-password))
      (common-lisp:list
       (common-lisp:cons "AllowUsersToChangePassword"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-password-age))
      (common-lisp:list
       (common-lisp:cons "MaxPasswordAge"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'password-reuse-prevention))
      (common-lisp:list
       (common-lisp:cons "PasswordReusePrevention"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'hard-expiry))
      (common-lisp:list
       (common-lisp:cons "HardExpiry"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-account-password-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-assume-role-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-assume-role-policy-request-"))
   (role-name (common-lisp:error ":role-name is required") :type
    (common-lisp:or |roleNameType| common-lisp:null))
   (policy-document (common-lisp:error ":policy-document is required") :type
    (common-lisp:or |policyDocumentType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-assume-role-policy-request
                    'make-update-assume-role-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-assume-role-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-assume-role-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy-document))
      (common-lisp:list
       (common-lisp:cons "PolicyDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-assume-role-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-group-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-group-request-"))
   (group-name (common-lisp:error ":group-name is required") :type
    (common-lisp:or |groupNameType| common-lisp:null))
   (new-path common-lisp:nil :type
    (common-lisp:or |pathType| common-lisp:null))
   (new-group-name common-lisp:nil :type
    (common-lisp:or |groupNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-group-request 'make-update-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-group-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-group-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-name))
      (common-lisp:list
       (common-lisp:cons "GroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-path))
      (common-lisp:list
       (common-lisp:cons "NewPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-group-name))
      (common-lisp:list
       (common-lisp:cons "NewGroupName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-group-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-login-profile-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-login-profile-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |userNameType| common-lisp:null))
   (password common-lisp:nil :type
    (common-lisp:or |passwordType| common-lisp:null))
   (password-reset-required common-lisp:nil :type
    (common-lisp:or |booleanObjectType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-login-profile-request
                    'make-update-login-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-login-profile-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-login-profile-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password))
      (common-lisp:list
       (common-lisp:cons "Password"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'password-reset-required))
      (common-lisp:list
       (common-lisp:cons "PasswordResetRequired"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-login-profile-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-open-idconnect-provider-thumbprint-request
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-update-open-idconnect-provider-thumbprint-request-"))
   (open-idconnect-provider-arn
    (common-lisp:error ":open-idconnect-provider-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (thumbprint-list (common-lisp:error ":thumbprint-list is required") :type
    (common-lisp:or |thumbprintListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-open-idconnect-provider-thumbprint-request
                    'make-update-open-idconnect-provider-thumbprint-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-open-idconnect-provider-thumbprint-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-open-idconnect-provider-thumbprint-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'open-idconnect-provider-arn))
      (common-lisp:list
       (common-lisp:cons "OpenIDConnectProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'thumbprint-list))
      (common-lisp:list
       (common-lisp:cons "ThumbprintList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-open-idconnect-provider-thumbprint-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-role-description-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-role-description-request-"))
   (role-name (common-lisp:error ":role-name is required") :type
    (common-lisp:or |roleNameType| common-lisp:null))
   (description (common-lisp:error ":description is required") :type
    (common-lisp:or |roleDescriptionType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-role-description-request
                    'make-update-role-description-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-role-description-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-role-description-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-role-description-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-role-description-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-role-description-response-"))
   (role common-lisp:nil :type (common-lisp:or role common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-role-description-response
                    'make-update-role-description-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-role-description-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-role-description-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role))
      (common-lisp:list
       (common-lisp:cons "Role"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-role-description-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-role-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-role-request-"))
   (role-name (common-lisp:error ":role-name is required") :type
    (common-lisp:or |roleNameType| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |roleDescriptionType| common-lisp:null))
   (max-session-duration common-lisp:nil :type
    (common-lisp:or |roleMaxSessionDurationType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-role-request 'make-update-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-role-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-role-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-name))
      (common-lisp:list
       (common-lisp:cons "RoleName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'description))
      (common-lisp:list
       (common-lisp:cons "Description"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'max-session-duration))
      (common-lisp:list
       (common-lisp:cons "MaxSessionDuration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-role-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-role-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-role-response-")))
 (common-lisp:export
  (common-lisp:list 'update-role-response 'make-update-role-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-role-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-role-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-samlprovider-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-samlprovider-request-"))
   (samlmetadata-document
    (common-lisp:error ":samlmetadata-document is required") :type
    (common-lisp:or samlmetadata-document-type common-lisp:null))
   (samlprovider-arn (common-lisp:error ":samlprovider-arn is required") :type
    (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-samlprovider-request
                    'make-update-samlprovider-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-samlprovider-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-samlprovider-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'samlmetadata-document))
      (common-lisp:list
       (common-lisp:cons "SAMLMetadataDocument"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'samlprovider-arn))
      (common-lisp:list
       (common-lisp:cons "SAMLProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-samlprovider-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-samlprovider-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-samlprovider-response-"))
   (samlprovider-arn common-lisp:nil :type
    (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-samlprovider-response
                    'make-update-samlprovider-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-samlprovider-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-samlprovider-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'samlprovider-arn))
      (common-lisp:list
       (common-lisp:cons "SAMLProviderArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-samlprovider-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-sshpublic-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-sshpublic-key-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |userNameType| common-lisp:null))
   (sshpublic-key-id (common-lisp:error ":sshpublic-key-id is required") :type
    (common-lisp:or |publicKeyIdType| common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or |statusType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-sshpublic-key-request
                    'make-update-sshpublic-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-sshpublic-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-sshpublic-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sshpublic-key-id))
      (common-lisp:list
       (common-lisp:cons "SSHPublicKeyId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-sshpublic-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-server-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-server-certificate-request-"))
   (server-certificate-name
    (common-lisp:error ":server-certificate-name is required") :type
    (common-lisp:or |serverCertificateNameType| common-lisp:null))
   (new-path common-lisp:nil :type
    (common-lisp:or |pathType| common-lisp:null))
   (new-server-certificate-name common-lisp:nil :type
    (common-lisp:or |serverCertificateNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-server-certificate-request
                    'make-update-server-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-server-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-server-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-name))
      (common-lisp:list
       (common-lisp:cons "ServerCertificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-path))
      (common-lisp:list
       (common-lisp:cons "NewPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'new-server-certificate-name))
      (common-lisp:list
       (common-lisp:cons "NewServerCertificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-server-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-service-specific-credential-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-service-specific-credential-request-"))
   (user-name common-lisp:nil :type
    (common-lisp:or |userNameType| common-lisp:null))
   (service-specific-credential-id
    (common-lisp:error ":service-specific-credential-id is required") :type
    (common-lisp:or |serviceSpecificCredentialId| common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or |statusType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-service-specific-credential-request
                    'make-update-service-specific-credential-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-service-specific-credential-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-service-specific-credential-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'service-specific-credential-id))
      (common-lisp:list
       (common-lisp:cons "ServiceSpecificCredentialId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-service-specific-credential-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-signing-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-signing-certificate-request-"))
   (user-name common-lisp:nil :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (certificate-id (common-lisp:error ":certificate-id is required") :type
    (common-lisp:or |certificateIdType| common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or |statusType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-signing-certificate-request
                    'make-update-signing-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-signing-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-signing-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-id))
      (common-lisp:list
       (common-lisp:cons "CertificateId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-signing-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-user-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-user-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (new-path common-lisp:nil :type
    (common-lisp:or |pathType| common-lisp:null))
   (new-user-name common-lisp:nil :type
    (common-lisp:or |userNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-user-request 'make-update-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input update-user-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-path))
      (common-lisp:list
       (common-lisp:cons "NewPath"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'new-user-name))
      (common-lisp:list
       (common-lisp:cons "NewUserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input update-user-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (upload-sshpublic-key-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-upload-sshpublic-key-request-"))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |userNameType| common-lisp:null))
   (sshpublic-key-body (common-lisp:error ":sshpublic-key-body is required")
    :type (common-lisp:or |publicKeyMaterialType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upload-sshpublic-key-request
                    'make-upload-sshpublic-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upload-sshpublic-key-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upload-sshpublic-key-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sshpublic-key-body))
      (common-lisp:list
       (common-lisp:cons "SSHPublicKeyBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upload-sshpublic-key-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (upload-sshpublic-key-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-upload-sshpublic-key-response-"))
   (sshpublic-key common-lisp:nil :type
    (common-lisp:or sshpublic-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upload-sshpublic-key-response
                    'make-upload-sshpublic-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upload-sshpublic-key-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upload-sshpublic-key-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sshpublic-key))
      (common-lisp:list
       (common-lisp:cons "SSHPublicKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upload-sshpublic-key-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (upload-server-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-upload-server-certificate-request-"))
   (path common-lisp:nil :type (common-lisp:or |pathType| common-lisp:null))
   (server-certificate-name
    (common-lisp:error ":server-certificate-name is required") :type
    (common-lisp:or |serverCertificateNameType| common-lisp:null))
   (certificate-body (common-lisp:error ":certificate-body is required") :type
    (common-lisp:or |certificateBodyType| common-lisp:null))
   (private-key (common-lisp:error ":private-key is required") :type
    (common-lisp:or |privateKeyType| common-lisp:null))
   (certificate-chain common-lisp:nil :type
    (common-lisp:or |certificateChainType| common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or |tagListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upload-server-certificate-request
                    'make-upload-server-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upload-server-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upload-server-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-name))
      (common-lisp:list
       (common-lisp:cons "ServerCertificateName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-body))
      (common-lisp:list
       (common-lisp:cons "CertificateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'private-key))
      (common-lisp:list
       (common-lisp:cons "PrivateKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-chain))
      (common-lisp:list
       (common-lisp:cons "CertificateChain"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upload-server-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (upload-server-certificate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-upload-server-certificate-response-"))
   (server-certificate-metadata common-lisp:nil :type
    (common-lisp:or server-certificate-metadata common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or |tagListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upload-server-certificate-response
                    'make-upload-server-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upload-server-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upload-server-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'server-certificate-metadata))
      (common-lisp:list
       (common-lisp:cons "ServerCertificateMetadata"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upload-server-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (upload-signing-certificate-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-upload-signing-certificate-request-"))
   (user-name common-lisp:nil :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (certificate-body (common-lisp:error ":certificate-body is required") :type
    (common-lisp:or |certificateBodyType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upload-signing-certificate-request
                    'make-upload-signing-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upload-signing-certificate-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upload-signing-certificate-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate-body))
      (common-lisp:list
       (common-lisp:cons "CertificateBody"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upload-signing-certificate-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (upload-signing-certificate-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-upload-signing-certificate-response-"))
   (certificate (common-lisp:error ":certificate is required") :type
    (common-lisp:or signing-certificate common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upload-signing-certificate-response
                    'make-upload-signing-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          upload-signing-certificate-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          upload-signing-certificate-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'certificate))
      (common-lisp:list
       (common-lisp:cons "Certificate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          upload-signing-certificate-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (user (:copier common-lisp:nil) (:conc-name "struct-shape-user-"))
   (path (common-lisp:error ":path is required") :type
    (common-lisp:or |pathType| common-lisp:null))
   (user-name (common-lisp:error ":user-name is required") :type
    (common-lisp:or |userNameType| common-lisp:null))
   (user-id (common-lisp:error ":user-id is required") :type
    (common-lisp:or |idType| common-lisp:null))
   (arn (common-lisp:error ":arn is required") :type
    (common-lisp:or |arnType| common-lisp:null))
   (create-date (common-lisp:error ":create-date is required") :type
    (common-lisp:or |dateType| common-lisp:null))
   (password-last-used common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null))
   (permissions-boundary common-lisp:nil :type
    (common-lisp:or attached-permissions-boundary common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or |tagListType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user 'make-user))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'password-last-used))
      (common-lisp:list
       (common-lisp:cons "PasswordLastUsed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (user-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-user-detail-"))
   (path common-lisp:nil :type (common-lisp:or |pathType| common-lisp:null))
   (user-name common-lisp:nil :type
    (common-lisp:or |userNameType| common-lisp:null))
   (user-id common-lisp:nil :type (common-lisp:or |idType| common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or |arnType| common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null))
   (user-policy-list common-lisp:nil :type
    (common-lisp:or |policyDetailListType| common-lisp:null))
   (group-list common-lisp:nil :type
    (common-lisp:or |groupNameListType| common-lisp:null))
   (attached-managed-policies common-lisp:nil :type
    (common-lisp:or |attachedPoliciesListType| common-lisp:null))
   (permissions-boundary common-lisp:nil :type
    (common-lisp:or attached-permissions-boundary common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or |tagListType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user-detail 'make-user-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input user-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input user-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "Path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-name))
      (common-lisp:list
       (common-lisp:cons "UserName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-id))
      (common-lisp:list
       (common-lisp:cons "UserId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'create-date))
      (common-lisp:list
       (common-lisp:cons "CreateDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user-policy-list))
      (common-lisp:list
       (common-lisp:cons "UserPolicyList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'group-list))
      (common-lisp:list
       (common-lisp:cons "GroupList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'attached-managed-policies))
      (common-lisp:list
       (common-lisp:cons "AttachedManagedPolicies"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'permissions-boundary))
      (common-lisp:list
       (common-lisp:cons "PermissionsBoundary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input user-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (virtual-mfadevice (:copier common-lisp:nil)
      (:conc-name "struct-shape-virtual-mfadevice-"))
   (serial-number (common-lisp:error ":serial-number is required") :type
    (common-lisp:or |serialNumberType| common-lisp:null))
   (base32string-seed common-lisp:nil :type
    (common-lisp:or bootstrap-datum common-lisp:null))
   (qrcode-png common-lisp:nil :type
    (common-lisp:or bootstrap-datum common-lisp:null))
   (user common-lisp:nil :type (common-lisp:or user common-lisp:null))
   (enable-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null))
   (tags common-lisp:nil :type
    (common-lisp:or |tagListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-mfadevice 'make-virtual-mfadevice))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input virtual-mfadevice))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input virtual-mfadevice))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'serial-number))
      (common-lisp:list
       (common-lisp:cons "SerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'base32string-seed))
      (common-lisp:list
       (common-lisp:cons "Base32StringSeed"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'qrcode-png))
      (common-lisp:list
       (common-lisp:cons "QRCodePNG"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'user))
      (common-lisp:list
       (common-lisp:cons "User"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'enable-date))
      (common-lisp:list
       (common-lisp:cons "EnableDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input virtual-mfadevice))
   common-lisp:nil))
(common-lisp:deftype |accessKeyIdType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |accessKeyMetadataListType| ()
   '(trivial-types:proper-list access-key-metadata))
 (common-lisp:defun |make-accesskeymetadatalisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-key-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |accessKeySecretType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |accountAliasListType| ()
   '(trivial-types:proper-list |accountAliasType|))
 (common-lisp:defun |make-accountaliaslisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |accountAliasType|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |accountAliasType| () 'common-lisp:string)
(common-lisp:deftype |arnType| () 'common-lisp:string)
(common-lisp:deftype |assignmentStatusType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |attachedPoliciesListType| ()
   '(trivial-types:proper-list attached-policy))
 (common-lisp:defun |make-attachedpolicieslisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attached-policy))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |attachmentCountType| () 'common-lisp:integer)
(common-lisp:deftype |authenticationCodeType| () 'common-lisp:string)
(common-lisp:deftype |booleanObjectType| () 'common-lisp:boolean)
(common-lisp:deftype |booleanType| () 'common-lisp:boolean)
(common-lisp:deftype |certificateBodyType| () 'common-lisp:string)
(common-lisp:deftype |certificateChainType| () 'common-lisp:string)
(common-lisp:deftype |certificateIdType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |certificateListType| ()
   '(trivial-types:proper-list signing-certificate))
 (common-lisp:defun |make-certificatelisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list signing-certificate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |clientIDListType| ()
   '(trivial-types:proper-list |clientIDType|))
 (common-lisp:defun |make-clientidlisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |clientIDType|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |clientIDType| () 'common-lisp:string)
(common-lisp:deftype |credentialReportExpiredExceptionMessage| ()
  'common-lisp:string)
(common-lisp:deftype |credentialReportNotPresentExceptionMessage| ()
  'common-lisp:string)
(common-lisp:deftype |credentialReportNotReadyExceptionMessage| ()
  'common-lisp:string)
(common-lisp:deftype |customSuffixType| () 'common-lisp:string)
(common-lisp:deftype |dateType| () 'common-lisp:string)
(common-lisp:deftype |deleteConflictMessage| () 'common-lisp:string)
(common-lisp:deftype |duplicateCertificateMessage| () 'common-lisp:string)
(common-lisp:deftype |duplicateSSHPublicKeyMessage| () 'common-lisp:string)
(common-lisp:deftype |encodingType| () 'common-lisp:string)
(common-lisp:deftype |entityAlreadyExistsMessage| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |entityDetailsListType| ()
   '(trivial-types:proper-list entity-details))
 (common-lisp:defun |make-entitydetailslisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity-details))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |entityListType| ()
   '(trivial-types:proper-list entity-type))
 (common-lisp:defun |make-entitylisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |entityNameType| () 'common-lisp:string)
(common-lisp:deftype |entityTemporarilyUnmodifiableMessage| ()
  'common-lisp:string)
(common-lisp:deftype |existingUserNameType| () 'common-lisp:string)
(common-lisp:deftype |globalEndpointTokenVersion| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |groupDetailListType| ()
   '(trivial-types:proper-list group-detail))
 (common-lisp:defun |make-groupdetaillisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |groupListType| () '(trivial-types:proper-list group))
 (common-lisp:defun |make-grouplisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |groupNameListType| ()
   '(trivial-types:proper-list |groupNameType|))
 (common-lisp:defun |make-groupnamelisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |groupNameType|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |groupNameType| () 'common-lisp:string)
(common-lisp:deftype |idType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |instanceProfileListType| ()
   '(trivial-types:proper-list instance-profile))
 (common-lisp:defun |make-instanceprofilelisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-profile))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |instanceProfileNameType| () 'common-lisp:string)
(common-lisp:deftype |integerType| () 'common-lisp:integer)
(common-lisp:deftype |invalidAuthenticationCodeMessage| () 'common-lisp:string)
(common-lisp:deftype |invalidCertificateMessage| () 'common-lisp:string)
(common-lisp:deftype |invalidInputMessage| () 'common-lisp:string)
(common-lisp:deftype |invalidPublicKeyMessage| () 'common-lisp:string)
(common-lisp:deftype |invalidUserTypeMessage| () 'common-lisp:string)
(common-lisp:deftype |jobIDType| () 'common-lisp:string)
(common-lisp:deftype |jobStatusType| () 'common-lisp:string)
(common-lisp:deftype |keyPairMismatchMessage| () 'common-lisp:string)
(common-lisp:deftype |limitExceededMessage| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |listPolicyGrantingServiceAccessResponseListType| ()
   '(trivial-types:proper-list list-policies-granting-service-access-entry))
 (common-lisp:defun |make-listpolicygrantingserviceaccessresponselisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            list-policies-granting-service-access-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |malformedCertificateMessage| () 'common-lisp:string)
(common-lisp:deftype |malformedPolicyDocumentMessage| () 'common-lisp:string)
(common-lisp:deftype |markerType| () 'common-lisp:string)
(common-lisp:deftype |maxItemsType| () 'common-lisp:integer)
(common-lisp:deftype |maxPasswordAgeType| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |mfaDeviceListType| ()
   '(trivial-types:proper-list mfadevice))
 (common-lisp:defun |make-mfadevicelisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mfadevice))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |minimumPasswordLengthType| () 'common-lisp:integer)
(common-lisp:deftype |noSuchEntityMessage| () 'common-lisp:string)
(common-lisp:deftype |organizationsEntityPathType| () 'common-lisp:string)
(common-lisp:deftype |organizationsPolicyIdType| () 'common-lisp:string)
(common-lisp:deftype |passwordPolicyViolationMessage| () 'common-lisp:string)
(common-lisp:deftype |passwordReusePreventionType| () 'common-lisp:integer)
(common-lisp:deftype |passwordType| () 'common-lisp:string)
(common-lisp:deftype |pathPrefixType| () 'common-lisp:string)
(common-lisp:deftype |pathType| () 'common-lisp:string)
(common-lisp:deftype |policyDescriptionType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |policyDetailListType| ()
   '(trivial-types:proper-list policy-detail))
 (common-lisp:defun |make-policydetaillisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |policyDocumentType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |policyDocumentVersionListType| ()
   '(trivial-types:proper-list policy-version))
 (common-lisp:defun |make-policydocumentversionlisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-version))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |policyEvaluationErrorMessage| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |policyGrantingServiceAccessListType| ()
   '(trivial-types:proper-list policy-granting-service-access))
 (common-lisp:defun |make-policygrantingserviceaccesslisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            policy-granting-service-access))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |policyListType| () '(trivial-types:proper-list policy))
 (common-lisp:defun |make-policylisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |policyNameListType| ()
   '(trivial-types:proper-list |policyNameType|))
 (common-lisp:defun |make-policynamelisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |policyNameType|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |policyNameType| () 'common-lisp:string)
(common-lisp:deftype |policyNotAttachableMessage| () 'common-lisp:string)
(common-lisp:deftype |policyOwnerEntityType| () 'common-lisp:string)
(common-lisp:deftype |policyPathType| () 'common-lisp:string)
(common-lisp:deftype |policyScopeType| () 'common-lisp:string)
(common-lisp:deftype |policyType| () 'common-lisp:string)
(common-lisp:deftype |policyVersionIdType| () 'common-lisp:string)
(common-lisp:deftype |privateKeyType| () 'common-lisp:string)
(common-lisp:deftype |publicKeyFingerprintType| () 'common-lisp:string)
(common-lisp:deftype |publicKeyIdType| () 'common-lisp:string)
(common-lisp:deftype |publicKeyMaterialType| () 'common-lisp:string)
(common-lisp:deftype |reportGenerationLimitExceededMessage| ()
  'common-lisp:string)
(common-lisp:deftype |responseMarkerType| () 'common-lisp:string)
(common-lisp:deftype |roleDescriptionType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |roleDetailListType| ()
   '(trivial-types:proper-list role-detail))
 (common-lisp:defun |make-roledetaillisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list role-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |roleListType| () '(trivial-types:proper-list role))
 (common-lisp:defun |make-rolelisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list role))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |roleMaxSessionDurationType| () 'common-lisp:integer)
(common-lisp:deftype |roleNameType| () 'common-lisp:string)
(common-lisp:deftype |serialNumberType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |serverCertificateMetadataListType| ()
   '(trivial-types:proper-list server-certificate-metadata))
 (common-lisp:defun |make-servercertificatemetadatalisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            server-certificate-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |serverCertificateNameType| () 'common-lisp:string)
(common-lisp:deftype |serviceFailureExceptionMessage| () 'common-lisp:string)
(common-lisp:deftype |serviceName| () 'common-lisp:string)
(common-lisp:deftype |serviceNameType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |serviceNamespaceListType| ()
   '(trivial-types:proper-list |serviceNamespaceType|))
 (common-lisp:defun |make-servicenamespacelisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |serviceNamespaceType|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |serviceNamespaceType| () 'common-lisp:string)
(common-lisp:deftype |serviceNotSupportedMessage| () 'common-lisp:string)
(common-lisp:deftype |servicePassword| () 'common-lisp:string)
(common-lisp:deftype |serviceSpecificCredentialId| () 'common-lisp:string)
(common-lisp:deftype |serviceUserName| () 'common-lisp:string)
(common-lisp:deftype |sortKeyType| () 'common-lisp:string)
(common-lisp:deftype |statusType| () 'common-lisp:string)
(common-lisp:deftype |stringType| () 'common-lisp:string)
(common-lisp:deftype |summaryKeyType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |summaryMapType| () 'common-lisp:hash-table)
 (common-lisp:defun |make-summarymaptype| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype |summaryValueType| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |tagKeyListType| ()
   '(trivial-types:proper-list |tagKeyType|))
 (common-lisp:defun |make-tagkeylisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |tagKeyType|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |tagKeyType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |tagListType| () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-taglisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |tagValueType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |thumbprintListType| ()
   '(trivial-types:proper-list |thumbprintType|))
 (common-lisp:defun |make-thumbprintlisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |thumbprintType|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |thumbprintType| () 'common-lisp:string)
(common-lisp:deftype |unmodifiableEntityMessage| () 'common-lisp:string)
(common-lisp:deftype |unrecognizedPublicKeyEncodingMessage| ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |userDetailListType| ()
   '(trivial-types:proper-list user-detail))
 (common-lisp:defun |make-userdetaillisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |userListType| () '(trivial-types:proper-list user))
 (common-lisp:defun |make-userlisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |userNameType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |virtualMFADeviceListType| ()
   '(trivial-types:proper-list virtual-mfadevice))
 (common-lisp:defun |make-virtualmfadevicelisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list virtual-mfadevice))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |virtualMFADeviceName| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun add-client-idto-open-idconnect-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key open-idconnect-provider-arn client-id)
   (common-lisp:declare
    (common-lisp:ignorable open-idconnect-provider-arn client-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-client-idto-open-idconnect-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AddClientIDToOpenIDConnectProvider"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-client-idto-open-idconnect-provider))
(common-lisp:progn
 (common-lisp:defun add-role-to-instance-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-profile-name role-name)
   (common-lisp:declare
    (common-lisp:ignorable instance-profile-name role-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-role-to-instance-profile-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AddRoleToInstanceProfile"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-role-to-instance-profile))
(common-lisp:progn
 (common-lisp:defun add-user-to-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name user-name)
   (common-lisp:declare (common-lisp:ignorable group-name user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-user-to-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AddUserToGroup"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'add-user-to-group))
(common-lisp:progn
 (common-lisp:defun attach-group-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name policy-arn)
   (common-lisp:declare (common-lisp:ignorable group-name policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-group-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AttachGroupPolicy"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'attach-group-policy))
(common-lisp:progn
 (common-lisp:defun attach-role-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name policy-arn)
   (common-lisp:declare (common-lisp:ignorable role-name policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-role-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AttachRolePolicy"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'attach-role-policy))
(common-lisp:progn
 (common-lisp:defun attach-user-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name policy-arn)
   (common-lisp:declare (common-lisp:ignorable user-name policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-user-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "AttachUserPolicy"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'attach-user-policy))
(common-lisp:progn
 (common-lisp:defun change-password
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key old-password new-password)
   (common-lisp:declare (common-lisp:ignorable old-password new-password))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-change-password-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ChangePassword"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'change-password))
(common-lisp:progn
 (common-lisp:defun create-access-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name)
   (common-lisp:declare (common-lisp:ignorable user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-access-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAccessKey"
                                                        "2010-05-08"))
      common-lisp:nil "CreateAccessKeyResult" *error-map*)))
 (common-lisp:export 'create-access-key))
(common-lisp:progn
 (common-lisp:defun create-account-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-alias)
   (common-lisp:declare (common-lisp:ignorable account-alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-account-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateAccountAlias"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-account-alias))
(common-lisp:progn
 (common-lisp:defun create-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path group-name)
   (common-lisp:declare (common-lisp:ignorable path group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateGroup"
                                                        "2010-05-08"))
      common-lisp:nil "CreateGroupResult" *error-map*)))
 (common-lisp:export 'create-group))
(common-lisp:progn
 (common-lisp:defun create-instance-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-profile-name path tags)
   (common-lisp:declare
    (common-lisp:ignorable instance-profile-name path tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-instance-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateInstanceProfile"
                                                        "2010-05-08"))
      common-lisp:nil "CreateInstanceProfileResult" *error-map*)))
 (common-lisp:export 'create-instance-profile))
(common-lisp:progn
 (common-lisp:defun create-login-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name password
                     password-reset-required)
   (common-lisp:declare
    (common-lisp:ignorable user-name password password-reset-required))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-login-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateLoginProfile"
                                                        "2010-05-08"))
      common-lisp:nil "CreateLoginProfileResult" *error-map*)))
 (common-lisp:export 'create-login-profile))
(common-lisp:progn
 (common-lisp:defun create-open-idconnect-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key url client-idlist thumbprint-list tags)
   (common-lisp:declare
    (common-lisp:ignorable url client-idlist thumbprint-list tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-open-idconnect-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateOpenIDConnectProvider"
                                                        "2010-05-08"))
      common-lisp:nil "CreateOpenIDConnectProviderResult" *error-map*)))
 (common-lisp:export 'create-open-idconnect-provider))
(common-lisp:progn
 (common-lisp:defun create-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name path policy-document
                     description tags)
   (common-lisp:declare
    (common-lisp:ignorable policy-name path policy-document description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreatePolicy"
                                                        "2010-05-08"))
      common-lisp:nil "CreatePolicyResult" *error-map*)))
 (common-lisp:export 'create-policy))
(common-lisp:progn
 (common-lisp:defun create-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn policy-document
                     set-as-default)
   (common-lisp:declare
    (common-lisp:ignorable policy-arn policy-document set-as-default))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-policy-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreatePolicyVersion"
                                                        "2010-05-08"))
      common-lisp:nil "CreatePolicyVersionResult" *error-map*)))
 (common-lisp:export 'create-policy-version))
(common-lisp:progn
 (common-lisp:defun create-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path role-name
                     assume-role-policy-document description
                     max-session-duration permissions-boundary tags)
   (common-lisp:declare
    (common-lisp:ignorable path role-name assume-role-policy-document
     description max-session-duration permissions-boundary tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-role-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "CreateRole"
                                                        "2010-05-08"))
      common-lisp:nil "CreateRoleResult" *error-map*)))
 (common-lisp:export 'create-role))
(common-lisp:progn
 (common-lisp:defun create-samlprovider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key samlmetadata-document name tags)
   (common-lisp:declare
    (common-lisp:ignorable samlmetadata-document name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-samlprovider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateSAMLProvider"
                                                        "2010-05-08"))
      common-lisp:nil "CreateSAMLProviderResult" *error-map*)))
 (common-lisp:export 'create-samlprovider))
(common-lisp:progn
 (common-lisp:defun create-service-linked-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key awsservice-name description
                     custom-suffix)
   (common-lisp:declare
    (common-lisp:ignorable awsservice-name description custom-suffix))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-service-linked-role-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateServiceLinkedRole"
                                                        "2010-05-08"))
      common-lisp:nil "CreateServiceLinkedRoleResult" *error-map*)))
 (common-lisp:export 'create-service-linked-role))
(common-lisp:progn
 (common-lisp:defun create-service-specific-credential
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name service-name)
   (common-lisp:declare (common-lisp:ignorable user-name service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-service-specific-credential-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateServiceSpecificCredential"
                                                        "2010-05-08"))
      common-lisp:nil "CreateServiceSpecificCredentialResult" *error-map*)))
 (common-lisp:export 'create-service-specific-credential))
(common-lisp:progn
 (common-lisp:defun create-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path user-name permissions-boundary tags)
   (common-lisp:declare
    (common-lisp:ignorable path user-name permissions-boundary tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "CreateUser"
                                                        "2010-05-08"))
      common-lisp:nil "CreateUserResult" *error-map*)))
 (common-lisp:export 'create-user))
(common-lisp:progn
 (common-lisp:defun create-virtual-mfadevice
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path virtual-mfadevice-name tags)
   (common-lisp:declare
    (common-lisp:ignorable path virtual-mfadevice-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-virtual-mfadevice-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "CreateVirtualMFADevice"
                                                        "2010-05-08"))
      common-lisp:nil "CreateVirtualMFADeviceResult" *error-map*)))
 (common-lisp:export 'create-virtual-mfadevice))
(common-lisp:progn
 (common-lisp:defun deactivate-mfadevice
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name serial-number)
   (common-lisp:declare (common-lisp:ignorable user-name serial-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deactivate-mfadevice-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeactivateMFADevice"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'deactivate-mfadevice))
(common-lisp:progn
 (common-lisp:defun delete-access-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name access-key-id)
   (common-lisp:declare (common-lisp:ignorable user-name access-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-access-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAccessKey"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-access-key))
(common-lisp:progn
 (common-lisp:defun delete-account-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-alias)
   (common-lisp:declare (common-lisp:ignorable account-alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-account-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteAccountAlias"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-account-alias))
(common-lisp:progn
 (common-lisp:defun delete-account-password-policy ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iam-request :method "POST" :path "/" :params
                                `(("Action" ,@"DeleteAccountPasswordPolicy")
                                  ("Version" ,@"2010-05-08"))))
    common-lisp:nil common-lisp:nil *error-map*))
 (common-lisp:export 'delete-account-password-policy))
(common-lisp:progn
 (common-lisp:defun delete-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name)
   (common-lisp:declare (common-lisp:ignorable group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteGroup"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-group))
(common-lisp:progn
 (common-lisp:defun delete-group-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name policy-name)
   (common-lisp:declare (common-lisp:ignorable group-name policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-group-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteGroupPolicy"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-group-policy))
(common-lisp:progn
 (common-lisp:defun delete-instance-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-profile-name)
   (common-lisp:declare (common-lisp:ignorable instance-profile-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-instance-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteInstanceProfile"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-instance-profile))
(common-lisp:progn
 (common-lisp:defun delete-login-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name)
   (common-lisp:declare (common-lisp:ignorable user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-login-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteLoginProfile"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-login-profile))
(common-lisp:progn
 (common-lisp:defun delete-open-idconnect-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key open-idconnect-provider-arn)
   (common-lisp:declare (common-lisp:ignorable open-idconnect-provider-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-open-idconnect-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteOpenIDConnectProvider"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-open-idconnect-provider))
(common-lisp:progn
 (common-lisp:defun delete-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn)
   (common-lisp:declare (common-lisp:ignorable policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeletePolicy"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-policy))
(common-lisp:progn
 (common-lisp:defun delete-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn version-id)
   (common-lisp:declare (common-lisp:ignorable policy-arn version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-policy-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeletePolicyVersion"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-policy-version))
(common-lisp:progn
 (common-lisp:defun delete-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name)
   (common-lisp:declare (common-lisp:ignorable role-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-role-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "DeleteRole"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-role))
(common-lisp:progn
 (common-lisp:defun delete-role-permissions-boundary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name)
   (common-lisp:declare (common-lisp:ignorable role-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-role-permissions-boundary-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRolePermissionsBoundary"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-role-permissions-boundary))
(common-lisp:progn
 (common-lisp:defun delete-role-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name policy-name)
   (common-lisp:declare (common-lisp:ignorable role-name policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-role-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteRolePolicy"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-role-policy))
(common-lisp:progn
 (common-lisp:defun delete-samlprovider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key samlprovider-arn)
   (common-lisp:declare (common-lisp:ignorable samlprovider-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-samlprovider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSAMLProvider"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-samlprovider))
(common-lisp:progn
 (common-lisp:defun delete-sshpublic-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name sshpublic-key-id)
   (common-lisp:declare (common-lisp:ignorable user-name sshpublic-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-sshpublic-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSSHPublicKey"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-sshpublic-key))
(common-lisp:progn
 (common-lisp:defun delete-server-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-certificate-name)
   (common-lisp:declare (common-lisp:ignorable server-certificate-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-server-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteServerCertificate"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-server-certificate))
(common-lisp:progn
 (common-lisp:defun delete-service-linked-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name)
   (common-lisp:declare (common-lisp:ignorable role-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-service-linked-role-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteServiceLinkedRole"
                                                        "2010-05-08"))
      common-lisp:nil "DeleteServiceLinkedRoleResult" *error-map*)))
 (common-lisp:export 'delete-service-linked-role))
(common-lisp:progn
 (common-lisp:defun delete-service-specific-credential
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name service-specific-credential-id)
   (common-lisp:declare
    (common-lisp:ignorable user-name service-specific-credential-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-service-specific-credential-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteServiceSpecificCredential"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-service-specific-credential))
(common-lisp:progn
 (common-lisp:defun delete-signing-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name certificate-id)
   (common-lisp:declare (common-lisp:ignorable user-name certificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-signing-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteSigningCertificate"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-signing-certificate))
(common-lisp:progn
 (common-lisp:defun delete-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name)
   (common-lisp:declare (common-lisp:ignorable user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "DeleteUser"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-user))
(common-lisp:progn
 (common-lisp:defun delete-user-permissions-boundary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name)
   (common-lisp:declare (common-lisp:ignorable user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-user-permissions-boundary-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteUserPermissionsBoundary"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-user-permissions-boundary))
(common-lisp:progn
 (common-lisp:defun delete-user-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name policy-name)
   (common-lisp:declare (common-lisp:ignorable user-name policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteUserPolicy"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-user-policy))
(common-lisp:progn
 (common-lisp:defun delete-virtual-mfadevice
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key serial-number)
   (common-lisp:declare (common-lisp:ignorable serial-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-virtual-mfadevice-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DeleteVirtualMFADevice"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-virtual-mfadevice))
(common-lisp:progn
 (common-lisp:defun detach-group-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name policy-arn)
   (common-lisp:declare (common-lisp:ignorable group-name policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-group-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetachGroupPolicy"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'detach-group-policy))
(common-lisp:progn
 (common-lisp:defun detach-role-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name policy-arn)
   (common-lisp:declare (common-lisp:ignorable role-name policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-role-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetachRolePolicy"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'detach-role-policy))
(common-lisp:progn
 (common-lisp:defun detach-user-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name policy-arn)
   (common-lisp:declare (common-lisp:ignorable user-name policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-user-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "DetachUserPolicy"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'detach-user-policy))
(common-lisp:progn
 (common-lisp:defun enable-mfadevice
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name serial-number
                     authentication-code1 authentication-code2)
   (common-lisp:declare
    (common-lisp:ignorable user-name serial-number authentication-code1
     authentication-code2))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-mfadevice-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "EnableMFADevice"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'enable-mfadevice))
(common-lisp:progn
 (common-lisp:defun generate-credential-report ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iam-request :method "POST" :path "/" :params
                                `(("Action" ,@"GenerateCredentialReport")
                                  ("Version" ,@"2010-05-08"))))
    common-lisp:nil "GenerateCredentialReportResult" *error-map*))
 (common-lisp:export 'generate-credential-report))
(common-lisp:progn
 (common-lisp:defun generate-organizations-access-report
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key entity-path organizations-policy-id)
   (common-lisp:declare
    (common-lisp:ignorable entity-path organizations-policy-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-generate-organizations-access-report-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GenerateOrganizationsAccessReport"
                                                        "2010-05-08"))
      common-lisp:nil "GenerateOrganizationsAccessReportResult" *error-map*)))
 (common-lisp:export 'generate-organizations-access-report))
(common-lisp:progn
 (common-lisp:defun generate-service-last-accessed-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key arn granularity)
   (common-lisp:declare (common-lisp:ignorable arn granularity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-generate-service-last-accessed-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GenerateServiceLastAccessedDetails"
                                                        "2010-05-08"))
      common-lisp:nil "GenerateServiceLastAccessedDetailsResult" *error-map*)))
 (common-lisp:export 'generate-service-last-accessed-details))
(common-lisp:progn
 (common-lisp:defun get-access-key-last-used
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-key-id)
   (common-lisp:declare (common-lisp:ignorable access-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-access-key-last-used-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetAccessKeyLastUsed"
                                                        "2010-05-08"))
      common-lisp:nil "GetAccessKeyLastUsedResult" *error-map*)))
 (common-lisp:export 'get-access-key-last-used))
(common-lisp:progn
 (common-lisp:defun get-account-authorization-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter max-items marker)
   (common-lisp:declare (common-lisp:ignorable filter max-items marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-account-authorization-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetAccountAuthorizationDetails"
                                                        "2010-05-08"))
      common-lisp:nil "GetAccountAuthorizationDetailsResult" *error-map*)))
 (common-lisp:export 'get-account-authorization-details))
(common-lisp:progn
 (common-lisp:defun get-account-password-policy ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iam-request :method "POST" :path "/" :params
                                `(("Action" ,@"GetAccountPasswordPolicy")
                                  ("Version" ,@"2010-05-08"))))
    common-lisp:nil "GetAccountPasswordPolicyResult" *error-map*))
 (common-lisp:export 'get-account-password-policy))
(common-lisp:progn
 (common-lisp:defun get-account-summary ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iam-request :method "POST" :path "/" :params
                                `(("Action" ,@"GetAccountSummary")
                                  ("Version" ,@"2010-05-08"))))
    common-lisp:nil "GetAccountSummaryResult" *error-map*))
 (common-lisp:export 'get-account-summary))
(common-lisp:progn
 (common-lisp:defun get-context-keys-for-custom-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-input-list)
   (common-lisp:declare (common-lisp:ignorable policy-input-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-context-keys-for-custom-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetContextKeysForCustomPolicy"
                                                        "2010-05-08"))
      common-lisp:nil "GetContextKeysForCustomPolicyResult" *error-map*)))
 (common-lisp:export 'get-context-keys-for-custom-policy))
(common-lisp:progn
 (common-lisp:defun get-context-keys-for-principal-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-source-arn policy-input-list)
   (common-lisp:declare
    (common-lisp:ignorable policy-source-arn policy-input-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-context-keys-for-principal-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetContextKeysForPrincipalPolicy"
                                                        "2010-05-08"))
      common-lisp:nil "GetContextKeysForPrincipalPolicyResult" *error-map*)))
 (common-lisp:export 'get-context-keys-for-principal-policy))
(common-lisp:progn
 (common-lisp:defun get-credential-report ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iam-request :method "POST" :path "/" :params
                                `(("Action" ,@"GetCredentialReport")
                                  ("Version" ,@"2010-05-08"))))
    common-lisp:nil "GetCredentialReportResult" *error-map*))
 (common-lisp:export 'get-credential-report))
(common-lisp:progn
 (common-lisp:defun get-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable group-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetGroup"
                                                        "2010-05-08"))
      common-lisp:nil "GetGroupResult" *error-map*)))
 (common-lisp:export 'get-group))
(common-lisp:progn
 (common-lisp:defun get-group-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name policy-name)
   (common-lisp:declare (common-lisp:ignorable group-name policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-group-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetGroupPolicy"
                                                        "2010-05-08"))
      common-lisp:nil "GetGroupPolicyResult" *error-map*)))
 (common-lisp:export 'get-group-policy))
(common-lisp:progn
 (common-lisp:defun get-instance-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-profile-name)
   (common-lisp:declare (common-lisp:ignorable instance-profile-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-instance-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetInstanceProfile"
                                                        "2010-05-08"))
      common-lisp:nil "GetInstanceProfileResult" *error-map*)))
 (common-lisp:export 'get-instance-profile))
(common-lisp:progn
 (common-lisp:defun get-login-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name)
   (common-lisp:declare (common-lisp:ignorable user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-login-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetLoginProfile"
                                                        "2010-05-08"))
      common-lisp:nil "GetLoginProfileResult" *error-map*)))
 (common-lisp:export 'get-login-profile))
(common-lisp:progn
 (common-lisp:defun get-open-idconnect-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key open-idconnect-provider-arn)
   (common-lisp:declare (common-lisp:ignorable open-idconnect-provider-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-open-idconnect-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetOpenIDConnectProvider"
                                                        "2010-05-08"))
      common-lisp:nil "GetOpenIDConnectProviderResult" *error-map*)))
 (common-lisp:export 'get-open-idconnect-provider))
(common-lisp:progn
 (common-lisp:defun get-organizations-access-report
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id max-items marker sort-key)
   (common-lisp:declare
    (common-lisp:ignorable job-id max-items marker sort-key))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-organizations-access-report-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetOrganizationsAccessReport"
                                                        "2010-05-08"))
      common-lisp:nil "GetOrganizationsAccessReportResult" *error-map*)))
 (common-lisp:export 'get-organizations-access-report))
(common-lisp:progn
 (common-lisp:defun get-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn)
   (common-lisp:declare (common-lisp:ignorable policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetPolicy"
                                                        "2010-05-08"))
      common-lisp:nil "GetPolicyResult" *error-map*)))
 (common-lisp:export 'get-policy))
(common-lisp:progn
 (common-lisp:defun get-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn version-id)
   (common-lisp:declare (common-lisp:ignorable policy-arn version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-policy-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetPolicyVersion"
                                                        "2010-05-08"))
      common-lisp:nil "GetPolicyVersionResult" *error-map*)))
 (common-lisp:export 'get-policy-version))
(common-lisp:progn
 (common-lisp:defun get-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name)
   (common-lisp:declare (common-lisp:ignorable role-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-role-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetRole"
                                                        "2010-05-08"))
      common-lisp:nil "GetRoleResult" *error-map*)))
 (common-lisp:export 'get-role))
(common-lisp:progn
 (common-lisp:defun get-role-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name policy-name)
   (common-lisp:declare (common-lisp:ignorable role-name policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-role-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetRolePolicy"
                                                        "2010-05-08"))
      common-lisp:nil "GetRolePolicyResult" *error-map*)))
 (common-lisp:export 'get-role-policy))
(common-lisp:progn
 (common-lisp:defun get-samlprovider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key samlprovider-arn)
   (common-lisp:declare (common-lisp:ignorable samlprovider-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-samlprovider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSAMLProvider"
                                                        "2010-05-08"))
      common-lisp:nil "GetSAMLProviderResult" *error-map*)))
 (common-lisp:export 'get-samlprovider))
(common-lisp:progn
 (common-lisp:defun get-sshpublic-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name sshpublic-key-id encoding)
   (common-lisp:declare
    (common-lisp:ignorable user-name sshpublic-key-id encoding))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-sshpublic-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetSSHPublicKey"
                                                        "2010-05-08"))
      common-lisp:nil "GetSSHPublicKeyResult" *error-map*)))
 (common-lisp:export 'get-sshpublic-key))
(common-lisp:progn
 (common-lisp:defun get-server-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-certificate-name)
   (common-lisp:declare (common-lisp:ignorable server-certificate-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-server-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetServerCertificate"
                                                        "2010-05-08"))
      common-lisp:nil "GetServerCertificateResult" *error-map*)))
 (common-lisp:export 'get-server-certificate))
(common-lisp:progn
 (common-lisp:defun get-service-last-accessed-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id max-items marker)
   (common-lisp:declare (common-lisp:ignorable job-id max-items marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-service-last-accessed-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetServiceLastAccessedDetails"
                                                        "2010-05-08"))
      common-lisp:nil "GetServiceLastAccessedDetailsResult" *error-map*)))
 (common-lisp:export 'get-service-last-accessed-details))
(common-lisp:progn
 (common-lisp:defun get-service-last-accessed-details-with-entities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id service-namespace max-items
                     marker)
   (common-lisp:declare
    (common-lisp:ignorable job-id service-namespace max-items marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-service-last-accessed-details-with-entities-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetServiceLastAccessedDetailsWithEntities"
                                                        "2010-05-08"))
      common-lisp:nil "GetServiceLastAccessedDetailsWithEntitiesResult"
      *error-map*)))
 (common-lisp:export 'get-service-last-accessed-details-with-entities))
(common-lisp:progn
 (common-lisp:defun get-service-linked-role-deletion-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key deletion-task-id)
   (common-lisp:declare (common-lisp:ignorable deletion-task-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-service-linked-role-deletion-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetServiceLinkedRoleDeletionStatus"
                                                        "2010-05-08"))
      common-lisp:nil "GetServiceLinkedRoleDeletionStatusResult" *error-map*)))
 (common-lisp:export 'get-service-linked-role-deletion-status))
(common-lisp:progn
 (common-lisp:defun get-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name)
   (common-lisp:declare (common-lisp:ignorable user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "GetUser"
                                                        "2010-05-08"))
      common-lisp:nil "GetUserResult" *error-map*)))
 (common-lisp:export 'get-user))
(common-lisp:progn
 (common-lisp:defun get-user-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name policy-name)
   (common-lisp:declare (common-lisp:ignorable user-name policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-user-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "GetUserPolicy"
                                                        "2010-05-08"))
      common-lisp:nil "GetUserPolicyResult" *error-map*)))
 (common-lisp:export 'get-user-policy))
(common-lisp:progn
 (common-lisp:defun list-access-keys
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable user-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-access-keys-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAccessKeys"
                                                        "2010-05-08"))
      common-lisp:nil "ListAccessKeysResult" *error-map*)))
 (common-lisp:export 'list-access-keys))
(common-lisp:progn
 (common-lisp:defun list-account-aliases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker max-items)
   (common-lisp:declare (common-lisp:ignorable marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-account-aliases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAccountAliases"
                                                        "2010-05-08"))
      common-lisp:nil "ListAccountAliasesResult" *error-map*)))
 (common-lisp:export 'list-account-aliases))
(common-lisp:progn
 (common-lisp:defun list-attached-group-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name path-prefix marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable group-name path-prefix marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-attached-group-policies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAttachedGroupPolicies"
                                                        "2010-05-08"))
      common-lisp:nil "ListAttachedGroupPoliciesResult" *error-map*)))
 (common-lisp:export 'list-attached-group-policies))
(common-lisp:progn
 (common-lisp:defun list-attached-role-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name path-prefix marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable role-name path-prefix marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-attached-role-policies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAttachedRolePolicies"
                                                        "2010-05-08"))
      common-lisp:nil "ListAttachedRolePoliciesResult" *error-map*)))
 (common-lisp:export 'list-attached-role-policies))
(common-lisp:progn
 (common-lisp:defun list-attached-user-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name path-prefix marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable user-name path-prefix marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-attached-user-policies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListAttachedUserPolicies"
                                                        "2010-05-08"))
      common-lisp:nil "ListAttachedUserPoliciesResult" *error-map*)))
 (common-lisp:export 'list-attached-user-policies))
(common-lisp:progn
 (common-lisp:defun list-entities-for-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn entity-filter path-prefix
                     policy-usage-filter marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable policy-arn entity-filter path-prefix
     policy-usage-filter marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-entities-for-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListEntitiesForPolicy"
                                                        "2010-05-08"))
      common-lisp:nil "ListEntitiesForPolicyResult" *error-map*)))
 (common-lisp:export 'list-entities-for-policy))
(common-lisp:progn
 (common-lisp:defun list-group-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable group-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-group-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListGroupPolicies"
                                                        "2010-05-08"))
      common-lisp:nil "ListGroupPoliciesResult" *error-map*)))
 (common-lisp:export 'list-group-policies))
(common-lisp:progn
 (common-lisp:defun list-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path-prefix marker max-items)
   (common-lisp:declare (common-lisp:ignorable path-prefix marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListGroups"
                                                        "2010-05-08"))
      common-lisp:nil "ListGroupsResult" *error-map*)))
 (common-lisp:export 'list-groups))
(common-lisp:progn
 (common-lisp:defun list-groups-for-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable user-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-groups-for-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListGroupsForUser"
                                                        "2010-05-08"))
      common-lisp:nil "ListGroupsForUserResult" *error-map*)))
 (common-lisp:export 'list-groups-for-user))
(common-lisp:progn
 (common-lisp:defun list-instance-profile-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-profile-name marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable instance-profile-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-instance-profile-tags-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListInstanceProfileTags"
                                                        "2010-05-08"))
      common-lisp:nil "ListInstanceProfileTagsResult" *error-map*)))
 (common-lisp:export 'list-instance-profile-tags))
(common-lisp:progn
 (common-lisp:defun list-instance-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path-prefix marker max-items)
   (common-lisp:declare (common-lisp:ignorable path-prefix marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-instance-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListInstanceProfiles"
                                                        "2010-05-08"))
      common-lisp:nil "ListInstanceProfilesResult" *error-map*)))
 (common-lisp:export 'list-instance-profiles))
(common-lisp:progn
 (common-lisp:defun list-instance-profiles-for-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable role-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-instance-profiles-for-role-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListInstanceProfilesForRole"
                                                        "2010-05-08"))
      common-lisp:nil "ListInstanceProfilesForRoleResult" *error-map*)))
 (common-lisp:export 'list-instance-profiles-for-role))
(common-lisp:progn
 (common-lisp:defun list-mfadevice-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key serial-number marker max-items)
   (common-lisp:declare (common-lisp:ignorable serial-number marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-mfadevice-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMFADeviceTags"
                                                        "2010-05-08"))
      common-lisp:nil "ListMFADeviceTagsResult" *error-map*)))
 (common-lisp:export 'list-mfadevice-tags))
(common-lisp:progn
 (common-lisp:defun list-mfadevices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable user-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-mfadevices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListMFADevices"
                                                        "2010-05-08"))
      common-lisp:nil "ListMFADevicesResult" *error-map*)))
 (common-lisp:export 'list-mfadevices))
(common-lisp:progn
 (common-lisp:defun list-open-idconnect-provider-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key open-idconnect-provider-arn marker
                     max-items)
   (common-lisp:declare
    (common-lisp:ignorable open-idconnect-provider-arn marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-open-idconnect-provider-tags-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListOpenIDConnectProviderTags"
                                                        "2010-05-08"))
      common-lisp:nil "ListOpenIDConnectProviderTagsResult" *error-map*)))
 (common-lisp:export 'list-open-idconnect-provider-tags))
(common-lisp:progn
 (common-lisp:defun list-open-idconnect-providers ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iam-request :method "POST" :path "/" :params
                                `(("Action" ,@"ListOpenIDConnectProviders")
                                  ("Version" ,@"2010-05-08"))))
    common-lisp:nil "ListOpenIDConnectProvidersResult" *error-map*))
 (common-lisp:export 'list-open-idconnect-providers))
(common-lisp:progn
 (common-lisp:defun list-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scope only-attached path-prefix
                     policy-usage-filter marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable scope only-attached path-prefix policy-usage-filter
     marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListPolicies"
                                                        "2010-05-08"))
      common-lisp:nil "ListPoliciesResult" *error-map*)))
 (common-lisp:export 'list-policies))
(common-lisp:progn
 (common-lisp:defun list-policies-granting-service-access
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker arn service-namespaces)
   (common-lisp:declare (common-lisp:ignorable marker arn service-namespaces))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-policies-granting-service-access-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListPoliciesGrantingServiceAccess"
                                                        "2010-05-08"))
      common-lisp:nil "ListPoliciesGrantingServiceAccessResult" *error-map*)))
 (common-lisp:export 'list-policies-granting-service-access))
(common-lisp:progn
 (common-lisp:defun list-policy-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn marker max-items)
   (common-lisp:declare (common-lisp:ignorable policy-arn marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policy-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListPolicyTags"
                                                        "2010-05-08"))
      common-lisp:nil "ListPolicyTagsResult" *error-map*)))
 (common-lisp:export 'list-policy-tags))
(common-lisp:progn
 (common-lisp:defun list-policy-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn marker max-items)
   (common-lisp:declare (common-lisp:ignorable policy-arn marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policy-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListPolicyVersions"
                                                        "2010-05-08"))
      common-lisp:nil "ListPolicyVersionsResult" *error-map*)))
 (common-lisp:export 'list-policy-versions))
(common-lisp:progn
 (common-lisp:defun list-role-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable role-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-role-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListRolePolicies"
                                                        "2010-05-08"))
      common-lisp:nil "ListRolePoliciesResult" *error-map*)))
 (common-lisp:export 'list-role-policies))
(common-lisp:progn
 (common-lisp:defun list-role-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable role-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-role-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListRoleTags"
                                                        "2010-05-08"))
      common-lisp:nil "ListRoleTagsResult" *error-map*)))
 (common-lisp:export 'list-role-tags))
(common-lisp:progn
 (common-lisp:defun list-roles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path-prefix marker max-items)
   (common-lisp:declare (common-lisp:ignorable path-prefix marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-roles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListRoles"
                                                        "2010-05-08"))
      common-lisp:nil "ListRolesResult" *error-map*)))
 (common-lisp:export 'list-roles))
(common-lisp:progn
 (common-lisp:defun list-samlprovider-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key samlprovider-arn marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable samlprovider-arn marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-samlprovider-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListSAMLProviderTags"
                                                        "2010-05-08"))
      common-lisp:nil "ListSAMLProviderTagsResult" *error-map*)))
 (common-lisp:export 'list-samlprovider-tags))
(common-lisp:progn
 (common-lisp:defun list-samlproviders ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request
     (common-lisp:make-instance 'iam-request :method "POST" :path "/" :params
                                `(("Action" ,@"ListSAMLProviders")
                                  ("Version" ,@"2010-05-08"))))
    common-lisp:nil "ListSAMLProvidersResult" *error-map*))
 (common-lisp:export 'list-samlproviders))
(common-lisp:progn
 (common-lisp:defun list-sshpublic-keys
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable user-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-sshpublic-keys-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListSSHPublicKeys"
                                                        "2010-05-08"))
      common-lisp:nil "ListSSHPublicKeysResult" *error-map*)))
 (common-lisp:export 'list-sshpublic-keys))
(common-lisp:progn
 (common-lisp:defun list-server-certificate-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-certificate-name marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable server-certificate-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-server-certificate-tags-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListServerCertificateTags"
                                                        "2010-05-08"))
      common-lisp:nil "ListServerCertificateTagsResult" *error-map*)))
 (common-lisp:export 'list-server-certificate-tags))
(common-lisp:progn
 (common-lisp:defun list-server-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path-prefix marker max-items)
   (common-lisp:declare (common-lisp:ignorable path-prefix marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-server-certificates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListServerCertificates"
                                                        "2010-05-08"))
      common-lisp:nil "ListServerCertificatesResult" *error-map*)))
 (common-lisp:export 'list-server-certificates))
(common-lisp:progn
 (common-lisp:defun list-service-specific-credentials
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name service-name)
   (common-lisp:declare (common-lisp:ignorable user-name service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-service-specific-credentials-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListServiceSpecificCredentials"
                                                        "2010-05-08"))
      common-lisp:nil "ListServiceSpecificCredentialsResult" *error-map*)))
 (common-lisp:export 'list-service-specific-credentials))
(common-lisp:progn
 (common-lisp:defun list-signing-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable user-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-signing-certificates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListSigningCertificates"
                                                        "2010-05-08"))
      common-lisp:nil "ListSigningCertificatesResult" *error-map*)))
 (common-lisp:export 'list-signing-certificates))
(common-lisp:progn
 (common-lisp:defun list-user-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable user-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-user-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListUserPolicies"
                                                        "2010-05-08"))
      common-lisp:nil "ListUserPoliciesResult" *error-map*)))
 (common-lisp:export 'list-user-policies))
(common-lisp:progn
 (common-lisp:defun list-user-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable user-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-user-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListUserTags"
                                                        "2010-05-08"))
      common-lisp:nil "ListUserTagsResult" *error-map*)))
 (common-lisp:export 'list-user-tags))
(common-lisp:progn
 (common-lisp:defun list-users
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path-prefix marker max-items)
   (common-lisp:declare (common-lisp:ignorable path-prefix marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-users-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "ListUsers"
                                                        "2010-05-08"))
      common-lisp:nil "ListUsersResult" *error-map*)))
 (common-lisp:export 'list-users))
(common-lisp:progn
 (common-lisp:defun list-virtual-mfadevices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assignment-status marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable assignment-status marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-virtual-mfadevices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ListVirtualMFADevices"
                                                        "2010-05-08"))
      common-lisp:nil "ListVirtualMFADevicesResult" *error-map*)))
 (common-lisp:export 'list-virtual-mfadevices))
(common-lisp:progn
 (common-lisp:defun put-group-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name policy-name policy-document)
   (common-lisp:declare
    (common-lisp:ignorable group-name policy-name policy-document))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-group-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutGroupPolicy"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-group-policy))
(common-lisp:progn
 (common-lisp:defun put-role-permissions-boundary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name permissions-boundary)
   (common-lisp:declare (common-lisp:ignorable role-name permissions-boundary))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-role-permissions-boundary-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutRolePermissionsBoundary"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-role-permissions-boundary))
(common-lisp:progn
 (common-lisp:defun put-role-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name policy-name policy-document)
   (common-lisp:declare
    (common-lisp:ignorable role-name policy-name policy-document))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-role-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutRolePolicy"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-role-policy))
(common-lisp:progn
 (common-lisp:defun put-user-permissions-boundary
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name permissions-boundary)
   (common-lisp:declare (common-lisp:ignorable user-name permissions-boundary))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-user-permissions-boundary-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutUserPermissionsBoundary"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-user-permissions-boundary))
(common-lisp:progn
 (common-lisp:defun put-user-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name policy-name policy-document)
   (common-lisp:declare
    (common-lisp:ignorable user-name policy-name policy-document))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-user-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "PutUserPolicy"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-user-policy))
(common-lisp:progn
 (common-lisp:defun remove-client-idfrom-open-idconnect-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key open-idconnect-provider-arn client-id)
   (common-lisp:declare
    (common-lisp:ignorable open-idconnect-provider-arn client-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-client-idfrom-open-idconnect-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveClientIDFromOpenIDConnectProvider"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-client-idfrom-open-idconnect-provider))
(common-lisp:progn
 (common-lisp:defun remove-role-from-instance-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-profile-name role-name)
   (common-lisp:declare
    (common-lisp:ignorable instance-profile-name role-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-role-from-instance-profile-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveRoleFromInstanceProfile"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-role-from-instance-profile))
(common-lisp:progn
 (common-lisp:defun remove-user-from-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name user-name)
   (common-lisp:declare (common-lisp:ignorable group-name user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-user-from-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "RemoveUserFromGroup"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'remove-user-from-group))
(common-lisp:progn
 (common-lisp:defun reset-service-specific-credential
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name service-specific-credential-id)
   (common-lisp:declare
    (common-lisp:ignorable user-name service-specific-credential-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reset-service-specific-credential-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResetServiceSpecificCredential"
                                                        "2010-05-08"))
      common-lisp:nil "ResetServiceSpecificCredentialResult" *error-map*)))
 (common-lisp:export 'reset-service-specific-credential))
(common-lisp:progn
 (common-lisp:defun resync-mfadevice
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name serial-number
                     authentication-code1 authentication-code2)
   (common-lisp:declare
    (common-lisp:ignorable user-name serial-number authentication-code1
     authentication-code2))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-resync-mfadevice-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "ResyncMFADevice"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'resync-mfadevice))
(common-lisp:progn
 (common-lisp:defun set-default-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn version-id)
   (common-lisp:declare (common-lisp:ignorable policy-arn version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-default-policy-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetDefaultPolicyVersion"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'set-default-policy-version))
(common-lisp:progn
 (common-lisp:defun set-security-token-service-preferences
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key global-endpoint-token-version)
   (common-lisp:declare (common-lisp:ignorable global-endpoint-token-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-security-token-service-preferences-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SetSecurityTokenServicePreferences"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'set-security-token-service-preferences))
(common-lisp:progn
 (common-lisp:defun simulate-custom-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-input-list
                     permissions-boundary-policy-input-list action-names
                     resource-arns resource-policy resource-owner caller-arn
                     context-entries resource-handling-option max-items marker)
   (common-lisp:declare
    (common-lisp:ignorable policy-input-list
     permissions-boundary-policy-input-list action-names resource-arns
     resource-policy resource-owner caller-arn context-entries
     resource-handling-option max-items marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-simulate-custom-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SimulateCustomPolicy"
                                                        "2010-05-08"))
      common-lisp:nil "SimulateCustomPolicyResult" *error-map*)))
 (common-lisp:export 'simulate-custom-policy))
(common-lisp:progn
 (common-lisp:defun simulate-principal-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-source-arn policy-input-list
                     permissions-boundary-policy-input-list action-names
                     resource-arns resource-policy resource-owner caller-arn
                     context-entries resource-handling-option max-items marker)
   (common-lisp:declare
    (common-lisp:ignorable policy-source-arn policy-input-list
     permissions-boundary-policy-input-list action-names resource-arns
     resource-policy resource-owner caller-arn context-entries
     resource-handling-option max-items marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-simulate-principal-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "SimulatePrincipalPolicy"
                                                        "2010-05-08"))
      common-lisp:nil "SimulatePrincipalPolicyResult" *error-map*)))
 (common-lisp:export 'simulate-principal-policy))
(common-lisp:progn
 (common-lisp:defun tag-instance-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-profile-name tags)
   (common-lisp:declare (common-lisp:ignorable instance-profile-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-instance-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagInstanceProfile"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-instance-profile))
(common-lisp:progn
 (common-lisp:defun tag-mfadevice
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key serial-number tags)
   (common-lisp:declare (common-lisp:ignorable serial-number tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-mfadevice-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagMFADevice"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-mfadevice))
(common-lisp:progn
 (common-lisp:defun tag-open-idconnect-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key open-idconnect-provider-arn tags)
   (common-lisp:declare
    (common-lisp:ignorable open-idconnect-provider-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-tag-open-idconnect-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagOpenIDConnectProvider"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-open-idconnect-provider))
(common-lisp:progn
 (common-lisp:defun tag-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn tags)
   (common-lisp:declare (common-lisp:ignorable policy-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "TagPolicy"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-policy))
(common-lisp:progn
 (common-lisp:defun tag-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name tags)
   (common-lisp:declare (common-lisp:ignorable role-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-role-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "TagRole"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-role))
(common-lisp:progn
 (common-lisp:defun tag-samlprovider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key samlprovider-arn tags)
   (common-lisp:declare (common-lisp:ignorable samlprovider-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-samlprovider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagSAMLProvider"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-samlprovider))
(common-lisp:progn
 (common-lisp:defun tag-server-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-certificate-name tags)
   (common-lisp:declare (common-lisp:ignorable server-certificate-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-server-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "TagServerCertificate"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-server-certificate))
(common-lisp:progn
 (common-lisp:defun tag-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name tags)
   (common-lisp:declare (common-lisp:ignorable user-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "TagUser"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-user))
(common-lisp:progn
 (common-lisp:defun untag-instance-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-profile-name tag-keys)
   (common-lisp:declare (common-lisp:ignorable instance-profile-name tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-instance-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagInstanceProfile"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-instance-profile))
(common-lisp:progn
 (common-lisp:defun untag-mfadevice
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key serial-number tag-keys)
   (common-lisp:declare (common-lisp:ignorable serial-number tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-mfadevice-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagMFADevice"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-mfadevice))
(common-lisp:progn
 (common-lisp:defun untag-open-idconnect-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key open-idconnect-provider-arn tag-keys)
   (common-lisp:declare
    (common-lisp:ignorable open-idconnect-provider-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-untag-open-idconnect-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagOpenIDConnectProvider"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-open-idconnect-provider))
(common-lisp:progn
 (common-lisp:defun untag-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable policy-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagPolicy"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-policy))
(common-lisp:progn
 (common-lisp:defun untag-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name tag-keys)
   (common-lisp:declare (common-lisp:ignorable role-name tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-role-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "UntagRole"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-role))
(common-lisp:progn
 (common-lisp:defun untag-samlprovider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key samlprovider-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable samlprovider-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-samlprovider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagSAMLProvider"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-samlprovider))
(common-lisp:progn
 (common-lisp:defun untag-server-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-certificate-name tag-keys)
   (common-lisp:declare
    (common-lisp:ignorable server-certificate-name tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-server-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UntagServerCertificate"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-server-certificate))
(common-lisp:progn
 (common-lisp:defun untag-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name tag-keys)
   (common-lisp:declare (common-lisp:ignorable user-name tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "UntagUser"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-user))
(common-lisp:progn
 (common-lisp:defun update-access-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name access-key-id status)
   (common-lisp:declare (common-lisp:ignorable user-name access-key-id status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-access-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateAccessKey"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-access-key))
(common-lisp:progn
 (common-lisp:defun update-account-password-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key minimum-password-length require-symbols
                     require-numbers require-uppercase-characters
                     require-lowercase-characters
                     allow-users-to-change-password max-password-age
                     password-reuse-prevention hard-expiry)
   (common-lisp:declare
    (common-lisp:ignorable minimum-password-length require-symbols
     require-numbers require-uppercase-characters require-lowercase-characters
     allow-users-to-change-password max-password-age password-reuse-prevention
     hard-expiry))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-account-password-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateAccountPasswordPolicy"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-account-password-policy))
(common-lisp:progn
 (common-lisp:defun update-assume-role-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name policy-document)
   (common-lisp:declare (common-lisp:ignorable role-name policy-document))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-assume-role-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateAssumeRolePolicy"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-assume-role-policy))
(common-lisp:progn
 (common-lisp:defun update-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name new-path new-group-name)
   (common-lisp:declare
    (common-lisp:ignorable group-name new-path new-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateGroup"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-group))
(common-lisp:progn
 (common-lisp:defun update-login-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name password
                     password-reset-required)
   (common-lisp:declare
    (common-lisp:ignorable user-name password password-reset-required))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-login-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateLoginProfile"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-login-profile))
(common-lisp:progn
 (common-lisp:defun update-open-idconnect-provider-thumbprint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key open-idconnect-provider-arn
                     thumbprint-list)
   (common-lisp:declare
    (common-lisp:ignorable open-idconnect-provider-arn thumbprint-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-open-idconnect-provider-thumbprint-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateOpenIDConnectProviderThumbprint"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-open-idconnect-provider-thumbprint))
(common-lisp:progn
 (common-lisp:defun update-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name description
                     max-session-duration)
   (common-lisp:declare
    (common-lisp:ignorable role-name description max-session-duration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-role-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "UpdateRole"
                                                        "2010-05-08"))
      common-lisp:nil "UpdateRoleResult" *error-map*)))
 (common-lisp:export 'update-role))
(common-lisp:progn
 (common-lisp:defun update-role-description
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name description)
   (common-lisp:declare (common-lisp:ignorable role-name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-role-description-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateRoleDescription"
                                                        "2010-05-08"))
      common-lisp:nil "UpdateRoleDescriptionResult" *error-map*)))
 (common-lisp:export 'update-role-description))
(common-lisp:progn
 (common-lisp:defun update-samlprovider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key samlmetadata-document samlprovider-arn)
   (common-lisp:declare
    (common-lisp:ignorable samlmetadata-document samlprovider-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-samlprovider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateSAMLProvider"
                                                        "2010-05-08"))
      common-lisp:nil "UpdateSAMLProviderResult" *error-map*)))
 (common-lisp:export 'update-samlprovider))
(common-lisp:progn
 (common-lisp:defun update-sshpublic-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name sshpublic-key-id status)
   (common-lisp:declare
    (common-lisp:ignorable user-name sshpublic-key-id status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-sshpublic-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateSSHPublicKey"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-sshpublic-key))
(common-lisp:progn
 (common-lisp:defun update-server-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-certificate-name new-path
                     new-server-certificate-name)
   (common-lisp:declare
    (common-lisp:ignorable server-certificate-name new-path
     new-server-certificate-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-server-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateServerCertificate"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-server-certificate))
(common-lisp:progn
 (common-lisp:defun update-service-specific-credential
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name service-specific-credential-id
                     status)
   (common-lisp:declare
    (common-lisp:ignorable user-name service-specific-credential-id status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-service-specific-credential-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateServiceSpecificCredential"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-service-specific-credential))
(common-lisp:progn
 (common-lisp:defun update-signing-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name certificate-id status)
   (common-lisp:declare
    (common-lisp:ignorable user-name certificate-id status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-signing-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UpdateSigningCertificate"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-signing-certificate))
(common-lisp:progn
 (common-lisp:defun update-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name new-path new-user-name)
   (common-lisp:declare
    (common-lisp:ignorable user-name new-path new-user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/" "UpdateUser"
                                                        "2010-05-08"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-user))
(common-lisp:progn
 (common-lisp:defun upload-sshpublic-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name sshpublic-key-body)
   (common-lisp:declare (common-lisp:ignorable user-name sshpublic-key-body))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-upload-sshpublic-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UploadSSHPublicKey"
                                                        "2010-05-08"))
      common-lisp:nil "UploadSSHPublicKeyResult" *error-map*)))
 (common-lisp:export 'upload-sshpublic-key))
(common-lisp:progn
 (common-lisp:defun upload-server-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path server-certificate-name
                     certificate-body private-key certificate-chain tags)
   (common-lisp:declare
    (common-lisp:ignorable path server-certificate-name certificate-body
     private-key certificate-chain tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-upload-server-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UploadServerCertificate"
                                                        "2010-05-08"))
      common-lisp:nil "UploadServerCertificateResult" *error-map*)))
 (common-lisp:export 'upload-server-certificate))
(common-lisp:progn
 (common-lisp:defun upload-signing-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name certificate-body)
   (common-lisp:declare (common-lisp:ignorable user-name certificate-body))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-upload-signing-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'iam-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/"
                                                        "UploadSigningCertificate"
                                                        "2010-05-08"))
      common-lisp:nil "UploadSigningCertificateResult" *error-map*)))
 (common-lisp:export 'upload-signing-certificate))
