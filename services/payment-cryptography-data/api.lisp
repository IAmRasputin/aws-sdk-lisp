;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/payment-cryptography-data/api
  (:use)
  (:nicknames #:aws/payment-cryptography-data)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/payment-cryptography-data/api)
(common-lisp:progn
 (common-lisp:define-condition payment-cryptography-data-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'payment-cryptography-data-error))
(common-lisp:progn
 (common-lisp:defclass payment-cryptography-data-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "payment-cryptography-data"
                        :api-version "2022-02-03" :host-prefix
                        "dataplane.payment-cryptography" :signing-name
                        "payment-cryptography" :global-host common-lisp:nil))
 (common-lisp:export 'payment-cryptography-data-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("InternalServerException" . internal-server-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)
    ("VerificationFailedException" . verification-failed-exception)))
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (payment-cryptography-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (amex-card-security-code-version1 (:copier common-lisp:nil)
      (:conc-name "struct-shape-amex-card-security-code-version1-"))
   (card-expiry-date (common-lisp:error ":card-expiry-date is required") :type
    (common-lisp:or number-length-equals4 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'amex-card-security-code-version1
                    'make-amex-card-security-code-version1))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          amex-card-security-code-version1))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          amex-card-security-code-version1))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'card-expiry-date))
      (common-lisp:list
       (common-lisp:cons "CardExpiryDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          amex-card-security-code-version1))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (amex-card-security-code-version2 (:copier common-lisp:nil)
      (:conc-name "struct-shape-amex-card-security-code-version2-"))
   (card-expiry-date (common-lisp:error ":card-expiry-date is required") :type
    (common-lisp:or number-length-equals4 common-lisp:null))
   (service-code (common-lisp:error ":service-code is required") :type
    (common-lisp:or number-length-equals3 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'amex-card-security-code-version2
                    'make-amex-card-security-code-version2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          amex-card-security-code-version2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          amex-card-security-code-version2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'card-expiry-date))
      (common-lisp:list
       (common-lisp:cons "CardExpiryDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-code))
      (common-lisp:list
       (common-lisp:cons "ServiceCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          amex-card-security-code-version2))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (asymmetric-encryption-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-asymmetric-encryption-attributes-"))
   (padding-type common-lisp:nil :type
    (common-lisp:or padding-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'asymmetric-encryption-attributes
                    'make-asymmetric-encryption-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          asymmetric-encryption-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          asymmetric-encryption-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'padding-type))
      (common-lisp:list
       (common-lisp:cons "PaddingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          asymmetric-encryption-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (card-generation-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-card-generation-attributes-"))
   (amex-card-security-code-version1 common-lisp:nil :type
    (common-lisp:or amex-card-security-code-version1 common-lisp:null))
   (amex-card-security-code-version2 common-lisp:nil :type
    (common-lisp:or amex-card-security-code-version2 common-lisp:null))
   (card-holder-verification-value common-lisp:nil :type
    (common-lisp:or card-holder-verification-value common-lisp:null))
   (card-verification-value1 common-lisp:nil :type
    (common-lisp:or card-verification-value1 common-lisp:null))
   (card-verification-value2 common-lisp:nil :type
    (common-lisp:or card-verification-value2 common-lisp:null))
   (dynamic-card-verification-code common-lisp:nil :type
    (common-lisp:or dynamic-card-verification-code common-lisp:null))
   (dynamic-card-verification-value common-lisp:nil :type
    (common-lisp:or dynamic-card-verification-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'card-generation-attributes
                    'make-card-generation-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          card-generation-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          card-generation-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amex-card-security-code-version1))
      (common-lisp:list
       (common-lisp:cons "AmexCardSecurityCodeVersion1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amex-card-security-code-version2))
      (common-lisp:list
       (common-lisp:cons "AmexCardSecurityCodeVersion2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'card-holder-verification-value))
      (common-lisp:list
       (common-lisp:cons "CardHolderVerificationValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'card-verification-value1))
      (common-lisp:list
       (common-lisp:cons "CardVerificationValue1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'card-verification-value2))
      (common-lisp:list
       (common-lisp:cons "CardVerificationValue2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dynamic-card-verification-code))
      (common-lisp:list
       (common-lisp:cons "DynamicCardVerificationCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dynamic-card-verification-value))
      (common-lisp:list
       (common-lisp:cons "DynamicCardVerificationValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          card-generation-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (card-holder-verification-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-card-holder-verification-value-"))
   (application-transaction-counter
    (common-lisp:error ":application-transaction-counter is required") :type
    (common-lisp:or hex-length-between2and4 common-lisp:null))
   (pan-sequence-number (common-lisp:error ":pan-sequence-number is required")
    :type (common-lisp:or hex-length-equals2 common-lisp:null))
   (unpredictable-number
    (common-lisp:error ":unpredictable-number is required") :type
    (common-lisp:or hex-length-between2and8 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'card-holder-verification-value
                    'make-card-holder-verification-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          card-holder-verification-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          card-holder-verification-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-transaction-counter))
      (common-lisp:list
       (common-lisp:cons "ApplicationTransactionCounter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pan-sequence-number))
      (common-lisp:list
       (common-lisp:cons "PanSequenceNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unpredictable-number))
      (common-lisp:list
       (common-lisp:cons "UnpredictableNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          card-holder-verification-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (card-verification-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-card-verification-attributes-"))
   (amex-card-security-code-version1 common-lisp:nil :type
    (common-lisp:or amex-card-security-code-version1 common-lisp:null))
   (amex-card-security-code-version2 common-lisp:nil :type
    (common-lisp:or amex-card-security-code-version2 common-lisp:null))
   (card-holder-verification-value common-lisp:nil :type
    (common-lisp:or card-holder-verification-value common-lisp:null))
   (card-verification-value1 common-lisp:nil :type
    (common-lisp:or card-verification-value1 common-lisp:null))
   (card-verification-value2 common-lisp:nil :type
    (common-lisp:or card-verification-value2 common-lisp:null))
   (discover-dynamic-card-verification-code common-lisp:nil :type
    (common-lisp:or discover-dynamic-card-verification-code common-lisp:null))
   (dynamic-card-verification-code common-lisp:nil :type
    (common-lisp:or dynamic-card-verification-code common-lisp:null))
   (dynamic-card-verification-value common-lisp:nil :type
    (common-lisp:or dynamic-card-verification-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'card-verification-attributes
                    'make-card-verification-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          card-verification-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          card-verification-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amex-card-security-code-version1))
      (common-lisp:list
       (common-lisp:cons "AmexCardSecurityCodeVersion1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'amex-card-security-code-version2))
      (common-lisp:list
       (common-lisp:cons "AmexCardSecurityCodeVersion2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'card-holder-verification-value))
      (common-lisp:list
       (common-lisp:cons "CardHolderVerificationValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'card-verification-value1))
      (common-lisp:list
       (common-lisp:cons "CardVerificationValue1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'card-verification-value2))
      (common-lisp:list
       (common-lisp:cons "CardVerificationValue2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'discover-dynamic-card-verification-code))
      (common-lisp:list
       (common-lisp:cons "DiscoverDynamicCardVerificationCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dynamic-card-verification-code))
      (common-lisp:list
       (common-lisp:cons "DynamicCardVerificationCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dynamic-card-verification-value))
      (common-lisp:list
       (common-lisp:cons "DynamicCardVerificationValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          card-verification-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (card-verification-value1 (:copier common-lisp:nil)
      (:conc-name "struct-shape-card-verification-value1-"))
   (card-expiry-date (common-lisp:error ":card-expiry-date is required") :type
    (common-lisp:or number-length-equals4 common-lisp:null))
   (service-code (common-lisp:error ":service-code is required") :type
    (common-lisp:or number-length-equals3 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'card-verification-value1 'make-card-verification-value1))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          card-verification-value1))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          card-verification-value1))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'card-expiry-date))
      (common-lisp:list
       (common-lisp:cons "CardExpiryDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-code))
      (common-lisp:list
       (common-lisp:cons "ServiceCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          card-verification-value1))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (card-verification-value2 (:copier common-lisp:nil)
      (:conc-name "struct-shape-card-verification-value2-"))
   (card-expiry-date (common-lisp:error ":card-expiry-date is required") :type
    (common-lisp:or number-length-equals4 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'card-verification-value2 'make-card-verification-value2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          card-verification-value2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          card-verification-value2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'card-expiry-date))
      (common-lisp:list
       (common-lisp:cons "CardExpiryDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          card-verification-value2))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cryptogram-auth-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-cryptogram-auth-response-"))
   (arpc-method1 common-lisp:nil :type
    (common-lisp:or cryptogram-verification-arpc-method1 common-lisp:null))
   (arpc-method2 common-lisp:nil :type
    (common-lisp:or cryptogram-verification-arpc-method2 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cryptogram-auth-response 'make-cryptogram-auth-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cryptogram-auth-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cryptogram-auth-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arpc-method1))
      (common-lisp:list
       (common-lisp:cons "ArpcMethod1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arpc-method2))
      (common-lisp:list
       (common-lisp:cons "ArpcMethod2"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cryptogram-auth-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cryptogram-verification-arpc-method1 (:copier common-lisp:nil)
      (:conc-name "struct-shape-cryptogram-verification-arpc-method1-"))
   (auth-response-code (common-lisp:error ":auth-response-code is required")
    :type (common-lisp:or hex-length-equals4 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cryptogram-verification-arpc-method1
                    'make-cryptogram-verification-arpc-method1))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cryptogram-verification-arpc-method1))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cryptogram-verification-arpc-method1))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-response-code))
      (common-lisp:list
       (common-lisp:cons "AuthResponseCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cryptogram-verification-arpc-method1))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cryptogram-verification-arpc-method2 (:copier common-lisp:nil)
      (:conc-name "struct-shape-cryptogram-verification-arpc-method2-"))
   (card-status-update (common-lisp:error ":card-status-update is required")
    :type (common-lisp:or hex-length-equals8 common-lisp:null))
   (proprietary-authentication-data common-lisp:nil :type
    (common-lisp:or hex-length-between1and16 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cryptogram-verification-arpc-method2
                    'make-cryptogram-verification-arpc-method2))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cryptogram-verification-arpc-method2))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cryptogram-verification-arpc-method2))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'card-status-update))
      (common-lisp:list
       (common-lisp:cons "CardStatusUpdate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'proprietary-authentication-data))
      (common-lisp:list
       (common-lisp:cons "ProprietaryAuthenticationData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cryptogram-verification-arpc-method2))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (decrypt-data-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-decrypt-data-input-"))
   (cipher-text (common-lisp:error ":cipher-text is required") :type
    (common-lisp:or hex-even-length-between16and4096 common-lisp:null))
   (decryption-attributes
    (common-lisp:error ":decryption-attributes is required") :type
    (common-lisp:or encryption-decryption-attributes common-lisp:null))
   (key-identifier (common-lisp:error ":key-identifier is required") :type
    (common-lisp:or key-arn-or-key-alias-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'decrypt-data-input 'make-decrypt-data-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input decrypt-data-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input decrypt-data-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cipher-text))
      (common-lisp:list
       (common-lisp:cons "CipherText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decryption-attributes))
      (common-lisp:list
       (common-lisp:cons "DecryptionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input decrypt-data-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (decrypt-data-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-decrypt-data-output-"))
   (key-arn (common-lisp:error ":key-arn is required") :type
    (common-lisp:or key-arn common-lisp:null))
   (key-check-value (common-lisp:error ":key-check-value is required") :type
    (common-lisp:or key-check-value common-lisp:null))
   (plain-text (common-lisp:error ":plain-text is required") :type
    (common-lisp:or hex-even-length-between16and4096 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'decrypt-data-output 'make-decrypt-data-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input decrypt-data-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input decrypt-data-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-arn))
      (common-lisp:list
       (common-lisp:cons "KeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-check-value))
      (common-lisp:list
       (common-lisp:cons "KeyCheckValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plain-text))
      (common-lisp:list
       (common-lisp:cons "PlainText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input decrypt-data-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (discover-dynamic-card-verification-code (:copier common-lisp:nil)
      (:conc-name "struct-shape-discover-dynamic-card-verification-code-"))
   (application-transaction-counter
    (common-lisp:error ":application-transaction-counter is required") :type
    (common-lisp:or hex-length-between2and4 common-lisp:null))
   (card-expiry-date (common-lisp:error ":card-expiry-date is required") :type
    (common-lisp:or number-length-equals4 common-lisp:null))
   (unpredictable-number
    (common-lisp:error ":unpredictable-number is required") :type
    (common-lisp:or hex-length-between2and8 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'discover-dynamic-card-verification-code
                    'make-discover-dynamic-card-verification-code))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          discover-dynamic-card-verification-code))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          discover-dynamic-card-verification-code))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-transaction-counter))
      (common-lisp:list
       (common-lisp:cons "ApplicationTransactionCounter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'card-expiry-date))
      (common-lisp:list
       (common-lisp:cons "CardExpiryDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unpredictable-number))
      (common-lisp:list
       (common-lisp:cons "UnpredictableNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          discover-dynamic-card-verification-code))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dukpt-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-dukpt-attributes-"))
   (dukpt-derivation-type
    (common-lisp:error ":dukpt-derivation-type is required") :type
    (common-lisp:or dukpt-derivation-type common-lisp:null))
   (key-serial-number (common-lisp:error ":key-serial-number is required")
    :type (common-lisp:or hex-length-between10and24 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dukpt-attributes 'make-dukpt-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input dukpt-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input dukpt-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dukpt-derivation-type))
      (common-lisp:list
       (common-lisp:cons "DukptDerivationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-serial-number))
      (common-lisp:list
       (common-lisp:cons "KeySerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input dukpt-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dukpt-derivation-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-dukpt-derivation-attributes-"))
   (dukpt-key-derivation-type common-lisp:nil :type
    (common-lisp:or dukpt-derivation-type common-lisp:null))
   (dukpt-key-variant common-lisp:nil :type
    (common-lisp:or dukpt-key-variant common-lisp:null))
   (key-serial-number (common-lisp:error ":key-serial-number is required")
    :type (common-lisp:or hex-length-between10and24 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dukpt-derivation-attributes
                    'make-dukpt-derivation-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dukpt-derivation-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dukpt-derivation-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dukpt-key-derivation-type))
      (common-lisp:list
       (common-lisp:cons "DukptKeyDerivationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dukpt-key-variant))
      (common-lisp:list
       (common-lisp:cons "DukptKeyVariant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-serial-number))
      (common-lisp:list
       (common-lisp:cons "KeySerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dukpt-derivation-attributes))
   common-lisp:nil))
(common-lisp:deftype dukpt-derivation-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (dukpt-encryption-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-dukpt-encryption-attributes-"))
   (dukpt-key-derivation-type common-lisp:nil :type
    (common-lisp:or dukpt-derivation-type common-lisp:null))
   (dukpt-key-variant common-lisp:nil :type
    (common-lisp:or dukpt-key-variant common-lisp:null))
   (initialization-vector common-lisp:nil :type
    (common-lisp:or hex-length16or32 common-lisp:null))
   (key-serial-number (common-lisp:error ":key-serial-number is required")
    :type (common-lisp:or hex-length-between10and24 common-lisp:null))
   (mode common-lisp:nil :type
    (common-lisp:or dukpt-encryption-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dukpt-encryption-attributes
                    'make-dukpt-encryption-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dukpt-encryption-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dukpt-encryption-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dukpt-key-derivation-type))
      (common-lisp:list
       (common-lisp:cons "DukptKeyDerivationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dukpt-key-variant))
      (common-lisp:list
       (common-lisp:cons "DukptKeyVariant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initialization-vector))
      (common-lisp:list
       (common-lisp:cons "InitializationVector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-serial-number))
      (common-lisp:list
       (common-lisp:cons "KeySerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dukpt-encryption-attributes))
   common-lisp:nil))
(common-lisp:deftype dukpt-encryption-mode () 'common-lisp:string)
(common-lisp:deftype dukpt-key-variant () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (dynamic-card-verification-code (:copier common-lisp:nil)
      (:conc-name "struct-shape-dynamic-card-verification-code-"))
   (application-transaction-counter
    (common-lisp:error ":application-transaction-counter is required") :type
    (common-lisp:or hex-length-between2and4 common-lisp:null))
   (pan-sequence-number (common-lisp:error ":pan-sequence-number is required")
    :type (common-lisp:or hex-length-equals2 common-lisp:null))
   (track-data (common-lisp:error ":track-data is required") :type
    (common-lisp:or hex-length-between2and160 common-lisp:null))
   (unpredictable-number
    (common-lisp:error ":unpredictable-number is required") :type
    (common-lisp:or hex-length-between2and8 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dynamic-card-verification-code
                    'make-dynamic-card-verification-code))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dynamic-card-verification-code))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dynamic-card-verification-code))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-transaction-counter))
      (common-lisp:list
       (common-lisp:cons "ApplicationTransactionCounter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pan-sequence-number))
      (common-lisp:list
       (common-lisp:cons "PanSequenceNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'track-data))
      (common-lisp:list
       (common-lisp:cons "TrackData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unpredictable-number))
      (common-lisp:list
       (common-lisp:cons "UnpredictableNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dynamic-card-verification-code))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (dynamic-card-verification-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-dynamic-card-verification-value-"))
   (application-transaction-counter
    (common-lisp:error ":application-transaction-counter is required") :type
    (common-lisp:or hex-length-between2and4 common-lisp:null))
   (card-expiry-date (common-lisp:error ":card-expiry-date is required") :type
    (common-lisp:or number-length-equals4 common-lisp:null))
   (pan-sequence-number (common-lisp:error ":pan-sequence-number is required")
    :type (common-lisp:or hex-length-equals2 common-lisp:null))
   (service-code (common-lisp:error ":service-code is required") :type
    (common-lisp:or number-length-equals3 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dynamic-card-verification-value
                    'make-dynamic-card-verification-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          dynamic-card-verification-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          dynamic-card-verification-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-transaction-counter))
      (common-lisp:list
       (common-lisp:cons "ApplicationTransactionCounter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'card-expiry-date))
      (common-lisp:list
       (common-lisp:cons "CardExpiryDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pan-sequence-number))
      (common-lisp:list
       (common-lisp:cons "PanSequenceNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'service-code))
      (common-lisp:list
       (common-lisp:cons "ServiceCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          dynamic-card-verification-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (emv-encryption-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-emv-encryption-attributes-"))
   (initialization-vector common-lisp:nil :type
    (common-lisp:or hex-length16or32 common-lisp:null))
   (major-key-derivation-mode
    (common-lisp:error ":major-key-derivation-mode is required") :type
    (common-lisp:or emv-major-key-derivation-mode common-lisp:null))
   (mode common-lisp:nil :type
    (common-lisp:or emv-encryption-mode common-lisp:null))
   (pan-sequence-number (common-lisp:error ":pan-sequence-number is required")
    :type (common-lisp:or hex-length-equals2 common-lisp:null))
   (primary-account-number
    (common-lisp:error ":primary-account-number is required") :type
    (common-lisp:or number-length-between12and19 common-lisp:null))
   (session-derivation-data
    (common-lisp:error ":session-derivation-data is required") :type
    (common-lisp:or hex-length-equals16 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'emv-encryption-attributes
                    'make-emv-encryption-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          emv-encryption-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          emv-encryption-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initialization-vector))
      (common-lisp:list
       (common-lisp:cons "InitializationVector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'major-key-derivation-mode))
      (common-lisp:list
       (common-lisp:cons "MajorKeyDerivationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pan-sequence-number))
      (common-lisp:list
       (common-lisp:cons "PanSequenceNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-account-number))
      (common-lisp:list
       (common-lisp:cons "PrimaryAccountNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-derivation-data))
      (common-lisp:list
       (common-lisp:cons "SessionDerivationData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          emv-encryption-attributes))
   common-lisp:nil))
(common-lisp:deftype emv-encryption-mode () 'common-lisp:string)
(common-lisp:deftype emv-major-key-derivation-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (encrypt-data-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-encrypt-data-input-"))
   (encryption-attributes
    (common-lisp:error ":encryption-attributes is required") :type
    (common-lisp:or encryption-decryption-attributes common-lisp:null))
   (key-identifier (common-lisp:error ":key-identifier is required") :type
    (common-lisp:or key-arn-or-key-alias-type common-lisp:null))
   (plain-text (common-lisp:error ":plain-text is required") :type
    (common-lisp:or hex-even-length-between16and4064 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'encrypt-data-input 'make-encrypt-data-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encrypt-data-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encrypt-data-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-attributes))
      (common-lisp:list
       (common-lisp:cons "EncryptionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'plain-text))
      (common-lisp:list
       (common-lisp:cons "PlainText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encrypt-data-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (encrypt-data-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-encrypt-data-output-"))
   (cipher-text (common-lisp:error ":cipher-text is required") :type
    (common-lisp:or hex-even-length-between16and4096 common-lisp:null))
   (key-arn (common-lisp:error ":key-arn is required") :type
    (common-lisp:or key-arn common-lisp:null))
   (key-check-value common-lisp:nil :type
    (common-lisp:or key-check-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'encrypt-data-output 'make-encrypt-data-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input encrypt-data-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input encrypt-data-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cipher-text))
      (common-lisp:list
       (common-lisp:cons "CipherText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-arn))
      (common-lisp:list
       (common-lisp:cons "KeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-check-value))
      (common-lisp:list
       (common-lisp:cons "KeyCheckValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input encrypt-data-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (encryption-decryption-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-encryption-decryption-attributes-"))
   (asymmetric common-lisp:nil :type
    (common-lisp:or asymmetric-encryption-attributes common-lisp:null))
   (dukpt common-lisp:nil :type
    (common-lisp:or dukpt-encryption-attributes common-lisp:null))
   (emv common-lisp:nil :type
    (common-lisp:or emv-encryption-attributes common-lisp:null))
   (symmetric common-lisp:nil :type
    (common-lisp:or symmetric-encryption-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'encryption-decryption-attributes
                    'make-encryption-decryption-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          encryption-decryption-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          encryption-decryption-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'asymmetric))
      (common-lisp:list
       (common-lisp:cons "Asymmetric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dukpt))
      (common-lisp:list
       (common-lisp:cons "Dukpt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'emv))
      (common-lisp:list
       (common-lisp:cons "Emv"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'symmetric))
      (common-lisp:list
       (common-lisp:cons "Symmetric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          encryption-decryption-attributes))
   common-lisp:nil))
(common-lisp:deftype encryption-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (generate-card-validation-data-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-generate-card-validation-data-input-"))
   (generation-attributes
    (common-lisp:error ":generation-attributes is required") :type
    (common-lisp:or card-generation-attributes common-lisp:null))
   (key-identifier (common-lisp:error ":key-identifier is required") :type
    (common-lisp:or key-arn-or-key-alias-type common-lisp:null))
   (primary-account-number
    (common-lisp:error ":primary-account-number is required") :type
    (common-lisp:or number-length-between12and19 common-lisp:null))
   (validation-data-length common-lisp:nil :type
    (common-lisp:or integer-range-between3and5type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generate-card-validation-data-input
                    'make-generate-card-validation-data-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-card-validation-data-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-card-validation-data-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generation-attributes))
      (common-lisp:list
       (common-lisp:cons "GenerationAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-identifier))
      (common-lisp:list
       (common-lisp:cons "KeyIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-account-number))
      (common-lisp:list
       (common-lisp:cons "PrimaryAccountNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'validation-data-length))
      (common-lisp:list
       (common-lisp:cons "ValidationDataLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-card-validation-data-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (generate-card-validation-data-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-generate-card-validation-data-output-"))
   (key-arn (common-lisp:error ":key-arn is required") :type
    (common-lisp:or key-arn common-lisp:null))
   (key-check-value (common-lisp:error ":key-check-value is required") :type
    (common-lisp:or key-check-value common-lisp:null))
   (validation-data (common-lisp:error ":validation-data is required") :type
    (common-lisp:or number-length-between3and5 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generate-card-validation-data-output
                    'make-generate-card-validation-data-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-card-validation-data-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-card-validation-data-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-arn))
      (common-lisp:list
       (common-lisp:cons "KeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-check-value))
      (common-lisp:list
       (common-lisp:cons "KeyCheckValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-data))
      (common-lisp:list
       (common-lisp:cons "ValidationData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-card-validation-data-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (generate-mac-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-generate-mac-input-"))
   (generation-attributes
    (common-lisp:error ":generation-attributes is required") :type
    (common-lisp:or mac-attributes common-lisp:null))
   (key-identifier (common-lisp:error ":key-identifier is required") :type
    (common-lisp:or key-arn-or-key-alias-type common-lisp:null))
   (mac-length common-lisp:nil :type
    (common-lisp:or integer-range-between4and16 common-lisp:null))
   (message-data (common-lisp:error ":message-data is required") :type
    (common-lisp:or hex-even-length-between2and4096 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generate-mac-input 'make-generate-mac-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input generate-mac-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input generate-mac-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generation-attributes))
      (common-lisp:list
       (common-lisp:cons "GenerationAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-identifier))
      (common-lisp:list
       (common-lisp:cons "KeyIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-length))
      (common-lisp:list
       (common-lisp:cons "MacLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-data))
      (common-lisp:list
       (common-lisp:cons "MessageData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input generate-mac-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (generate-mac-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-generate-mac-output-"))
   (key-arn (common-lisp:error ":key-arn is required") :type
    (common-lisp:or key-arn common-lisp:null))
   (key-check-value (common-lisp:error ":key-check-value is required") :type
    (common-lisp:or key-check-value common-lisp:null))
   (mac (common-lisp:error ":mac is required") :type
    (common-lisp:or hex-length-between4and128 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generate-mac-output 'make-generate-mac-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input generate-mac-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input generate-mac-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-arn))
      (common-lisp:list
       (common-lisp:cons "KeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-check-value))
      (common-lisp:list
       (common-lisp:cons "KeyCheckValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac))
      (common-lisp:list
       (common-lisp:cons "Mac"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input generate-mac-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (generate-pin-data-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-generate-pin-data-input-"))
   (encryption-key-identifier
    (common-lisp:error ":encryption-key-identifier is required") :type
    (common-lisp:or key-arn-or-key-alias-type common-lisp:null))
   (generation-attributes
    (common-lisp:error ":generation-attributes is required") :type
    (common-lisp:or pin-generation-attributes common-lisp:null))
   (generation-key-identifier
    (common-lisp:error ":generation-key-identifier is required") :type
    (common-lisp:or key-arn-or-key-alias-type common-lisp:null))
   (pin-block-format (common-lisp:error ":pin-block-format is required") :type
    (common-lisp:or pin-block-format-for-pin-data common-lisp:null))
   (pin-data-length common-lisp:nil :type
    (common-lisp:or integer-range-between4and12 common-lisp:null))
   (primary-account-number
    (common-lisp:error ":primary-account-number is required") :type
    (common-lisp:or number-length-between12and19 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generate-pin-data-input 'make-generate-pin-data-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-pin-data-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-pin-data-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-key-identifier))
      (common-lisp:list
       (common-lisp:cons "EncryptionKeyIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generation-attributes))
      (common-lisp:list
       (common-lisp:cons "GenerationAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generation-key-identifier))
      (common-lisp:list
       (common-lisp:cons "GenerationKeyIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pin-block-format))
      (common-lisp:list
       (common-lisp:cons "PinBlockFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pin-data-length))
      (common-lisp:list
       (common-lisp:cons "PinDataLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-account-number))
      (common-lisp:list
       (common-lisp:cons "PrimaryAccountNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-pin-data-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (generate-pin-data-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-generate-pin-data-output-"))
   (encrypted-pin-block (common-lisp:error ":encrypted-pin-block is required")
    :type (common-lisp:or hex-length-between16and32 common-lisp:null))
   (encryption-key-arn (common-lisp:error ":encryption-key-arn is required")
    :type (common-lisp:or key-arn common-lisp:null))
   (encryption-key-check-value
    (common-lisp:error ":encryption-key-check-value is required") :type
    (common-lisp:or key-check-value common-lisp:null))
   (generation-key-arn (common-lisp:error ":generation-key-arn is required")
    :type (common-lisp:or key-arn common-lisp:null))
   (generation-key-check-value
    (common-lisp:error ":generation-key-check-value is required") :type
    (common-lisp:or key-check-value common-lisp:null))
   (pin-data (common-lisp:error ":pin-data is required") :type
    (common-lisp:or pin-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generate-pin-data-output 'make-generate-pin-data-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          generate-pin-data-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          generate-pin-data-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted-pin-block))
      (common-lisp:list
       (common-lisp:cons "EncryptedPinBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "EncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-key-check-value))
      (common-lisp:list
       (common-lisp:cons "EncryptionKeyCheckValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'generation-key-arn))
      (common-lisp:list
       (common-lisp:cons "GenerationKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'generation-key-check-value))
      (common-lisp:list
       (common-lisp:cons "GenerationKeyCheckValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pin-data))
      (common-lisp:list
       (common-lisp:cons "PinData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          generate-pin-data-output))
   common-lisp:nil))
(common-lisp:deftype hex-even-length-between16and32 () 'common-lisp:string)
(common-lisp:deftype hex-even-length-between16and4064 () 'common-lisp:string)
(common-lisp:deftype hex-even-length-between16and4096 () 'common-lisp:string)
(common-lisp:deftype hex-even-length-between2and4096 () 'common-lisp:string)
(common-lisp:deftype hex-even-length-between4and128 () 'common-lisp:string)
(common-lisp:deftype hex-length16or32 () 'common-lisp:string)
(common-lisp:deftype hex-length-between10and24 () 'common-lisp:string)
(common-lisp:deftype hex-length-between16and32 () 'common-lisp:string)
(common-lisp:deftype hex-length-between1and16 () 'common-lisp:string)
(common-lisp:deftype hex-length-between2and1024 () 'common-lisp:string)
(common-lisp:deftype hex-length-between2and160 () 'common-lisp:string)
(common-lisp:deftype hex-length-between2and4 () 'common-lisp:string)
(common-lisp:deftype hex-length-between2and8 () 'common-lisp:string)
(common-lisp:deftype hex-length-between4and128 () 'common-lisp:string)
(common-lisp:deftype hex-length-equals1 () 'common-lisp:string)
(common-lisp:deftype hex-length-equals16 () 'common-lisp:string)
(common-lisp:deftype hex-length-equals2 () 'common-lisp:string)
(common-lisp:deftype hex-length-equals4 () 'common-lisp:string)
(common-lisp:deftype hex-length-equals8 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ibm3624natural-pin (:copier common-lisp:nil)
      (:conc-name "struct-shape-ibm3624natural-pin-"))
   (decimalization-table
    (common-lisp:error ":decimalization-table is required") :type
    (common-lisp:or number-length-equals16 common-lisp:null))
   (pin-validation-data (common-lisp:error ":pin-validation-data is required")
    :type (common-lisp:or number-length-between4and16 common-lisp:null))
   (pin-validation-data-pad-character
    (common-lisp:error ":pin-validation-data-pad-character is required") :type
    (common-lisp:or hex-length-equals1 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ibm3624natural-pin 'make-ibm3624natural-pin))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ibm3624natural-pin))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ibm3624natural-pin))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decimalization-table))
      (common-lisp:list
       (common-lisp:cons "DecimalizationTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pin-validation-data))
      (common-lisp:list
       (common-lisp:cons "PinValidationData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pin-validation-data-pad-character))
      (common-lisp:list
       (common-lisp:cons "PinValidationDataPadCharacter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ibm3624natural-pin))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ibm3624pin-from-offset (:copier common-lisp:nil)
      (:conc-name "struct-shape-ibm3624pin-from-offset-"))
   (decimalization-table
    (common-lisp:error ":decimalization-table is required") :type
    (common-lisp:or number-length-equals16 common-lisp:null))
   (pin-offset (common-lisp:error ":pin-offset is required") :type
    (common-lisp:or number-length-between4and12 common-lisp:null))
   (pin-validation-data (common-lisp:error ":pin-validation-data is required")
    :type (common-lisp:or number-length-between4and16 common-lisp:null))
   (pin-validation-data-pad-character
    (common-lisp:error ":pin-validation-data-pad-character is required") :type
    (common-lisp:or hex-length-equals1 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ibm3624pin-from-offset 'make-ibm3624pin-from-offset))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ibm3624pin-from-offset))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ibm3624pin-from-offset))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decimalization-table))
      (common-lisp:list
       (common-lisp:cons "DecimalizationTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pin-offset))
      (common-lisp:list
       (common-lisp:cons "PinOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pin-validation-data))
      (common-lisp:list
       (common-lisp:cons "PinValidationData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pin-validation-data-pad-character))
      (common-lisp:list
       (common-lisp:cons "PinValidationDataPadCharacter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ibm3624pin-from-offset))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ibm3624pin-offset (:copier common-lisp:nil)
      (:conc-name "struct-shape-ibm3624pin-offset-"))
   (decimalization-table
    (common-lisp:error ":decimalization-table is required") :type
    (common-lisp:or number-length-equals16 common-lisp:null))
   (encrypted-pin-block (common-lisp:error ":encrypted-pin-block is required")
    :type (common-lisp:or hex-length-between16and32 common-lisp:null))
   (pin-validation-data (common-lisp:error ":pin-validation-data is required")
    :type (common-lisp:or number-length-between4and16 common-lisp:null))
   (pin-validation-data-pad-character
    (common-lisp:error ":pin-validation-data-pad-character is required") :type
    (common-lisp:or hex-length-equals1 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ibm3624pin-offset 'make-ibm3624pin-offset))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ibm3624pin-offset))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ibm3624pin-offset))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decimalization-table))
      (common-lisp:list
       (common-lisp:cons "DecimalizationTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted-pin-block))
      (common-lisp:list
       (common-lisp:cons "EncryptedPinBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pin-validation-data))
      (common-lisp:list
       (common-lisp:cons "PinValidationData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pin-validation-data-pad-character))
      (common-lisp:list
       (common-lisp:cons "PinValidationDataPadCharacter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ibm3624pin-offset))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ibm3624pin-verification (:copier common-lisp:nil)
      (:conc-name "struct-shape-ibm3624pin-verification-"))
   (decimalization-table
    (common-lisp:error ":decimalization-table is required") :type
    (common-lisp:or number-length-equals16 common-lisp:null))
   (pin-offset (common-lisp:error ":pin-offset is required") :type
    (common-lisp:or number-length-between4and12 common-lisp:null))
   (pin-validation-data (common-lisp:error ":pin-validation-data is required")
    :type (common-lisp:or number-length-between4and16 common-lisp:null))
   (pin-validation-data-pad-character
    (common-lisp:error ":pin-validation-data-pad-character is required") :type
    (common-lisp:or hex-length-equals1 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ibm3624pin-verification 'make-ibm3624pin-verification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ibm3624pin-verification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ibm3624pin-verification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decimalization-table))
      (common-lisp:list
       (common-lisp:cons "DecimalizationTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pin-offset))
      (common-lisp:list
       (common-lisp:cons "PinOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pin-validation-data))
      (common-lisp:list
       (common-lisp:cons "PinValidationData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pin-validation-data-pad-character))
      (common-lisp:list
       (common-lisp:cons "PinValidationDataPadCharacter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ibm3624pin-verification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ibm3624random-pin (:copier common-lisp:nil)
      (:conc-name "struct-shape-ibm3624random-pin-"))
   (decimalization-table
    (common-lisp:error ":decimalization-table is required") :type
    (common-lisp:or number-length-equals16 common-lisp:null))
   (pin-validation-data (common-lisp:error ":pin-validation-data is required")
    :type (common-lisp:or number-length-between4and16 common-lisp:null))
   (pin-validation-data-pad-character
    (common-lisp:error ":pin-validation-data-pad-character is required") :type
    (common-lisp:or hex-length-equals1 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ibm3624random-pin 'make-ibm3624random-pin))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ibm3624random-pin))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ibm3624random-pin))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'decimalization-table))
      (common-lisp:list
       (common-lisp:cons "DecimalizationTable"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pin-validation-data))
      (common-lisp:list
       (common-lisp:cons "PinValidationData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pin-validation-data-pad-character))
      (common-lisp:list
       (common-lisp:cons "PinValidationDataPadCharacter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ibm3624random-pin))
   common-lisp:nil))
(common-lisp:deftype integer-range-between0and9 () 'common-lisp:integer)
(common-lisp:deftype integer-range-between3and5type () 'common-lisp:integer)
(common-lisp:deftype integer-range-between4and12 () 'common-lisp:integer)
(common-lisp:deftype integer-range-between4and16 () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:define-condition internal-server-exception
     (payment-cryptography-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-server-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-server-exception
                    'internal-server-exception-message)))
(common-lisp:deftype key-arn () 'common-lisp:string)
(common-lisp:deftype key-arn-or-key-alias-type () 'common-lisp:string)
(common-lisp:deftype key-check-value () 'common-lisp:string)
(common-lisp:deftype mac-algorithm () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (mac-algorithm-dukpt (:copier common-lisp:nil)
      (:conc-name "struct-shape-mac-algorithm-dukpt-"))
   (dukpt-derivation-type common-lisp:nil :type
    (common-lisp:or dukpt-derivation-type common-lisp:null))
   (dukpt-key-variant (common-lisp:error ":dukpt-key-variant is required")
    :type (common-lisp:or dukpt-key-variant common-lisp:null))
   (key-serial-number (common-lisp:error ":key-serial-number is required")
    :type (common-lisp:or hex-length-between10and24 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'mac-algorithm-dukpt 'make-mac-algorithm-dukpt))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mac-algorithm-dukpt))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mac-algorithm-dukpt))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dukpt-derivation-type))
      (common-lisp:list
       (common-lisp:cons "DukptDerivationType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dukpt-key-variant))
      (common-lisp:list
       (common-lisp:cons "DukptKeyVariant"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-serial-number))
      (common-lisp:list
       (common-lisp:cons "KeySerialNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mac-algorithm-dukpt))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (mac-algorithm-emv (:copier common-lisp:nil)
      (:conc-name "struct-shape-mac-algorithm-emv-"))
   (major-key-derivation-mode
    (common-lisp:error ":major-key-derivation-mode is required") :type
    (common-lisp:or major-key-derivation-mode common-lisp:null))
   (pan-sequence-number (common-lisp:error ":pan-sequence-number is required")
    :type (common-lisp:or hex-length-equals2 common-lisp:null))
   (primary-account-number
    (common-lisp:error ":primary-account-number is required") :type
    (common-lisp:or number-length-between12and19 common-lisp:null))
   (session-key-derivation-mode
    (common-lisp:error ":session-key-derivation-mode is required") :type
    (common-lisp:or session-key-derivation-mode common-lisp:null))
   (session-key-derivation-value
    (common-lisp:error ":session-key-derivation-value is required") :type
    (common-lisp:or session-key-derivation-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'mac-algorithm-emv 'make-mac-algorithm-emv))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mac-algorithm-emv))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mac-algorithm-emv))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'major-key-derivation-mode))
      (common-lisp:list
       (common-lisp:cons "MajorKeyDerivationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pan-sequence-number))
      (common-lisp:list
       (common-lisp:cons "PanSequenceNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-account-number))
      (common-lisp:list
       (common-lisp:cons "PrimaryAccountNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-key-derivation-mode))
      (common-lisp:list
       (common-lisp:cons "SessionKeyDerivationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-key-derivation-value))
      (common-lisp:list
       (common-lisp:cons "SessionKeyDerivationValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mac-algorithm-emv))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (mac-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-mac-attributes-"))
   (algorithm common-lisp:nil :type
    (common-lisp:or mac-algorithm common-lisp:null))
   (dukpt-cmac common-lisp:nil :type
    (common-lisp:or mac-algorithm-dukpt common-lisp:null))
   (dukpt-iso9797algorithm1 common-lisp:nil :type
    (common-lisp:or mac-algorithm-dukpt common-lisp:null))
   (dukpt-iso9797algorithm3 common-lisp:nil :type
    (common-lisp:or mac-algorithm-dukpt common-lisp:null))
   (emv-mac common-lisp:nil :type
    (common-lisp:or mac-algorithm-emv common-lisp:null)))
 (common-lisp:export (common-lisp:list 'mac-attributes 'make-mac-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input mac-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input mac-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'algorithm))
      (common-lisp:list
       (common-lisp:cons "Algorithm"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dukpt-cmac))
      (common-lisp:list
       (common-lisp:cons "DukptCmac"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dukpt-iso9797algorithm1))
      (common-lisp:list
       (common-lisp:cons "DukptIso9797Algorithm1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'dukpt-iso9797algorithm3))
      (common-lisp:list
       (common-lisp:cons "DukptIso9797Algorithm3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'emv-mac))
      (common-lisp:list
       (common-lisp:cons "EmvMac"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input mac-attributes))
   common-lisp:nil))
(common-lisp:deftype major-key-derivation-mode () 'common-lisp:string)
(common-lisp:deftype number-length-between12and19 () 'common-lisp:string)
(common-lisp:deftype number-length-between3and5 () 'common-lisp:string)
(common-lisp:deftype number-length-between4and12 () 'common-lisp:string)
(common-lisp:deftype number-length-between4and16 () 'common-lisp:string)
(common-lisp:deftype number-length-equals16 () 'common-lisp:string)
(common-lisp:deftype number-length-equals3 () 'common-lisp:string)
(common-lisp:deftype number-length-equals4 () 'common-lisp:string)
(common-lisp:deftype padding-type () 'common-lisp:string)
(common-lisp:deftype pin-block-format-for-pin-data () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (pin-data (:copier common-lisp:nil) (:conc-name "struct-shape-pin-data-"))
   (pin-offset common-lisp:nil :type
    (common-lisp:or number-length-between4and12 common-lisp:null))
   (verification-value common-lisp:nil :type
    (common-lisp:or number-length-between4and12 common-lisp:null)))
 (common-lisp:export (common-lisp:list 'pin-data 'make-pin-data))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input pin-data))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input pin-data))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pin-offset))
      (common-lisp:list
       (common-lisp:cons "PinOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verification-value))
      (common-lisp:list
       (common-lisp:cons "VerificationValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input pin-data))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pin-generation-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-pin-generation-attributes-"))
   (ibm3624natural-pin common-lisp:nil :type
    (common-lisp:or ibm3624natural-pin common-lisp:null))
   (ibm3624pin-from-offset common-lisp:nil :type
    (common-lisp:or ibm3624pin-from-offset common-lisp:null))
   (ibm3624pin-offset common-lisp:nil :type
    (common-lisp:or ibm3624pin-offset common-lisp:null))
   (ibm3624random-pin common-lisp:nil :type
    (common-lisp:or ibm3624random-pin common-lisp:null))
   (visa-pin common-lisp:nil :type (common-lisp:or visa-pin common-lisp:null))
   (visa-pin-verification-value common-lisp:nil :type
    (common-lisp:or visa-pin-verification-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pin-generation-attributes
                    'make-pin-generation-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pin-generation-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pin-generation-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ibm3624natural-pin))
      (common-lisp:list
       (common-lisp:cons "Ibm3624NaturalPin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'ibm3624pin-from-offset))
      (common-lisp:list
       (common-lisp:cons "Ibm3624PinFromOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ibm3624pin-offset))
      (common-lisp:list
       (common-lisp:cons "Ibm3624PinOffset"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ibm3624random-pin))
      (common-lisp:list
       (common-lisp:cons "Ibm3624RandomPin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visa-pin))
      (common-lisp:list
       (common-lisp:cons "VisaPin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'visa-pin-verification-value))
      (common-lisp:list
       (common-lisp:cons "VisaPinVerificationValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pin-generation-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (pin-verification-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-pin-verification-attributes-"))
   (ibm3624pin common-lisp:nil :type
    (common-lisp:or ibm3624pin-verification common-lisp:null))
   (visa-pin common-lisp:nil :type
    (common-lisp:or visa-pin-verification common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pin-verification-attributes
                    'make-pin-verification-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          pin-verification-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          pin-verification-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ibm3624pin))
      (common-lisp:list
       (common-lisp:cons "Ibm3624Pin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visa-pin))
      (common-lisp:list
       (common-lisp:cons "VisaPin"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          pin-verification-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (re-encrypt-data-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-re-encrypt-data-input-"))
   (cipher-text (common-lisp:error ":cipher-text is required") :type
    (common-lisp:or hex-even-length-between16and4096 common-lisp:null))
   (incoming-encryption-attributes
    (common-lisp:error ":incoming-encryption-attributes is required") :type
    (common-lisp:or re-encryption-attributes common-lisp:null))
   (incoming-key-identifier
    (common-lisp:error ":incoming-key-identifier is required") :type
    (common-lisp:or key-arn-or-key-alias-type common-lisp:null))
   (outgoing-encryption-attributes
    (common-lisp:error ":outgoing-encryption-attributes is required") :type
    (common-lisp:or re-encryption-attributes common-lisp:null))
   (outgoing-key-identifier
    (common-lisp:error ":outgoing-key-identifier is required") :type
    (common-lisp:or key-arn-or-key-alias-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 're-encrypt-data-input 'make-re-encrypt-data-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          re-encrypt-data-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          re-encrypt-data-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cipher-text))
      (common-lisp:list
       (common-lisp:cons "CipherText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'incoming-encryption-attributes))
      (common-lisp:list
       (common-lisp:cons "IncomingEncryptionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'outgoing-encryption-attributes))
      (common-lisp:list
       (common-lisp:cons "OutgoingEncryptionAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'outgoing-key-identifier))
      (common-lisp:list
       (common-lisp:cons "OutgoingKeyIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          re-encrypt-data-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (re-encrypt-data-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-re-encrypt-data-output-"))
   (cipher-text (common-lisp:error ":cipher-text is required") :type
    (common-lisp:or hex-even-length-between16and4096 common-lisp:null))
   (key-arn (common-lisp:error ":key-arn is required") :type
    (common-lisp:or key-arn common-lisp:null))
   (key-check-value (common-lisp:error ":key-check-value is required") :type
    (common-lisp:or key-check-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 're-encrypt-data-output 'make-re-encrypt-data-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          re-encrypt-data-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          re-encrypt-data-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'cipher-text))
      (common-lisp:list
       (common-lisp:cons "CipherText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-arn))
      (common-lisp:list
       (common-lisp:cons "KeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-check-value))
      (common-lisp:list
       (common-lisp:cons "KeyCheckValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          re-encrypt-data-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (re-encryption-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-re-encryption-attributes-"))
   (dukpt common-lisp:nil :type
    (common-lisp:or dukpt-encryption-attributes common-lisp:null))
   (symmetric common-lisp:nil :type
    (common-lisp:or symmetric-encryption-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 're-encryption-attributes 'make-re-encryption-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          re-encryption-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          re-encryption-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dukpt))
      (common-lisp:list
       (common-lisp:cons "Dukpt"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'symmetric))
      (common-lisp:list
       (common-lisp:cons "Symmetric"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          re-encryption-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (payment-cryptography-data-error)
     ((resource-id :initarg :resource-id :initform common-lisp:nil :reader
       resource-not-found-exception-resource-id)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-resource-id)))
(common-lisp:progn
 (common-lisp:defstruct
     (session-key-amex (:copier common-lisp:nil)
      (:conc-name "struct-shape-session-key-amex-"))
   (pan-sequence-number (common-lisp:error ":pan-sequence-number is required")
    :type (common-lisp:or hex-length-equals2 common-lisp:null))
   (primary-account-number
    (common-lisp:error ":primary-account-number is required") :type
    (common-lisp:or number-length-between12and19 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'session-key-amex 'make-session-key-amex))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session-key-amex))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session-key-amex))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pan-sequence-number))
      (common-lisp:list
       (common-lisp:cons "PanSequenceNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-account-number))
      (common-lisp:list
       (common-lisp:cons "PrimaryAccountNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session-key-amex))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (session-key-derivation (:copier common-lisp:nil)
      (:conc-name "struct-shape-session-key-derivation-"))
   (amex common-lisp:nil :type
    (common-lisp:or session-key-amex common-lisp:null))
   (emv2000 common-lisp:nil :type
    (common-lisp:or session-key-emv2000 common-lisp:null))
   (emv-common common-lisp:nil :type
    (common-lisp:or session-key-emv-common common-lisp:null))
   (mastercard common-lisp:nil :type
    (common-lisp:or session-key-mastercard common-lisp:null))
   (visa common-lisp:nil :type
    (common-lisp:or session-key-visa common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'session-key-derivation 'make-session-key-derivation))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          session-key-derivation))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          session-key-derivation))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'amex))
      (common-lisp:list
       (common-lisp:cons "Amex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'emv2000))
      (common-lisp:list
       (common-lisp:cons "Emv2000"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'emv-common))
      (common-lisp:list
       (common-lisp:cons "EmvCommon"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mastercard))
      (common-lisp:list
       (common-lisp:cons "Mastercard"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visa))
      (common-lisp:list
       (common-lisp:cons "Visa"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          session-key-derivation))
   common-lisp:nil))
(common-lisp:deftype session-key-derivation-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (session-key-derivation-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-session-key-derivation-value-"))
   (application-cryptogram common-lisp:nil :type
    (common-lisp:or hex-length-equals16 common-lisp:null))
   (application-transaction-counter common-lisp:nil :type
    (common-lisp:or hex-length-between2and4 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'session-key-derivation-value
                    'make-session-key-derivation-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          session-key-derivation-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          session-key-derivation-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-cryptogram))
      (common-lisp:list
       (common-lisp:cons "ApplicationCryptogram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-transaction-counter))
      (common-lisp:list
       (common-lisp:cons "ApplicationTransactionCounter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          session-key-derivation-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (session-key-emv2000 (:copier common-lisp:nil)
      (:conc-name "struct-shape-session-key-emv2000-"))
   (application-transaction-counter
    (common-lisp:error ":application-transaction-counter is required") :type
    (common-lisp:or hex-length-between2and4 common-lisp:null))
   (pan-sequence-number (common-lisp:error ":pan-sequence-number is required")
    :type (common-lisp:or hex-length-equals2 common-lisp:null))
   (primary-account-number
    (common-lisp:error ":primary-account-number is required") :type
    (common-lisp:or number-length-between12and19 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'session-key-emv2000 'make-session-key-emv2000))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session-key-emv2000))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session-key-emv2000))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-transaction-counter))
      (common-lisp:list
       (common-lisp:cons "ApplicationTransactionCounter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pan-sequence-number))
      (common-lisp:list
       (common-lisp:cons "PanSequenceNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-account-number))
      (common-lisp:list
       (common-lisp:cons "PrimaryAccountNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session-key-emv2000))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (session-key-emv-common (:copier common-lisp:nil)
      (:conc-name "struct-shape-session-key-emv-common-"))
   (application-transaction-counter
    (common-lisp:error ":application-transaction-counter is required") :type
    (common-lisp:or hex-length-between2and4 common-lisp:null))
   (pan-sequence-number (common-lisp:error ":pan-sequence-number is required")
    :type (common-lisp:or hex-length-equals2 common-lisp:null))
   (primary-account-number
    (common-lisp:error ":primary-account-number is required") :type
    (common-lisp:or number-length-between12and19 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'session-key-emv-common 'make-session-key-emv-common))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          session-key-emv-common))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          session-key-emv-common))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-transaction-counter))
      (common-lisp:list
       (common-lisp:cons "ApplicationTransactionCounter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pan-sequence-number))
      (common-lisp:list
       (common-lisp:cons "PanSequenceNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-account-number))
      (common-lisp:list
       (common-lisp:cons "PrimaryAccountNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          session-key-emv-common))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (session-key-mastercard (:copier common-lisp:nil)
      (:conc-name "struct-shape-session-key-mastercard-"))
   (application-transaction-counter
    (common-lisp:error ":application-transaction-counter is required") :type
    (common-lisp:or hex-length-between2and4 common-lisp:null))
   (pan-sequence-number (common-lisp:error ":pan-sequence-number is required")
    :type (common-lisp:or hex-length-equals2 common-lisp:null))
   (primary-account-number
    (common-lisp:error ":primary-account-number is required") :type
    (common-lisp:or number-length-between12and19 common-lisp:null))
   (unpredictable-number
    (common-lisp:error ":unpredictable-number is required") :type
    (common-lisp:or hex-length-between2and8 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'session-key-mastercard 'make-session-key-mastercard))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          session-key-mastercard))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          session-key-mastercard))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'application-transaction-counter))
      (common-lisp:list
       (common-lisp:cons "ApplicationTransactionCounter"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pan-sequence-number))
      (common-lisp:list
       (common-lisp:cons "PanSequenceNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-account-number))
      (common-lisp:list
       (common-lisp:cons "PrimaryAccountNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'unpredictable-number))
      (common-lisp:list
       (common-lisp:cons "UnpredictableNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          session-key-mastercard))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (session-key-visa (:copier common-lisp:nil)
      (:conc-name "struct-shape-session-key-visa-"))
   (pan-sequence-number (common-lisp:error ":pan-sequence-number is required")
    :type (common-lisp:or hex-length-equals2 common-lisp:null))
   (primary-account-number
    (common-lisp:error ":primary-account-number is required") :type
    (common-lisp:or number-length-between12and19 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'session-key-visa 'make-session-key-visa))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input session-key-visa))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input session-key-visa))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pan-sequence-number))
      (common-lisp:list
       (common-lisp:cons "PanSequenceNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-account-number))
      (common-lisp:list
       (common-lisp:cons "PrimaryAccountNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input session-key-visa))
   common-lisp:nil))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (symmetric-encryption-attributes (:copier common-lisp:nil)
      (:conc-name "struct-shape-symmetric-encryption-attributes-"))
   (initialization-vector common-lisp:nil :type
    (common-lisp:or hex-length16or32 common-lisp:null))
   (mode (common-lisp:error ":mode is required") :type
    (common-lisp:or encryption-mode common-lisp:null))
   (padding-type common-lisp:nil :type
    (common-lisp:or padding-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'symmetric-encryption-attributes
                    'make-symmetric-encryption-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          symmetric-encryption-attributes))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          symmetric-encryption-attributes))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'initialization-vector))
      (common-lisp:list
       (common-lisp:cons "InitializationVector"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mode))
      (common-lisp:list
       (common-lisp:cons "Mode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'padding-type))
      (common-lisp:list
       (common-lisp:cons "PaddingType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          symmetric-encryption-attributes))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (payment-cryptography-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (translate-pin-data-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-translate-pin-data-input-"))
   (encrypted-pin-block (common-lisp:error ":encrypted-pin-block is required")
    :type (common-lisp:or hex-even-length-between16and32 common-lisp:null))
   (incoming-dukpt-attributes common-lisp:nil :type
    (common-lisp:or dukpt-derivation-attributes common-lisp:null))
   (incoming-key-identifier
    (common-lisp:error ":incoming-key-identifier is required") :type
    (common-lisp:or key-arn-or-key-alias-type common-lisp:null))
   (incoming-translation-attributes
    (common-lisp:error ":incoming-translation-attributes is required") :type
    (common-lisp:or translation-iso-formats common-lisp:null))
   (outgoing-dukpt-attributes common-lisp:nil :type
    (common-lisp:or dukpt-derivation-attributes common-lisp:null))
   (outgoing-key-identifier
    (common-lisp:error ":outgoing-key-identifier is required") :type
    (common-lisp:or key-arn-or-key-alias-type common-lisp:null))
   (outgoing-translation-attributes
    (common-lisp:error ":outgoing-translation-attributes is required") :type
    (common-lisp:or translation-iso-formats common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'translate-pin-data-input 'make-translate-pin-data-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          translate-pin-data-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          translate-pin-data-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted-pin-block))
      (common-lisp:list
       (common-lisp:cons "EncryptedPinBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'incoming-dukpt-attributes))
      (common-lisp:list
       (common-lisp:cons "IncomingDukptAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'incoming-key-identifier))
      (common-lisp:list
       (common-lisp:cons "IncomingKeyIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'incoming-translation-attributes))
      (common-lisp:list
       (common-lisp:cons "IncomingTranslationAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'outgoing-dukpt-attributes))
      (common-lisp:list
       (common-lisp:cons "OutgoingDukptAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'outgoing-key-identifier))
      (common-lisp:list
       (common-lisp:cons "OutgoingKeyIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'outgoing-translation-attributes))
      (common-lisp:list
       (common-lisp:cons "OutgoingTranslationAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          translate-pin-data-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (translate-pin-data-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-translate-pin-data-output-"))
   (key-arn (common-lisp:error ":key-arn is required") :type
    (common-lisp:or key-arn common-lisp:null))
   (key-check-value (common-lisp:error ":key-check-value is required") :type
    (common-lisp:or key-check-value common-lisp:null))
   (pin-block (common-lisp:error ":pin-block is required") :type
    (common-lisp:or hex-length-between16and32 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'translate-pin-data-output
                    'make-translate-pin-data-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          translate-pin-data-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          translate-pin-data-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-arn))
      (common-lisp:list
       (common-lisp:cons "KeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-check-value))
      (common-lisp:list
       (common-lisp:cons "KeyCheckValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pin-block))
      (common-lisp:list
       (common-lisp:cons "PinBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          translate-pin-data-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (translation-iso-formats (:copier common-lisp:nil)
      (:conc-name "struct-shape-translation-iso-formats-"))
   (iso-format0 common-lisp:nil :type
    (common-lisp:or translation-pin-data-iso-format034 common-lisp:null))
   (iso-format1 common-lisp:nil :type
    (common-lisp:or translation-pin-data-iso-format1 common-lisp:null))
   (iso-format3 common-lisp:nil :type
    (common-lisp:or translation-pin-data-iso-format034 common-lisp:null))
   (iso-format4 common-lisp:nil :type
    (common-lisp:or translation-pin-data-iso-format034 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'translation-iso-formats 'make-translation-iso-formats))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          translation-iso-formats))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          translation-iso-formats))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-format0))
      (common-lisp:list
       (common-lisp:cons "IsoFormat0"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-format1))
      (common-lisp:list
       (common-lisp:cons "IsoFormat1"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-format3))
      (common-lisp:list
       (common-lisp:cons "IsoFormat3"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'iso-format4))
      (common-lisp:list
       (common-lisp:cons "IsoFormat4"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          translation-iso-formats))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (translation-pin-data-iso-format034 (:copier common-lisp:nil)
      (:conc-name "struct-shape-translation-pin-data-iso-format034-"))
   (primary-account-number
    (common-lisp:error ":primary-account-number is required") :type
    (common-lisp:or number-length-between12and19 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'translation-pin-data-iso-format034
                    'make-translation-pin-data-iso-format034))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          translation-pin-data-iso-format034))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          translation-pin-data-iso-format034))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-account-number))
      (common-lisp:list
       (common-lisp:cons "PrimaryAccountNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          translation-pin-data-iso-format034))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (translation-pin-data-iso-format1 (:copier common-lisp:nil)
      (:conc-name "struct-shape-translation-pin-data-iso-format1-")))
 (common-lisp:export
  (common-lisp:list 'translation-pin-data-iso-format1
                    'make-translation-pin-data-iso-format1))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          translation-pin-data-iso-format1))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          translation-pin-data-iso-format1))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          translation-pin-data-iso-format1))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (payment-cryptography-data-error)
     ((field-list :initarg :field-list :initform common-lisp:nil :reader
       validation-exception-field-list)
      (message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-field-list
                    'validation-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (validation-exception-field (:copier common-lisp:nil)
      (:conc-name "struct-shape-validation-exception-field-"))
   (message (common-lisp:error ":message is required") :type
    (common-lisp:or string common-lisp:null))
   (path (common-lisp:error ":path is required") :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validation-exception-field
                    'make-validation-exception-field))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message))
      (common-lisp:list
       (common-lisp:cons "message"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'path))
      (common-lisp:list
       (common-lisp:cons "path"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          validation-exception-field))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype validation-exception-field-list ()
   '(trivial-types:proper-list validation-exception-field))
 (common-lisp:defun make-validation-exception-field-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            validation-exception-field))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition verification-failed-exception
     (payment-cryptography-data-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       verification-failed-exception-message)
      (reason :initarg :reason :initform common-lisp:nil :reader
       verification-failed-exception-reason)))
 (common-lisp:export
  (common-lisp:list 'verification-failed-exception
                    'verification-failed-exception-message
                    'verification-failed-exception-reason)))
(common-lisp:deftype verification-failed-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (verify-auth-request-cryptogram-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-verify-auth-request-cryptogram-input-"))
   (auth-request-cryptogram
    (common-lisp:error ":auth-request-cryptogram is required") :type
    (common-lisp:or hex-length-equals16 common-lisp:null))
   (auth-response-attributes common-lisp:nil :type
    (common-lisp:or cryptogram-auth-response common-lisp:null))
   (key-identifier (common-lisp:error ":key-identifier is required") :type
    (common-lisp:or key-arn-or-key-alias-type common-lisp:null))
   (major-key-derivation-mode
    (common-lisp:error ":major-key-derivation-mode is required") :type
    (common-lisp:or major-key-derivation-mode common-lisp:null))
   (session-key-derivation-attributes
    (common-lisp:error ":session-key-derivation-attributes is required") :type
    (common-lisp:or session-key-derivation common-lisp:null))
   (transaction-data (common-lisp:error ":transaction-data is required") :type
    (common-lisp:or hex-length-between2and1024 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'verify-auth-request-cryptogram-input
                    'make-verify-auth-request-cryptogram-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          verify-auth-request-cryptogram-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          verify-auth-request-cryptogram-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auth-request-cryptogram))
      (common-lisp:list
       (common-lisp:cons "AuthRequestCryptogram"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'auth-response-attributes))
      (common-lisp:list
       (common-lisp:cons "AuthResponseAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-identifier))
      (common-lisp:list
       (common-lisp:cons "KeyIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'major-key-derivation-mode))
      (common-lisp:list
       (common-lisp:cons "MajorKeyDerivationMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'session-key-derivation-attributes))
      (common-lisp:list
       (common-lisp:cons "SessionKeyDerivationAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'transaction-data))
      (common-lisp:list
       (common-lisp:cons "TransactionData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          verify-auth-request-cryptogram-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (verify-auth-request-cryptogram-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-verify-auth-request-cryptogram-output-"))
   (auth-response-value common-lisp:nil :type
    (common-lisp:or hex-length-between1and16 common-lisp:null))
   (key-arn (common-lisp:error ":key-arn is required") :type
    (common-lisp:or key-arn common-lisp:null))
   (key-check-value (common-lisp:error ":key-check-value is required") :type
    (common-lisp:or key-check-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'verify-auth-request-cryptogram-output
                    'make-verify-auth-request-cryptogram-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          verify-auth-request-cryptogram-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          verify-auth-request-cryptogram-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'auth-response-value))
      (common-lisp:list
       (common-lisp:cons "AuthResponseValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-arn))
      (common-lisp:list
       (common-lisp:cons "KeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-check-value))
      (common-lisp:list
       (common-lisp:cons "KeyCheckValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          verify-auth-request-cryptogram-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (verify-card-validation-data-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-verify-card-validation-data-input-"))
   (key-identifier (common-lisp:error ":key-identifier is required") :type
    (common-lisp:or key-arn-or-key-alias-type common-lisp:null))
   (primary-account-number
    (common-lisp:error ":primary-account-number is required") :type
    (common-lisp:or number-length-between12and19 common-lisp:null))
   (validation-data (common-lisp:error ":validation-data is required") :type
    (common-lisp:or number-length-between3and5 common-lisp:null))
   (verification-attributes
    (common-lisp:error ":verification-attributes is required") :type
    (common-lisp:or card-verification-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'verify-card-validation-data-input
                    'make-verify-card-validation-data-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          verify-card-validation-data-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          verify-card-validation-data-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-identifier))
      (common-lisp:list
       (common-lisp:cons "KeyIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-account-number))
      (common-lisp:list
       (common-lisp:cons "PrimaryAccountNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'validation-data))
      (common-lisp:list
       (common-lisp:cons "ValidationData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verification-attributes))
      (common-lisp:list
       (common-lisp:cons "VerificationAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          verify-card-validation-data-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (verify-card-validation-data-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-verify-card-validation-data-output-"))
   (key-arn (common-lisp:error ":key-arn is required") :type
    (common-lisp:or key-arn common-lisp:null))
   (key-check-value (common-lisp:error ":key-check-value is required") :type
    (common-lisp:or key-check-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'verify-card-validation-data-output
                    'make-verify-card-validation-data-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          verify-card-validation-data-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          verify-card-validation-data-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-arn))
      (common-lisp:list
       (common-lisp:cons "KeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-check-value))
      (common-lisp:list
       (common-lisp:cons "KeyCheckValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          verify-card-validation-data-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (verify-mac-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-verify-mac-input-"))
   (key-identifier (common-lisp:error ":key-identifier is required") :type
    (common-lisp:or key-arn-or-key-alias-type common-lisp:null))
   (mac (common-lisp:error ":mac is required") :type
    (common-lisp:or hex-even-length-between4and128 common-lisp:null))
   (mac-length common-lisp:nil :type
    (common-lisp:or integer-range-between4and16 common-lisp:null))
   (message-data (common-lisp:error ":message-data is required") :type
    (common-lisp:or hex-even-length-between2and4096 common-lisp:null))
   (verification-attributes
    (common-lisp:error ":verification-attributes is required") :type
    (common-lisp:or mac-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'verify-mac-input 'make-verify-mac-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input verify-mac-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input verify-mac-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-identifier))
      (common-lisp:list
       (common-lisp:cons "KeyIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac))
      (common-lisp:list
       (common-lisp:cons "Mac"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'mac-length))
      (common-lisp:list
       (common-lisp:cons "MacLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'message-data))
      (common-lisp:list
       (common-lisp:cons "MessageData"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verification-attributes))
      (common-lisp:list
       (common-lisp:cons "VerificationAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input verify-mac-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (verify-mac-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-verify-mac-output-"))
   (key-arn (common-lisp:error ":key-arn is required") :type
    (common-lisp:or key-arn common-lisp:null))
   (key-check-value (common-lisp:error ":key-check-value is required") :type
    (common-lisp:or key-check-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'verify-mac-output 'make-verify-mac-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input verify-mac-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input verify-mac-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-arn))
      (common-lisp:list
       (common-lisp:cons "KeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key-check-value))
      (common-lisp:list
       (common-lisp:cons "KeyCheckValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input verify-mac-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (verify-pin-data-input (:copier common-lisp:nil)
      (:conc-name "struct-shape-verify-pin-data-input-"))
   (dukpt-attributes common-lisp:nil :type
    (common-lisp:or dukpt-attributes common-lisp:null))
   (encrypted-pin-block (common-lisp:error ":encrypted-pin-block is required")
    :type (common-lisp:or hex-length-between16and32 common-lisp:null))
   (encryption-key-identifier
    (common-lisp:error ":encryption-key-identifier is required") :type
    (common-lisp:or key-arn-or-key-alias-type common-lisp:null))
   (pin-block-format (common-lisp:error ":pin-block-format is required") :type
    (common-lisp:or pin-block-format-for-pin-data common-lisp:null))
   (pin-data-length common-lisp:nil :type
    (common-lisp:or integer-range-between4and12 common-lisp:null))
   (primary-account-number
    (common-lisp:error ":primary-account-number is required") :type
    (common-lisp:or number-length-between12and19 common-lisp:null))
   (verification-attributes
    (common-lisp:error ":verification-attributes is required") :type
    (common-lisp:or pin-verification-attributes common-lisp:null))
   (verification-key-identifier
    (common-lisp:error ":verification-key-identifier is required") :type
    (common-lisp:or key-arn-or-key-alias-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'verify-pin-data-input 'make-verify-pin-data-input))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          verify-pin-data-input))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          verify-pin-data-input))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'dukpt-attributes))
      (common-lisp:list
       (common-lisp:cons "DukptAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted-pin-block))
      (common-lisp:list
       (common-lisp:cons "EncryptedPinBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-key-identifier))
      (common-lisp:list
       (common-lisp:cons "EncryptionKeyIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pin-block-format))
      (common-lisp:list
       (common-lisp:cons "PinBlockFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'pin-data-length))
      (common-lisp:list
       (common-lisp:cons "PinDataLength"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'primary-account-number))
      (common-lisp:list
       (common-lisp:cons "PrimaryAccountNumber"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verification-attributes))
      (common-lisp:list
       (common-lisp:cons "VerificationAttributes"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verification-key-identifier))
      (common-lisp:list
       (common-lisp:cons "VerificationKeyIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          verify-pin-data-input))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (verify-pin-data-output (:copier common-lisp:nil)
      (:conc-name "struct-shape-verify-pin-data-output-"))
   (encryption-key-arn (common-lisp:error ":encryption-key-arn is required")
    :type (common-lisp:or key-arn common-lisp:null))
   (encryption-key-check-value
    (common-lisp:error ":encryption-key-check-value is required") :type
    (common-lisp:or key-check-value common-lisp:null))
   (verification-key-arn
    (common-lisp:error ":verification-key-arn is required") :type
    (common-lisp:or key-arn common-lisp:null))
   (verification-key-check-value
    (common-lisp:error ":verification-key-check-value is required") :type
    (common-lisp:or key-check-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'verify-pin-data-output 'make-verify-pin-data-output))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          verify-pin-data-output))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          verify-pin-data-output))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-key-arn))
      (common-lisp:list
       (common-lisp:cons "EncryptionKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-key-check-value))
      (common-lisp:list
       (common-lisp:cons "EncryptionKeyCheckValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verification-key-arn))
      (common-lisp:list
       (common-lisp:cons "VerificationKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'verification-key-check-value))
      (common-lisp:list
       (common-lisp:cons "VerificationKeyCheckValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          verify-pin-data-output))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (visa-pin (:copier common-lisp:nil) (:conc-name "struct-shape-visa-pin-"))
   (pin-verification-key-index
    (common-lisp:error ":pin-verification-key-index is required") :type
    (common-lisp:or integer-range-between0and9 common-lisp:null)))
 (common-lisp:export (common-lisp:list 'visa-pin 'make-visa-pin))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input visa-pin))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input visa-pin))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pin-verification-key-index))
      (common-lisp:list
       (common-lisp:cons "PinVerificationKeyIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input visa-pin))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (visa-pin-verification (:copier common-lisp:nil)
      (:conc-name "struct-shape-visa-pin-verification-"))
   (pin-verification-key-index
    (common-lisp:error ":pin-verification-key-index is required") :type
    (common-lisp:or integer-range-between0and9 common-lisp:null))
   (verification-value (common-lisp:error ":verification-value is required")
    :type (common-lisp:or number-length-between4and12 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'visa-pin-verification 'make-visa-pin-verification))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          visa-pin-verification))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          visa-pin-verification))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pin-verification-key-index))
      (common-lisp:list
       (common-lisp:cons "PinVerificationKeyIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'verification-value))
      (common-lisp:list
       (common-lisp:cons "VerificationValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          visa-pin-verification))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (visa-pin-verification-value (:copier common-lisp:nil)
      (:conc-name "struct-shape-visa-pin-verification-value-"))
   (encrypted-pin-block (common-lisp:error ":encrypted-pin-block is required")
    :type (common-lisp:or hex-length-between16and32 common-lisp:null))
   (pin-verification-key-index
    (common-lisp:error ":pin-verification-key-index is required") :type
    (common-lisp:or integer-range-between0and9 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'visa-pin-verification-value
                    'make-visa-pin-verification-value))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          visa-pin-verification-value))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          visa-pin-verification-value))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encrypted-pin-block))
      (common-lisp:list
       (common-lisp:cons "EncryptedPinBlock"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'pin-verification-key-index))
      (common-lisp:list
       (common-lisp:cons "PinVerificationKeyIndex"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          visa-pin-verification-value))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun decrypt-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cipher-text decryption-attributes
                     key-identifier)
   (common-lisp:declare
    (common-lisp:ignorable cipher-text decryption-attributes key-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-decrypt-data-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'payment-cryptography-data-request aws-sdk/generator/operation::input
        "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/keys/~A/decrypt"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'key-identifier))))
        "DecryptData"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'decrypt-data))
(common-lisp:progn
 (common-lisp:defun encrypt-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key encryption-attributes key-identifier
                     plain-text)
   (common-lisp:declare
    (common-lisp:ignorable encryption-attributes key-identifier plain-text))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-encrypt-data-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'payment-cryptography-data-request aws-sdk/generator/operation::input
        "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/keys/~A/encrypt"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'key-identifier))))
        "EncryptData"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'encrypt-data))
(common-lisp:progn
 (common-lisp:defun generate-card-validation-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key generation-attributes key-identifier
                     primary-account-number validation-data-length)
   (common-lisp:declare
    (common-lisp:ignorable generation-attributes key-identifier
     primary-account-number validation-data-length))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-generate-card-validation-data-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'payment-cryptography-data-request aws-sdk/generator/operation::input
        "POST" "/cardvalidationdata/generate" "GenerateCardValidationData"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'generate-card-validation-data))
(common-lisp:progn
 (common-lisp:defun generate-mac
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key generation-attributes key-identifier
                     mac-length message-data)
   (common-lisp:declare
    (common-lisp:ignorable generation-attributes key-identifier mac-length
     message-data))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-generate-mac-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'payment-cryptography-data-request aws-sdk/generator/operation::input
        "POST" "/mac/generate" "GenerateMac"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'generate-mac))
(common-lisp:progn
 (common-lisp:defun generate-pin-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key encryption-key-identifier
                     generation-attributes generation-key-identifier
                     pin-block-format pin-data-length primary-account-number)
   (common-lisp:declare
    (common-lisp:ignorable encryption-key-identifier generation-attributes
     generation-key-identifier pin-block-format pin-data-length
     primary-account-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-generate-pin-data-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'payment-cryptography-data-request aws-sdk/generator/operation::input
        "POST" "/pindata/generate" "GeneratePinData"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'generate-pin-data))
(common-lisp:progn
 (common-lisp:defun re-encrypt-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key cipher-text
                     incoming-encryption-attributes incoming-key-identifier
                     outgoing-encryption-attributes outgoing-key-identifier)
   (common-lisp:declare
    (common-lisp:ignorable cipher-text incoming-encryption-attributes
     incoming-key-identifier outgoing-encryption-attributes
     outgoing-key-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-re-encrypt-data-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'payment-cryptography-data-request aws-sdk/generator/operation::input
        "POST"
        (common-lisp:lambda (aws-sdk/generator/operation::input)
          (common-lisp:format common-lisp:nil "/keys/~A/reencrypt"
                              (quri.encode:url-encode
                               (common-lisp:slot-value
                                aws-sdk/generator/operation::input
                                'incoming-key-identifier))))
        "ReEncryptData"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 're-encrypt-data))
(common-lisp:progn
 (common-lisp:defun translate-pin-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key encrypted-pin-block
                     incoming-dukpt-attributes incoming-key-identifier
                     incoming-translation-attributes outgoing-dukpt-attributes
                     outgoing-key-identifier outgoing-translation-attributes)
   (common-lisp:declare
    (common-lisp:ignorable encrypted-pin-block incoming-dukpt-attributes
     incoming-key-identifier incoming-translation-attributes
     outgoing-dukpt-attributes outgoing-key-identifier
     outgoing-translation-attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-translate-pin-data-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'payment-cryptography-data-request aws-sdk/generator/operation::input
        "POST" "/pindata/translate" "TranslatePinData"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'translate-pin-data))
(common-lisp:progn
 (common-lisp:defun verify-auth-request-cryptogram
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key auth-request-cryptogram
                     auth-response-attributes key-identifier
                     major-key-derivation-mode
                     session-key-derivation-attributes transaction-data)
   (common-lisp:declare
    (common-lisp:ignorable auth-request-cryptogram auth-response-attributes
     key-identifier major-key-derivation-mode session-key-derivation-attributes
     transaction-data))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-verify-auth-request-cryptogram-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'payment-cryptography-data-request aws-sdk/generator/operation::input
        "POST" "/cryptogram/verify" "VerifyAuthRequestCryptogram"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'verify-auth-request-cryptogram))
(common-lisp:progn
 (common-lisp:defun verify-card-validation-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-identifier primary-account-number
                     validation-data verification-attributes)
   (common-lisp:declare
    (common-lisp:ignorable key-identifier primary-account-number
     validation-data verification-attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-verify-card-validation-data-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'payment-cryptography-data-request aws-sdk/generator/operation::input
        "POST" "/cardvalidationdata/verify" "VerifyCardValidationData"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'verify-card-validation-data))
(common-lisp:progn
 (common-lisp:defun verify-mac
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key key-identifier mac mac-length
                     message-data verification-attributes)
   (common-lisp:declare
    (common-lisp:ignorable key-identifier mac mac-length message-data
     verification-attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-verify-mac-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'payment-cryptography-data-request aws-sdk/generator/operation::input
        "POST" "/mac/verify" "VerifyMac"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'verify-mac))
(common-lisp:progn
 (common-lisp:defun verify-pin-data
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dukpt-attributes encrypted-pin-block
                     encryption-key-identifier pin-block-format pin-data-length
                     primary-account-number verification-attributes
                     verification-key-identifier)
   (common-lisp:declare
    (common-lisp:ignorable dukpt-attributes encrypted-pin-block
     encryption-key-identifier pin-block-format pin-data-length
     primary-account-number verification-attributes
     verification-key-identifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-verify-pin-data-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'payment-cryptography-data-request aws-sdk/generator/operation::input
        "POST" "/pindata/verify" "VerifyPinData"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'verify-pin-data))
