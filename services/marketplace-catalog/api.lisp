;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/marketplace-catalog/api
  (:use)
  (:nicknames #:aws/marketplace-catalog)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/json-request)
  (:import-from #:aws-sdk/rest-json-request)
  (:import-from #:aws-sdk/rest-xml-request)
  (:import-from #:aws-sdk/query-request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/marketplace-catalog/api)
(common-lisp:progn
 (common-lisp:define-condition marketplace-catalog-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'marketplace-catalog-error))
(common-lisp:progn
 (common-lisp:defclass marketplace-catalog-request
                       (aws-sdk/generator/service::rest-json-request)
                       common-lisp:nil
                       (:default-initargs :service "marketplace-catalog"
                        :api-version "2018-09-17" :host-prefix
                        "catalog.marketplace" :signing-name "aws-marketplace"
                        :global-host common-lisp:nil))
 (common-lisp:export 'marketplace-catalog-request))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("InternalServiceException" . internal-service-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourceNotSupportedException" . resource-not-supported-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (marketplace-catalog-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (ami-product-entity-id-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-ami-product-entity-id-filter-"))
   (value-list common-lisp:nil :type
    (common-lisp:or ami-product-entity-id-filter-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ami-product-entity-id-filter
                    'make-ami-product-entity-id-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-entity-id-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-entity-id-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-entity-id-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ami-product-entity-id-filter-value-list ()
   '(trivial-types:proper-list ami-product-entity-id-string))
 (common-lisp:defun make-ami-product-entity-id-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            ami-product-entity-id-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ami-product-entity-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ami-product-filters (:copier common-lisp:nil)
      (:conc-name "struct-shape-ami-product-filters-"))
   (entity-id common-lisp:nil :type
    (common-lisp:or ami-product-entity-id-filter common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or ami-product-last-modified-date-filter common-lisp:null))
   (product-title common-lisp:nil :type
    (common-lisp:or ami-product-title-filter common-lisp:null))
   (visibility common-lisp:nil :type
    (common-lisp:or ami-product-visibility-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ami-product-filters 'make-ami-product-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ami-product-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ami-product-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-title))
      (common-lisp:list
       (common-lisp:cons "ProductTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ami-product-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ami-product-last-modified-date-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-ami-product-last-modified-date-filter-"))
   (date-range common-lisp:nil :type
    (common-lisp:or ami-product-last-modified-date-filter-date-range
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ami-product-last-modified-date-filter
                    'make-ami-product-last-modified-date-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-last-modified-date-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-last-modified-date-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-range))
      (common-lisp:list
       (common-lisp:cons "DateRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-last-modified-date-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ami-product-last-modified-date-filter-date-range
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-ami-product-last-modified-date-filter-date-range-"))
   (after-value common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null))
   (before-value common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ami-product-last-modified-date-filter-date-range
                    'make-ami-product-last-modified-date-filter-date-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-last-modified-date-filter-date-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-last-modified-date-filter-date-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after-value))
      (common-lisp:list
       (common-lisp:cons "AfterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'before-value))
      (common-lisp:list
       (common-lisp:cons "BeforeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-last-modified-date-filter-date-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ami-product-sort (:copier common-lisp:nil)
      (:conc-name "struct-shape-ami-product-sort-"))
   (sort-by common-lisp:nil :type
    (common-lisp:or ami-product-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ami-product-sort 'make-ami-product-sort))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ami-product-sort))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ami-product-sort))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ami-product-sort))
   common-lisp:nil))
(common-lisp:deftype ami-product-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ami-product-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-ami-product-summary-"))
   (product-title common-lisp:nil :type
    (common-lisp:or ami-product-title-string common-lisp:null))
   (visibility common-lisp:nil :type
    (common-lisp:or ami-product-visibility-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ami-product-summary 'make-ami-product-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ami-product-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ami-product-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-title))
      (common-lisp:list
       (common-lisp:cons "ProductTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ami-product-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (ami-product-title-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-ami-product-title-filter-"))
   (value-list common-lisp:nil :type
    (common-lisp:or ami-product-title-filter-value-list common-lisp:null))
   (wild-card-value common-lisp:nil :type
    (common-lisp:or ami-product-title-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ami-product-title-filter 'make-ami-product-title-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-title-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-title-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wild-card-value))
      (common-lisp:list
       (common-lisp:cons "WildCardValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-title-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ami-product-title-filter-value-list ()
   '(trivial-types:proper-list ami-product-title-string))
 (common-lisp:defun make-ami-product-title-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            ami-product-title-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ami-product-title-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ami-product-visibility-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-ami-product-visibility-filter-"))
   (value-list common-lisp:nil :type
    (common-lisp:or ami-product-visibility-filter-value-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ami-product-visibility-filter
                    'make-ami-product-visibility-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-visibility-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-visibility-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ami-product-visibility-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ami-product-visibility-filter-value-list ()
   '(trivial-types:proper-list ami-product-visibility-string))
 (common-lisp:defun make-ami-product-visibility-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            ami-product-visibility-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ami-product-visibility-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (batch-describe-entities-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-describe-entities-request-"))
   (entity-request-list (common-lisp:error ":entity-request-list is required")
    :type (common-lisp:or entity-request-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-describe-entities-request
                    'make-batch-describe-entities-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-entities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-entities-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-request-list))
      (common-lisp:list
       (common-lisp:cons "EntityRequestList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-entities-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-describe-entities-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-describe-entities-response-"))
   (entity-details common-lisp:nil :type
    (common-lisp:or entity-details common-lisp:null))
   (errors common-lisp:nil :type (common-lisp:or errors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-describe-entities-response
                    'make-batch-describe-entities-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-entities-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-entities-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-details))
      (common-lisp:list
       (common-lisp:cons "EntityDetails"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'errors))
      (common-lisp:list
       (common-lisp:cons "Errors"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-entities-response))
   common-lisp:nil))
(common-lisp:deftype batch-describe-error-code-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (batch-describe-error-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-batch-describe-error-detail-"))
   (error-code common-lisp:nil :type
    (common-lisp:or batch-describe-error-code-string common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or batch-describe-error-message-content common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-describe-error-detail
                    'make-batch-describe-error-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-error-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-error-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          batch-describe-error-detail))
   common-lisp:nil))
(common-lisp:deftype batch-describe-error-message-content ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-change-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-change-set-request-"))
   (catalog (common-lisp:error ":catalog is required") :type
    (common-lisp:or catalog common-lisp:null))
   (change-set-id (common-lisp:error ":change-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-change-set-request
                    'make-cancel-change-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-change-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-change-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-change-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-change-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-change-set-response-"))
   (change-set-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (change-set-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-change-set-response
                    'make-cancel-change-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-change-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-change-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-arn))
      (common-lisp:list
       (common-lisp:cons "ChangeSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-id))
      (common-lisp:list
       (common-lisp:cons "ChangeSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-change-set-response))
   common-lisp:nil))
(common-lisp:deftype catalog () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (change (:copier common-lisp:nil) (:conc-name "struct-shape-change-"))
   (change-name common-lisp:nil :type
    (common-lisp:or change-name common-lisp:null))
   (change-type (common-lisp:error ":change-type is required") :type
    (common-lisp:or change-type common-lisp:null))
   (details common-lisp:nil :type (common-lisp:or json common-lisp:null))
   (entity (common-lisp:error ":entity is required") :type
    (common-lisp:or entity common-lisp:null))
   (entity-tags common-lisp:nil :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'change 'make-change))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input change))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input change))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-name))
      (common-lisp:list
       (common-lisp:cons "ChangeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-type))
      (common-lisp:list
       (common-lisp:cons "ChangeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity))
      (common-lisp:list
       (common-lisp:cons "Entity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-tags))
      (common-lisp:list
       (common-lisp:cons "EntityTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input change))
   common-lisp:nil))
(common-lisp:deftype change-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype change-set-description ()
   '(trivial-types:proper-list change-summary))
 (common-lisp:defun make-change-set-description
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list change-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype change-set-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype change-set-summary-list ()
   '(trivial-types:proper-list change-set-summary-list-item))
 (common-lisp:defun make-change-set-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            change-set-summary-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (change-set-summary-list-item (:copier common-lisp:nil)
      (:conc-name "struct-shape-change-set-summary-list-item-"))
   (change-set-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (change-set-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (change-set-name common-lisp:nil :type
    (common-lisp:or change-set-name common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null))
   (entity-id-list common-lisp:nil :type
    (common-lisp:or resource-id-list common-lisp:null))
   (failure-code common-lisp:nil :type
    (common-lisp:or failure-code common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or change-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'change-set-summary-list-item
                    'make-change-set-summary-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          change-set-summary-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          change-set-summary-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-arn))
      (common-lisp:list
       (common-lisp:cons "ChangeSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-id))
      (common-lisp:list
       (common-lisp:cons "ChangeSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-name))
      (common-lisp:list
       (common-lisp:cons "ChangeSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id-list))
      (common-lisp:list
       (common-lisp:cons "EntityIdList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "FailureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          change-set-summary-list-item))
   common-lisp:nil))
(common-lisp:deftype change-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (change-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-change-summary-"))
   (change-name common-lisp:nil :type
    (common-lisp:or change-name common-lisp:null))
   (change-type common-lisp:nil :type
    (common-lisp:or change-type common-lisp:null))
   (details common-lisp:nil :type (common-lisp:or json common-lisp:null))
   (entity common-lisp:nil :type (common-lisp:or entity common-lisp:null))
   (error-detail-list common-lisp:nil :type
    (common-lisp:or error-detail-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'change-summary 'make-change-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input change-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input change-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-name))
      (common-lisp:list
       (common-lisp:cons "ChangeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-type))
      (common-lisp:list
       (common-lisp:cons "ChangeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity))
      (common-lisp:list
       (common-lisp:cons "Entity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-detail-list))
      (common-lisp:list
       (common-lisp:cons "ErrorDetailList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input change-summary))
   common-lisp:nil))
(common-lisp:deftype change-type () 'common-lisp:string)
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (container-product-entity-id-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-container-product-entity-id-filter-"))
   (value-list common-lisp:nil :type
    (common-lisp:or container-product-entity-id-filter-value-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'container-product-entity-id-filter
                    'make-container-product-entity-id-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-product-entity-id-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-product-entity-id-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-product-entity-id-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype container-product-entity-id-filter-value-list ()
   '(trivial-types:proper-list container-product-entity-id-string))
 (common-lisp:defun make-container-product-entity-id-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            container-product-entity-id-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype container-product-entity-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (container-product-filters (:copier common-lisp:nil)
      (:conc-name "struct-shape-container-product-filters-"))
   (entity-id common-lisp:nil :type
    (common-lisp:or container-product-entity-id-filter common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or container-product-last-modified-date-filter
                    common-lisp:null))
   (product-title common-lisp:nil :type
    (common-lisp:or container-product-title-filter common-lisp:null))
   (visibility common-lisp:nil :type
    (common-lisp:or container-product-visibility-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'container-product-filters
                    'make-container-product-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-product-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-product-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-title))
      (common-lisp:list
       (common-lisp:cons "ProductTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-product-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (container-product-last-modified-date-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-container-product-last-modified-date-filter-"))
   (date-range common-lisp:nil :type
    (common-lisp:or container-product-last-modified-date-filter-date-range
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'container-product-last-modified-date-filter
                    'make-container-product-last-modified-date-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-product-last-modified-date-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-product-last-modified-date-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-range))
      (common-lisp:list
       (common-lisp:cons "DateRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-product-last-modified-date-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (container-product-last-modified-date-filter-date-range
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-container-product-last-modified-date-filter-date-range-"))
   (after-value common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null))
   (before-value common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'container-product-last-modified-date-filter-date-range
                    'make-container-product-last-modified-date-filter-date-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-product-last-modified-date-filter-date-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-product-last-modified-date-filter-date-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after-value))
      (common-lisp:list
       (common-lisp:cons "AfterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'before-value))
      (common-lisp:list
       (common-lisp:cons "BeforeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-product-last-modified-date-filter-date-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (container-product-sort (:copier common-lisp:nil)
      (:conc-name "struct-shape-container-product-sort-"))
   (sort-by common-lisp:nil :type
    (common-lisp:or container-product-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'container-product-sort 'make-container-product-sort))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-product-sort))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-product-sort))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-product-sort))
   common-lisp:nil))
(common-lisp:deftype container-product-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (container-product-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-container-product-summary-"))
   (product-title common-lisp:nil :type
    (common-lisp:or container-product-title-string common-lisp:null))
   (visibility common-lisp:nil :type
    (common-lisp:or container-product-visibility-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'container-product-summary
                    'make-container-product-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-product-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-product-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-title))
      (common-lisp:list
       (common-lisp:cons "ProductTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-product-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (container-product-title-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-container-product-title-filter-"))
   (value-list common-lisp:nil :type
    (common-lisp:or container-product-title-filter-value-list
                    common-lisp:null))
   (wild-card-value common-lisp:nil :type
    (common-lisp:or container-product-title-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'container-product-title-filter
                    'make-container-product-title-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-product-title-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-product-title-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wild-card-value))
      (common-lisp:list
       (common-lisp:cons "WildCardValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-product-title-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype container-product-title-filter-value-list ()
   '(trivial-types:proper-list container-product-title-string))
 (common-lisp:defun make-container-product-title-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            container-product-title-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype container-product-title-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (container-product-visibility-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-container-product-visibility-filter-"))
   (value-list common-lisp:nil :type
    (common-lisp:or container-product-visibility-filter-value-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'container-product-visibility-filter
                    'make-container-product-visibility-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          container-product-visibility-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          container-product-visibility-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          container-product-visibility-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype container-product-visibility-filter-value-list ()
   '(trivial-types:proper-list container-product-visibility-string))
 (common-lisp:defun make-container-product-visibility-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            container-product-visibility-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype container-product-visibility-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-product-entity-id-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-product-entity-id-filter-"))
   (value-list common-lisp:nil :type
    (common-lisp:or data-product-entity-id-filter-value-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-product-entity-id-filter
                    'make-data-product-entity-id-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-product-entity-id-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-product-entity-id-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-product-entity-id-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-product-entity-id-filter-value-list ()
   '(trivial-types:proper-list data-product-entity-id-string))
 (common-lisp:defun make-data-product-entity-id-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-product-entity-id-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-product-entity-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-product-filters (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-product-filters-"))
   (entity-id common-lisp:nil :type
    (common-lisp:or data-product-entity-id-filter common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or data-product-last-modified-date-filter common-lisp:null))
   (product-title common-lisp:nil :type
    (common-lisp:or data-product-title-filter common-lisp:null))
   (visibility common-lisp:nil :type
    (common-lisp:or data-product-visibility-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-product-filters 'make-data-product-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-product-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-product-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-title))
      (common-lisp:list
       (common-lisp:cons "ProductTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-product-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-product-last-modified-date-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-product-last-modified-date-filter-"))
   (date-range common-lisp:nil :type
    (common-lisp:or data-product-last-modified-date-filter-date-range
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-product-last-modified-date-filter
                    'make-data-product-last-modified-date-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-product-last-modified-date-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-product-last-modified-date-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-range))
      (common-lisp:list
       (common-lisp:cons "DateRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-product-last-modified-date-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-product-last-modified-date-filter-date-range
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-data-product-last-modified-date-filter-date-range-"))
   (after-value common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null))
   (before-value common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-product-last-modified-date-filter-date-range
                    'make-data-product-last-modified-date-filter-date-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-product-last-modified-date-filter-date-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-product-last-modified-date-filter-date-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after-value))
      (common-lisp:list
       (common-lisp:cons "AfterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'before-value))
      (common-lisp:list
       (common-lisp:cons "BeforeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-product-last-modified-date-filter-date-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-product-sort (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-product-sort-"))
   (sort-by common-lisp:nil :type
    (common-lisp:or data-product-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-product-sort 'make-data-product-sort))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-product-sort))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-product-sort))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-product-sort))
   common-lisp:nil))
(common-lisp:deftype data-product-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-product-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-product-summary-"))
   (product-title common-lisp:nil :type
    (common-lisp:or data-product-title-string common-lisp:null))
   (visibility common-lisp:nil :type
    (common-lisp:or data-product-visibility-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-product-summary 'make-data-product-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input data-product-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input data-product-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-title))
      (common-lisp:list
       (common-lisp:cons "ProductTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input data-product-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (data-product-title-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-product-title-filter-"))
   (value-list common-lisp:nil :type
    (common-lisp:or data-product-title-filter-value-list common-lisp:null))
   (wild-card-value common-lisp:nil :type
    (common-lisp:or data-product-title-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-product-title-filter
                    'make-data-product-title-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-product-title-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-product-title-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wild-card-value))
      (common-lisp:list
       (common-lisp:cons "WildCardValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-product-title-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-product-title-filter-value-list ()
   '(trivial-types:proper-list data-product-title-string))
 (common-lisp:defun make-data-product-title-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-product-title-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-product-title-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (data-product-visibility-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-data-product-visibility-filter-"))
   (value-list common-lisp:nil :type
    (common-lisp:or data-product-visibility-filter-value-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'data-product-visibility-filter
                    'make-data-product-visibility-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          data-product-visibility-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          data-product-visibility-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          data-product-visibility-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype data-product-visibility-filter-value-list ()
   '(trivial-types:proper-list data-product-visibility-string))
 (common-lisp:defun make-data-product-visibility-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            data-product-visibility-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype data-product-visibility-string () 'common-lisp:string)
(common-lisp:deftype date-time-iso8601 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-resource-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-resource-policy-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-request
                    'make-delete-resource-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-resource-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-resource-policy-response-")))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-response
                    'make-delete-resource-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-change-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-change-set-request-"))
   (catalog (common-lisp:error ":catalog is required") :type
    (common-lisp:or catalog common-lisp:null))
   (change-set-id (common-lisp:error ":change-set-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-change-set-request
                    'make-describe-change-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-change-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-change-set-response-"))
   (change-set common-lisp:nil :type
    (common-lisp:or change-set-description common-lisp:null))
   (change-set-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (change-set-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (change-set-name common-lisp:nil :type
    (common-lisp:or change-set-name common-lisp:null))
   (end-time common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null))
   (failure-code common-lisp:nil :type
    (common-lisp:or failure-code common-lisp:null))
   (failure-description common-lisp:nil :type
    (common-lisp:or exception-message-content common-lisp:null))
   (intent common-lisp:nil :type (common-lisp:or intent common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or change-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-change-set-response
                    'make-describe-change-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set))
      (common-lisp:list
       (common-lisp:cons "ChangeSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-arn))
      (common-lisp:list
       (common-lisp:cons "ChangeSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-id))
      (common-lisp:list
       (common-lisp:cons "ChangeSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-name))
      (common-lisp:list
       (common-lisp:cons "ChangeSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "FailureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-description))
      (common-lisp:list
       (common-lisp:cons "FailureDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent))
      (common-lisp:list
       (common-lisp:cons "Intent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-entity-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-entity-request-"))
   (catalog (common-lisp:error ":catalog is required") :type
    (common-lisp:or catalog common-lisp:null))
   (entity-id (common-lisp:error ":entity-id is required") :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-entity-request 'make-describe-entity-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-entity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-entity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-entity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-entity-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-entity-response-"))
   (details common-lisp:nil :type (common-lisp:or json common-lisp:null))
   (entity-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (entity-identifier common-lisp:nil :type
    (common-lisp:or identifier common-lisp:null))
   (entity-type common-lisp:nil :type
    (common-lisp:or entity-type common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-entity-response 'make-describe-entity-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-entity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-entity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-arn))
      (common-lisp:list
       (common-lisp:cons "EntityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-identifier))
      (common-lisp:list
       (common-lisp:cons "EntityIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type))
      (common-lisp:list
       (common-lisp:cons "EntityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-entity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (entity (:copier common-lisp:nil) (:conc-name "struct-shape-entity-"))
   (identifier common-lisp:nil :type
    (common-lisp:or identifier common-lisp:null))
   (type (common-lisp:error ":type is required") :type
    (common-lisp:or entity-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'entity 'make-entity))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (entity-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-entity-detail-"))
   (entity-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (entity-identifier common-lisp:nil :type
    (common-lisp:or identifier common-lisp:null))
   (entity-type common-lisp:nil :type
    (common-lisp:or entity-type common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null)))
 (common-lisp:export (common-lisp:list 'entity-detail 'make-entity-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-arn))
      (common-lisp:list
       (common-lisp:cons "EntityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-identifier))
      (common-lisp:list
       (common-lisp:cons "EntityIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type))
      (common-lisp:list
       (common-lisp:cons "EntityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype entity-details () 'common-lisp:hash-table)
 (common-lisp:defun make-entity-details (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype entity-id () 'common-lisp:string)
(common-lisp:deftype entity-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (entity-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-entity-request-"))
   (catalog (common-lisp:error ":catalog is required") :type
    (common-lisp:or catalog common-lisp:null))
   (entity-id (common-lisp:error ":entity-id is required") :type
    (common-lisp:or entity-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'entity-request 'make-entity-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog))
      (common-lisp:list
       (common-lisp:cons "Catalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype entity-request-list ()
   '(trivial-types:proper-list entity-request))
 (common-lisp:defun make-entity-request-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity-request))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (entity-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-entity-summary-"))
   (ami-product-summary common-lisp:nil :type
    (common-lisp:or ami-product-summary common-lisp:null))
   (container-product-summary common-lisp:nil :type
    (common-lisp:or container-product-summary common-lisp:null))
   (data-product-summary common-lisp:nil :type
    (common-lisp:or data-product-summary common-lisp:null))
   (entity-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (entity-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (entity-type common-lisp:nil :type
    (common-lisp:or entity-type common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or entity-name-string common-lisp:null))
   (offer-summary common-lisp:nil :type
    (common-lisp:or offer-summary common-lisp:null))
   (resale-authorization-summary common-lisp:nil :type
    (common-lisp:or resale-authorization-summary common-lisp:null))
   (saa-sproduct-summary common-lisp:nil :type
    (common-lisp:or saa-sproduct-summary common-lisp:null))
   (visibility common-lisp:nil :type
    (common-lisp:or visibility-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'entity-summary 'make-entity-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-product-summary))
      (common-lisp:list
       (common-lisp:cons "AmiProductSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-product-summary))
      (common-lisp:list
       (common-lisp:cons "ContainerProductSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-product-summary))
      (common-lisp:list
       (common-lisp:cons "DataProductSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-arn))
      (common-lisp:list
       (common-lisp:cons "EntityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type))
      (common-lisp:list
       (common-lisp:cons "EntityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offer-summary))
      (common-lisp:list
       (common-lisp:cons "OfferSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resale-authorization-summary))
      (common-lisp:list
       (common-lisp:cons "ResaleAuthorizationSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'saa-sproduct-summary))
      (common-lisp:list
       (common-lisp:cons "SaaSProductSummary"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype entity-summary-list ()
   '(trivial-types:proper-list entity-summary))
 (common-lisp:defun make-entity-summary-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype entity-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (entity-type-filters (:copier common-lisp:nil)
      (:conc-name "struct-shape-entity-type-filters-"))
   (ami-product-filters common-lisp:nil :type
    (common-lisp:or ami-product-filters common-lisp:null))
   (container-product-filters common-lisp:nil :type
    (common-lisp:or container-product-filters common-lisp:null))
   (data-product-filters common-lisp:nil :type
    (common-lisp:or data-product-filters common-lisp:null))
   (offer-filters common-lisp:nil :type
    (common-lisp:or offer-filters common-lisp:null))
   (resale-authorization-filters common-lisp:nil :type
    (common-lisp:or resale-authorization-filters common-lisp:null))
   (saa-sproduct-filters common-lisp:nil :type
    (common-lisp:or saa-sproduct-filters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'entity-type-filters 'make-entity-type-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity-type-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity-type-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-product-filters))
      (common-lisp:list
       (common-lisp:cons "AmiProductFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-product-filters))
      (common-lisp:list
       (common-lisp:cons "ContainerProductFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'data-product-filters))
      (common-lisp:list
       (common-lisp:cons "DataProductFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offer-filters))
      (common-lisp:list
       (common-lisp:cons "OfferFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resale-authorization-filters))
      (common-lisp:list
       (common-lisp:cons "ResaleAuthorizationFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'saa-sproduct-filters))
      (common-lisp:list
       (common-lisp:cons "SaaSProductFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity-type-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (entity-type-sort (:copier common-lisp:nil)
      (:conc-name "struct-shape-entity-type-sort-"))
   (ami-product-sort common-lisp:nil :type
    (common-lisp:or ami-product-sort common-lisp:null))
   (container-product-sort common-lisp:nil :type
    (common-lisp:or container-product-sort common-lisp:null))
   (data-product-sort common-lisp:nil :type
    (common-lisp:or data-product-sort common-lisp:null))
   (offer-sort common-lisp:nil :type
    (common-lisp:or offer-sort common-lisp:null))
   (resale-authorization-sort common-lisp:nil :type
    (common-lisp:or resale-authorization-sort common-lisp:null))
   (saa-sproduct-sort common-lisp:nil :type
    (common-lisp:or saa-sproduct-sort common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'entity-type-sort 'make-entity-type-sort))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity-type-sort))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity-type-sort))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ami-product-sort))
      (common-lisp:list
       (common-lisp:cons "AmiProductSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'container-product-sort))
      (common-lisp:list
       (common-lisp:cons "ContainerProductSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'data-product-sort))
      (common-lisp:list
       (common-lisp:cons "DataProductSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'offer-sort))
      (common-lisp:list
       (common-lisp:cons "OfferSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'resale-authorization-sort))
      (common-lisp:list
       (common-lisp:cons "ResaleAuthorizationSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'saa-sproduct-sort))
      (common-lisp:list
       (common-lisp:cons "SaaSProductSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity-type-sort))
   common-lisp:nil))
(common-lisp:deftype error-code-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (error-detail (:copier common-lisp:nil)
      (:conc-name "struct-shape-error-detail-"))
   (error-code common-lisp:nil :type
    (common-lisp:or error-code-string common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or exception-message-content common-lisp:null)))
 (common-lisp:export (common-lisp:list 'error-detail 'make-error-detail))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype error-detail-list ()
   '(trivial-types:proper-list error-detail))
 (common-lisp:defun make-error-detail-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list error-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype errors () 'common-lisp:hash-table)
 (common-lisp:defun make-errors (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype exception-message-content () 'common-lisp:string)
(common-lisp:deftype failure-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (filter (:copier common-lisp:nil) (:conc-name "struct-shape-filter-"))
   (name common-lisp:nil :type (common-lisp:or filter-name common-lisp:null))
   (value-list common-lisp:nil :type
    (common-lisp:or value-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun make-filter-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filter-name () 'common-lisp:string)
(common-lisp:deftype filter-value-content () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-resource-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resource-policy-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resource-policy-request
                    'make-get-resource-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-resource-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-resource-policy-response-"))
   (policy common-lisp:nil :type
    (common-lisp:or resource-policy-json common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-resource-policy-response
                    'make-get-resource-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-response))
   common-lisp:nil))
(common-lisp:deftype identifier () 'common-lisp:string)
(common-lisp:deftype intent () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-service-exception
     (marketplace-catalog-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-exception
                    'internal-service-exception-message)))
(common-lisp:deftype json () 'common-lisp:string)
(common-lisp:deftype list-change-sets-max-result-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-change-sets-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-change-sets-request-"))
   (catalog (common-lisp:error ":catalog is required") :type
    (common-lisp:or catalog common-lisp:null))
   (filter-list common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-change-sets-max-result-integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (sort common-lisp:nil :type (common-lisp:or sort common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-change-sets-request 'make-list-change-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog))
      (common-lisp:list
       (common-lisp:cons "Catalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-list))
      (common-lisp:list
       (common-lisp:cons "FilterList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "Sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-change-sets-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-change-sets-response-"))
   (change-set-summary-list common-lisp:nil :type
    (common-lisp:or change-set-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-change-sets-response
                    'make-list-change-sets-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'change-set-summary-list))
      (common-lisp:list
       (common-lisp:cons "ChangeSetSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-response))
   common-lisp:nil))
(common-lisp:deftype list-entities-max-result-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (list-entities-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-entities-request-"))
   (catalog (common-lisp:error ":catalog is required") :type
    (common-lisp:or catalog common-lisp:null))
   (entity-type (common-lisp:error ":entity-type is required") :type
    (common-lisp:or entity-type common-lisp:null))
   (entity-type-filters common-lisp:nil :type
    (common-lisp:or entity-type-filters common-lisp:null))
   (entity-type-sort common-lisp:nil :type
    (common-lisp:or entity-type-sort common-lisp:null))
   (filter-list common-lisp:nil :type
    (common-lisp:or filter-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or list-entities-max-result-integer common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (ownership-type common-lisp:nil :type
    (common-lisp:or ownership-type common-lisp:null))
   (sort common-lisp:nil :type (common-lisp:or sort common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-entities-request 'make-list-entities-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog))
      (common-lisp:list
       (common-lisp:cons "Catalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type))
      (common-lisp:list
       (common-lisp:cons "EntityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type-filters))
      (common-lisp:list
       (common-lisp:cons "EntityTypeFilters"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type-sort))
      (common-lisp:list
       (common-lisp:cons "EntityTypeSort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-list))
      (common-lisp:list
       (common-lisp:cons "FilterList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ownership-type))
      (common-lisp:list
       (common-lisp:cons "OwnershipType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "Sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-entities-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-entities-response-"))
   (entity-summary-list common-lisp:nil :type
    (common-lisp:or entity-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-entities-response 'make-list-entities-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-summary-list))
      (common-lisp:list
       (common-lisp:cons "EntitySummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (resource-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (offer-availability-end-date-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-offer-availability-end-date-filter-"))
   (date-range common-lisp:nil :type
    (common-lisp:or offer-availability-end-date-filter-date-range
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'offer-availability-end-date-filter
                    'make-offer-availability-end-date-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          offer-availability-end-date-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          offer-availability-end-date-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-range))
      (common-lisp:list
       (common-lisp:cons "DateRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          offer-availability-end-date-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (offer-availability-end-date-filter-date-range (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-offer-availability-end-date-filter-date-range-"))
   (after-value common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null))
   (before-value common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'offer-availability-end-date-filter-date-range
                    'make-offer-availability-end-date-filter-date-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          offer-availability-end-date-filter-date-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          offer-availability-end-date-filter-date-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after-value))
      (common-lisp:list
       (common-lisp:cons "AfterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'before-value))
      (common-lisp:list
       (common-lisp:cons "BeforeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          offer-availability-end-date-filter-date-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (offer-buyer-accounts-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-offer-buyer-accounts-filter-"))
   (wild-card-value common-lisp:nil :type
    (common-lisp:or offer-buyer-accounts-filter-wildcard common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'offer-buyer-accounts-filter
                    'make-offer-buyer-accounts-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          offer-buyer-accounts-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          offer-buyer-accounts-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wild-card-value))
      (common-lisp:list
       (common-lisp:cons "WildCardValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          offer-buyer-accounts-filter))
   common-lisp:nil))
(common-lisp:deftype offer-buyer-accounts-filter-wildcard ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype offer-buyer-accounts-list ()
   '(trivial-types:proper-list offer-buyer-accounts-string))
 (common-lisp:defun make-offer-buyer-accounts-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            offer-buyer-accounts-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype offer-buyer-accounts-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (offer-entity-id-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-offer-entity-id-filter-"))
   (value-list common-lisp:nil :type
    (common-lisp:or offer-entity-id-filter-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'offer-entity-id-filter 'make-offer-entity-id-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          offer-entity-id-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          offer-entity-id-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          offer-entity-id-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype offer-entity-id-filter-value-list ()
   '(trivial-types:proper-list offer-entity-id-string))
 (common-lisp:defun make-offer-entity-id-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list offer-entity-id-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype offer-entity-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (offer-filters (:copier common-lisp:nil)
      (:conc-name "struct-shape-offer-filters-"))
   (availability-end-date common-lisp:nil :type
    (common-lisp:or offer-availability-end-date-filter common-lisp:null))
   (buyer-accounts common-lisp:nil :type
    (common-lisp:or offer-buyer-accounts-filter common-lisp:null))
   (entity-id common-lisp:nil :type
    (common-lisp:or offer-entity-id-filter common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or offer-last-modified-date-filter common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or offer-name-filter common-lisp:null))
   (product-id common-lisp:nil :type
    (common-lisp:or offer-product-id-filter common-lisp:null))
   (release-date common-lisp:nil :type
    (common-lisp:or offer-release-date-filter common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or offer-state-filter common-lisp:null))
   (targeting common-lisp:nil :type
    (common-lisp:or offer-targeting-filter common-lisp:null)))
 (common-lisp:export (common-lisp:list 'offer-filters 'make-offer-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input offer-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input offer-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-end-date))
      (common-lisp:list
       (common-lisp:cons "AvailabilityEndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buyer-accounts))
      (common-lisp:list
       (common-lisp:cons "BuyerAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-date))
      (common-lisp:list
       (common-lisp:cons "ReleaseDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targeting))
      (common-lisp:list
       (common-lisp:cons "Targeting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input offer-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (offer-last-modified-date-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-offer-last-modified-date-filter-"))
   (date-range common-lisp:nil :type
    (common-lisp:or offer-last-modified-date-filter-date-range
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'offer-last-modified-date-filter
                    'make-offer-last-modified-date-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          offer-last-modified-date-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          offer-last-modified-date-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-range))
      (common-lisp:list
       (common-lisp:cons "DateRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          offer-last-modified-date-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (offer-last-modified-date-filter-date-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-offer-last-modified-date-filter-date-range-"))
   (after-value common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null))
   (before-value common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'offer-last-modified-date-filter-date-range
                    'make-offer-last-modified-date-filter-date-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          offer-last-modified-date-filter-date-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          offer-last-modified-date-filter-date-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after-value))
      (common-lisp:list
       (common-lisp:cons "AfterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'before-value))
      (common-lisp:list
       (common-lisp:cons "BeforeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          offer-last-modified-date-filter-date-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (offer-name-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-offer-name-filter-"))
   (value-list common-lisp:nil :type
    (common-lisp:or offer-name-filter-value-list common-lisp:null))
   (wild-card-value common-lisp:nil :type
    (common-lisp:or offer-name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'offer-name-filter 'make-offer-name-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input offer-name-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input offer-name-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wild-card-value))
      (common-lisp:list
       (common-lisp:cons "WildCardValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input offer-name-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype offer-name-filter-value-list ()
   '(trivial-types:proper-list offer-name-string))
 (common-lisp:defun make-offer-name-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list offer-name-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype offer-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (offer-product-id-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-offer-product-id-filter-"))
   (value-list common-lisp:nil :type
    (common-lisp:or offer-product-id-filter-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'offer-product-id-filter 'make-offer-product-id-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          offer-product-id-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          offer-product-id-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          offer-product-id-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype offer-product-id-filter-value-list ()
   '(trivial-types:proper-list offer-product-id-string))
 (common-lisp:defun make-offer-product-id-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list offer-product-id-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype offer-product-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (offer-release-date-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-offer-release-date-filter-"))
   (date-range common-lisp:nil :type
    (common-lisp:or offer-release-date-filter-date-range common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'offer-release-date-filter
                    'make-offer-release-date-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          offer-release-date-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          offer-release-date-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-range))
      (common-lisp:list
       (common-lisp:cons "DateRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          offer-release-date-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (offer-release-date-filter-date-range (:copier common-lisp:nil)
      (:conc-name "struct-shape-offer-release-date-filter-date-range-"))
   (after-value common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null))
   (before-value common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'offer-release-date-filter-date-range
                    'make-offer-release-date-filter-date-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          offer-release-date-filter-date-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          offer-release-date-filter-date-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after-value))
      (common-lisp:list
       (common-lisp:cons "AfterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'before-value))
      (common-lisp:list
       (common-lisp:cons "BeforeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          offer-release-date-filter-date-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (offer-sort (:copier common-lisp:nil)
      (:conc-name "struct-shape-offer-sort-"))
   (sort-by common-lisp:nil :type
    (common-lisp:or offer-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export (common-lisp:list 'offer-sort 'make-offer-sort))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input offer-sort))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input offer-sort))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input offer-sort))
   common-lisp:nil))
(common-lisp:deftype offer-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (offer-state-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-offer-state-filter-"))
   (value-list common-lisp:nil :type
    (common-lisp:or offer-state-filter-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'offer-state-filter 'make-offer-state-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input offer-state-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input offer-state-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input offer-state-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype offer-state-filter-value-list ()
   '(trivial-types:proper-list offer-state-string))
 (common-lisp:defun make-offer-state-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list offer-state-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype offer-state-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (offer-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-offer-summary-"))
   (availability-end-date common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null))
   (buyer-accounts common-lisp:nil :type
    (common-lisp:or offer-buyer-accounts-list common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or offer-name-string common-lisp:null))
   (product-id common-lisp:nil :type
    (common-lisp:or offer-product-id-string common-lisp:null))
   (release-date common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or offer-state-string common-lisp:null))
   (targeting common-lisp:nil :type
    (common-lisp:or offer-targeting-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'offer-summary 'make-offer-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input offer-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input offer-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-end-date))
      (common-lisp:list
       (common-lisp:cons "AvailabilityEndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'buyer-accounts))
      (common-lisp:list
       (common-lisp:cons "BuyerAccounts"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'release-date))
      (common-lisp:list
       (common-lisp:cons "ReleaseDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'targeting))
      (common-lisp:list
       (common-lisp:cons "Targeting"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input offer-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (offer-targeting-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-offer-targeting-filter-"))
   (value-list common-lisp:nil :type
    (common-lisp:or offer-targeting-filter-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'offer-targeting-filter 'make-offer-targeting-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          offer-targeting-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          offer-targeting-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          offer-targeting-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype offer-targeting-filter-value-list ()
   '(trivial-types:proper-list offer-targeting-string))
 (common-lisp:defun make-offer-targeting-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list offer-targeting-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype offer-targeting-list ()
   '(trivial-types:proper-list offer-targeting-string))
 (common-lisp:defun make-offer-targeting-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list offer-targeting-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype offer-targeting-string () 'common-lisp:string)
(common-lisp:deftype ownership-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (put-resource-policy-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-resource-policy-request-"))
   (policy (common-lisp:error ":policy is required") :type
    (common-lisp:or resource-policy-json common-lisp:null))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-request
                    'make-put-resource-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (put-resource-policy-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-put-resource-policy-response-")))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-response
                    'make-put-resource-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype requested-change-list ()
   '(trivial-types:proper-list change))
 (common-lisp:defun make-requested-change-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list change))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (resale-authorization-availability-end-date-filter
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-resale-authorization-availability-end-date-filter-"))
   (date-range common-lisp:nil :type
    (common-lisp:or
     resale-authorization-availability-end-date-filter-date-range
     common-lisp:null))
   (value-list common-lisp:nil :type
    (common-lisp:or
     resale-authorization-availability-end-date-filter-value-list
     common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-availability-end-date-filter
                    'make-resale-authorization-availability-end-date-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-availability-end-date-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-availability-end-date-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-range))
      (common-lisp:list
       (common-lisp:cons "DateRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-availability-end-date-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resale-authorization-availability-end-date-filter-date-range
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-resale-authorization-availability-end-date-filter-date-range-"))
   (after-value common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null))
   (before-value common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list
   'resale-authorization-availability-end-date-filter-date-range
   'make-resale-authorization-availability-end-date-filter-date-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-availability-end-date-filter-date-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-availability-end-date-filter-date-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after-value))
      (common-lisp:list
       (common-lisp:cons "AfterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'before-value))
      (common-lisp:list
       (common-lisp:cons "BeforeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-availability-end-date-filter-date-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resale-authorization-availability-end-date-filter-value-list
                      ()
   '(trivial-types:proper-list date-time-iso8601))
 (common-lisp:defun make-resale-authorization-availability-end-date-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list date-time-iso8601))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (resale-authorization-created-date-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-resale-authorization-created-date-filter-"))
   (date-range common-lisp:nil :type
    (common-lisp:or resale-authorization-created-date-filter-date-range
                    common-lisp:null))
   (value-list common-lisp:nil :type
    (common-lisp:or resale-authorization-created-date-filter-value-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-created-date-filter
                    'make-resale-authorization-created-date-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-created-date-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-created-date-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-range))
      (common-lisp:list
       (common-lisp:cons "DateRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-created-date-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resale-authorization-created-date-filter-date-range
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-resale-authorization-created-date-filter-date-range-"))
   (after-value common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null))
   (before-value common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-created-date-filter-date-range
                    'make-resale-authorization-created-date-filter-date-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-created-date-filter-date-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-created-date-filter-date-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after-value))
      (common-lisp:list
       (common-lisp:cons "AfterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'before-value))
      (common-lisp:list
       (common-lisp:cons "BeforeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-created-date-filter-date-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resale-authorization-created-date-filter-value-list ()
   '(trivial-types:proper-list date-time-iso8601))
 (common-lisp:defun make-resale-authorization-created-date-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list date-time-iso8601))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (resale-authorization-entity-id-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-resale-authorization-entity-id-filter-"))
   (value-list common-lisp:nil :type
    (common-lisp:or resale-authorization-entity-id-filter-value-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-entity-id-filter
                    'make-resale-authorization-entity-id-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-entity-id-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-entity-id-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-entity-id-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resale-authorization-entity-id-filter-value-list ()
   '(trivial-types:proper-list resale-authorization-entity-id-string))
 (common-lisp:defun make-resale-authorization-entity-id-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resale-authorization-entity-id-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resale-authorization-entity-id-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resale-authorization-filters (:copier common-lisp:nil)
      (:conc-name "struct-shape-resale-authorization-filters-"))
   (availability-end-date common-lisp:nil :type
    (common-lisp:or resale-authorization-availability-end-date-filter
                    common-lisp:null))
   (created-date common-lisp:nil :type
    (common-lisp:or resale-authorization-created-date-filter common-lisp:null))
   (entity-id common-lisp:nil :type
    (common-lisp:or resale-authorization-entity-id-filter common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or resale-authorization-last-modified-date-filter
                    common-lisp:null))
   (manufacturer-account-id common-lisp:nil :type
    (common-lisp:or resale-authorization-manufacturer-account-id-filter
                    common-lisp:null))
   (manufacturer-legal-name common-lisp:nil :type
    (common-lisp:or resale-authorization-manufacturer-legal-name-filter
                    common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or resale-authorization-name-filter common-lisp:null))
   (offer-extended-status common-lisp:nil :type
    (common-lisp:or resale-authorization-offer-extended-status-filter
                    common-lisp:null))
   (product-id common-lisp:nil :type
    (common-lisp:or resale-authorization-product-id-filter common-lisp:null))
   (product-name common-lisp:nil :type
    (common-lisp:or resale-authorization-product-name-filter common-lisp:null))
   (reseller-account-id common-lisp:nil :type
    (common-lisp:or resale-authorization-reseller-account-idfilter
                    common-lisp:null))
   (reseller-legal-name common-lisp:nil :type
    (common-lisp:or resale-authorization-reseller-legal-name-filter
                    common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or resale-authorization-status-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-filters
                    'make-resale-authorization-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-end-date))
      (common-lisp:list
       (common-lisp:cons "AvailabilityEndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manufacturer-account-id))
      (common-lisp:list
       (common-lisp:cons "ManufacturerAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manufacturer-legal-name))
      (common-lisp:list
       (common-lisp:cons "ManufacturerLegalName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offer-extended-status))
      (common-lisp:list
       (common-lisp:cons "OfferExtendedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-name))
      (common-lisp:list
       (common-lisp:cons "ProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reseller-account-id))
      (common-lisp:list
       (common-lisp:cons "ResellerAccountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reseller-legal-name))
      (common-lisp:list
       (common-lisp:cons "ResellerLegalName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resale-authorization-last-modified-date-filter (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-resale-authorization-last-modified-date-filter-"))
   (date-range common-lisp:nil :type
    (common-lisp:or resale-authorization-last-modified-date-filter-date-range
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-last-modified-date-filter
                    'make-resale-authorization-last-modified-date-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-last-modified-date-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-last-modified-date-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-range))
      (common-lisp:list
       (common-lisp:cons "DateRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-last-modified-date-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resale-authorization-last-modified-date-filter-date-range
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-resale-authorization-last-modified-date-filter-date-range-"))
   (after-value common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null))
   (before-value common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-last-modified-date-filter-date-range
                    'make-resale-authorization-last-modified-date-filter-date-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-last-modified-date-filter-date-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-last-modified-date-filter-date-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after-value))
      (common-lisp:list
       (common-lisp:cons "AfterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'before-value))
      (common-lisp:list
       (common-lisp:cons "BeforeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-last-modified-date-filter-date-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (resale-authorization-manufacturer-account-id-filter
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-resale-authorization-manufacturer-account-id-filter-"))
   (value-list common-lisp:nil :type
    (common-lisp:or
     resale-authorization-manufacturer-account-id-filter-value-list
     common-lisp:null))
   (wild-card-value common-lisp:nil :type
    (common-lisp:or
     resale-authorization-manufacturer-account-id-filter-wildcard
     common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-manufacturer-account-id-filter
                    'make-resale-authorization-manufacturer-account-id-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-manufacturer-account-id-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-manufacturer-account-id-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wild-card-value))
      (common-lisp:list
       (common-lisp:cons "WildCardValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-manufacturer-account-id-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resale-authorization-manufacturer-account-id-filter-value-list
                      ()
   '(trivial-types:proper-list
     resale-authorization-manufacturer-account-id-string))
 (common-lisp:defun make-resale-authorization-manufacturer-account-id-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resale-authorization-manufacturer-account-id-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resale-authorization-manufacturer-account-id-filter-wildcard
                     ()
  'common-lisp:string)
(common-lisp:deftype resale-authorization-manufacturer-account-id-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resale-authorization-manufacturer-legal-name-filter
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-resale-authorization-manufacturer-legal-name-filter-"))
   (value-list common-lisp:nil :type
    (common-lisp:or
     resale-authorization-manufacturer-legal-name-filter-value-list
     common-lisp:null))
   (wild-card-value common-lisp:nil :type
    (common-lisp:or
     resale-authorization-manufacturer-legal-name-filter-wildcard
     common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-manufacturer-legal-name-filter
                    'make-resale-authorization-manufacturer-legal-name-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-manufacturer-legal-name-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-manufacturer-legal-name-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wild-card-value))
      (common-lisp:list
       (common-lisp:cons "WildCardValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-manufacturer-legal-name-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resale-authorization-manufacturer-legal-name-filter-value-list
                      ()
   '(trivial-types:proper-list
     resale-authorization-manufacturer-legal-name-string))
 (common-lisp:defun make-resale-authorization-manufacturer-legal-name-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resale-authorization-manufacturer-legal-name-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resale-authorization-manufacturer-legal-name-filter-wildcard
                     ()
  'common-lisp:string)
(common-lisp:deftype resale-authorization-manufacturer-legal-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resale-authorization-name-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-resale-authorization-name-filter-"))
   (value-list common-lisp:nil :type
    (common-lisp:or resale-authorization-name-filter-value-list
                    common-lisp:null))
   (wild-card-value common-lisp:nil :type
    (common-lisp:or resale-authorization-name-filter-wildcard
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-name-filter
                    'make-resale-authorization-name-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-name-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-name-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wild-card-value))
      (common-lisp:list
       (common-lisp:cons "WildCardValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-name-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resale-authorization-name-filter-value-list ()
   '(trivial-types:proper-list resale-authorization-name-string))
 (common-lisp:defun make-resale-authorization-name-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resale-authorization-name-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resale-authorization-name-filter-wildcard ()
  'common-lisp:string)
(common-lisp:deftype resale-authorization-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resale-authorization-offer-extended-status-filter
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-resale-authorization-offer-extended-status-filter-"))
   (value-list common-lisp:nil :type
    (common-lisp:or
     resale-authorization-offer-extended-status-filter-value-list
     common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-offer-extended-status-filter
                    'make-resale-authorization-offer-extended-status-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-offer-extended-status-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-offer-extended-status-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-offer-extended-status-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resale-authorization-offer-extended-status-filter-value-list
                      ()
   '(trivial-types:proper-list
     resale-authorization-offer-extended-status-string))
 (common-lisp:defun make-resale-authorization-offer-extended-status-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resale-authorization-offer-extended-status-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resale-authorization-offer-extended-status-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resale-authorization-product-id-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-resale-authorization-product-id-filter-"))
   (value-list common-lisp:nil :type
    (common-lisp:or resale-authorization-product-id-filter-value-list
                    common-lisp:null))
   (wild-card-value common-lisp:nil :type
    (common-lisp:or resale-authorization-product-id-filter-wildcard
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-product-id-filter
                    'make-resale-authorization-product-id-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-product-id-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-product-id-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wild-card-value))
      (common-lisp:list
       (common-lisp:cons "WildCardValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-product-id-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resale-authorization-product-id-filter-value-list ()
   '(trivial-types:proper-list resale-authorization-product-id-string))
 (common-lisp:defun make-resale-authorization-product-id-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resale-authorization-product-id-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resale-authorization-product-id-filter-wildcard ()
  'common-lisp:string)
(common-lisp:deftype resale-authorization-product-id-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resale-authorization-product-name-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-resale-authorization-product-name-filter-"))
   (value-list common-lisp:nil :type
    (common-lisp:or resale-authorization-product-name-filter-value-list
                    common-lisp:null))
   (wild-card-value common-lisp:nil :type
    (common-lisp:or resale-authorization-product-name-filter-wildcard
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-product-name-filter
                    'make-resale-authorization-product-name-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-product-name-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-product-name-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wild-card-value))
      (common-lisp:list
       (common-lisp:cons "WildCardValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-product-name-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resale-authorization-product-name-filter-value-list ()
   '(trivial-types:proper-list resale-authorization-product-name-string))
 (common-lisp:defun make-resale-authorization-product-name-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resale-authorization-product-name-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resale-authorization-product-name-filter-wildcard ()
  'common-lisp:string)
(common-lisp:deftype resale-authorization-product-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resale-authorization-reseller-account-idfilter (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-resale-authorization-reseller-account-idfilter-"))
   (value-list common-lisp:nil :type
    (common-lisp:or resale-authorization-reseller-account-idfilter-value-list
                    common-lisp:null))
   (wild-card-value common-lisp:nil :type
    (common-lisp:or resale-authorization-reseller-account-idfilter-wildcard
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-reseller-account-idfilter
                    'make-resale-authorization-reseller-account-idfilter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-reseller-account-idfilter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-reseller-account-idfilter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wild-card-value))
      (common-lisp:list
       (common-lisp:cons "WildCardValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-reseller-account-idfilter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resale-authorization-reseller-account-idfilter-value-list
                      ()
   '(trivial-types:proper-list resale-authorization-reseller-account-idstring))
 (common-lisp:defun make-resale-authorization-reseller-account-idfilter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resale-authorization-reseller-account-idstring))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resale-authorization-reseller-account-idfilter-wildcard ()
  'common-lisp:string)
(common-lisp:deftype resale-authorization-reseller-account-idstring ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resale-authorization-reseller-legal-name-filter (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-resale-authorization-reseller-legal-name-filter-"))
   (value-list common-lisp:nil :type
    (common-lisp:or resale-authorization-reseller-legal-name-filter-value-list
                    common-lisp:null))
   (wild-card-value common-lisp:nil :type
    (common-lisp:or resale-authorization-reseller-legal-name-filter-wildcard
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-reseller-legal-name-filter
                    'make-resale-authorization-reseller-legal-name-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-reseller-legal-name-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-reseller-legal-name-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wild-card-value))
      (common-lisp:list
       (common-lisp:cons "WildCardValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-reseller-legal-name-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resale-authorization-reseller-legal-name-filter-value-list
                      ()
   '(trivial-types:proper-list
     resale-authorization-reseller-legal-name-string))
 (common-lisp:defun make-resale-authorization-reseller-legal-name-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resale-authorization-reseller-legal-name-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resale-authorization-reseller-legal-name-filter-wildcard
                     ()
  'common-lisp:string)
(common-lisp:deftype resale-authorization-reseller-legal-name-string ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resale-authorization-sort (:copier common-lisp:nil)
      (:conc-name "struct-shape-resale-authorization-sort-"))
   (sort-by common-lisp:nil :type
    (common-lisp:or resale-authorization-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-sort
                    'make-resale-authorization-sort))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-sort))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-sort))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-sort))
   common-lisp:nil))
(common-lisp:deftype resale-authorization-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resale-authorization-status-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-resale-authorization-status-filter-"))
   (value-list common-lisp:nil :type
    (common-lisp:or resale-authorization-status-filter-value-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-status-filter
                    'make-resale-authorization-status-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-status-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-status-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-status-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype resale-authorization-status-filter-value-list ()
   '(trivial-types:proper-list resale-authorization-status-string))
 (common-lisp:defun make-resale-authorization-status-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resale-authorization-status-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resale-authorization-status-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resale-authorization-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-resale-authorization-summary-"))
   (availability-end-date common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null))
   (created-date common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null))
   (manufacturer-account-id common-lisp:nil :type
    (common-lisp:or resale-authorization-manufacturer-account-id-string
                    common-lisp:null))
   (manufacturer-legal-name common-lisp:nil :type
    (common-lisp:or resale-authorization-manufacturer-legal-name-string
                    common-lisp:null))
   (name common-lisp:nil :type
    (common-lisp:or resale-authorization-name-string common-lisp:null))
   (offer-extended-status common-lisp:nil :type
    (common-lisp:or resale-authorization-offer-extended-status-string
                    common-lisp:null))
   (product-id common-lisp:nil :type
    (common-lisp:or resale-authorization-product-id-string common-lisp:null))
   (product-name common-lisp:nil :type
    (common-lisp:or resale-authorization-product-name-string common-lisp:null))
   (reseller-account-id common-lisp:nil :type
    (common-lisp:or resale-authorization-reseller-account-idstring
                    common-lisp:null))
   (reseller-legal-name common-lisp:nil :type
    (common-lisp:or resale-authorization-reseller-legal-name-string
                    common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or resale-authorization-status-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resale-authorization-summary
                    'make-resale-authorization-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'availability-end-date))
      (common-lisp:list
       (common-lisp:cons "AvailabilityEndDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'created-date))
      (common-lisp:list
       (common-lisp:cons "CreatedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manufacturer-account-id))
      (common-lisp:list
       (common-lisp:cons "ManufacturerAccountId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'manufacturer-legal-name))
      (common-lisp:list
       (common-lisp:cons "ManufacturerLegalName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'offer-extended-status))
      (common-lisp:list
       (common-lisp:cons "OfferExtendedStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-id))
      (common-lisp:list
       (common-lisp:cons "ProductId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-name))
      (common-lisp:list
       (common-lisp:cons "ProductName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reseller-account-id))
      (common-lisp:list
       (common-lisp:cons "ResellerAccountID"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'reseller-legal-name))
      (common-lisp:list
       (common-lisp:cons "ResellerLegalName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          resale-authorization-summary))
   common-lisp:nil))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-id-list ()
   '(trivial-types:proper-list resource-id))
 (common-lisp:defun make-resource-id-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (marketplace-catalog-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (marketplace-catalog-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-supported-exception
     (marketplace-catalog-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-supported-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-supported-exception
                    'resource-not-supported-exception-message)))
(common-lisp:deftype resource-policy-json () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (saa-sproduct-entity-id-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-saa-sproduct-entity-id-filter-"))
   (value-list common-lisp:nil :type
    (common-lisp:or saa-sproduct-entity-id-filter-value-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'saa-sproduct-entity-id-filter
                    'make-saa-sproduct-entity-id-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-entity-id-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-entity-id-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-entity-id-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype saa-sproduct-entity-id-filter-value-list ()
   '(trivial-types:proper-list saa-sproduct-entity-id-string))
 (common-lisp:defun make-saa-sproduct-entity-id-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            saa-sproduct-entity-id-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype saa-sproduct-entity-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (saa-sproduct-filters (:copier common-lisp:nil)
      (:conc-name "struct-shape-saa-sproduct-filters-"))
   (entity-id common-lisp:nil :type
    (common-lisp:or saa-sproduct-entity-id-filter common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or saa-sproduct-last-modified-date-filter common-lisp:null))
   (product-title common-lisp:nil :type
    (common-lisp:or saa-sproduct-title-filter common-lisp:null))
   (visibility common-lisp:nil :type
    (common-lisp:or saa-sproduct-visibility-filter common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'saa-sproduct-filters 'make-saa-sproduct-filters))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input saa-sproduct-filters))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input saa-sproduct-filters))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-title))
      (common-lisp:list
       (common-lisp:cons "ProductTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input saa-sproduct-filters))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (saa-sproduct-last-modified-date-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-saa-sproduct-last-modified-date-filter-"))
   (date-range common-lisp:nil :type
    (common-lisp:or saa-sproduct-last-modified-date-filter-date-range
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'saa-sproduct-last-modified-date-filter
                    'make-saa-sproduct-last-modified-date-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-last-modified-date-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-last-modified-date-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'date-range))
      (common-lisp:list
       (common-lisp:cons "DateRange"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-last-modified-date-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (saa-sproduct-last-modified-date-filter-date-range
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-saa-sproduct-last-modified-date-filter-date-range-"))
   (after-value common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null))
   (before-value common-lisp:nil :type
    (common-lisp:or date-time-iso8601 common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'saa-sproduct-last-modified-date-filter-date-range
                    'make-saa-sproduct-last-modified-date-filter-date-range))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-last-modified-date-filter-date-range))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-last-modified-date-filter-date-range))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'after-value))
      (common-lisp:list
       (common-lisp:cons "AfterValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'before-value))
      (common-lisp:list
       (common-lisp:cons "BeforeValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-last-modified-date-filter-date-range))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (saa-sproduct-sort (:copier common-lisp:nil)
      (:conc-name "struct-shape-saa-sproduct-sort-"))
   (sort-by common-lisp:nil :type
    (common-lisp:or saa-sproduct-sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'saa-sproduct-sort 'make-saa-sproduct-sort))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input saa-sproduct-sort))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input saa-sproduct-sort))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input saa-sproduct-sort))
   common-lisp:nil))
(common-lisp:deftype saa-sproduct-sort-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (saa-sproduct-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-saa-sproduct-summary-"))
   (product-title common-lisp:nil :type
    (common-lisp:or saa-sproduct-title-string common-lisp:null))
   (visibility common-lisp:nil :type
    (common-lisp:or saa-sproduct-visibility-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'saa-sproduct-summary 'make-saa-sproduct-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input saa-sproduct-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input saa-sproduct-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'product-title))
      (common-lisp:list
       (common-lisp:cons "ProductTitle"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input saa-sproduct-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (saa-sproduct-title-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-saa-sproduct-title-filter-"))
   (value-list common-lisp:nil :type
    (common-lisp:or saa-sproduct-title-filter-value-list common-lisp:null))
   (wild-card-value common-lisp:nil :type
    (common-lisp:or saa-sproduct-title-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'saa-sproduct-title-filter
                    'make-saa-sproduct-title-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-title-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-title-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'wild-card-value))
      (common-lisp:list
       (common-lisp:cons "WildCardValue"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-title-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype saa-sproduct-title-filter-value-list ()
   '(trivial-types:proper-list saa-sproduct-title-string))
 (common-lisp:defun make-saa-sproduct-title-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            saa-sproduct-title-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype saa-sproduct-title-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (saa-sproduct-visibility-filter (:copier common-lisp:nil)
      (:conc-name "struct-shape-saa-sproduct-visibility-filter-"))
   (value-list common-lisp:nil :type
    (common-lisp:or saa-sproduct-visibility-filter-value-list
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'saa-sproduct-visibility-filter
                    'make-saa-sproduct-visibility-filter))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-visibility-filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-visibility-filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          saa-sproduct-visibility-filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype saa-sproduct-visibility-filter-value-list ()
   '(trivial-types:proper-list saa-sproduct-visibility-string))
 (common-lisp:defun make-saa-sproduct-visibility-filter-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            saa-sproduct-visibility-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype saa-sproduct-visibility-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (marketplace-catalog-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (sort (:copier common-lisp:nil) (:conc-name "struct-shape-sort-"))
   (sort-by common-lisp:nil :type (common-lisp:or sort-by common-lisp:null))
   (sort-order common-lisp:nil :type
    (common-lisp:or sort-order common-lisp:null)))
 (common-lisp:export (common-lisp:list 'sort 'make-sort))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sort))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sort))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sort))
   common-lisp:nil))
(common-lisp:deftype sort-by () 'common-lisp:string)
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-change-set-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-change-set-request-"))
   (catalog (common-lisp:error ":catalog is required") :type
    (common-lisp:or catalog common-lisp:null))
   (change-set (common-lisp:error ":change-set is required") :type
    (common-lisp:or requested-change-list common-lisp:null))
   (change-set-name common-lisp:nil :type
    (common-lisp:or change-set-name common-lisp:null))
   (change-set-tags common-lisp:nil :type
    (common-lisp:or tag-list common-lisp:null))
   (client-request-token common-lisp:nil :type
    (common-lisp:or client-request-token common-lisp:null))
   (intent common-lisp:nil :type (common-lisp:or intent common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-change-set-request 'make-start-change-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-change-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-change-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog))
      (common-lisp:list
       (common-lisp:cons "Catalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set))
      (common-lisp:list
       (common-lisp:cons "ChangeSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-name))
      (common-lisp:list
       (common-lisp:cons "ChangeSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-tags))
      (common-lisp:list
       (common-lisp:cons "ChangeSetTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'intent))
      (common-lisp:list
       (common-lisp:cons "Intent"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-change-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (start-change-set-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-start-change-set-response-"))
   (change-set-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (change-set-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-change-set-response
                    'make-start-change-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-change-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-change-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-arn))
      (common-lisp:list
       (common-lisp:cons "ChangeSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-id))
      (common-lisp:list
       (common-lisp:cons "ChangeSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-change-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag (:copier common-lisp:nil) (:conc-name "struct-shape-tag-"))
   (key (common-lisp:error ":key is required") :type
    (common-lisp:or tag-key common-lisp:null))
   (value (common-lisp:error ":value is required") :type
    (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun make-tag-key-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun make-tag-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (marketplace-catalog-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or resource-arn common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (marketplace-catalog-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:deftype value-list ()
   '(trivial-types:proper-list filter-value-content))
 (common-lisp:defun make-value-list
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value-content))
   aws-sdk/generator/shape::members))
(common-lisp:deftype visibility-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun batch-describe-entities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key entity-request-list)
   (common-lisp:declare (common-lisp:ignorable entity-request-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-describe-entities-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "POST"
        "/BatchDescribeEntities" "BatchDescribeEntities"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'batch-describe-entities))
(common-lisp:progn
 (common-lisp:defun cancel-change-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog change-set-id)
   (common-lisp:declare (common-lisp:ignorable catalog change-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-change-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "PATCH"
        "/CancelChangeSet" "CancelChangeSet"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-change-set))
(common-lisp:progn
 (common-lisp:defun delete-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input
        "DELETE" "/DeleteResourcePolicy" "DeleteResourcePolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-resource-policy))
(common-lisp:progn
 (common-lisp:defun describe-change-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog change-set-id)
   (common-lisp:declare (common-lisp:ignorable catalog change-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-change-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "GET"
        "/DescribeChangeSet" "DescribeChangeSet"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-change-set))
(common-lisp:progn
 (common-lisp:defun describe-entity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog entity-id)
   (common-lisp:declare (common-lisp:ignorable catalog entity-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-entity-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "GET"
        "/DescribeEntity" "DescribeEntity"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-entity))
(common-lisp:progn
 (common-lisp:defun get-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "GET"
        "/GetResourcePolicy" "GetResourcePolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resource-policy))
(common-lisp:progn
 (common-lisp:defun list-change-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog filter-list max-results
                     next-token sort)
   (common-lisp:declare
    (common-lisp:ignorable catalog filter-list max-results next-token sort))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-change-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "POST"
        "/ListChangeSets" "ListChangeSets"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-change-sets))
(common-lisp:progn
 (common-lisp:defun list-entities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog entity-type entity-type-filters
                     entity-type-sort filter-list max-results next-token
                     ownership-type sort)
   (common-lisp:declare
    (common-lisp:ignorable catalog entity-type entity-type-filters
     entity-type-sort filter-list max-results next-token ownership-type sort))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-entities-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "POST"
        "/ListEntities" "ListEntities"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-entities))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "POST"
        "/ListTagsForResource" "ListTagsForResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy resource-arn)
   (common-lisp:declare (common-lisp:ignorable policy resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "POST"
        "/PutResourcePolicy" "PutResourcePolicy"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-resource-policy))
(common-lisp:progn
 (common-lisp:defun start-change-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog change-set change-set-name
                     change-set-tags client-request-token intent)
   (common-lisp:declare
    (common-lisp:ignorable catalog change-set change-set-name change-set-tags
     client-request-token intent))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-change-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "POST"
        "/StartChangeSet" "StartChangeSet"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-change-set))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "POST"
        "/TagResource" "TagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "POST"
        "/UntagResource" "UntagResource"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
