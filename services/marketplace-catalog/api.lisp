;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/marketplace-catalog/api
  (:use)
  (:nicknames #:aws/marketplace-catalog)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/marketplace-catalog/api)
(common-lisp:progn
 (common-lisp:defclass marketplace-catalog-request (aws-sdk/request:request)
                       common-lisp:nil
                       (:default-initargs :service "marketplace-catalog"
                        :protocol :rest-json))
 (common-lisp:export 'marketplace-catalog-request))
(common-lisp:progn
 (common-lisp:define-condition marketplace-catalog-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'marketplace-catalog-error))
(common-lisp:defvar *error-map*
  '(("AccessDeniedException" . access-denied-exception)
    ("InternalServiceException" . internal-service-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourceNotSupportedException" . resource-not-supported-exception)
    ("ServiceQuotaExceededException" . service-quota-exceeded-exception)
    ("ThrottlingException" . throttling-exception)
    ("ValidationException" . validation-exception)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition access-denied-exception
     (marketplace-catalog-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       access-denied-exception-message)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'access-denied-exception-message)))
(common-lisp:progn
 (common-lisp:defclass cancel-change-set-request common-lisp:nil
                       ((change-set-id :initarg :change-set-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %cancel-change-set-request-change-set-id
                         :initform
                         (common-lisp:error ":change-set-id is required"))
                        (catalog :initarg :catalog :type
                         (common-lisp:or catalog common-lisp:null) :accessor
                         %cancel-change-set-request-catalog :initform
                         (common-lisp:error ":catalog is required"))))
 (common-lisp:export
  (common-lisp:list 'cancel-change-set-request
                    'make-cancel-change-set-request))
 (common-lisp:defun make-cancel-change-set-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key change-set-id catalog)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-change-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-change-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-change-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-change-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass cancel-change-set-response common-lisp:nil
                       ((change-set-arn :initarg :change-set-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %cancel-change-set-response-change-set-arn :initform
                         common-lisp:nil)
                        (change-set-id :initarg :change-set-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %cancel-change-set-response-change-set-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'cancel-change-set-response
                    'make-cancel-change-set-response))
 (common-lisp:defun make-cancel-change-set-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key change-set-arn change-set-id)
   (common-lisp:apply #'common-lisp:make-instance 'cancel-change-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-change-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-change-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-id))
      (common-lisp:list
       (common-lisp:cons "ChangeSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-arn))
      (common-lisp:list
       (common-lisp:cons "ChangeSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-change-set-response))
   common-lisp:nil))
(common-lisp:deftype catalog () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass change common-lisp:nil
                       ((change-name :initarg :change-name :type
                         (common-lisp:or change-name common-lisp:null)
                         :accessor %change-change-name :initform
                         common-lisp:nil)
                        (details :initarg :details :type
                         (common-lisp:or json common-lisp:null) :accessor
                         %change-details :initform
                         (common-lisp:error ":details is required"))
                        (entity-tags :initarg :entity-tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %change-entity-tags :initform common-lisp:nil)
                        (entity :initarg :entity :type
                         (common-lisp:or entity common-lisp:null) :accessor
                         %change-entity :initform
                         (common-lisp:error ":entity is required"))
                        (change-type :initarg :change-type :type
                         (common-lisp:or change-type common-lisp:null)
                         :accessor %change-change-type :initform
                         (common-lisp:error ":change-type is required"))))
 (common-lisp:export (common-lisp:list 'change 'make-change))
 (common-lisp:defun make-change
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key change-name details entity-tags entity
                     change-type)
   (common-lisp:apply #'common-lisp:make-instance 'change
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input change))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input change))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-type))
      (common-lisp:list
       (common-lisp:cons "ChangeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity))
      (common-lisp:list
       (common-lisp:cons "Entity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-tags))
      (common-lisp:list
       (common-lisp:cons "EntityTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-name))
      (common-lisp:list
       (common-lisp:cons "ChangeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input change))
   common-lisp:nil))
(common-lisp:deftype change-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype change-set-description ()
   '(trivial-types:proper-list change-summary))
 (common-lisp:defun |make-change-set-description|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list change-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype change-set-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype change-set-summary-list ()
   '(trivial-types:proper-list change-set-summary-list-item))
 (common-lisp:defun |make-change-set-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            change-set-summary-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass change-set-summary-list-item common-lisp:nil
                       ((failure-code :initarg :failure-code :type
                         (common-lisp:or failure-code common-lisp:null)
                         :accessor %change-set-summary-list-item-failure-code
                         :initform common-lisp:nil)
                        (entity-id-list :initarg :entity-id-list :type
                         (common-lisp:or resource-id-list common-lisp:null)
                         :accessor %change-set-summary-list-item-entity-id-list
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or change-status common-lisp:null)
                         :accessor %change-set-summary-list-item-status
                         :initform common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor %change-set-summary-list-item-end-time
                         :initform common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor %change-set-summary-list-item-start-time
                         :initform common-lisp:nil)
                        (change-set-name :initarg :change-set-name :type
                         (common-lisp:or change-set-name common-lisp:null)
                         :accessor
                         %change-set-summary-list-item-change-set-name
                         :initform common-lisp:nil)
                        (change-set-arn :initarg :change-set-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %change-set-summary-list-item-change-set-arn :initform
                         common-lisp:nil)
                        (change-set-id :initarg :change-set-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %change-set-summary-list-item-change-set-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'change-set-summary-list-item
                    'make-change-set-summary-list-item))
 (common-lisp:defun make-change-set-summary-list-item
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key failure-code entity-id-list status
                     end-time start-time change-set-name change-set-arn
                     change-set-id)
   (common-lisp:apply #'common-lisp:make-instance 'change-set-summary-list-item
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          change-set-summary-list-item))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          change-set-summary-list-item))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-id))
      (common-lisp:list
       (common-lisp:cons "ChangeSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-arn))
      (common-lisp:list
       (common-lisp:cons "ChangeSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-name))
      (common-lisp:list
       (common-lisp:cons "ChangeSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id-list))
      (common-lisp:list
       (common-lisp:cons "EntityIdList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "FailureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          change-set-summary-list-item))
   common-lisp:nil))
(common-lisp:deftype change-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass change-summary common-lisp:nil
                       ((change-name :initarg :change-name :type
                         (common-lisp:or change-name common-lisp:null)
                         :accessor %change-summary-change-name :initform
                         common-lisp:nil)
                        (error-detail-list :initarg :error-detail-list :type
                         (common-lisp:or error-detail-list common-lisp:null)
                         :accessor %change-summary-error-detail-list :initform
                         common-lisp:nil)
                        (details :initarg :details :type
                         (common-lisp:or json common-lisp:null) :accessor
                         %change-summary-details :initform common-lisp:nil)
                        (entity :initarg :entity :type
                         (common-lisp:or entity common-lisp:null) :accessor
                         %change-summary-entity :initform common-lisp:nil)
                        (change-type :initarg :change-type :type
                         (common-lisp:or change-type common-lisp:null)
                         :accessor %change-summary-change-type :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'change-summary 'make-change-summary))
 (common-lisp:defun make-change-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key change-name error-detail-list details
                     entity change-type)
   (common-lisp:apply #'common-lisp:make-instance 'change-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input change-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input change-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-type))
      (common-lisp:list
       (common-lisp:cons "ChangeType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity))
      (common-lisp:list
       (common-lisp:cons "Entity"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-detail-list))
      (common-lisp:list
       (common-lisp:cons "ErrorDetailList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-name))
      (common-lisp:list
       (common-lisp:cons "ChangeName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input change-summary))
   common-lisp:nil))
(common-lisp:deftype change-type () 'common-lisp:string)
(common-lisp:deftype client-request-token () 'common-lisp:string)
(common-lisp:deftype date-time-iso8601 () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass delete-resource-policy-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %delete-resource-policy-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-request
                    'make-delete-resource-policy-request))
 (common-lisp:defun make-delete-resource-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass delete-resource-policy-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'delete-resource-policy-response
                    'make-delete-resource-policy-response))
 (common-lisp:defun make-delete-resource-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance
                      'delete-resource-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-change-set-request common-lisp:nil
                       ((change-set-id :initarg :change-set-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %describe-change-set-request-change-set-id
                         :initform
                         (common-lisp:error ":change-set-id is required"))
                        (catalog :initarg :catalog :type
                         (common-lisp:or catalog common-lisp:null) :accessor
                         %describe-change-set-request-catalog :initform
                         (common-lisp:error ":catalog is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-change-set-request
                    'make-describe-change-set-request))
 (common-lisp:defun make-describe-change-set-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key change-set-id catalog)
   (common-lisp:apply #'common-lisp:make-instance 'describe-change-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-change-set-response common-lisp:nil
                       ((change-set :initarg :change-set :type
                         (common-lisp:or change-set-description
                                         common-lisp:null)
                         :accessor %describe-change-set-response-change-set
                         :initform common-lisp:nil)
                        (failure-description :initarg :failure-description
                         :type
                         (common-lisp:or exception-message-content
                                         common-lisp:null)
                         :accessor
                         %describe-change-set-response-failure-description
                         :initform common-lisp:nil)
                        (failure-code :initarg :failure-code :type
                         (common-lisp:or failure-code common-lisp:null)
                         :accessor %describe-change-set-response-failure-code
                         :initform common-lisp:nil)
                        (status :initarg :status :type
                         (common-lisp:or change-status common-lisp:null)
                         :accessor %describe-change-set-response-status
                         :initform common-lisp:nil)
                        (end-time :initarg :end-time :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor %describe-change-set-response-end-time
                         :initform common-lisp:nil)
                        (start-time :initarg :start-time :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor %describe-change-set-response-start-time
                         :initform common-lisp:nil)
                        (change-set-name :initarg :change-set-name :type
                         (common-lisp:or change-set-name common-lisp:null)
                         :accessor
                         %describe-change-set-response-change-set-name
                         :initform common-lisp:nil)
                        (change-set-arn :initarg :change-set-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-change-set-response-change-set-arn :initform
                         common-lisp:nil)
                        (change-set-id :initarg :change-set-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %describe-change-set-response-change-set-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-change-set-response
                    'make-describe-change-set-response))
 (common-lisp:defun make-describe-change-set-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key change-set failure-description
                     failure-code status end-time start-time change-set-name
                     change-set-arn change-set-id)
   (common-lisp:apply #'common-lisp:make-instance 'describe-change-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-id))
      (common-lisp:list
       (common-lisp:cons "ChangeSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-arn))
      (common-lisp:list
       (common-lisp:cons "ChangeSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-name))
      (common-lisp:list
       (common-lisp:cons "ChangeSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'start-time))
      (common-lisp:list
       (common-lisp:cons "StartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'end-time))
      (common-lisp:list
       (common-lisp:cons "EndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-code))
      (common-lisp:list
       (common-lisp:cons "FailureCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'failure-description))
      (common-lisp:list
       (common-lisp:cons "FailureDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set))
      (common-lisp:list
       (common-lisp:cons "ChangeSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-change-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-entity-request common-lisp:nil
                       ((entity-id :initarg :entity-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %describe-entity-request-entity-id :initform
                         (common-lisp:error ":entity-id is required"))
                        (catalog :initarg :catalog :type
                         (common-lisp:or catalog common-lisp:null) :accessor
                         %describe-entity-request-catalog :initform
                         (common-lisp:error ":catalog is required"))))
 (common-lisp:export
  (common-lisp:list 'describe-entity-request 'make-describe-entity-request))
 (common-lisp:defun make-describe-entity-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key entity-id catalog)
   (common-lisp:apply #'common-lisp:make-instance 'describe-entity-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-entity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-entity-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-entity-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass describe-entity-response common-lisp:nil
                       ((details :initarg :details :type
                         (common-lisp:or json common-lisp:null) :accessor
                         %describe-entity-response-details :initform
                         common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor %describe-entity-response-last-modified-date
                         :initform common-lisp:nil)
                        (entity-arn :initarg :entity-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %describe-entity-response-entity-arn :initform
                         common-lisp:nil)
                        (entity-identifier :initarg :entity-identifier :type
                         (common-lisp:or identifier common-lisp:null) :accessor
                         %describe-entity-response-entity-identifier :initform
                         common-lisp:nil)
                        (entity-type :initarg :entity-type :type
                         (common-lisp:or entity-type common-lisp:null)
                         :accessor %describe-entity-response-entity-type
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-entity-response 'make-describe-entity-response))
 (common-lisp:defun make-describe-entity-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key details last-modified-date entity-arn
                     entity-identifier entity-type)
   (common-lisp:apply #'common-lisp:make-instance 'describe-entity-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-entity-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-entity-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type))
      (common-lisp:list
       (common-lisp:cons "EntityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-identifier))
      (common-lisp:list
       (common-lisp:cons "EntityIdentifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-arn))
      (common-lisp:list
       (common-lisp:cons "EntityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'details))
      (common-lisp:list
       (common-lisp:cons "Details"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-entity-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass entity common-lisp:nil
                       ((identifier :initarg :identifier :type
                         (common-lisp:or identifier common-lisp:null) :accessor
                         %entity-identifier :initform common-lisp:nil)
                        (type :initarg :type :type
                         (common-lisp:or entity-type common-lisp:null)
                         :accessor %entity-type :initform
                         (common-lisp:error ":type is required"))))
 (common-lisp:export (common-lisp:list 'entity 'make-entity))
 (common-lisp:defun make-entity
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key identifier type)
   (common-lisp:apply #'common-lisp:make-instance 'entity
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'type))
      (common-lisp:list
       (common-lisp:cons "Type"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'identifier))
      (common-lisp:list
       (common-lisp:cons "Identifier"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity))
   common-lisp:nil))
(common-lisp:deftype entity-name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass entity-summary common-lisp:nil
                       ((visibility :initarg :visibility :type
                         (common-lisp:or visibility-value common-lisp:null)
                         :accessor %entity-summary-visibility :initform
                         common-lisp:nil)
                        (last-modified-date :initarg :last-modified-date :type
                         (common-lisp:or date-time-iso8601 common-lisp:null)
                         :accessor %entity-summary-last-modified-date :initform
                         common-lisp:nil)
                        (entity-arn :initarg :entity-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %entity-summary-entity-arn :initform common-lisp:nil)
                        (entity-id :initarg :entity-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %entity-summary-entity-id :initform
                         common-lisp:nil)
                        (entity-type :initarg :entity-type :type
                         (common-lisp:or entity-type common-lisp:null)
                         :accessor %entity-summary-entity-type :initform
                         common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or entity-name-string common-lisp:null)
                         :accessor %entity-summary-name :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'entity-summary 'make-entity-summary))
 (common-lisp:defun make-entity-summary
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key visibility last-modified-date entity-arn
                     entity-id entity-type name)
   (common-lisp:apply #'common-lisp:make-instance 'entity-summary
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input entity-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input entity-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type))
      (common-lisp:list
       (common-lisp:cons "EntityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-id))
      (common-lisp:list
       (common-lisp:cons "EntityId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-arn))
      (common-lisp:list
       (common-lisp:cons "EntityArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'last-modified-date))
      (common-lisp:list
       (common-lisp:cons "LastModifiedDate"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'visibility))
      (common-lisp:list
       (common-lisp:cons "Visibility"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input entity-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype entity-summary-list ()
   '(trivial-types:proper-list entity-summary))
 (common-lisp:defun |make-entity-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype entity-type () 'common-lisp:string)
(common-lisp:deftype error-code-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass error-detail common-lisp:nil
                       ((error-message :initarg :error-message :type
                         (common-lisp:or exception-message-content
                                         common-lisp:null)
                         :accessor %error-detail-error-message :initform
                         common-lisp:nil)
                        (error-code :initarg :error-code :type
                         (common-lisp:or error-code-string common-lisp:null)
                         :accessor %error-detail-error-code :initform
                         common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'error-detail 'make-error-detail))
 (common-lisp:defun make-error-detail
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key error-message error-code)
   (common-lisp:apply #'common-lisp:make-instance 'error-detail
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input error-detail))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-code))
      (common-lisp:list
       (common-lisp:cons "ErrorCode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-message))
      (common-lisp:list
       (common-lisp:cons "ErrorMessage"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input error-detail))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype error-detail-list ()
   '(trivial-types:proper-list error-detail))
 (common-lisp:defun |make-error-detail-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list error-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype exception-message-content () 'common-lisp:string)
(common-lisp:deftype failure-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass filter common-lisp:nil
                       ((value-list :initarg :value-list :type
                         (common-lisp:or value-list common-lisp:null) :accessor
                         %filter-value-list :initform common-lisp:nil)
                        (name :initarg :name :type
                         (common-lisp:or filter-name common-lisp:null)
                         :accessor %filter-name :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'filter 'make-filter))
 (common-lisp:defun make-filter
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value-list name)
   (common-lisp:apply #'common-lisp:make-instance 'filter
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input filter))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value-list))
      (common-lisp:list
       (common-lisp:cons "ValueList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input filter))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype filter-list () '(trivial-types:proper-list filter))
 (common-lisp:defun |make-filter-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter))
   aws-sdk/generator/shape::members))
(common-lisp:deftype filter-name () 'common-lisp:string)
(common-lisp:deftype filter-value-content () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass get-resource-policy-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %get-resource-policy-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'get-resource-policy-request
                    'make-get-resource-policy-request))
 (common-lisp:defun make-get-resource-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'get-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass get-resource-policy-response common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or resource-policy-json common-lisp:null)
                         :accessor %get-resource-policy-response-policy
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-resource-policy-response
                    'make-get-resource-policy-response))
 (common-lisp:defun make-get-resource-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy)
   (common-lisp:apply #'common-lisp:make-instance 'get-resource-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-resource-policy-response))
   common-lisp:nil))
(common-lisp:deftype identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition internal-service-exception
     (marketplace-catalog-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       internal-service-exception-message)))
 (common-lisp:export
  (common-lisp:list 'internal-service-exception
                    'internal-service-exception-message)))
(common-lisp:deftype json () 'common-lisp:string)
(common-lisp:deftype list-change-sets-max-result-integer ()
  'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-change-sets-request common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-change-sets-request-next-token :initform
                         common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or list-change-sets-max-result-integer
                                         common-lisp:null)
                         :accessor %list-change-sets-request-max-results
                         :initform common-lisp:nil)
                        (sort :initarg :sort :type
                         (common-lisp:or sort common-lisp:null) :accessor
                         %list-change-sets-request-sort :initform
                         common-lisp:nil)
                        (filter-list :initarg :filter-list :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor %list-change-sets-request-filter-list
                         :initform common-lisp:nil)
                        (catalog :initarg :catalog :type
                         (common-lisp:or catalog common-lisp:null) :accessor
                         %list-change-sets-request-catalog :initform
                         (common-lisp:error ":catalog is required"))))
 (common-lisp:export
  (common-lisp:list 'list-change-sets-request 'make-list-change-sets-request))
 (common-lisp:defun make-list-change-sets-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token max-results sort filter-list
                     catalog)
   (common-lisp:apply #'common-lisp:make-instance 'list-change-sets-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog))
      (common-lisp:list
       (common-lisp:cons "Catalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-list))
      (common-lisp:list
       (common-lisp:cons "FilterList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "Sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-change-sets-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-change-sets-response-next-token :initform
                         common-lisp:nil)
                        (change-set-summary-list :initarg
                         :change-set-summary-list :type
                         (common-lisp:or change-set-summary-list
                                         common-lisp:null)
                         :accessor
                         %list-change-sets-response-change-set-summary-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-change-sets-response
                    'make-list-change-sets-response))
 (common-lisp:defun make-list-change-sets-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token change-set-summary-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-change-sets-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'change-set-summary-list))
      (common-lisp:list
       (common-lisp:cons "ChangeSetSummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-change-sets-response))
   common-lisp:nil))
(common-lisp:deftype list-entities-max-result-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defclass list-entities-request common-lisp:nil
                       ((ownership-type :initarg :ownership-type :type
                         (common-lisp:or ownership-type common-lisp:null)
                         :accessor %list-entities-request-ownership-type
                         :initform common-lisp:nil)
                        (max-results :initarg :max-results :type
                         (common-lisp:or list-entities-max-result-integer
                                         common-lisp:null)
                         :accessor %list-entities-request-max-results :initform
                         common-lisp:nil)
                        (next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-entities-request-next-token :initform
                         common-lisp:nil)
                        (sort :initarg :sort :type
                         (common-lisp:or sort common-lisp:null) :accessor
                         %list-entities-request-sort :initform common-lisp:nil)
                        (filter-list :initarg :filter-list :type
                         (common-lisp:or filter-list common-lisp:null)
                         :accessor %list-entities-request-filter-list :initform
                         common-lisp:nil)
                        (entity-type :initarg :entity-type :type
                         (common-lisp:or entity-type common-lisp:null)
                         :accessor %list-entities-request-entity-type :initform
                         (common-lisp:error ":entity-type is required"))
                        (catalog :initarg :catalog :type
                         (common-lisp:or catalog common-lisp:null) :accessor
                         %list-entities-request-catalog :initform
                         (common-lisp:error ":catalog is required"))))
 (common-lisp:export
  (common-lisp:list 'list-entities-request 'make-list-entities-request))
 (common-lisp:defun make-list-entities-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key ownership-type max-results next-token
                     sort filter-list entity-type catalog)
   (common-lisp:apply #'common-lisp:make-instance 'list-entities-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog))
      (common-lisp:list
       (common-lisp:cons "Catalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-type))
      (common-lisp:list
       (common-lisp:cons "EntityType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'filter-list))
      (common-lisp:list
       (common-lisp:cons "FilterList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort))
      (common-lisp:list
       (common-lisp:cons "Sort"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'max-results))
      (common-lisp:list
       (common-lisp:cons "MaxResults"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ownership-type))
      (common-lisp:list
       (common-lisp:cons "OwnershipType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-entities-response common-lisp:nil
                       ((next-token :initarg :next-token :type
                         (common-lisp:or next-token common-lisp:null) :accessor
                         %list-entities-response-next-token :initform
                         common-lisp:nil)
                        (entity-summary-list :initarg :entity-summary-list
                         :type
                         (common-lisp:or entity-summary-list common-lisp:null)
                         :accessor %list-entities-response-entity-summary-list
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-entities-response 'make-list-entities-response))
 (common-lisp:defun make-list-entities-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key next-token entity-summary-list)
   (common-lisp:apply #'common-lisp:make-instance 'list-entities-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'entity-summary-list))
      (common-lisp:list
       (common-lisp:cons "EntitySummaryList"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-entities-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-request common-lisp:nil
                       ((resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %list-tags-for-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defun make-list-tags-for-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass list-tags-for-resource-response common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %list-tags-for-resource-response-tags :initform
                         common-lisp:nil)
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor
                         %list-tags-for-resource-response-resource-arn
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defun make-list-tags-for-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance
                      'list-tags-for-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype ownership-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass put-resource-policy-request common-lisp:nil
                       ((policy :initarg :policy :type
                         (common-lisp:or resource-policy-json common-lisp:null)
                         :accessor %put-resource-policy-request-policy
                         :initform (common-lisp:error ":policy is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %put-resource-policy-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-request
                    'make-put-resource-policy-request))
 (common-lisp:defun make-put-resource-policy-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key policy resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'put-resource-policy-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'policy))
      (common-lisp:list
       (common-lisp:cons "Policy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass put-resource-policy-response common-lisp:nil
                       common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'put-resource-policy-response
                    'make-put-resource-policy-response))
 (common-lisp:defun make-put-resource-policy-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'put-resource-policy-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          put-resource-policy-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype requested-change-list ()
   '(trivial-types:proper-list change))
 (common-lisp:defun |make-requested-change-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list change))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-id-list ()
   '(trivial-types:proper-list resource-id))
 (common-lisp:defun |make-resource-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (marketplace-catalog-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (marketplace-catalog-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message)))
(common-lisp:progn
 (common-lisp:define-condition resource-not-supported-exception
     (marketplace-catalog-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-supported-exception-message)))
 (common-lisp:export
  (common-lisp:list 'resource-not-supported-exception
                    'resource-not-supported-exception-message)))
(common-lisp:deftype resource-policy-json () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition service-quota-exceeded-exception
     (marketplace-catalog-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       service-quota-exceeded-exception-message)))
 (common-lisp:export
  (common-lisp:list 'service-quota-exceeded-exception
                    'service-quota-exceeded-exception-message)))
(common-lisp:progn
 (common-lisp:defclass sort common-lisp:nil
                       ((sort-order :initarg :sort-order :type
                         (common-lisp:or sort-order common-lisp:null) :accessor
                         %sort-sort-order :initform common-lisp:nil)
                        (sort-by :initarg :sort-by :type
                         (common-lisp:or sort-by common-lisp:null) :accessor
                         %sort-sort-by :initform common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'sort 'make-sort))
 (common-lisp:defun make-sort
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key sort-order sort-by)
   (common-lisp:apply #'common-lisp:make-instance 'sort
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input sort))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input sort))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-by))
      (common-lisp:list
       (common-lisp:cons "SortBy"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'sort-order))
      (common-lisp:list
       (common-lisp:cons "SortOrder"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input sort))
   common-lisp:nil))
(common-lisp:deftype sort-by () 'common-lisp:string)
(common-lisp:deftype sort-order () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defclass start-change-set-request common-lisp:nil
                       ((change-set-tags :initarg :change-set-tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %start-change-set-request-change-set-tags :initform
                         common-lisp:nil)
                        (client-request-token :initarg :client-request-token
                         :type
                         (common-lisp:or client-request-token common-lisp:null)
                         :accessor
                         %start-change-set-request-client-request-token
                         :initform common-lisp:nil)
                        (change-set-name :initarg :change-set-name :type
                         (common-lisp:or change-set-name common-lisp:null)
                         :accessor %start-change-set-request-change-set-name
                         :initform common-lisp:nil)
                        (change-set :initarg :change-set :type
                         (common-lisp:or requested-change-list
                                         common-lisp:null)
                         :accessor %start-change-set-request-change-set
                         :initform
                         (common-lisp:error ":change-set is required"))
                        (catalog :initarg :catalog :type
                         (common-lisp:or catalog common-lisp:null) :accessor
                         %start-change-set-request-catalog :initform
                         (common-lisp:error ":catalog is required"))))
 (common-lisp:export
  (common-lisp:list 'start-change-set-request 'make-start-change-set-request))
 (common-lisp:defun make-start-change-set-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key change-set-tags client-request-token
                     change-set-name change-set catalog)
   (common-lisp:apply #'common-lisp:make-instance 'start-change-set-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-change-set-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-change-set-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'catalog))
      (common-lisp:list
       (common-lisp:cons "Catalog"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set))
      (common-lisp:list
       (common-lisp:cons "ChangeSet"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-name))
      (common-lisp:list
       (common-lisp:cons "ChangeSetName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'client-request-token))
      (common-lisp:list
       (common-lisp:cons "ClientRequestToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-tags))
      (common-lisp:list
       (common-lisp:cons "ChangeSetTags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-change-set-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass start-change-set-response common-lisp:nil
                       ((change-set-arn :initarg :change-set-arn :type
                         (common-lisp:or arn common-lisp:null) :accessor
                         %start-change-set-response-change-set-arn :initform
                         common-lisp:nil)
                        (change-set-id :initarg :change-set-id :type
                         (common-lisp:or resource-id common-lisp:null)
                         :accessor %start-change-set-response-change-set-id
                         :initform common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-change-set-response
                    'make-start-change-set-response))
 (common-lisp:defun make-start-change-set-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key change-set-arn change-set-id)
   (common-lisp:apply #'common-lisp:make-instance 'start-change-set-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          start-change-set-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          start-change-set-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-id))
      (common-lisp:list
       (common-lisp:cons "ChangeSetId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'change-set-arn))
      (common-lisp:list
       (common-lisp:cons "ChangeSetArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          start-change-set-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag common-lisp:nil
                       ((value :initarg :value :type
                         (common-lisp:or tag-value common-lisp:null) :accessor
                         %tag-value :initform
                         (common-lisp:error ":value is required"))
                        (key :initarg :key :type
                         (common-lisp:or tag-key common-lisp:null) :accessor
                         %tag-key :initform
                         (common-lisp:error ":key is required"))))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defun make-tag
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key value key)
   (common-lisp:apply #'common-lisp:make-instance 'tag
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'key))
      (common-lisp:list
       (common-lisp:cons "Key"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'value))
      (common-lisp:list
       (common-lisp:cons "Value"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag))
   common-lisp:nil))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defclass tag-resource-request common-lisp:nil
                       ((tags :initarg :tags :type
                         (common-lisp:or tag-list common-lisp:null) :accessor
                         %tag-resource-request-tags :initform
                         (common-lisp:error ":tags is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %tag-resource-request-resource-arn :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defun make-tag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tags resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass tag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defun make-tag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'tag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition throttling-exception
     (marketplace-catalog-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       throttling-exception-message)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'throttling-exception-message)))
(common-lisp:progn
 (common-lisp:defclass untag-resource-request common-lisp:nil
                       ((tag-keys :initarg :tag-keys :type
                         (common-lisp:or tag-key-list common-lisp:null)
                         :accessor %untag-resource-request-tag-keys :initform
                         (common-lisp:error ":tag-keys is required"))
                        (resource-arn :initarg :resource-arn :type
                         (common-lisp:or resource-arn common-lisp:null)
                         :accessor %untag-resource-request-resource-arn
                         :initform
                         (common-lisp:error ":resource-arn is required"))))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defun make-untag-resource-request
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key tag-keys resource-arn)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-request
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'resource-arn))
      (common-lisp:list
       (common-lisp:cons "ResourceArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tag-keys))
      (common-lisp:list
       (common-lisp:cons "TagKeys"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defclass untag-resource-response common-lisp:nil common-lisp:nil)
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defun make-untag-resource-response
                    (
                     common-lisp:&rest aws-sdk/generator/shape::args
                     common-lisp:&key)
   (common-lisp:apply #'common-lisp:make-instance 'untag-resource-response
                      aws-sdk/generator/shape::args))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition validation-exception
     (marketplace-catalog-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       validation-exception-message)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'validation-exception-message)))
(common-lisp:progn
 (common-lisp:deftype value-list ()
   '(trivial-types:proper-list filter-value-content))
 (common-lisp:defun |make-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list filter-value-content))
   aws-sdk/generator/shape::members))
(common-lisp:deftype visibility-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun cancel-change-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog change-set-id)
   (common-lisp:declare (common-lisp:ignorable catalog change-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-cancel-change-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "PATCH"
        :rest-json "/CancelChangeSet" "CancelChangeSet" "2018-09-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-change-set))
(common-lisp:progn
 (common-lisp:defun delete-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input
        "DELETE" :rest-json "/DeleteResourcePolicy" "DeleteResourcePolicy"
        "2018-09-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-resource-policy))
(common-lisp:progn
 (common-lisp:defun describe-change-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog change-set-id)
   (common-lisp:declare (common-lisp:ignorable catalog change-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-change-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "GET"
        :rest-json "/DescribeChangeSet" "DescribeChangeSet" "2018-09-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-change-set))
(common-lisp:progn
 (common-lisp:defun describe-entity
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog entity-id)
   (common-lisp:declare (common-lisp:ignorable catalog entity-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-entity-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "GET"
        :rest-json "/DescribeEntity" "DescribeEntity" "2018-09-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-entity))
(common-lisp:progn
 (common-lisp:defun get-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "GET"
        :rest-json "/GetResourcePolicy" "GetResourcePolicy" "2018-09-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-resource-policy))
(common-lisp:progn
 (common-lisp:defun list-change-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog filter-list sort max-results
                     next-token)
   (common-lisp:declare
    (common-lisp:ignorable catalog filter-list sort max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-change-sets-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "POST"
        :rest-json "/ListChangeSets" "ListChangeSets" "2018-09-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-change-sets))
(common-lisp:progn
 (common-lisp:defun list-entities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog entity-type filter-list sort
                     next-token max-results ownership-type)
   (common-lisp:declare
    (common-lisp:ignorable catalog entity-type filter-list sort next-token
     max-results ownership-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-entities-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "POST"
        :rest-json "/ListEntities" "ListEntities" "2018-09-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-entities))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "POST"
        :rest-json "/ListTagsForResource" "ListTagsForResource" "2018-09-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun put-resource-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn policy)
   (common-lisp:declare (common-lisp:ignorable resource-arn policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-resource-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "POST"
        :rest-json "/PutResourcePolicy" "PutResourcePolicy" "2018-09-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'put-resource-policy))
(common-lisp:progn
 (common-lisp:defun start-change-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog change-set change-set-name
                     client-request-token change-set-tags)
   (common-lisp:declare
    (common-lisp:ignorable catalog change-set change-set-name
     client-request-token change-set-tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-change-set-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "POST"
        :rest-json "/StartChangeSet" "StartChangeSet" "2018-09-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'start-change-set))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "POST"
        :rest-json "/TagResource" "TagResource" "2018-09-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input
        'marketplace-catalog-request aws-sdk/generator/operation::input "POST"
        :rest-json "/UntagResource" "UntagResource" "2018-09-17"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
