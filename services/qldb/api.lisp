;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/qldb/api
  (:use)
  (:nicknames #:aws/qldb)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api)
  (:import-from #:aws-sdk/request)
  (:import-from #:aws-sdk/error))
(common-lisp:in-package #:aws-sdk/services/qldb/api)
(common-lisp:progn
 (common-lisp:defclass qldb-request (aws-sdk/request:request) common-lisp:nil
                       (:default-initargs :service "qldb"))
 (common-lisp:export 'qldb-request))
(common-lisp:progn
 (common-lisp:define-condition qldb-error
     (aws-sdk/error:aws-error)
     common-lisp:nil)
 (common-lisp:export 'qldb-error))
(common-lisp:defvar *error-map*
  '(("InvalidParameterException" . invalid-parameter-exception)
    ("LimitExceededException" . limit-exceeded-exception)
    ("ResourceAlreadyExistsException" . resource-already-exists-exception)
    ("ResourceInUseException" . resource-in-use-exception)
    ("ResourceNotFoundException" . resource-not-found-exception)
    ("ResourcePreconditionNotMetException"
     . resource-precondition-not-met-exception)))
(common-lisp:deftype arn () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-journal-kinesis-stream-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-journal-kinesis-stream-request-"))
   (ledger-name (common-lisp:error ":ledger-name is required") :type
    (common-lisp:or ledger-name common-lisp:null))
   (stream-id (common-lisp:error ":stream-id is required") :type
    (common-lisp:or unique-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-journal-kinesis-stream-request
                    'make-cancel-journal-kinesis-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-journal-kinesis-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-journal-kinesis-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-journal-kinesis-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-journal-kinesis-stream-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-cancel-journal-kinesis-stream-response-"))
   (stream-id common-lisp:nil :type
    (common-lisp:or unique-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-journal-kinesis-stream-response
                    'make-cancel-journal-kinesis-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          cancel-journal-kinesis-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          cancel-journal-kinesis-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-id))
      (common-lisp:list
       (common-lisp:cons "StreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          cancel-journal-kinesis-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-ledger-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-ledger-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or ledger-name common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (permissions-mode (common-lisp:error ":permissions-mode is required") :type
    (common-lisp:or permissions-mode common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or deletion-protection common-lisp:null))
   (kms-key common-lisp:nil :type (common-lisp:or kms-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-ledger-request 'make-create-ledger-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-ledger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-ledger-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions-mode))
      (common-lisp:list
       (common-lisp:cons "PermissionsMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key))
      (common-lisp:list
       (common-lisp:cons "KmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-ledger-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (create-ledger-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-create-ledger-response-"))
   (name common-lisp:nil :type (common-lisp:or ledger-name common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or ledger-state common-lisp:null))
   (creation-date-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (permissions-mode common-lisp:nil :type
    (common-lisp:or permissions-mode common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or deletion-protection common-lisp:null))
   (kms-key-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-ledger-response 'make-create-ledger-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          create-ledger-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          create-ledger-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "CreationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions-mode))
      (common-lisp:list
       (common-lisp:cons "PermissionsMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          create-ledger-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-ledger-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-delete-ledger-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or ledger-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-ledger-request 'make-delete-ledger-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          delete-ledger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          delete-ledger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          delete-ledger-request))
   common-lisp:nil))
(common-lisp:deftype deletion-protection () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (describe-journal-kinesis-stream-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-journal-kinesis-stream-request-"))
   (ledger-name (common-lisp:error ":ledger-name is required") :type
    (common-lisp:or ledger-name common-lisp:null))
   (stream-id (common-lisp:error ":stream-id is required") :type
    (common-lisp:or unique-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-journal-kinesis-stream-request
                    'make-describe-journal-kinesis-stream-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-journal-kinesis-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-journal-kinesis-stream-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-journal-kinesis-stream-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-journal-kinesis-stream-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-journal-kinesis-stream-response-"))
   (stream common-lisp:nil :type
    (common-lisp:or journal-kinesis-stream-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-journal-kinesis-stream-response
                    'make-describe-journal-kinesis-stream-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-journal-kinesis-stream-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-journal-kinesis-stream-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream))
      (common-lisp:list
       (common-lisp:cons "Stream"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-journal-kinesis-stream-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-journal-s3export-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-journal-s3export-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or ledger-name common-lisp:null))
   (export-id (common-lisp:error ":export-id is required") :type
    (common-lisp:or unique-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-journal-s3export-request
                    'make-describe-journal-s3export-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-journal-s3export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-journal-s3export-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-journal-s3export-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-journal-s3export-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-journal-s3export-response-"))
   (export-description (common-lisp:error ":export-description is required")
    :type (common-lisp:or journal-s3export-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-journal-s3export-response
                    'make-describe-journal-s3export-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-journal-s3export-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-journal-s3export-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-description))
      (common-lisp:list
       (common-lisp:cons "ExportDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-journal-s3export-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-ledger-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-ledger-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or ledger-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-ledger-request 'make-describe-ledger-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-ledger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-ledger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-ledger-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-ledger-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-describe-ledger-response-"))
   (name common-lisp:nil :type (common-lisp:or ledger-name common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or ledger-state common-lisp:null))
   (creation-date-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (permissions-mode common-lisp:nil :type
    (common-lisp:or permissions-mode common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or deletion-protection common-lisp:null))
   (encryption-description common-lisp:nil :type
    (common-lisp:or ledger-encryption-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-ledger-response 'make-describe-ledger-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          describe-ledger-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          describe-ledger-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "CreationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions-mode))
      (common-lisp:list
       (common-lisp:cons "PermissionsMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-description))
      (common-lisp:list
       (common-lisp:cons "EncryptionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          describe-ledger-response))
   common-lisp:nil))
(common-lisp:deftype digest ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype encryption-status () 'common-lisp:string)
(common-lisp:deftype error-cause () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (export-journal-to-s3request (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-journal-to-s3request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or ledger-name common-lisp:null))
   (inclusive-start-time
    (common-lisp:error ":inclusive-start-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (exclusive-end-time (common-lisp:error ":exclusive-end-time is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (s3export-configuration
    (common-lisp:error ":s3export-configuration is required") :type
    (common-lisp:or s3export-configuration common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (output-format common-lisp:nil :type
    (common-lisp:or output-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-journal-to-s3request
                    'make-export-journal-to-s3request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-journal-to-s3request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-journal-to-s3request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inclusive-start-time))
      (common-lisp:list
       (common-lisp:cons "InclusiveStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusive-end-time))
      (common-lisp:list
       (common-lisp:cons "ExclusiveEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3export-configuration))
      (common-lisp:list
       (common-lisp:cons "S3ExportConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-format))
      (common-lisp:list
       (common-lisp:cons "OutputFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-journal-to-s3request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (export-journal-to-s3response (:copier common-lisp:nil)
      (:conc-name "struct-shape-export-journal-to-s3response-"))
   (export-id (common-lisp:error ":export-id is required") :type
    (common-lisp:or unique-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'export-journal-to-s3response
                    'make-export-journal-to-s3response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          export-journal-to-s3response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          export-journal-to-s3response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-id))
      (common-lisp:list
       (common-lisp:cons "ExportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          export-journal-to-s3response))
   common-lisp:nil))
(common-lisp:deftype export-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-block-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-block-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or ledger-name common-lisp:null))
   (block-address (common-lisp:error ":block-address is required") :type
    (common-lisp:or value-holder common-lisp:null))
   (digest-tip-address common-lisp:nil :type
    (common-lisp:or value-holder common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-block-request 'make-get-block-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-block-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-block-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-address))
      (common-lisp:list
       (common-lisp:cons "BlockAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'digest-tip-address))
      (common-lisp:list
       (common-lisp:cons "DigestTipAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-block-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-block-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-block-response-"))
   (block (common-lisp:error ":block is required") :type
    (common-lisp:or value-holder common-lisp:null))
   (proof common-lisp:nil :type
    (common-lisp:or value-holder common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-block-response 'make-get-block-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-block-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-block-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block))
      (common-lisp:list
       (common-lisp:cons "Block"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proof))
      (common-lisp:list
       (common-lisp:cons "Proof"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-block-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-digest-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-digest-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or ledger-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-digest-request 'make-get-digest-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-digest-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-digest-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-digest-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-digest-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-digest-response-"))
   (digest (common-lisp:error ":digest is required") :type
    (common-lisp:or digest common-lisp:null))
   (digest-tip-address (common-lisp:error ":digest-tip-address is required")
    :type (common-lisp:or value-holder common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-digest-response 'make-get-digest-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-digest-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-digest-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'digest))
      (common-lisp:list
       (common-lisp:cons "Digest"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'digest-tip-address))
      (common-lisp:list
       (common-lisp:cons "DigestTipAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-digest-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-revision-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-revision-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or ledger-name common-lisp:null))
   (block-address (common-lisp:error ":block-address is required") :type
    (common-lisp:or value-holder common-lisp:null))
   (document-id (common-lisp:error ":document-id is required") :type
    (common-lisp:or unique-id common-lisp:null))
   (digest-tip-address common-lisp:nil :type
    (common-lisp:or value-holder common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-revision-request 'make-get-revision-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input get-revision-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input get-revision-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'block-address))
      (common-lisp:list
       (common-lisp:cons "BlockAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'document-id))
      (common-lisp:list
       (common-lisp:cons "DocumentId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'digest-tip-address))
      (common-lisp:list
       (common-lisp:cons "DigestTipAddress"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input get-revision-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (get-revision-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-get-revision-response-"))
   (proof common-lisp:nil :type (common-lisp:or value-holder common-lisp:null))
   (revision (common-lisp:error ":revision is required") :type
    (common-lisp:or value-holder common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-revision-response 'make-get-revision-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          get-revision-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          get-revision-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'proof))
      (common-lisp:list
       (common-lisp:cons "Proof"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'revision))
      (common-lisp:list
       (common-lisp:cons "Revision"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          get-revision-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition invalid-parameter-exception
     (qldb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       invalid-parameter-exception-message)
      (parameter-name :initarg :parameter-name :initform common-lisp:nil
       :reader invalid-parameter-exception-parameter-name)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'invalid-parameter-exception-message
                    'invalid-parameter-exception-parameter-name)))
(common-lisp:deftype ion-text () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (journal-kinesis-stream-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-journal-kinesis-stream-description-"))
   (ledger-name (common-lisp:error ":ledger-name is required") :type
    (common-lisp:or ledger-name common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (inclusive-start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (exclusive-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (stream-id (common-lisp:error ":stream-id is required") :type
    (common-lisp:or unique-id common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or stream-status common-lisp:null))
   (kinesis-configuration
    (common-lisp:error ":kinesis-configuration is required") :type
    (common-lisp:or kinesis-configuration common-lisp:null))
   (error-cause common-lisp:nil :type
    (common-lisp:or error-cause common-lisp:null))
   (stream-name (common-lisp:error ":stream-name is required") :type
    (common-lisp:or stream-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'journal-kinesis-stream-description
                    'make-journal-kinesis-stream-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          journal-kinesis-stream-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          journal-kinesis-stream-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ledger-name))
      (common-lisp:list
       (common-lisp:cons "LedgerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-time))
      (common-lisp:list
       (common-lisp:cons "CreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inclusive-start-time))
      (common-lisp:list
       (common-lisp:cons "InclusiveStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusive-end-time))
      (common-lisp:list
       (common-lisp:cons "ExclusiveEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-id))
      (common-lisp:list
       (common-lisp:cons "StreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-configuration))
      (common-lisp:list
       (common-lisp:cons "KinesisConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'error-cause))
      (common-lisp:list
       (common-lisp:cons "ErrorCause"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          journal-kinesis-stream-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype journal-kinesis-stream-description-list ()
   '(trivial-types:proper-list journal-kinesis-stream-description))
 (common-lisp:defun |make-journal-kinesis-stream-description-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            journal-kinesis-stream-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (journal-s3export-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-journal-s3export-description-"))
   (ledger-name (common-lisp:error ":ledger-name is required") :type
    (common-lisp:or ledger-name common-lisp:null))
   (export-id (common-lisp:error ":export-id is required") :type
    (common-lisp:or unique-id common-lisp:null))
   (export-creation-time
    (common-lisp:error ":export-creation-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (status (common-lisp:error ":status is required") :type
    (common-lisp:or export-status common-lisp:null))
   (inclusive-start-time
    (common-lisp:error ":inclusive-start-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (exclusive-end-time (common-lisp:error ":exclusive-end-time is required")
    :type (common-lisp:or timestamp common-lisp:null))
   (s3export-configuration
    (common-lisp:error ":s3export-configuration is required") :type
    (common-lisp:or s3export-configuration common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (output-format common-lisp:nil :type
    (common-lisp:or output-format common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'journal-s3export-description
                    'make-journal-s3export-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          journal-s3export-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          journal-s3export-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ledger-name))
      (common-lisp:list
       (common-lisp:cons "LedgerName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'export-id))
      (common-lisp:list
       (common-lisp:cons "ExportId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'export-creation-time))
      (common-lisp:list
       (common-lisp:cons "ExportCreationTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'status))
      (common-lisp:list
       (common-lisp:cons "Status"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inclusive-start-time))
      (common-lisp:list
       (common-lisp:cons "InclusiveStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusive-end-time))
      (common-lisp:list
       (common-lisp:cons "ExclusiveEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           's3export-configuration))
      (common-lisp:list
       (common-lisp:cons "S3ExportConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'output-format))
      (common-lisp:list
       (common-lisp:cons "OutputFormat"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          journal-s3export-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype journal-s3export-list ()
   '(trivial-types:proper-list journal-s3export-description))
 (common-lisp:defun |make-journal-s3export-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            journal-s3export-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (kinesis-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-kinesis-configuration-"))
   (stream-arn (common-lisp:error ":stream-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (aggregation-enabled common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kinesis-configuration 'make-kinesis-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-arn))
      (common-lisp:list
       (common-lisp:cons "StreamArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'aggregation-enabled))
      (common-lisp:list
       (common-lisp:cons "AggregationEnabled"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          kinesis-configuration))
   common-lisp:nil))
(common-lisp:deftype kms-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ledger-encryption-description (:copier common-lisp:nil)
      (:conc-name "struct-shape-ledger-encryption-description-"))
   (kms-key-arn (common-lisp:error ":kms-key-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (encryption-status (common-lisp:error ":encryption-status is required")
    :type (common-lisp:or encryption-status common-lisp:null))
   (inaccessible-kms-key-date-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ledger-encryption-description
                    'make-ledger-encryption-description))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          ledger-encryption-description))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          ledger-encryption-description))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'encryption-status))
      (common-lisp:list
       (common-lisp:cons "EncryptionStatus"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inaccessible-kms-key-date-time))
      (common-lisp:list
       (common-lisp:cons "InaccessibleKmsKeyDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          ledger-encryption-description))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:deftype ledger-list ()
   '(trivial-types:proper-list ledger-summary))
 (common-lisp:defun |make-ledger-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ledger-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ledger-name () 'common-lisp:string)
(common-lisp:deftype ledger-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (ledger-summary (:copier common-lisp:nil)
      (:conc-name "struct-shape-ledger-summary-"))
   (name common-lisp:nil :type (common-lisp:or ledger-name common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or ledger-state common-lisp:null))
   (creation-date-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ledger-summary 'make-ledger-summary))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input ledger-summary))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input ledger-summary))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "CreationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input ledger-summary))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:define-condition limit-exceeded-exception
     (qldb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       limit-exceeded-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       limit-exceeded-exception-resource-type)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception 'limit-exceeded-exception-message
                    'limit-exceeded-exception-resource-type)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-journal-kinesis-streams-for-ledger-request (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-journal-kinesis-streams-for-ledger-request-"))
   (ledger-name (common-lisp:error ":ledger-name is required") :type
    (common-lisp:or ledger-name common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-journal-kinesis-streams-for-ledger-request
                    'make-list-journal-kinesis-streams-for-ledger-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-kinesis-streams-for-ledger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-kinesis-streams-for-ledger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-kinesis-streams-for-ledger-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-journal-kinesis-streams-for-ledger-response
      (:copier common-lisp:nil)
      (:conc-name
       "struct-shape-list-journal-kinesis-streams-for-ledger-response-"))
   (streams common-lisp:nil :type
    (common-lisp:or journal-kinesis-stream-description-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-journal-kinesis-streams-for-ledger-response
                    'make-list-journal-kinesis-streams-for-ledger-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-kinesis-streams-for-ledger-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-kinesis-streams-for-ledger-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'streams))
      (common-lisp:list
       (common-lisp:cons "Streams"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-kinesis-streams-for-ledger-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-journal-s3exports-for-ledger-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-journal-s3exports-for-ledger-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or ledger-name common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-journal-s3exports-for-ledger-request
                    'make-list-journal-s3exports-for-ledger-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-s3exports-for-ledger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-s3exports-for-ledger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-s3exports-for-ledger-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-journal-s3exports-for-ledger-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-journal-s3exports-for-ledger-response-"))
   (journal-s3exports common-lisp:nil :type
    (common-lisp:or journal-s3export-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-journal-s3exports-for-ledger-response
                    'make-list-journal-s3exports-for-ledger-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-s3exports-for-ledger-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-s3exports-for-ledger-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'journal-s3exports))
      (common-lisp:list
       (common-lisp:cons "JournalS3Exports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-s3exports-for-ledger-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-journal-s3exports-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-journal-s3exports-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-journal-s3exports-request
                    'make-list-journal-s3exports-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-s3exports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-s3exports-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-s3exports-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-journal-s3exports-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-journal-s3exports-response-"))
   (journal-s3exports common-lisp:nil :type
    (common-lisp:or journal-s3export-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-journal-s3exports-response
                    'make-list-journal-s3exports-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-s3exports-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-s3exports-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'journal-s3exports))
      (common-lisp:list
       (common-lisp:cons "JournalS3Exports"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-journal-s3exports-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-ledgers-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-ledgers-request-"))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-ledgers-request 'make-list-ledgers-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input list-ledgers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input list-ledgers-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input list-ledgers-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-ledgers-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-ledgers-response-"))
   (ledgers common-lisp:nil :type
    (common-lisp:or ledger-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-ledgers-response 'make-list-ledgers-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-ledgers-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-ledgers-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ledgers))
      (common-lisp:list
       (common-lisp:cons "Ledgers"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'next-token))
      (common-lisp:list
       (common-lisp:cons "NextToken"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-ledgers-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-list-tags-for-resource-response-"))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          list-tags-for-resource-response))
   common-lisp:nil))
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype output-format () 'common-lisp:string)
(common-lisp:deftype parameter-name () 'common-lisp:string)
(common-lisp:deftype permissions-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-already-exists-exception
     (qldb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-already-exists-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-already-exists-exception-resource-type)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       resource-already-exists-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'resource-already-exists-exception
                    'resource-already-exists-exception-message
                    'resource-already-exists-exception-resource-type
                    'resource-already-exists-exception-resource-name)))
(common-lisp:progn
 (common-lisp:define-condition resource-in-use-exception
     (qldb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-in-use-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-in-use-exception-resource-type)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       resource-in-use-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'resource-in-use-exception-message
                    'resource-in-use-exception-resource-type
                    'resource-in-use-exception-resource-name)))
(common-lisp:deftype resource-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:define-condition resource-not-found-exception
     (qldb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-not-found-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-not-found-exception-resource-type)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       resource-not-found-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'resource-not-found-exception-message
                    'resource-not-found-exception-resource-type
                    'resource-not-found-exception-resource-name)))
(common-lisp:progn
 (common-lisp:define-condition resource-precondition-not-met-exception
     (qldb-error)
     ((message :initarg :message :initform common-lisp:nil :reader
       resource-precondition-not-met-exception-message)
      (resource-type :initarg :resource-type :initform common-lisp:nil :reader
       resource-precondition-not-met-exception-resource-type)
      (resource-name :initarg :resource-name :initform common-lisp:nil :reader
       resource-precondition-not-met-exception-resource-name)))
 (common-lisp:export
  (common-lisp:list 'resource-precondition-not-met-exception
                    'resource-precondition-not-met-exception-message
                    'resource-precondition-not-met-exception-resource-type
                    'resource-precondition-not-met-exception-resource-name)))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (s3encryption-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3encryption-configuration-"))
   (object-encryption-type
    (common-lisp:error ":object-encryption-type is required") :type
    (common-lisp:or s3object-encryption-type common-lisp:null))
   (kms-key-arn common-lisp:nil :type (common-lisp:or arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3encryption-configuration
                    'make-s3encryption-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3encryption-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3encryption-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'object-encryption-type))
      (common-lisp:list
       (common-lisp:cons "ObjectEncryptionType"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key-arn))
      (common-lisp:list
       (common-lisp:cons "KmsKeyArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3encryption-configuration))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (s3export-configuration (:copier common-lisp:nil)
      (:conc-name "struct-shape-s3export-configuration-"))
   (bucket (common-lisp:error ":bucket is required") :type
    (common-lisp:or s3bucket common-lisp:null))
   (prefix (common-lisp:error ":prefix is required") :type
    (common-lisp:or s3prefix common-lisp:null))
   (encryption-configuration
    (common-lisp:error ":encryption-configuration is required") :type
    (common-lisp:or s3encryption-configuration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3export-configuration 'make-s3export-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          s3export-configuration))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          s3export-configuration))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'bucket))
      (common-lisp:list
       (common-lisp:cons "Bucket"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'prefix))
      (common-lisp:list
       (common-lisp:cons "Prefix"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-configuration))
      (common-lisp:list
       (common-lisp:cons "EncryptionConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          s3export-configuration))
   common-lisp:nil))
(common-lisp:deftype s3object-encryption-type () 'common-lisp:string)
(common-lisp:deftype s3prefix () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (stream-journal-to-kinesis-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-stream-journal-to-kinesis-request-"))
   (ledger-name (common-lisp:error ":ledger-name is required") :type
    (common-lisp:or ledger-name common-lisp:null))
   (role-arn (common-lisp:error ":role-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tags common-lisp:null))
   (inclusive-start-time
    (common-lisp:error ":inclusive-start-time is required") :type
    (common-lisp:or timestamp common-lisp:null))
   (exclusive-end-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (kinesis-configuration
    (common-lisp:error ":kinesis-configuration is required") :type
    (common-lisp:or kinesis-configuration common-lisp:null))
   (stream-name (common-lisp:error ":stream-name is required") :type
    (common-lisp:or stream-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stream-journal-to-kinesis-request
                    'make-stream-journal-to-kinesis-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stream-journal-to-kinesis-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stream-journal-to-kinesis-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'role-arn))
      (common-lisp:list
       (common-lisp:cons "RoleArn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'inclusive-start-time))
      (common-lisp:list
       (common-lisp:cons "InclusiveStartTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'exclusive-end-time))
      (common-lisp:list
       (common-lisp:cons "ExclusiveEndTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'kinesis-configuration))
      (common-lisp:list
       (common-lisp:cons "KinesisConfiguration"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-name))
      (common-lisp:list
       (common-lisp:cons "StreamName"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stream-journal-to-kinesis-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (stream-journal-to-kinesis-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-stream-journal-to-kinesis-response-"))
   (stream-id common-lisp:nil :type
    (common-lisp:or unique-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stream-journal-to-kinesis-response
                    'make-stream-journal-to-kinesis-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          stream-journal-to-kinesis-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          stream-journal-to-kinesis-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'stream-id))
      (common-lisp:list
       (common-lisp:cons "StreamId"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          stream-journal-to-kinesis-response))
   common-lisp:nil))
(common-lisp:deftype stream-name () 'common-lisp:string)
(common-lisp:deftype stream-status () 'common-lisp:string)
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tags (common-lisp:error ":tags is required") :type
    (common-lisp:or tags common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input tag-resource-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'tags))
      (common-lisp:list
       (common-lisp:cons "Tags"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input tag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (tag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-tag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          tag-resource-response))
   common-lisp:nil))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tags () 'common-lisp:hash-table)
 (common-lisp:defun |make-tags| (aws-sdk/generator/shape::key-values)
   (common-lisp:etypecase aws-sdk/generator/shape::key-values
     (common-lisp:hash-table aws-sdk/generator/shape::key-values)
     (common-lisp:list
      (alexandria:alist-hash-table aws-sdk/generator/shape::key-values)))))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype unique-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-request-"))
   (resource-arn (common-lisp:error ":resource-arn is required") :type
    (common-lisp:or arn common-lisp:null))
   (tag-keys (common-lisp:error ":tag-keys is required") :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (untag-resource-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-untag-resource-response-")))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          untag-resource-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-ledger-permissions-mode-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-ledger-permissions-mode-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or ledger-name common-lisp:null))
   (permissions-mode (common-lisp:error ":permissions-mode is required") :type
    (common-lisp:or permissions-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-ledger-permissions-mode-request
                    'make-update-ledger-permissions-mode-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-ledger-permissions-mode-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-ledger-permissions-mode-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions-mode))
      (common-lisp:list
       (common-lisp:cons "PermissionsMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-ledger-permissions-mode-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-ledger-permissions-mode-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-ledger-permissions-mode-response-"))
   (name common-lisp:nil :type (common-lisp:or ledger-name common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (permissions-mode common-lisp:nil :type
    (common-lisp:or permissions-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-ledger-permissions-mode-response
                    'make-update-ledger-permissions-mode-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-ledger-permissions-mode-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-ledger-permissions-mode-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'permissions-mode))
      (common-lisp:list
       (common-lisp:cons "PermissionsMode"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-ledger-permissions-mode-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-ledger-request (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-ledger-request-"))
   (name (common-lisp:error ":name is required") :type
    (common-lisp:or ledger-name common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or deletion-protection common-lisp:null))
   (kms-key common-lisp:nil :type (common-lisp:or kms-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-ledger-request 'make-update-ledger-request))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-ledger-request))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-ledger-request))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'kms-key))
      (common-lisp:list
       (common-lisp:cons "KmsKey"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-ledger-request))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (update-ledger-response (:copier common-lisp:nil)
      (:conc-name "struct-shape-update-ledger-response-"))
   (name common-lisp:nil :type (common-lisp:or ledger-name common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or arn common-lisp:null))
   (state common-lisp:nil :type (common-lisp:or ledger-state common-lisp:null))
   (creation-date-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (deletion-protection common-lisp:nil :type
    (common-lisp:or deletion-protection common-lisp:null))
   (encryption-description common-lisp:nil :type
    (common-lisp:or ledger-encryption-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-ledger-response 'make-update-ledger-response))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        (
                         (aws-sdk/generator/shape::input
                          update-ledger-response))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        (
                         (aws-sdk/generator/shape::input
                          update-ledger-response))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'name))
      (common-lisp:list
       (common-lisp:cons "Name"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'arn))
      (common-lisp:list
       (common-lisp:cons "Arn"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'state))
      (common-lisp:list
       (common-lisp:cons "State"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'creation-date-time))
      (common-lisp:list
       (common-lisp:cons "CreationDateTime"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'deletion-protection))
      (common-lisp:list
       (common-lisp:cons "DeletionProtection"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input
                           'encryption-description))
      (common-lisp:list
       (common-lisp:cons "EncryptionDescription"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        (
                         (aws-sdk/generator/shape::input
                          update-ledger-response))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defstruct
     (value-holder (:copier common-lisp:nil)
      (:conc-name "struct-shape-value-holder-"))
   (ion-text common-lisp:nil :type (common-lisp:or ion-text common-lisp:null)))
 (common-lisp:export (common-lisp:list 'value-holder 'make-value-holder))
 (common-lisp:defmethod aws-sdk/generator/shape::input-headers
                        ((aws-sdk/generator/shape::input value-holder))
   (common-lisp:append))
 (common-lisp:defmethod aws-sdk/generator/shape::input-params
                        ((aws-sdk/generator/shape::input value-holder))
   (common-lisp:append
    (alexandria:when-let (aws-sdk/generator/shape::value
                          (common-lisp:slot-value
                           aws-sdk/generator/shape::input 'ion-text))
      (common-lisp:list
       (common-lisp:cons "IonText"
                         (aws-sdk/generator/shape::input-params
                          aws-sdk/generator/shape::value))))))
 (common-lisp:defmethod aws-sdk/generator/shape::input-payload
                        ((aws-sdk/generator/shape::input value-holder))
   common-lisp:nil))
(common-lisp:progn
 (common-lisp:defun cancel-journal-kinesis-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ledger-name stream-id)
   (common-lisp:declare (common-lisp:ignorable ledger-name stream-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-journal-kinesis-stream-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ledgers/~A/journal-kinesis-streams/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'stream-id))))
                                                        "CancelJournalKinesisStream"
                                                        "2019-01-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'cancel-journal-kinesis-stream))
(common-lisp:progn
 (common-lisp:defun create-ledger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name tags permissions-mode
                     deletion-protection kms-key)
   (common-lisp:declare
    (common-lisp:ignorable name tags permissions-mode deletion-protection
     kms-key))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-ledger-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST" "/ledgers"
                                                        "CreateLedger"
                                                        "2019-01-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'create-ledger))
(common-lisp:progn
 (common-lisp:defun delete-ledger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-ledger-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ledgers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DeleteLedger"
                                                        "2019-01-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'delete-ledger))
(common-lisp:progn
 (common-lisp:defun describe-journal-kinesis-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ledger-name stream-id)
   (common-lisp:declare (common-lisp:ignorable ledger-name stream-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-journal-kinesis-stream-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ledgers/~A/journal-kinesis-streams/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'stream-id))))
                                                        "DescribeJournalKinesisStream"
                                                        "2019-01-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-journal-kinesis-stream))
(common-lisp:progn
 (common-lisp:defun describe-journal-s3export
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name export-id)
   (common-lisp:declare (common-lisp:ignorable name export-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-journal-s3export-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ledgers/~A/journal-s3-exports/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'export-id))))
                                                        "DescribeJournalS3Export"
                                                        "2019-01-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-journal-s3export))
(common-lisp:progn
 (common-lisp:defun describe-ledger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-ledger-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ledgers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "DescribeLedger"
                                                        "2019-01-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'describe-ledger))
(common-lisp:progn
 (common-lisp:defun export-journal-to-s3
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name inclusive-start-time
                     exclusive-end-time s3export-configuration role-arn
                     output-format)
   (common-lisp:declare
    (common-lisp:ignorable name inclusive-start-time exclusive-end-time
     s3export-configuration role-arn output-format))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-export-journal-to-s3request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ledgers/~A/journal-s3-exports"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "ExportJournalToS3"
                                                        "2019-01-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'export-journal-to-s3))
(common-lisp:progn
 (common-lisp:defun get-block
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name block-address digest-tip-address)
   (common-lisp:declare
    (common-lisp:ignorable name block-address digest-tip-address))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-block-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ledgers/~A/block"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetBlock"
                                                        "2019-01-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-block))
(common-lisp:progn
 (common-lisp:defun get-digest
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-digest-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ledgers/~A/digest"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetDigest"
                                                        "2019-01-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-digest))
(common-lisp:progn
 (common-lisp:defun get-revision
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name block-address document-id
                     digest-tip-address)
   (common-lisp:declare
    (common-lisp:ignorable name block-address document-id digest-tip-address))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-revision-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ledgers/~A/revision"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "GetRevision"
                                                        "2019-01-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'get-revision))
(common-lisp:progn
 (common-lisp:defun list-journal-kinesis-streams-for-ledger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ledger-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable ledger-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-journal-kinesis-streams-for-ledger-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ledgers/~A/journal-kinesis-streams"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "ListJournalKinesisStreamsForLedger"
                                                        "2019-01-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-journal-kinesis-streams-for-ledger))
(common-lisp:progn
 (common-lisp:defun list-journal-s3exports
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-journal-s3exports-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        "/journal-s3-exports"
                                                        "ListJournalS3Exports"
                                                        "2019-01-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-journal-s3exports))
(common-lisp:progn
 (common-lisp:defun list-journal-s3exports-for-ledger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name max-results next-token)
   (common-lisp:declare (common-lisp:ignorable name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-journal-s3exports-for-ledger-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ledgers/~A/journal-s3-exports"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "ListJournalS3ExportsForLedger"
                                                        "2019-01-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-journal-s3exports-for-ledger))
(common-lisp:progn
 (common-lisp:defun list-ledgers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-ledgers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET" "/ledgers"
                                                        "ListLedgers"
                                                        "2019-01-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-ledgers))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn)
   (common-lisp:declare (common-lisp:ignorable resource-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "GET"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "ListTagsForResource"
                                                        "2019-01-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun stream-journal-to-kinesis
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ledger-name role-arn tags
                     inclusive-start-time exclusive-end-time
                     kinesis-configuration stream-name)
   (common-lisp:declare
    (common-lisp:ignorable ledger-name role-arn tags inclusive-start-time
     exclusive-end-time kinesis-configuration stream-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-stream-journal-to-kinesis-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ledgers/~A/journal-kinesis-streams"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "StreamJournalToKinesis"
                                                        "2019-01-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'stream-journal-to-kinesis))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "POST"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "TagResource"
                                                        "2019-01-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "DELETE"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/tags/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'resource-arn))))
                                                        "UntagResource"
                                                        "2019-01-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-ledger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name deletion-protection kms-key)
   (common-lisp:declare
    (common-lisp:ignorable name deletion-protection kms-key))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-ledger-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ledgers/~A"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "UpdateLedger"
                                                        "2019-01-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-ledger))
(common-lisp:progn
 (common-lisp:defun update-ledger-permissions-mode
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name permissions-mode)
   (common-lisp:declare (common-lisp:ignorable name permissions-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-ledger-permissions-mode-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request
       (aws-sdk/generator/shape:make-request-with-input 'qldb-request
                                                        aws-sdk/generator/operation::input
                                                        "PATCH"
                                                        (common-lisp:lambda
                                                            (
                                                             aws-sdk/generator/operation::input)
                                                          (common-lisp:format
                                                           common-lisp:nil
                                                           "/ledgers/~A/permissions-mode"
                                                           (quri.encode:url-encode
                                                            (common-lisp:slot-value
                                                             aws-sdk/generator/operation::input
                                                             'name))))
                                                        "UpdateLedgerPermissionsMode"
                                                        "2019-01-02"))
      common-lisp:nil common-lisp:nil *error-map*)))
 (common-lisp:export 'update-ledger-permissions-mode))
